{
    "cifar10/attack_methods_new.py": {
        "torch": {
            "is_available_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_81": {
                "variable": {
                    "value": "targets_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_pred_nat.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_86": {
                "variable": {
                    "value": "targets_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_174": {
                "variable": {
                    "value": "targets_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BCELoss_195": {
                "variable": {
                    "value": "adversarial_criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_196": {
                "variable": {
                    "value": "mse",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_111": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(x_adv, inputs - self.epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_113": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.data + step_sign * self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "min_239": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(x_adv, inputs - self.epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_241": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.data + step_sign * self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_52": {
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_181": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs.detach()",
                            "Call"
                        ],
                        [
                            "x + torch.zeros_like(x).uniform_(-self.epsilon, self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "Variable(x_adv)",
                            "Call"
                        ],
                        [
                            "inputs.detach()",
                            "Call"
                        ],
                        [
                            "x + torch.zeros_like(x).uniform_(-self.epsilon, self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "Variable(x_adv, requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_93": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs.detach()",
                            "Call"
                        ],
                        [
                            "x + torch.zeros_like(x).uniform_(-self.epsilon, self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "Variable(x_adv)",
                            "Call"
                        ],
                        [
                            "inputs.detach()",
                            "Call"
                        ],
                        [
                            "x + torch.zeros_like(x).uniform_(-self.epsilon, self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "Variable(x_adv, requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_111": {
                "input": {
                    "value": "x_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.data + step_sign * self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_239": {
                "input": {
                    "value": "x_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.data + step_sign * self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_109": {
                "input": {
                    "value": "x.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_238": {
                "input": {
                    "value": "x.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_199": {
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "cifar10/attack_methods_new_cifar10.py": {
        "torch": {
            "is_available_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_80": {
                "variable": {
                    "value": "targets_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_pred_nat.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_85": {
                "variable": {
                    "value": "targets_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_171": {
                "variable": {
                    "value": "targets_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_185": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_188": {
                "variable": {
                    "value": "logits_pred_nat_D",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_pred_nat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "aux_net(inputs)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[x.size(0), 10, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BCELoss_195": {
                "variable": {
                    "value": "adversarial_criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_196": {
                "variable": {
                    "value": "mse",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_109": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(x_adv, inputs - self.epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_111": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.data + step_sign * self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_207": {
                "variable": {
                    "value": "logits_pred_D",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[x.size(0), 10, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "min_237": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(x_adv, inputs - self.epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_239": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.data + step_sign * self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_245": {
                "variable": {
                    "value": "logits_pred_2_D",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_pred_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[x.size(0), 10, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "grad_284": {
                "variable": {
                    "value": "gd_gan",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "gan_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mse(logits_pred_2_D, logits_pred_nat_D)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs.detach()",
                            "Call"
                        ],
                        [
                            "x + torch.zeros_like(x).uniform_(-self.epsilon, self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "Variable(x_adv)",
                            "Call"
                        ],
                        [
                            "inputs.detach()",
                            "Call"
                        ],
                        [
                            "x + torch.zeros_like(x).uniform_(-self.epsilon, self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "Variable(x_adv, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_285": {
                "variable": {
                    "value": "gd_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "adv_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "discriminator_loss",
                            "Name"
                        ],
                        [
                            "loss_ce(logits_pred_2, y_sm.detach())",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs.detach()",
                            "Call"
                        ],
                        [
                            "x + torch.zeros_like(x).uniform_(-self.epsilon, self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "Variable(x_adv)",
                            "Call"
                        ],
                        [
                            "inputs.detach()",
                            "Call"
                        ],
                        [
                            "x + torch.zeros_like(x).uniform_(-self.epsilon, self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "Variable(x_adv, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_51": {
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_178": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs.detach()",
                            "Call"
                        ],
                        [
                            "x + torch.zeros_like(x).uniform_(-self.epsilon, self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "Variable(x_adv)",
                            "Call"
                        ],
                        [
                            "inputs.detach()",
                            "Call"
                        ],
                        [
                            "x + torch.zeros_like(x).uniform_(-self.epsilon, self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "Variable(x_adv, requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_91": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs.detach()",
                            "Call"
                        ],
                        [
                            "x + torch.zeros_like(x).uniform_(-self.epsilon, self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "Variable(x_adv)",
                            "Call"
                        ],
                        [
                            "inputs.detach()",
                            "Call"
                        ],
                        [
                            "x + torch.zeros_like(x).uniform_(-self.epsilon, self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "Variable(x_adv, requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_109": {
                "input": {
                    "value": "x_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.data + step_sign * self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_237": {
                "input": {
                    "value": "x_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.data + step_sign * self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_107": {
                "input": {
                    "value": "x.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_236": {
                "input": {
                    "value": "x.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_199": {
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "cifar10/attack_methods_new_imt_cifar10.py": {
        "torch": {
            "is_available_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_47": {
                "variable": {
                    "value": "adversarial_criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_116": {
                "variable": {
                    "value": "targets_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_pred_nat.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_121": {
                "variable": {
                    "value": "targets_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BCELoss_160": {
                "variable": {
                    "value": "adversarial_criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_241": {
                "variable": {
                    "value": "targets_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BCELoss_262": {
                "variable": {
                    "value": "adversarial_criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_263": {
                "variable": {
                    "value": "mse",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_50": {
                "variable": {
                    "value": "logits_pred_D",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_pert",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.basic_net(x)[0]",
                            "Subscript"
                        ],
                        [
                            "self.basic_net(x)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[x.size(0), 10, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "min_65": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(x_adv, x - self.epsilon * 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_67": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.data - self.step_size * 4 * 1.0 * mask * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x - self.epsilon * 1.0), x + self.epsilon * 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data + step_sign * self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * 4 * 1.0 * mask * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x - self.epsilon * 1.0), x + self.epsilon * 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "min_146": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(x_adv, inputs - self.epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_148": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.data - self.step_size * 4 * 1.0 * mask * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x - self.epsilon * 1.0), x + self.epsilon * 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data + step_sign * self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * 4 * 1.0 * mask * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x - self.epsilon * 1.0), x + self.epsilon * 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_163": {
                "variable": {
                    "value": "logits_pred_D",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_pert",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.basic_net(x)[0]",
                            "Subscript"
                        ],
                        [
                            "self.basic_net(x)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[x.size(0), 10, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "min_182": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(x_adv, x - self.epsilon * 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_184": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.data - self.step_size * 4 * 1.0 * mask * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x - self.epsilon * 1.0), x + self.epsilon * 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data + step_sign * self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * 4 * 1.0 * mask * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x - self.epsilon * 1.0), x + self.epsilon * 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "min_306": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(x_adv, inputs - self.epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_308": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.data - self.step_size * 4 * 1.0 * mask * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x - self.epsilon * 1.0), x + self.epsilon * 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data + step_sign * self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * 4 * 1.0 * mask * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x - self.epsilon * 1.0), x + self.epsilon * 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_87": {
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_248": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Variable(x_adv)",
                            "Call"
                        ],
                        [
                            "inputs.detach()",
                            "Call"
                        ],
                        [
                            "x + torch.zeros_like(x).uniform_(-self.epsilon, self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "Variable(x_adv)",
                            "Call"
                        ],
                        [
                            "Variable(x_adv)",
                            "Call"
                        ],
                        [
                            "inputs.detach()",
                            "Call"
                        ],
                        [
                            "x + torch.zeros_like(x).uniform_(-self.epsilon, self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "Variable(x_adv, requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_65": {
                "input": {
                    "value": "x_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.data - self.step_size * 4 * 1.0 * mask * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x - self.epsilon * 1.0), x + self.epsilon * 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data + step_sign * self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * 4 * 1.0 * mask * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x - self.epsilon * 1.0), x + self.epsilon * 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_127": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Variable(x_adv)",
                            "Call"
                        ],
                        [
                            "inputs.detach()",
                            "Call"
                        ],
                        [
                            "x + torch.zeros_like(x).uniform_(-self.epsilon, self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "Variable(x_adv)",
                            "Call"
                        ],
                        [
                            "Variable(x_adv)",
                            "Call"
                        ],
                        [
                            "inputs.detach()",
                            "Call"
                        ],
                        [
                            "x + torch.zeros_like(x).uniform_(-self.epsilon, self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "Variable(x_adv, requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_146": {
                "input": {
                    "value": "x_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.data - self.step_size * 4 * 1.0 * mask * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x - self.epsilon * 1.0), x + self.epsilon * 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data + step_sign * self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * 4 * 1.0 * mask * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x - self.epsilon * 1.0), x + self.epsilon * 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_182": {
                "input": {
                    "value": "x_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.data - self.step_size * 4 * 1.0 * mask * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x - self.epsilon * 1.0), x + self.epsilon * 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data + step_sign * self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * 4 * 1.0 * mask * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x - self.epsilon * 1.0), x + self.epsilon * 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_306": {
                "input": {
                    "value": "x_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.data - self.step_size * 4 * 1.0 * mask * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x - self.epsilon * 1.0), x + self.epsilon * 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data + step_sign * self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * 4 * 1.0 * mask * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x - self.epsilon * 1.0), x + self.epsilon * 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_64": {
                "input": {
                    "value": "x.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_144": {
                "input": {
                    "value": "x.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_181": {
                "input": {
                    "value": "x.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_305": {
                "input": {
                    "value": "x.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_266": {
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tensor_279": {},
            "Tensor_280": {}
        }
    },
    "cifar10/fs_eval_cifar10.py": {
        "torch": {
            "DataLoader_114": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR100(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.SVHN(root='./data', split='test', download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size_test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_255": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_149": {
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_242": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f_path_latest",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(args.model_dir, 'latest')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_247": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(args.model_dir, 'checkpoint-%s' % args.init_model_pass)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cifar10/fs_eval_imt_cifar10.py": {
        "torch": {
            "DataLoader_113": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR100(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.SVHN(root='./data', split='test', download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size_test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_128": {
                "variable": {
                    "value": "D_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0002",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_260": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_154": {
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_247": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f_path_latest",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(args.model_dir, 'latest')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_252": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(args.model_dir, 'checkpoint-%s' % args.init_model_pass)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cifar10/fs_main_cifar10.py": {
        "torch": {
            "DataLoader_167": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR100(root='./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.SVHN(root='./data', split='train', download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_203": {
                "variable": {
                    "value": "D_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_222": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_printoptions_32": {
                "threshold": {
                    "value": "10000",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BCELoss_278": {
                "variable": {
                    "value": "adversarial_criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_237": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f_path_latest",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(args.model_dir, 'latest')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_336": {
                "obj": {
                    "value": "state",
                    "type": "Dict",
                    "possible_values": [
                        [
                            "{'net': net_org.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'net': net_org.state_dict(), 'epoch': epoch, 'optimizer': optimizer.state_dict(), 'D_optimizer': D_optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "f_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.model_dir, 'checkpoint-%s' % args.init_model_pass)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.model_dir, 'checkpoint-%s' % epoch)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.model_dir, 'latest')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_349": {
                "obj": {
                    "value": "state",
                    "type": "Dict",
                    "possible_values": [
                        [
                            "{'net': net_org.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'net': net_org.state_dict(), 'epoch': epoch, 'optimizer': optimizer.state_dict(), 'D_optimizer': D_optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "f_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.model_dir, 'checkpoint-%s' % args.init_model_pass)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.model_dir, 'checkpoint-%s' % epoch)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.model_dir, 'latest')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_242": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.model_dir, 'checkpoint-%s' % args.init_model_pass)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.model_dir, 'checkpoint-%s' % epoch)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.model_dir, 'latest')",
                            "Call"
                        ]
                    ]
                }
            },
            "max_300": {
                "variable": {
                    "value": "max",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "parms.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_301": {
                "variable": {
                    "value": "min",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "parms.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cifar10/models_new/dis.py": {
        "torch": {
            "Sequential_17": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(cnn.features.children())[:feature_layer + 1]",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(depth - 4) / 6",
                            "BinOp"
                        ],
                        [
                            "m.kernel_size[0] * m.kernel_size[1] * m.out_channels",
                            "BinOp"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "n",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(depth - 4) / 6",
                            "BinOp"
                        ],
                        [
                            "m.kernel_size[0] * m.kernel_size[1] * m.out_channels",
                            "BinOp"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_29": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(depth - 4) / 6",
                            "BinOp"
                        ],
                        [
                            "m.kernel_size[0] * m.kernel_size[1] * m.out_channels",
                            "BinOp"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(depth - 4) / 6",
                            "BinOp"
                        ],
                        [
                            "m.kernel_size[0] * m.kernel_size[1] * m.out_channels",
                            "BinOp"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_30": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "n",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(depth - 4) / 6",
                            "BinOp"
                        ],
                        [
                            "m.kernel_size[0] * m.kernel_size[1] * m.out_channels",
                            "BinOp"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_40": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "PixelShuffle_41": {
                "variable": {
                    "value": "self.shuffler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "upscale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "9",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_58": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "9",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_82": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "640",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_85": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_86": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_87": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_88": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_89": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_91": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "variable": {
                    "value": "self.conv6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_93": {
                "variable": {
                    "value": "self.bn6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_94": {
                "variable": {
                    "value": "self.conv7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_95": {
                "variable": {
                    "value": "self.bn7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_96": {
                "variable": {
                    "value": "self.conv8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_97": {
                "variable": {
                    "value": "self.bn8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_100": {
                "variable": {
                    "value": "self.conv9",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_126": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_127": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_128": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_134": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_135": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_136": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_199": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nChannels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_215": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_216": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_217": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_218": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_242": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 1)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_12": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "swish(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(y)) + x",
                            "BinOp"
                        ],
                        [
                            "self.__getattr__('upsample' + str(i + 1))(x)",
                            "Call"
                        ],
                        [
                            "swish(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "swish(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "swish(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "swish(self.bn4(self.conv4(x)))",
                            "Call"
                        ],
                        [
                            "swish(self.bn5(self.conv5(x)))",
                            "Call"
                        ],
                        [
                            "swish(self.bn6(self.conv6(x)))",
                            "Call"
                        ],
                        [
                            "swish(self.bn7(self.conv7(x)))",
                            "Call"
                        ],
                        [
                            "swish(self.bn8(self.conv8(x)))",
                            "Call"
                        ],
                        [
                            "self.conv9(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_114": {
                "input": {
                    "value": "F.avg_pool2d(x, x.size()[2:])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_159": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 1)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.droprate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_161": {
                "input": {
                    "value": "x if self.equalInOut else self.convShortcut(x)",
                    "type": "IfExp",
                    "possible_values": []
                },
                "other": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 1)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_183": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_250": {
                "input": {
                    "value": "out1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_144": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_114": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "swish(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(y)) + x",
                            "BinOp"
                        ],
                        [
                            "self.__getattr__('upsample' + str(i + 1))(x)",
                            "Call"
                        ],
                        [
                            "swish(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "swish(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "swish(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "swish(self.bn4(self.conv4(x)))",
                            "Call"
                        ],
                        [
                            "swish(self.bn5(self.conv5(x)))",
                            "Call"
                        ],
                        [
                            "swish(self.bn6(self.conv6(x)))",
                            "Call"
                        ],
                        [
                            "swish(self.bn7(self.conv7(x)))",
                            "Call"
                        ],
                        [
                            "swish(self.bn8(self.conv8(x)))",
                            "Call"
                        ],
                        [
                            "self.conv9(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "cifar10/models_new/wideresnet.py": {
        "torch": {
            "BatchNorm2d_10": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_11": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_83": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nChannels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_99": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_100": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_101": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "avg_pool2d_121": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_43": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.droprate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_45": {
                "input": {
                    "value": "x if self.equalInOut else self.convShortcut(x)",
                    "type": "IfExp",
                    "possible_values": []
                },
                "other": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_67": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "cifar10/ot.py": {
        "torch": {
            "sum_25": {
                "variable": {
                    "value": "cost_ot",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T * C",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_76": {
                "variable": {
                    "value": "pi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "M(U, V)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_86": {
                "variable": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[m, n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_87": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-cost_matrix / beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_105": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[n, n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "CosineSimilarity_123": {
                "variable": {
                    "value": "cos",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_124": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - cos(x_col, y_lin)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_97": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "construct_diag(torch.squeeze(delta))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "A * T",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_98": {
                "variable": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(construct_diag(torch.squeeze(delta)), Q)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "construct_diag(torch.squeeze(sigma))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_55": {
                "input": {
                    "value": "torch.exp(A).sum(1, keepdim=True) + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_84": {
                "*size": {
                    "value": "[n, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_55": {
                "input": {
                    "value": "A",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.exp(-cost_matrix / beta)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_55": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_97": {
                "input": {
                    "value": "delta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0 / (m * torch.mm(Q, sigma))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "squeeze_98": {
                "input": {
                    "value": "sigma",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "1.0 / n * torch.ones([n, 1]).to(device)",
                            "BinOp"
                        ],
                        [
                            "1.0 / (n * torch.mm(delta.t(), Q)).t()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_64": {
                "input": {
                    "value": "mu",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Variable(1.0 / m * torch.FloatTensor(m).fill_(1).to('cuda'), requires_grad=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_65": {
                "input": {
                    "value": "nu",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Variable(1.0 / n * torch.FloatTensor(n).fill_(1).to('cuda'), requires_grad=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_94": {
                "input": {
                    "value": "Q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "A * T",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "sigma",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "1.0 / n * torch.ones([n, 1]).to(device)",
                            "BinOp"
                        ],
                        [
                            "1.0 / (n * torch.mm(delta.t(), Q)).t()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_95": {
                "input": {
                    "value": "delta.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "A * T",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "cifar10/utils.py": {
        "torch": {
            "sum_87": {
                "variable": {
                    "value": "self_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "onehot_targets * logits",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_65": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(log_likelihood, targets)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_60": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_88": {
                "input": {
                    "value": "(1 - onehot_targets) * logits - onehot_targets * 1000",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_91": {
                "input": {
                    "value": "torch.clamp(self_loss - other_loss + self.margin, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_63": {
                "input": {
                    "value": "torch.mul(log_likelihood, targets)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_65": {
                "input": {
                    "value": "log_likelihood",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-F.log_softmax(inputs, dim=1)",
                            "UnaryOp"
                        ]
                    ]
                },
                "other": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clamp_91": {
                "input": {
                    "value": "self_loss - other_loss + self.margin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mul_63": {
                "input": {
                    "value": "log_likelihood",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-F.log_softmax(inputs, dim=1)",
                            "UnaryOp"
                        ]
                    ]
                },
                "other": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "cifar100/attack_methods_new.py": {
        "torch": {
            "is_available_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_80": {
                "variable": {
                    "value": "targets_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_pred_nat.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_85": {
                "variable": {
                    "value": "targets_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_173": {
                "variable": {
                    "value": "targets_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BCELoss_194": {
                "variable": {
                    "value": "adversarial_criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_195": {
                "variable": {
                    "value": "mse",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_110": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(x_adv, inputs - self.epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_112": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.data + step_sign * self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "min_238": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(x_adv, inputs - self.epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_240": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.data + step_sign * self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_51": {
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_180": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs.detach()",
                            "Call"
                        ],
                        [
                            "x + torch.zeros_like(x).uniform_(-self.epsilon, self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "Variable(x_adv)",
                            "Call"
                        ],
                        [
                            "inputs.detach()",
                            "Call"
                        ],
                        [
                            "x + torch.zeros_like(x).uniform_(-self.epsilon, self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "Variable(x_adv, requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_92": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs.detach()",
                            "Call"
                        ],
                        [
                            "x + torch.zeros_like(x).uniform_(-self.epsilon, self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "Variable(x_adv)",
                            "Call"
                        ],
                        [
                            "inputs.detach()",
                            "Call"
                        ],
                        [
                            "x + torch.zeros_like(x).uniform_(-self.epsilon, self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "Variable(x_adv, requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_110": {
                "input": {
                    "value": "x_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.data + step_sign * self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_238": {
                "input": {
                    "value": "x_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.data + step_sign * self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_108": {
                "input": {
                    "value": "x.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_237": {
                "input": {
                    "value": "x.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_198": {
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "cifar100/attack_methods_new_cifar100.py": {
        "torch": {
            "is_available_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_80": {
                "variable": {
                    "value": "targets_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_pred_nat.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_85": {
                "variable": {
                    "value": "targets_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_170": {
                "variable": {
                    "value": "targets_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_184": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_187": {
                "variable": {
                    "value": "logits_pred_nat_D",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_pred_nat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "aux_net(inputs)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[x.size(0), 100, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BCELoss_194": {
                "variable": {
                    "value": "adversarial_criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_195": {
                "variable": {
                    "value": "mse",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_109": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(x_adv, inputs - self.epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_111": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.data + step_sign * self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_206": {
                "variable": {
                    "value": "logits_pred_D",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[x.size(0), 100, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "min_237": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(x_adv, inputs - self.epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_239": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.data + step_sign * self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_245": {
                "variable": {
                    "value": "logits_pred_2_D",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_pred_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[x.size(0), 100, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "grad_286": {
                "variable": {
                    "value": "gd_gan",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "gan_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mse(logits_pred_2_D, logits_pred_nat_D)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs.detach()",
                            "Call"
                        ],
                        [
                            "x + torch.zeros_like(x).uniform_(-self.epsilon, self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "Variable(x_adv)",
                            "Call"
                        ],
                        [
                            "inputs.detach()",
                            "Call"
                        ],
                        [
                            "x + torch.zeros_like(x).uniform_(-self.epsilon, self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "Variable(x_adv, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_287": {
                "variable": {
                    "value": "gd_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "adv_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "discriminator_loss",
                            "Name"
                        ],
                        [
                            "loss_ce(logits_pred_2, y_sm.detach())",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs.detach()",
                            "Call"
                        ],
                        [
                            "x + torch.zeros_like(x).uniform_(-self.epsilon, self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "Variable(x_adv)",
                            "Call"
                        ],
                        [
                            "inputs.detach()",
                            "Call"
                        ],
                        [
                            "x + torch.zeros_like(x).uniform_(-self.epsilon, self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "Variable(x_adv, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_51": {
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_177": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs.detach()",
                            "Call"
                        ],
                        [
                            "x + torch.zeros_like(x).uniform_(-self.epsilon, self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "Variable(x_adv)",
                            "Call"
                        ],
                        [
                            "inputs.detach()",
                            "Call"
                        ],
                        [
                            "x + torch.zeros_like(x).uniform_(-self.epsilon, self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "Variable(x_adv, requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_91": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs.detach()",
                            "Call"
                        ],
                        [
                            "x + torch.zeros_like(x).uniform_(-self.epsilon, self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "Variable(x_adv)",
                            "Call"
                        ],
                        [
                            "inputs.detach()",
                            "Call"
                        ],
                        [
                            "x + torch.zeros_like(x).uniform_(-self.epsilon, self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "Variable(x_adv, requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_109": {
                "input": {
                    "value": "x_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.data + step_sign * self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_237": {
                "input": {
                    "value": "x_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.data + step_sign * self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_107": {
                "input": {
                    "value": "x.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_236": {
                "input": {
                    "value": "x.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_198": {
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "cifar100/attack_methods_new_imt_cifar100.py": {
        "torch": {
            "is_available_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_47": {
                "variable": {
                    "value": "adversarial_criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_118": {
                "variable": {
                    "value": "targets_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_pred_nat.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_123": {
                "variable": {
                    "value": "targets_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BCELoss_163": {
                "variable": {
                    "value": "adversarial_criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_244": {
                "variable": {
                    "value": "targets_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BCELoss_265": {
                "variable": {
                    "value": "adversarial_criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_266": {
                "variable": {
                    "value": "mse",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_50": {
                "variable": {
                    "value": "logits_pred_D",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_pert",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.basic_net(x)[0]",
                            "Subscript"
                        ],
                        [
                            "self.basic_net(x)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[x.size(0), 100, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "min_66": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(x_adv, x - self.epsilon * mask * 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_68": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.data - self.step_size * 4 * 1.0 * mask * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x - self.epsilon * mask * 1.0), x + self.epsilon * mask * 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data + step_sign * self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * 4 * mask * 1.0 * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x - self.epsilon * 1.0), x + self.epsilon * 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "min_147": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(x_adv, inputs - self.epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_149": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.data - self.step_size * 4 * 1.0 * mask * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x - self.epsilon * mask * 1.0), x + self.epsilon * mask * 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data + step_sign * self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * 4 * mask * 1.0 * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x - self.epsilon * 1.0), x + self.epsilon * 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_167": {
                "variable": {
                    "value": "logits_pred_D",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_pert",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.basic_net(x)[0]",
                            "Subscript"
                        ],
                        [
                            "self.basic_net(x)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[x.size(0), 100, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "min_185": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(x_adv, x - self.epsilon * 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_187": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.data - self.step_size * 4 * 1.0 * mask * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x - self.epsilon * mask * 1.0), x + self.epsilon * mask * 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data + step_sign * self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * 4 * mask * 1.0 * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x - self.epsilon * 1.0), x + self.epsilon * 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "min_309": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(x_adv, inputs - self.epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_311": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.data - self.step_size * 4 * 1.0 * mask * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x - self.epsilon * mask * 1.0), x + self.epsilon * mask * 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data + step_sign * self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * 4 * mask * 1.0 * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x - self.epsilon * 1.0), x + self.epsilon * 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_89": {
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_251": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Variable(x_adv)",
                            "Call"
                        ],
                        [
                            "inputs.detach()",
                            "Call"
                        ],
                        [
                            "x + torch.zeros_like(x).uniform_(-self.epsilon, self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "Variable(x_adv)",
                            "Call"
                        ],
                        [
                            "Variable(x_adv)",
                            "Call"
                        ],
                        [
                            "inputs.detach()",
                            "Call"
                        ],
                        [
                            "x + torch.zeros_like(x).uniform_(-self.epsilon, self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "Variable(x_adv, requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_66": {
                "input": {
                    "value": "x_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.data - self.step_size * 4 * 1.0 * mask * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x - self.epsilon * mask * 1.0), x + self.epsilon * mask * 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data + step_sign * self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * 4 * mask * 1.0 * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x - self.epsilon * 1.0), x + self.epsilon * 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_129": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Variable(x_adv)",
                            "Call"
                        ],
                        [
                            "inputs.detach()",
                            "Call"
                        ],
                        [
                            "x + torch.zeros_like(x).uniform_(-self.epsilon, self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "Variable(x_adv)",
                            "Call"
                        ],
                        [
                            "Variable(x_adv)",
                            "Call"
                        ],
                        [
                            "inputs.detach()",
                            "Call"
                        ],
                        [
                            "x + torch.zeros_like(x).uniform_(-self.epsilon, self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "Variable(x_adv, requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_147": {
                "input": {
                    "value": "x_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.data - self.step_size * 4 * 1.0 * mask * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x - self.epsilon * mask * 1.0), x + self.epsilon * mask * 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data + step_sign * self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * 4 * mask * 1.0 * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x - self.epsilon * 1.0), x + self.epsilon * 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_185": {
                "input": {
                    "value": "x_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.data - self.step_size * 4 * 1.0 * mask * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x - self.epsilon * mask * 1.0), x + self.epsilon * mask * 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data + step_sign * self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * 4 * mask * 1.0 * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x - self.epsilon * 1.0), x + self.epsilon * 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_309": {
                "input": {
                    "value": "x_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.data - self.step_size * 4 * 1.0 * mask * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x - self.epsilon * mask * 1.0), x + self.epsilon * mask * 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data + step_sign * self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * 4 * mask * 1.0 * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x - self.epsilon * 1.0), x + self.epsilon * 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_65": {
                "input": {
                    "value": "x.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_145": {
                "input": {
                    "value": "x.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_184": {
                "input": {
                    "value": "x.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_308": {
                "input": {
                    "value": "x.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_269": {
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tensor_282": {},
            "Tensor_283": {}
        }
    },
    "cifar100/fs_eval_cifar100.py": {
        "torch": {
            "DataLoader_113": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR100(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.SVHN(root='./data', split='test', download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size_test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_255": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_149": {
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_242": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f_path_latest",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(args.model_dir, 'latest')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_247": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(args.model_dir, 'checkpoint-%s' % args.init_model_pass)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cifar100/fs_eval_imt_cifar100.py": {
        "torch": {
            "DataLoader_113": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR100(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.SVHN(root='./data', split='test', download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size_test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_128": {
                "variable": {
                    "value": "D_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0002",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_260": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_154": {
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_247": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f_path_latest",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(args.model_dir, 'latest')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_252": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(args.model_dir, 'checkpoint-%s' % args.init_model_pass)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cifar100/fs_main_cifar100.py": {
        "torch": {
            "DataLoader_167": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR100(root='./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.SVHN(root='./data', split='train', download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_202": {
                "variable": {
                    "value": "D_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_221": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_printoptions_32": {
                "threshold": {
                    "value": "10000",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BCELoss_276": {
                "variable": {
                    "value": "adversarial_criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_236": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f_path_latest",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(args.model_dir, 'latest')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_335": {
                "obj": {
                    "value": "state",
                    "type": "Dict",
                    "possible_values": [
                        [
                            "{'net': net_org.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'net': net_org.state_dict(), 'epoch': epoch, 'optimizer': optimizer.state_dict(), 'D_optimizer': D_optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "f_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.model_dir, 'checkpoint-%s' % args.init_model_pass)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.model_dir, 'checkpoint-%s' % epoch)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.model_dir, 'latest')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_348": {
                "obj": {
                    "value": "state",
                    "type": "Dict",
                    "possible_values": [
                        [
                            "{'net': net_org.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'net': net_org.state_dict(), 'epoch': epoch, 'optimizer': optimizer.state_dict(), 'D_optimizer': D_optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "f_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.model_dir, 'checkpoint-%s' % args.init_model_pass)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.model_dir, 'checkpoint-%s' % epoch)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.model_dir, 'latest')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_241": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.model_dir, 'checkpoint-%s' % args.init_model_pass)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.model_dir, 'checkpoint-%s' % epoch)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.model_dir, 'latest')",
                            "Call"
                        ]
                    ]
                }
            },
            "max_298": {
                "variable": {
                    "value": "max",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "parms.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_299": {
                "variable": {
                    "value": "min",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "parms.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cifar100/models_new/dis.py": {
        "torch": {
            "Sequential_17": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(cnn.features.children())[:feature_layer + 1]",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(depth - 4) / 6",
                            "BinOp"
                        ],
                        [
                            "m.kernel_size[0] * m.kernel_size[1] * m.out_channels",
                            "BinOp"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "n",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(depth - 4) / 6",
                            "BinOp"
                        ],
                        [
                            "m.kernel_size[0] * m.kernel_size[1] * m.out_channels",
                            "BinOp"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_29": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(depth - 4) / 6",
                            "BinOp"
                        ],
                        [
                            "m.kernel_size[0] * m.kernel_size[1] * m.out_channels",
                            "BinOp"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(depth - 4) / 6",
                            "BinOp"
                        ],
                        [
                            "m.kernel_size[0] * m.kernel_size[1] * m.out_channels",
                            "BinOp"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_30": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "n",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(depth - 4) / 6",
                            "BinOp"
                        ],
                        [
                            "m.kernel_size[0] * m.kernel_size[1] * m.out_channels",
                            "BinOp"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_40": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "PixelShuffle_41": {
                "variable": {
                    "value": "self.shuffler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "upscale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "9",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_58": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "9",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_82": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "640",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_85": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_86": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_87": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_88": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_89": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_91": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "variable": {
                    "value": "self.conv6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_93": {
                "variable": {
                    "value": "self.bn6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_94": {
                "variable": {
                    "value": "self.conv7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_95": {
                "variable": {
                    "value": "self.bn7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_96": {
                "variable": {
                    "value": "self.conv8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_97": {
                "variable": {
                    "value": "self.bn8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_100": {
                "variable": {
                    "value": "self.conv9",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_126": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_127": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_128": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_134": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_135": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_136": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_199": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nChannels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_215": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_216": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_217": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_218": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_242": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 1)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_12": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "swish(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(y)) + x",
                            "BinOp"
                        ],
                        [
                            "self.__getattr__('upsample' + str(i + 1))(x)",
                            "Call"
                        ],
                        [
                            "swish(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "swish(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "swish(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "swish(self.bn4(self.conv4(x)))",
                            "Call"
                        ],
                        [
                            "swish(self.bn5(self.conv5(x)))",
                            "Call"
                        ],
                        [
                            "swish(self.bn6(self.conv6(x)))",
                            "Call"
                        ],
                        [
                            "swish(self.bn7(self.conv7(x)))",
                            "Call"
                        ],
                        [
                            "swish(self.bn8(self.conv8(x)))",
                            "Call"
                        ],
                        [
                            "self.conv9(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_114": {
                "input": {
                    "value": "F.avg_pool2d(x, x.size()[2:])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_159": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 1)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.droprate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_161": {
                "input": {
                    "value": "x if self.equalInOut else self.convShortcut(x)",
                    "type": "IfExp",
                    "possible_values": []
                },
                "other": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 1)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_183": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_250": {
                "input": {
                    "value": "out1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_144": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_114": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "swish(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(y)) + x",
                            "BinOp"
                        ],
                        [
                            "self.__getattr__('upsample' + str(i + 1))(x)",
                            "Call"
                        ],
                        [
                            "swish(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "swish(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "swish(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "swish(self.bn4(self.conv4(x)))",
                            "Call"
                        ],
                        [
                            "swish(self.bn5(self.conv5(x)))",
                            "Call"
                        ],
                        [
                            "swish(self.bn6(self.conv6(x)))",
                            "Call"
                        ],
                        [
                            "swish(self.bn7(self.conv7(x)))",
                            "Call"
                        ],
                        [
                            "swish(self.bn8(self.conv8(x)))",
                            "Call"
                        ],
                        [
                            "self.conv9(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "cifar100/models_new/wideresnet.py": {
        "torch": {
            "BatchNorm2d_10": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_11": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_83": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nChannels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_99": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_100": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_101": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "avg_pool2d_121": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_43": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.droprate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_45": {
                "input": {
                    "value": "x if self.equalInOut else self.convShortcut(x)",
                    "type": "IfExp",
                    "possible_values": []
                },
                "other": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_67": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "cifar100/ot.py": {
        "torch": {
            "sum_25": {
                "variable": {
                    "value": "cost_ot",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T * C",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_76": {
                "variable": {
                    "value": "pi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "M(U, V)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_86": {
                "variable": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[m, n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_87": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-cost_matrix / beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_105": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[n, n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "CosineSimilarity_123": {
                "variable": {
                    "value": "cos",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_124": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - cos(x_col, y_lin)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_97": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "construct_diag(torch.squeeze(delta))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "A * T",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_98": {
                "variable": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(construct_diag(torch.squeeze(delta)), Q)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "construct_diag(torch.squeeze(sigma))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_55": {
                "input": {
                    "value": "torch.exp(A).sum(1, keepdim=True) + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_84": {
                "*size": {
                    "value": "[n, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_55": {
                "input": {
                    "value": "A",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.exp(-cost_matrix / beta)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_55": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_97": {
                "input": {
                    "value": "delta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0 / (m * torch.mm(Q, sigma))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "squeeze_98": {
                "input": {
                    "value": "sigma",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "1.0 / n * torch.ones([n, 1]).to(device)",
                            "BinOp"
                        ],
                        [
                            "1.0 / (n * torch.mm(delta.t(), Q)).t()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_64": {
                "input": {
                    "value": "mu",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Variable(1.0 / m * torch.FloatTensor(m).fill_(1).to('cuda'), requires_grad=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_65": {
                "input": {
                    "value": "nu",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Variable(1.0 / n * torch.FloatTensor(n).fill_(1).to('cuda'), requires_grad=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_94": {
                "input": {
                    "value": "Q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "A * T",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "sigma",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "1.0 / n * torch.ones([n, 1]).to(device)",
                            "BinOp"
                        ],
                        [
                            "1.0 / (n * torch.mm(delta.t(), Q)).t()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_95": {
                "input": {
                    "value": "delta.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "A * T",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "cifar100/utils.py": {
        "torch": {
            "sum_87": {
                "variable": {
                    "value": "self_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "onehot_targets * logits",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_65": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(log_likelihood, targets)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_60": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_88": {
                "input": {
                    "value": "(1 - onehot_targets) * logits - onehot_targets * 1000",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_91": {
                "input": {
                    "value": "torch.clamp(self_loss - other_loss + self.margin, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_63": {
                "input": {
                    "value": "torch.mul(log_likelihood, targets)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_65": {
                "input": {
                    "value": "log_likelihood",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-F.log_softmax(inputs, dim=1)",
                            "UnaryOp"
                        ]
                    ]
                },
                "other": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clamp_91": {
                "input": {
                    "value": "self_loss - other_loss + self.margin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mul_63": {
                "input": {
                    "value": "log_likelihood",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-F.log_softmax(inputs, dim=1)",
                            "UnaryOp"
                        ]
                    ]
                },
                "other": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "svhn/attack_methods_new.py": {
        "torch": {
            "is_available_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_80": {
                "variable": {
                    "value": "targets_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_pred_nat.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_85": {
                "variable": {
                    "value": "targets_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_173": {
                "variable": {
                    "value": "targets_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BCELoss_194": {
                "variable": {
                    "value": "adversarial_criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_195": {
                "variable": {
                    "value": "mse",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_110": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(x_adv, inputs - self.epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_112": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.data + step_sign * self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "min_238": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(x_adv, inputs - self.epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_240": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.data + step_sign * self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_51": {
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_180": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs.detach()",
                            "Call"
                        ],
                        [
                            "x + torch.zeros_like(x).uniform_(-self.epsilon, self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "Variable(x_adv)",
                            "Call"
                        ],
                        [
                            "inputs.detach()",
                            "Call"
                        ],
                        [
                            "x + torch.zeros_like(x).uniform_(-self.epsilon, self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "Variable(x_adv, requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_92": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs.detach()",
                            "Call"
                        ],
                        [
                            "x + torch.zeros_like(x).uniform_(-self.epsilon, self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "Variable(x_adv)",
                            "Call"
                        ],
                        [
                            "inputs.detach()",
                            "Call"
                        ],
                        [
                            "x + torch.zeros_like(x).uniform_(-self.epsilon, self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "Variable(x_adv, requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_110": {
                "input": {
                    "value": "x_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.data + step_sign * self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_238": {
                "input": {
                    "value": "x_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.data + step_sign * self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_108": {
                "input": {
                    "value": "x.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_237": {
                "input": {
                    "value": "x.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_198": {
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "svhn/attack_methods_new_imt_svhn.py": {
        "torch": {
            "is_available_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_48": {
                "variable": {
                    "value": "adversarial_criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_119": {
                "variable": {
                    "value": "targets_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_pred_nat.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_124": {
                "variable": {
                    "value": "targets_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BCELoss_164": {
                "variable": {
                    "value": "adversarial_criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_243": {
                "variable": {
                    "value": "targets_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BCELoss_264": {
                "variable": {
                    "value": "adversarial_criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_265": {
                "variable": {
                    "value": "mse",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_51": {
                "variable": {
                    "value": "logits_pred_D",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_pert",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "aux_net(x)[0]",
                            "Subscript"
                        ],
                        [
                            "self.basic_net(x)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[x.size(0), 10, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "min_67": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(x_adv, x - self.epsilon * mask * 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_69": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.data - self.step_size * 4 * 1.0 * mask * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x - self.epsilon * mask * 1.0), x + self.epsilon * mask * 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data + step_sign * self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * 4 * 1.0 * mask * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x - self.epsilon * mask * 1.0), x + self.epsilon * mask * 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "min_148": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(x_adv, inputs - self.epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_150": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.data - self.step_size * 4 * 1.0 * mask * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x - self.epsilon * mask * 1.0), x + self.epsilon * mask * 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data + step_sign * self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * 4 * 1.0 * mask * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x - self.epsilon * mask * 1.0), x + self.epsilon * mask * 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_167": {
                "variable": {
                    "value": "logits_pred_D",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_pert",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "aux_net(x)[0]",
                            "Subscript"
                        ],
                        [
                            "self.basic_net(x)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[x.size(0), 10, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "min_184": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(x_adv, x - self.epsilon * mask * 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_186": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.data - self.step_size * 4 * 1.0 * mask * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x - self.epsilon * mask * 1.0), x + self.epsilon * mask * 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data + step_sign * self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * 4 * 1.0 * mask * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x - self.epsilon * mask * 1.0), x + self.epsilon * mask * 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "min_308": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(x_adv, inputs - self.epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_310": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.data - self.step_size * 4 * 1.0 * mask * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x - self.epsilon * mask * 1.0), x + self.epsilon * mask * 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data + step_sign * self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * 4 * 1.0 * mask * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x - self.epsilon * mask * 1.0), x + self.epsilon * mask * 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_90": {
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_250": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Variable(x_adv)",
                            "Call"
                        ],
                        [
                            "inputs.detach()",
                            "Call"
                        ],
                        [
                            "x + torch.zeros_like(x).uniform_(-self.epsilon, self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "Variable(x_adv)",
                            "Call"
                        ],
                        [
                            "Variable(x_adv)",
                            "Call"
                        ],
                        [
                            "inputs.detach()",
                            "Call"
                        ],
                        [
                            "x + torch.zeros_like(x).uniform_(-self.epsilon, self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "Variable(x_adv, requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_67": {
                "input": {
                    "value": "x_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.data - self.step_size * 4 * 1.0 * mask * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x - self.epsilon * mask * 1.0), x + self.epsilon * mask * 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data + step_sign * self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * 4 * 1.0 * mask * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x - self.epsilon * mask * 1.0), x + self.epsilon * mask * 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_130": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Variable(x_adv)",
                            "Call"
                        ],
                        [
                            "inputs.detach()",
                            "Call"
                        ],
                        [
                            "x + torch.zeros_like(x).uniform_(-self.epsilon, self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "Variable(x_adv)",
                            "Call"
                        ],
                        [
                            "Variable(x_adv)",
                            "Call"
                        ],
                        [
                            "inputs.detach()",
                            "Call"
                        ],
                        [
                            "x + torch.zeros_like(x).uniform_(-self.epsilon, self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "Variable(x_adv, requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_148": {
                "input": {
                    "value": "x_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.data - self.step_size * 4 * 1.0 * mask * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x - self.epsilon * mask * 1.0), x + self.epsilon * mask * 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data + step_sign * self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * 4 * 1.0 * mask * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x - self.epsilon * mask * 1.0), x + self.epsilon * mask * 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_184": {
                "input": {
                    "value": "x_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.data - self.step_size * 4 * 1.0 * mask * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x - self.epsilon * mask * 1.0), x + self.epsilon * mask * 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data + step_sign * self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * 4 * 1.0 * mask * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x - self.epsilon * mask * 1.0), x + self.epsilon * mask * 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_308": {
                "input": {
                    "value": "x_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.data - self.step_size * 4 * 1.0 * mask * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x - self.epsilon * mask * 1.0), x + self.epsilon * mask * 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data + step_sign * self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * 4 * 1.0 * mask * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x - self.epsilon * mask * 1.0), x + self.epsilon * mask * 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_66": {
                "input": {
                    "value": "x.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_146": {
                "input": {
                    "value": "x.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_183": {
                "input": {
                    "value": "x.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_307": {
                "input": {
                    "value": "x.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_268": {
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tensor_281": {},
            "Tensor_282": {}
        }
    },
    "svhn/attack_methods_new_svhn.py": {
        "torch": {
            "is_available_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_80": {
                "variable": {
                    "value": "targets_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_pred_nat.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_85": {
                "variable": {
                    "value": "targets_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_170": {
                "variable": {
                    "value": "targets_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_184": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_187": {
                "variable": {
                    "value": "logits_pred_nat_D",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_pred_nat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "aux_net(inputs)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[x.size(0), 10, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BCELoss_194": {
                "variable": {
                    "value": "adversarial_criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_195": {
                "variable": {
                    "value": "mse",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_109": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(x_adv, inputs - self.epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_111": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.data + step_sign * self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_206": {
                "variable": {
                    "value": "logits_pred_D",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[x.size(0), 10, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "min_237": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(x_adv, inputs - self.epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_239": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.data + step_sign * self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_245": {
                "variable": {
                    "value": "logits_pred_2_D",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_pred_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[x.size(0), 10, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "grad_287": {
                "variable": {
                    "value": "gd_gan",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "gan_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mse(logits_pred_2_D, logits_pred_nat_D)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs.detach()",
                            "Call"
                        ],
                        [
                            "x + torch.zeros_like(x).uniform_(-self.epsilon, self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "Variable(x_adv)",
                            "Call"
                        ],
                        [
                            "inputs.detach()",
                            "Call"
                        ],
                        [
                            "x + torch.zeros_like(x).uniform_(-self.epsilon, self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "Variable(x_adv, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_288": {
                "variable": {
                    "value": "gd_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "adv_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "discriminator_loss",
                            "Name"
                        ],
                        [
                            "loss_ce(logits_pred_2, y_sm.detach())",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs.detach()",
                            "Call"
                        ],
                        [
                            "x + torch.zeros_like(x).uniform_(-self.epsilon, self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "Variable(x_adv)",
                            "Call"
                        ],
                        [
                            "inputs.detach()",
                            "Call"
                        ],
                        [
                            "x + torch.zeros_like(x).uniform_(-self.epsilon, self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "Variable(x_adv, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_51": {
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_177": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs.detach()",
                            "Call"
                        ],
                        [
                            "x + torch.zeros_like(x).uniform_(-self.epsilon, self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "Variable(x_adv)",
                            "Call"
                        ],
                        [
                            "inputs.detach()",
                            "Call"
                        ],
                        [
                            "x + torch.zeros_like(x).uniform_(-self.epsilon, self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "Variable(x_adv, requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_91": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs.detach()",
                            "Call"
                        ],
                        [
                            "x + torch.zeros_like(x).uniform_(-self.epsilon, self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "Variable(x_adv)",
                            "Call"
                        ],
                        [
                            "inputs.detach()",
                            "Call"
                        ],
                        [
                            "x + torch.zeros_like(x).uniform_(-self.epsilon, self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "Variable(x_adv, requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_109": {
                "input": {
                    "value": "x_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.data + step_sign * self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_237": {
                "input": {
                    "value": "x_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.data + step_sign * self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x.data - self.step_size * torch.sign(x.grad.data)",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, inputs - self.epsilon), inputs + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_107": {
                "input": {
                    "value": "x.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_236": {
                "input": {
                    "value": "x.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_198": {
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "svhn/fs_eval_imt_svhn.py": {
        "torch": {
            "DataLoader_114": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR100(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.SVHN(root='./data', split='test', download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size_test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_129": {
                "variable": {
                    "value": "D_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0002",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_265": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_155": {
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_252": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f_path_latest",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(args.model_dir, 'latest')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_257": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(args.model_dir, 'checkpoint-%s' % args.init_model_pass)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "svhn/fs_eval_svhn.py": {
        "torch": {
            "DataLoader_114": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR100(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.SVHN(root='./data', split='test', download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size_test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_129": {
                "variable": {
                    "value": "D_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0002",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_265": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_155": {
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_252": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f_path_latest",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(args.model_dir, 'latest')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_257": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(args.model_dir, 'checkpoint-%s' % args.init_model_pass)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "svhn/fs_main_svhn.py": {
        "torch": {
            "DataLoader_167": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR100(root='./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.SVHN(root='./data', split='train', download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_202": {
                "variable": {
                    "value": "D_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_221": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_printoptions_32": {
                "threshold": {
                    "value": "10000",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BCELoss_277": {
                "variable": {
                    "value": "adversarial_criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_236": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f_path_latest",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(args.model_dir, 'latest')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_335": {
                "obj": {
                    "value": "state",
                    "type": "Dict",
                    "possible_values": [
                        [
                            "{'net': net_org.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'net': net_org.state_dict(), 'epoch': epoch, 'optimizer': optimizer.state_dict(), 'D_optimizer': D_optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "f_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.model_dir, 'checkpoint-%s' % args.init_model_pass)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.model_dir, 'checkpoint-%s' % epoch)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.model_dir, 'latest')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_348": {
                "obj": {
                    "value": "state",
                    "type": "Dict",
                    "possible_values": [
                        [
                            "{'net': net_org.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'net': net_org.state_dict(), 'epoch': epoch, 'optimizer': optimizer.state_dict(), 'D_optimizer': D_optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "f_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.model_dir, 'checkpoint-%s' % args.init_model_pass)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.model_dir, 'checkpoint-%s' % epoch)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.model_dir, 'latest')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_241": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.model_dir, 'checkpoint-%s' % args.init_model_pass)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.model_dir, 'checkpoint-%s' % epoch)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.model_dir, 'latest')",
                            "Call"
                        ]
                    ]
                }
            },
            "max_299": {
                "variable": {
                    "value": "max",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "parms.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_300": {
                "variable": {
                    "value": "min",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "parms.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "svhn/models_new/dis.py": {
        "torch": {
            "Sequential_17": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(cnn.features.children())[:feature_layer + 1]",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(depth - 4) / 6",
                            "BinOp"
                        ],
                        [
                            "m.kernel_size[0] * m.kernel_size[1] * m.out_channels",
                            "BinOp"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "n",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(depth - 4) / 6",
                            "BinOp"
                        ],
                        [
                            "m.kernel_size[0] * m.kernel_size[1] * m.out_channels",
                            "BinOp"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_29": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(depth - 4) / 6",
                            "BinOp"
                        ],
                        [
                            "m.kernel_size[0] * m.kernel_size[1] * m.out_channels",
                            "BinOp"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(depth - 4) / 6",
                            "BinOp"
                        ],
                        [
                            "m.kernel_size[0] * m.kernel_size[1] * m.out_channels",
                            "BinOp"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_30": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "n",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(depth - 4) / 6",
                            "BinOp"
                        ],
                        [
                            "m.kernel_size[0] * m.kernel_size[1] * m.out_channels",
                            "BinOp"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_40": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "PixelShuffle_41": {
                "variable": {
                    "value": "self.shuffler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "upscale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "9",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_58": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "9",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_82": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "640",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_85": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_86": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_87": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_88": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_89": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_91": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "variable": {
                    "value": "self.conv6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_93": {
                "variable": {
                    "value": "self.bn6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_94": {
                "variable": {
                    "value": "self.conv7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_95": {
                "variable": {
                    "value": "self.bn7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_96": {
                "variable": {
                    "value": "self.conv8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_97": {
                "variable": {
                    "value": "self.bn8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_100": {
                "variable": {
                    "value": "self.conv9",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_126": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_127": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_128": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_134": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_135": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_136": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_199": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nChannels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_215": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_216": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_217": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_218": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_242": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 1)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_12": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "swish(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(y)) + x",
                            "BinOp"
                        ],
                        [
                            "self.__getattr__('upsample' + str(i + 1))(x)",
                            "Call"
                        ],
                        [
                            "swish(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "swish(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "swish(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "swish(self.bn4(self.conv4(x)))",
                            "Call"
                        ],
                        [
                            "swish(self.bn5(self.conv5(x)))",
                            "Call"
                        ],
                        [
                            "swish(self.bn6(self.conv6(x)))",
                            "Call"
                        ],
                        [
                            "swish(self.bn7(self.conv7(x)))",
                            "Call"
                        ],
                        [
                            "swish(self.bn8(self.conv8(x)))",
                            "Call"
                        ],
                        [
                            "self.conv9(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_114": {
                "input": {
                    "value": "F.avg_pool2d(x, x.size()[2:])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_159": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 1)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.droprate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_161": {
                "input": {
                    "value": "x if self.equalInOut else self.convShortcut(x)",
                    "type": "IfExp",
                    "possible_values": []
                },
                "other": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 1)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_183": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_250": {
                "input": {
                    "value": "out1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_144": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_114": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "swish(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(y)) + x",
                            "BinOp"
                        ],
                        [
                            "self.__getattr__('upsample' + str(i + 1))(x)",
                            "Call"
                        ],
                        [
                            "swish(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "swish(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "swish(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "swish(self.bn4(self.conv4(x)))",
                            "Call"
                        ],
                        [
                            "swish(self.bn5(self.conv5(x)))",
                            "Call"
                        ],
                        [
                            "swish(self.bn6(self.conv6(x)))",
                            "Call"
                        ],
                        [
                            "swish(self.bn7(self.conv7(x)))",
                            "Call"
                        ],
                        [
                            "swish(self.bn8(self.conv8(x)))",
                            "Call"
                        ],
                        [
                            "self.conv9(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "svhn/models_new/wideresnet.py": {
        "torch": {
            "BatchNorm2d_10": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_11": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_83": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nChannels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_99": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_100": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_101": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "avg_pool2d_121": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_43": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.droprate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_45": {
                "input": {
                    "value": "x if self.equalInOut else self.convShortcut(x)",
                    "type": "IfExp",
                    "possible_values": []
                },
                "other": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_67": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "svhn/ot.py": {
        "torch": {
            "sum_25": {
                "variable": {
                    "value": "cost_ot",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T * C",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_76": {
                "variable": {
                    "value": "pi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "M(U, V)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_86": {
                "variable": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[m, n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_87": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-cost_matrix / beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_105": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[n, n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "CosineSimilarity_123": {
                "variable": {
                    "value": "cos",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_124": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - cos(x_col, y_lin)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_97": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "construct_diag(torch.squeeze(delta))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "A * T",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_98": {
                "variable": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(construct_diag(torch.squeeze(delta)), Q)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "construct_diag(torch.squeeze(sigma))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_55": {
                "input": {
                    "value": "torch.exp(A).sum(1, keepdim=True) + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_84": {
                "*size": {
                    "value": "[n, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_55": {
                "input": {
                    "value": "A",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.exp(-cost_matrix / beta)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_55": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_97": {
                "input": {
                    "value": "delta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0 / (m * torch.mm(Q, sigma))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "squeeze_98": {
                "input": {
                    "value": "sigma",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "1.0 / n * torch.ones([n, 1]).to(device)",
                            "BinOp"
                        ],
                        [
                            "1.0 / (n * torch.mm(delta.t(), Q)).t()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_64": {
                "input": {
                    "value": "mu",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Variable(1.0 / m * torch.FloatTensor(m).fill_(1).to('cuda'), requires_grad=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_65": {
                "input": {
                    "value": "nu",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Variable(1.0 / n * torch.FloatTensor(n).fill_(1).to('cuda'), requires_grad=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_94": {
                "input": {
                    "value": "Q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "A * T",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "sigma",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "1.0 / n * torch.ones([n, 1]).to(device)",
                            "BinOp"
                        ],
                        [
                            "1.0 / (n * torch.mm(delta.t(), Q)).t()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_95": {
                "input": {
                    "value": "delta.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "A * T",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "svhn/utils.py": {
        "torch": {
            "sum_87": {
                "variable": {
                    "value": "self_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "onehot_targets * logits",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_65": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(log_likelihood, targets)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_60": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_88": {
                "input": {
                    "value": "(1 - onehot_targets) * logits - onehot_targets * 1000",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_91": {
                "input": {
                    "value": "torch.clamp(self_loss - other_loss + self.margin, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_63": {
                "input": {
                    "value": "torch.mul(log_likelihood, targets)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_65": {
                "input": {
                    "value": "log_likelihood",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-F.log_softmax(inputs, dim=1)",
                            "UnaryOp"
                        ]
                    ]
                },
                "other": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clamp_91": {
                "input": {
                    "value": "self_loss - other_loss + self.margin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mul_63": {
                "input": {
                    "value": "log_likelihood",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-F.log_softmax(inputs, dim=1)",
                            "UnaryOp"
                        ]
                    ]
                },
                "other": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    }
}