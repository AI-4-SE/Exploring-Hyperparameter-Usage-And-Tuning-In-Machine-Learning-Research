{
    "bert/convert_tf_checkpoint_to_pytorch.py": {
        "tensorflow": {
            "list_variables_60": {
                "variable": {
                    "value": "init_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.tf_checkpoint_path",
                            "Attribute"
                        ]
                    ]
                }
            },
            "load_variable_65": {
                "variable": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.tf_checkpoint_path",
                            "Attribute"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name[5:]",
                            "Subscript"
                        ],
                        [
                            "name.split('/')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_99": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.load_variable(path, name)",
                            "Call"
                        ],
                        [
                            "np.transpose(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_102": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pytorch_dump_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "bert/modeling.py": {
        "torch": {
            "Parameter_136": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(config.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_137": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(config.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_157": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_158": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_159": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_164": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_168": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_194": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_195": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_196": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_198": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_226": {
                "variable": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_layer.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_240": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_254": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_256": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_280": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_292": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_294": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_321": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[copy.deepcopy(layer) for _ in range(config.num_hidden_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_334": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_335": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_425": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_426": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_476": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_522": {
                "variable": {
                    "value": "self.W_no",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_523": {
                "variable": {
                    "value": "self.no_answer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(hidden_size * 3, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_539": {
                "variable": {
                    "value": "pa_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "start_logit.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_540": {
                "variable": {
                    "value": "v1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pa_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.softmax(start_logit.transpose(1, 2), -1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "sequence_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_encoder_layers[-1]",
                            "Subscript"
                        ],
                        [
                            "all_encoder_layers[-1]",
                            "Subscript"
                        ],
                        [
                            "sequence_output[:, 1:self.context_length + 1]",
                            "Subscript"
                        ],
                        [
                            "all_encoder_layers[-1]",
                            "Subscript"
                        ],
                        [
                            "all_encoder_layers[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "squeeze_540": {
                "variable": {
                    "value": "v1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_541": {
                "variable": {
                    "value": "pa_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_logit.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_542": {
                "variable": {
                    "value": "v2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pa_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.softmax(end_logit.transpose(1, 2), -1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "sequence_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_encoder_layers[-1]",
                            "Subscript"
                        ],
                        [
                            "all_encoder_layers[-1]",
                            "Subscript"
                        ],
                        [
                            "sequence_output[:, 1:self.context_length + 1]",
                            "Subscript"
                        ],
                        [
                            "all_encoder_layers[-1]",
                            "Subscript"
                        ],
                        [
                            "all_encoder_layers[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "squeeze_542": {
                "variable": {
                    "value": "v2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_544": {
                "variable": {
                    "value": "pa_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pa_3.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_545": {
                "variable": {
                    "value": "v3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pa_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.W_no(sequence_output) + mask",
                            "BinOp"
                        ],
                        [
                            "nn.functional.softmax(pa_3.transpose(1, 2), -1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "sequence_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_encoder_layers[-1]",
                            "Subscript"
                        ],
                        [
                            "all_encoder_layers[-1]",
                            "Subscript"
                        ],
                        [
                            "sequence_output[:, 1:self.context_length + 1]",
                            "Subscript"
                        ],
                        [
                            "all_encoder_layers[-1]",
                            "Subscript"
                        ],
                        [
                            "all_encoder_layers[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "squeeze_545": {
                "variable": {
                    "value": "v3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_557": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_558": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_559": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_616": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_617": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_618": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_171": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_376": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_378": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_446": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_509": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ],
                        [
                            "start_logits.size(1)",
                            "Call"
                        ],
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_530": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nbatch",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_598": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ],
                        [
                            "start_logits.size(1)",
                            "Call"
                        ],
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_606": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.qa_outputs(sequence_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "(na_logits + logits) / 2",
                            "BinOp"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "(na_logits + logits) / 2",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_658": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ],
                        [
                            "start_logits.size(1)",
                            "Call"
                        ],
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_666": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.qa_outputs(sequence_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "(na_logits + logits) / 2",
                            "BinOp"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "(na_logits + logits) / 2",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "erf_34": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_136": {
                "*size": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_137": {
                "*size": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_147": {
                "input": {
                    "value": "s + self.variance_epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Softmax_232": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_523": {
                "in_features": {
                    "value": "hidden_size * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_524": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_525": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_547": {
                "tensors": {
                    "value": "[v1, v2, v3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "data_and_model/output_entity.py": {
        "torch": {
            "DataLoader_21": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "bS",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_train",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: x",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_29": {
                "variable": {
                    "value": "dev_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "bS",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_dev",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle_dev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: x",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "sqlova/model/nl2sql/wikisql_models.py": {
        "torch": {
            "device_15": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "cross_entropy_1365": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_sc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.scp(wemb_n, l_n, wemb_h, l_hpu, l_hs, show_p_sc=show_p_sc, knowledge=knowledge, knowledge_header=knowledge_header)",
                            "Call"
                        ],
                        [
                            "self.scp(wemb_n, l_n, wemb_hpu, l_hpu, l_hs, show_p_sc=show_p_sc, knowledge=knowledge, knowledge_header=knowledge_header)",
                            "Call"
                        ],
                        [
                            "self.scp(wemb_n, l_n, wemb_hpu, l_hpu, l_hs, show_p_sc=show_p_sc)",
                            "Call"
                        ],
                        [
                            "self.sc_out(vec).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.zeros(bS, max_header_len).to(device)",
                            "Call"
                        ],
                        [
                            "self.scp(wemb_h, l_hs)",
                            "Call"
                        ],
                        [
                            "self.scp(wemb_h, l_hs)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "torch.tensor(g_sc).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_1372": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_sa",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sap(wemb_n, l_n, wemb_h, l_hpu, l_hs, pr_sc, show_p_sa=show_p_sa, knowledge=knowledge, knowledge_header=knowledge_header)",
                            "Call"
                        ],
                        [
                            "self.sap(wemb_n, l_n, wemb_hpu, l_hpu, l_hs, pr_sc, show_p_sa=show_p_sa, knowledge=knowledge, knowledge_header=knowledge_header)",
                            "Call"
                        ],
                        [
                            "self.sap(wemb_n, l_n, wemb_h, l_hpu, l_hs, None, show_p_sa=show_p_sa)",
                            "Call"
                        ],
                        [
                            "self.sap(wemb_n, l_n, wemb_hpu, l_hpu, l_hs, pr_sc, show_p_sa=show_p_sa)",
                            "Call"
                        ],
                        [
                            "self.sa_out(wenc_n).sum(dim=1)",
                            "Call"
                        ],
                        [
                            "self.sa_out(c_n)",
                            "Call"
                        ],
                        [
                            "torch.zeros([bS, self.n_agg_ops]).to(device)",
                            "Call"
                        ],
                        [
                            "self.sap(wemb_h, pr_sc, idx_st, idx_ed)",
                            "Call"
                        ],
                        [
                            "self.sap(wemb_h, pr_sc, idx_st, idx_ed)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "torch.tensor(g_sa).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_1376": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_wn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.wnp(wemb_n, l_n, wemb_h, l_hpu, l_hs, show_p_wn=show_p_wn, knowledge=knowledge, knowledge_header=knowledge_header)",
                            "Call"
                        ],
                        [
                            "self.wnp(wemb_n, l_n, wemb_hpu, l_hpu, l_hs, show_p_wn=show_p_wn, knowledge=knowledge, knowledge_header=knowledge_header)",
                            "Call"
                        ],
                        [
                            "self.wnp(wemb_n, l_n, wemb_hpu, l_hpu, l_hs, show_p_wn=show_p_wn)",
                            "Call"
                        ],
                        [
                            "self.wn_out(c_n)",
                            "Call"
                        ],
                        [
                            "torch.zeros(bS, self.n_where_num + 1).to(device)",
                            "Call"
                        ],
                        [
                            "self.wnp(cls_vec)",
                            "Call"
                        ],
                        [
                            "self.wnp(cls_vec)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "torch.tensor(g_wn).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_1384": {
                "variable": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[bS, max_h_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_1389": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_wc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.wcp(wemb_n, l_n, wemb_h, l_hpu, l_hs, show_p_wc=show_p_wc, penalty=True, predict_select_column=pr_sc, knowledge=knowledge, knowledge_header=knowledge_header)",
                            "Call"
                        ],
                        [
                            "self.wcp(wemb_n, l_n, wemb_hpu, l_hpu, l_hs, show_p_wc=show_p_wc, penalty=True, knowledge=knowledge, knowledge_header=knowledge_header)",
                            "Call"
                        ],
                        [
                            "self.wcp(wemb_n, l_n, wemb_hpu, l_hpu, l_hs, show_p_wc=show_p_wc, penalty=True)",
                            "Call"
                        ],
                        [
                            "torch.zeros(bS, max_header_len, 1).to(device)",
                            "Call"
                        ],
                        [
                            "s_wc.squeeze(2)",
                            "Call"
                        ],
                        [
                            "self.wcp(wemb_h, l_hs, idx_st, idx_ed)",
                            "Call"
                        ],
                        [
                            "self.wcp(wemb_h, l_hs, idx_st, idx_ed)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_1390": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(s_wc)",
                            "Call"
                        ],
                        [
                            "self.softmax_dim1(att)",
                            "Call"
                        ],
                        [
                            "self.softmax_dim2(att)",
                            "Call"
                        ],
                        [
                            "p.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "self.softmax_dim2(att)",
                            "Call"
                        ],
                        [
                            "self.softmax_dim2(att)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([bS, max_h_len]).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_116": {
                "variable": {
                    "value": "prob_sc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_sc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.scp(wemb_n, l_n, wemb_h, l_hpu, l_hs, show_p_sc=show_p_sc, knowledge=knowledge, knowledge_header=knowledge_header)",
                            "Call"
                        ],
                        [
                            "self.scp(wemb_n, l_n, wemb_hpu, l_hpu, l_hs, show_p_sc=show_p_sc, knowledge=knowledge, knowledge_header=knowledge_header)",
                            "Call"
                        ],
                        [
                            "self.scp(wemb_n, l_n, wemb_hpu, l_hpu, l_hs, show_p_sc=show_p_sc)",
                            "Call"
                        ],
                        [
                            "self.sc_out(vec).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.zeros(bS, max_header_len).to(device)",
                            "Call"
                        ],
                        [
                            "self.scp(wemb_h, l_hs)",
                            "Call"
                        ],
                        [
                            "self.scp(wemb_h, l_hs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_124": {
                "variable": {
                    "value": "prob_sc_sa",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[bS, beam_size, self.n_agg_ops]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_125": {
                "variable": {
                    "value": "prob_sca",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_sc_sa",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([bS, beam_size, self.n_agg_ops]).to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros([bS, beam_size, self.n_agg_ops]).to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros([bS, beam_size, self.n_agg_ops]).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_190": {
                "variable": {
                    "value": "prob_wn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_wn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.wnp(wemb_n, l_n, wemb_h, l_hpu, l_hs, show_p_wn=show_p_wn, knowledge=knowledge, knowledge_header=knowledge_header)",
                            "Call"
                        ],
                        [
                            "self.wnp(wemb_n, l_n, wemb_hpu, l_hpu, l_hs, show_p_wn=show_p_wn, knowledge=knowledge, knowledge_header=knowledge_header)",
                            "Call"
                        ],
                        [
                            "self.wnp(wemb_n, l_n, wemb_hpu, l_hpu, l_hs, show_p_wn=show_p_wn)",
                            "Call"
                        ],
                        [
                            "self.wn_out(c_n)",
                            "Call"
                        ],
                        [
                            "torch.zeros(bS, self.n_where_num + 1).to(device)",
                            "Call"
                        ],
                        [
                            "self.wnp(cls_vec)",
                            "Call"
                        ],
                        [
                            "self.wnp(cls_vec)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_196": {
                "variable": {
                    "value": "prob_wc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_wc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.wcp(wemb_n, l_n, wemb_h, l_hpu, l_hs, show_p_wc=show_p_wc, penalty=True, predict_select_column=pr_sc, knowledge=knowledge, knowledge_header=knowledge_header)",
                            "Call"
                        ],
                        [
                            "self.wcp(wemb_n, l_n, wemb_hpu, l_hpu, l_hs, show_p_wc=show_p_wc, penalty=True, knowledge=knowledge, knowledge_header=knowledge_header)",
                            "Call"
                        ],
                        [
                            "self.wcp(wemb_n, l_n, wemb_hpu, l_hpu, l_hs, show_p_wc=show_p_wc, penalty=True)",
                            "Call"
                        ],
                        [
                            "torch.zeros(bS, max_header_len, 1).to(device)",
                            "Call"
                        ],
                        [
                            "s_wc.squeeze(2)",
                            "Call"
                        ],
                        [
                            "self.wcp(wemb_h, l_hs, idx_st, idx_ed)",
                            "Call"
                        ],
                        [
                            "self.wcp(wemb_h, l_hs, idx_st, idx_ed)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_210": {
                "variable": {
                    "value": "prob_wo_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_wo_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.wop(wemb_n, l_n, wemb_hpu, l_hpu, l_hs, wn=pr_wn_max, wc=pr_wc_max, show_p_wo=show_p_wo, knowledge=knowledge, knowledge_header=knowledge_header)",
                            "Call"
                        ],
                        [
                            "self.wop(wemb_n, l_n, wemb_hpu, l_hpu, l_hs, wn=pr_wn_max, wc=pr_wc_max, show_p_wo=show_p_wo)",
                            "Call"
                        ],
                        [
                            "self.wop(wemb_h, pr_wc_max, idx_st, idx_ed)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_345": {
                "variable": {
                    "value": "prob_sc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_sc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.scp(wemb_n, l_n, wemb_h, l_hpu, l_hs, show_p_sc=show_p_sc, knowledge=knowledge, knowledge_header=knowledge_header)",
                            "Call"
                        ],
                        [
                            "self.scp(wemb_n, l_n, wemb_hpu, l_hpu, l_hs, show_p_sc=show_p_sc, knowledge=knowledge, knowledge_header=knowledge_header)",
                            "Call"
                        ],
                        [
                            "self.scp(wemb_n, l_n, wemb_hpu, l_hpu, l_hs, show_p_sc=show_p_sc)",
                            "Call"
                        ],
                        [
                            "self.sc_out(vec).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.zeros(bS, max_header_len).to(device)",
                            "Call"
                        ],
                        [
                            "self.scp(wemb_h, l_hs)",
                            "Call"
                        ],
                        [
                            "self.scp(wemb_h, l_hs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_353": {
                "variable": {
                    "value": "prob_sc_sa",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[bS, beam_size, self.n_agg_ops]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_354": {
                "variable": {
                    "value": "prob_sca",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_sc_sa",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([bS, beam_size, self.n_agg_ops]).to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros([bS, beam_size, self.n_agg_ops]).to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros([bS, beam_size, self.n_agg_ops]).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_417": {
                "variable": {
                    "value": "prob_wn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_wn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.wnp(wemb_n, l_n, wemb_h, l_hpu, l_hs, show_p_wn=show_p_wn, knowledge=knowledge, knowledge_header=knowledge_header)",
                            "Call"
                        ],
                        [
                            "self.wnp(wemb_n, l_n, wemb_hpu, l_hpu, l_hs, show_p_wn=show_p_wn, knowledge=knowledge, knowledge_header=knowledge_header)",
                            "Call"
                        ],
                        [
                            "self.wnp(wemb_n, l_n, wemb_hpu, l_hpu, l_hs, show_p_wn=show_p_wn)",
                            "Call"
                        ],
                        [
                            "self.wn_out(c_n)",
                            "Call"
                        ],
                        [
                            "torch.zeros(bS, self.n_where_num + 1).to(device)",
                            "Call"
                        ],
                        [
                            "self.wnp(cls_vec)",
                            "Call"
                        ],
                        [
                            "self.wnp(cls_vec)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_422": {
                "variable": {
                    "value": "prob_wc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_wc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.wcp(wemb_n, l_n, wemb_h, l_hpu, l_hs, show_p_wc=show_p_wc, penalty=True, predict_select_column=pr_sc, knowledge=knowledge, knowledge_header=knowledge_header)",
                            "Call"
                        ],
                        [
                            "self.wcp(wemb_n, l_n, wemb_hpu, l_hpu, l_hs, show_p_wc=show_p_wc, penalty=True, knowledge=knowledge, knowledge_header=knowledge_header)",
                            "Call"
                        ],
                        [
                            "self.wcp(wemb_n, l_n, wemb_hpu, l_hpu, l_hs, show_p_wc=show_p_wc, penalty=True)",
                            "Call"
                        ],
                        [
                            "torch.zeros(bS, max_header_len, 1).to(device)",
                            "Call"
                        ],
                        [
                            "s_wc.squeeze(2)",
                            "Call"
                        ],
                        [
                            "self.wcp(wemb_h, l_hs, idx_st, idx_ed)",
                            "Call"
                        ],
                        [
                            "self.wcp(wemb_h, l_hs, idx_st, idx_ed)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_435": {
                "variable": {
                    "value": "prob_wo_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_wo_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.wop(wemb_n, l_n, wemb_hpu, l_hpu, l_hs, wn=pr_wn_max, wc=pr_wc_max, show_p_wo=show_p_wo, knowledge=knowledge, knowledge_header=knowledge_header)",
                            "Call"
                        ],
                        [
                            "self.wop(wemb_n, l_n, wemb_hpu, l_hpu, l_hs, wn=pr_wn_max, wc=pr_wc_max, show_p_wo=show_p_wo)",
                            "Call"
                        ],
                        [
                            "self.wop(wemb_h, pr_wc_max, idx_st, idx_ed)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LSTM_536": {
                "variable": {
                    "value": "self.enc_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "iS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "int(hS / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "lS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_540": {
                "variable": {
                    "value": "self.enc_n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "iS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "int(hS / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "lS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_544": {
                "variable": {
                    "value": "self.W_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hS + self.question_knowledge_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hS + self.header_knowledge_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_545": {
                "variable": {
                    "value": "self.W_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hS + self.question_knowledge_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_546": {
                "variable": {
                    "value": "self.W_hs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hS + self.header_knowledge_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_547": {
                "variable": {
                    "value": "self.sc_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Tanh()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_549": {
                "variable": {
                    "value": "self.softmax_dim1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_550": {
                "variable": {
                    "value": "self.softmax_dim2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_563": {
                "variable": {
                    "value": "knowledge",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "knowledge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[k + (mL_n - len(k)) * [0] for k in knowledge]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (mL_n - len(k)) * [0] for k in knowledge]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (mL_n - len(k)) * [0] for k in knowledge]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (mL_n - len(k)) * [0] for k in knowledge]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (mL_n - len(k)) * [0] for k in knowledge]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (mL_n - len(k)) * [0] for k in knowledge]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_563": {
                "variable": {
                    "value": "knowledge",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_565": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "cls_vec.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "mL_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.question_knowledge_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_568": {
                "variable": {
                    "value": "wenc_n",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[wenc_n, feature]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_571": {
                "variable": {
                    "value": "knowledge_header",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "knowledge_header",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[k + (max(l_hs) - len(k)) * [0] for k in knowledge_header]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge_header).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (max(l_hs) - len(k)) * [0] for k in knowledge_header]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge_header).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (max(l_hs) - len(k)) * [0] for k in knowledge_header]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge_header).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (max(l_hs) - len(k)) * [0] for k in knowledge_header]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge_header).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (max(l_hs) - len(k)) * [0] for k in knowledge_header]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge_header).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (max(l_hs) - len(k)) * [0] for k in knowledge_header]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge_header).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_571": {
                "variable": {
                    "value": "knowledge_header",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_572": {
                "variable": {
                    "value": "feature2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "cls_vec.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max(l_hs)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.header_knowledge_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_575": {
                "variable": {
                    "value": "wenc_hs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[wenc_hs, feature2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_580": {
                "variable": {
                    "value": "att_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "wenc_hs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encode_hpu(self.enc_h, wemb_hpu, l_hpu, l_hs)",
                            "Call"
                        ],
                        [
                            "torch.cat([wenc_hs, feature2], -1)",
                            "Call"
                        ],
                        [
                            "encode_hpu(self.enc_h, wemb_hpu, l_hpu, l_hs)",
                            "Call"
                        ],
                        [
                            "torch.cat([wenc_hs, feature2], -1)",
                            "Call"
                        ],
                        [
                            "encode_hpu(self.enc_h, wemb_hpu, l_hpu, l_hs)",
                            "Call"
                        ],
                        [
                            "torch.cat([wenc_hs, feature2], -1)",
                            "Call"
                        ],
                        [
                            "encode_hpu(self.enc_h, wemb_hpu, l_hpu, l_hs)",
                            "Call"
                        ],
                        [
                            "torch.cat([wenc_hs, feature2], -1)",
                            "Call"
                        ],
                        [
                            "encode_hpu(self.enc_h, wemb_hpu, l_hpu, l_hs)",
                            "Call"
                        ],
                        [
                            "torch.cat([wenc_hs, feature2], -1)",
                            "Call"
                        ],
                        [
                            "encode_hpu(self.enc_h, wemb_hpu, l_hpu, l_hs)",
                            "Call"
                        ],
                        [
                            "torch.cat([wenc_hs, feature2], -1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.W_att(wenc_n).transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_613": {
                "variable": {
                    "value": "c_n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_n.unsqueeze(3)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "wenc_n.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_613": {
                "variable": {
                    "value": "c_n",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_615": {
                "variable": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.W_c(c_n), self.W_hs(wenc_hs)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_640": {
                "variable": {
                    "value": "self.enc_n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "iS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "int(hS / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "lS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_645": {
                "variable": {
                    "value": "self.sa_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(hS, hS)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTM_694": {
                "variable": {
                    "value": "self.enc_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "iS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "int(hS / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "lS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_698": {
                "variable": {
                    "value": "self.enc_n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "iS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "int(hS / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "lS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_702": {
                "variable": {
                    "value": "self.W_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hS + self.question_knowledge_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hS + self.header_knowledge_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_703": {
                "variable": {
                    "value": "self.sa_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(hS + self.question_knowledge_dim, hS)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_707": {
                "variable": {
                    "value": "self.softmax_dim1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_708": {
                "variable": {
                    "value": "self.softmax_dim2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_729": {
                "variable": {
                    "value": "knowledge",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "knowledge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[k + (mL_n - len(k)) * [0] for k in knowledge]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (mL_n - len(k)) * [0] for k in knowledge]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (mL_n - len(k)) * [0] for k in knowledge]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (mL_n - len(k)) * [0] for k in knowledge]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (mL_n - len(k)) * [0] for k in knowledge]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (mL_n - len(k)) * [0] for k in knowledge]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_729": {
                "variable": {
                    "value": "knowledge",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_731": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "cls_vec.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "mL_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.question_knowledge_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_734": {
                "variable": {
                    "value": "wenc_n",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[wenc_n, feature]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_738": {
                "variable": {
                    "value": "knowledge_header",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "knowledge_header",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[k + (max(l_hs) - len(k)) * [0] for k in knowledge_header]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge_header).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (max(l_hs) - len(k)) * [0] for k in knowledge_header]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge_header).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (max(l_hs) - len(k)) * [0] for k in knowledge_header]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge_header).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (max(l_hs) - len(k)) * [0] for k in knowledge_header]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge_header).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (max(l_hs) - len(k)) * [0] for k in knowledge_header]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge_header).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (max(l_hs) - len(k)) * [0] for k in knowledge_header]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge_header).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_738": {
                "variable": {
                    "value": "knowledge_header",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_739": {
                "variable": {
                    "value": "feature2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "cls_vec.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max(l_hs)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.header_knowledge_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_742": {
                "variable": {
                    "value": "wenc_hs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[wenc_hs, feature2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_749": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W_att(wenc_n)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "wenc_hs_ob.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_749": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_773": {
                "variable": {
                    "value": "c_n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "wenc_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encode(self.enc_n, wemb_n, l_n, return_hidden=False, hc0=None, last_only=False)",
                            "Call"
                        ],
                        [
                            "torch.cat([wenc_n, feature], -1)",
                            "Call"
                        ],
                        [
                            "encode(self.enc_n, wemb_n, l_n, return_hidden=False, hc0=None, last_only=False)",
                            "Call"
                        ],
                        [
                            "encode(self.enc_n, wemb_n, l_n, return_hidden=False, hc0=None, last_only=False)",
                            "Call"
                        ],
                        [
                            "torch.cat([wenc_n, feature], -1)",
                            "Call"
                        ],
                        [
                            "encode(self.enc_n, wemb_n, l_n, return_hidden=False, hc0=(hidden, cell), last_only=False)",
                            "Call"
                        ],
                        [
                            "torch.cat([wenc_n, feature], -1)",
                            "Call"
                        ],
                        [
                            "encode(self.enc_n, wemb_n, l_n, return_hidden=False, hc0=None, last_only=False)",
                            "Call"
                        ],
                        [
                            "torch.cat([wenc_n, feature], -1)",
                            "Call"
                        ],
                        [
                            "wenc_n.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "encode(self.enc_n, wemb_n, l_n, return_hidden=False, hc0=None, last_only=False)",
                            "Call"
                        ],
                        [
                            "torch.cat([wenc_n, feature], -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([wenc_n, feature], -1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "p.unsqueeze(2).expand_as(wenc_n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_773": {
                "variable": {
                    "value": "c_n",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_790": {
                "variable": {
                    "value": "self.enc_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "iS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "int(hS / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "lS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_794": {
                "variable": {
                    "value": "self.enc_n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "iS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "int(hS / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "lS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_798": {
                "variable": {
                    "value": "self.W_att_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hS + self.header_knowledge_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_799": {
                "variable": {
                    "value": "self.W_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hS + self.header_knowledge_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "lS * hS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_800": {
                "variable": {
                    "value": "self.W_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hS + self.header_knowledge_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "lS * hS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_802": {
                "variable": {
                    "value": "self.W_att_n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hS + self.question_knowledge_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_803": {
                "variable": {
                    "value": "self.wn_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(hS + self.question_knowledge_dim, hS)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_807": {
                "variable": {
                    "value": "self.softmax_dim1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_808": {
                "variable": {
                    "value": "self.softmax_dim2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_818": {
                "variable": {
                    "value": "knowledge_header",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "knowledge_header",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[k + (max(l_hs) - len(k)) * [0] for k in knowledge_header]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge_header).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (max(l_hs) - len(k)) * [0] for k in knowledge_header]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge_header).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (max(l_hs) - len(k)) * [0] for k in knowledge_header]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge_header).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (max(l_hs) - len(k)) * [0] for k in knowledge_header]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge_header).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (max(l_hs) - len(k)) * [0] for k in knowledge_header]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge_header).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (max(l_hs) - len(k)) * [0] for k in knowledge_header]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge_header).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_818": {
                "variable": {
                    "value": "knowledge_header",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_819": {
                "variable": {
                    "value": "feature2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "cls_vec.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max(l_hs)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.header_knowledge_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_822": {
                "variable": {
                    "value": "wenc_hs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[wenc_hs, feature2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mul_853": {
                "variable": {
                    "value": "c_hs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "wenc_hs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encode_hpu(self.enc_h, wemb_hpu, l_hpu, l_hs)",
                            "Call"
                        ],
                        [
                            "torch.cat([wenc_hs, feature2], -1)",
                            "Call"
                        ],
                        [
                            "encode_hpu(self.enc_h, wemb_hpu, l_hpu, l_hs)",
                            "Call"
                        ],
                        [
                            "torch.cat([wenc_hs, feature2], -1)",
                            "Call"
                        ],
                        [
                            "encode_hpu(self.enc_h, wemb_hpu, l_hpu, l_hs)",
                            "Call"
                        ],
                        [
                            "torch.cat([wenc_hs, feature2], -1)",
                            "Call"
                        ],
                        [
                            "encode_hpu(self.enc_h, wemb_hpu, l_hpu, l_hs)",
                            "Call"
                        ],
                        [
                            "torch.cat([wenc_hs, feature2], -1)",
                            "Call"
                        ],
                        [
                            "encode_hpu(self.enc_h, wemb_hpu, l_hpu, l_hs)",
                            "Call"
                        ],
                        [
                            "torch.cat([wenc_hs, feature2], -1)",
                            "Call"
                        ],
                        [
                            "encode_hpu(self.enc_h, wemb_hpu, l_hpu, l_hs)",
                            "Call"
                        ],
                        [
                            "torch.cat([wenc_hs, feature2], -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "p_h.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_853": {
                "variable": {
                    "value": "c_hs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_871": {
                "variable": {
                    "value": "knowledge",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "knowledge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[k + (mL_n - len(k)) * [0] for k in knowledge]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (mL_n - len(k)) * [0] for k in knowledge]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (mL_n - len(k)) * [0] for k in knowledge]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (mL_n - len(k)) * [0] for k in knowledge]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (mL_n - len(k)) * [0] for k in knowledge]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (mL_n - len(k)) * [0] for k in knowledge]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_871": {
                "variable": {
                    "value": "knowledge",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_873": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "cls_vec.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "mL_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.question_knowledge_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_876": {
                "variable": {
                    "value": "wenc_n",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[wenc_n, feature]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mul_901": {
                "variable": {
                    "value": "c_n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "wenc_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encode(self.enc_n, wemb_n, l_n, return_hidden=False, hc0=None, last_only=False)",
                            "Call"
                        ],
                        [
                            "torch.cat([wenc_n, feature], -1)",
                            "Call"
                        ],
                        [
                            "encode(self.enc_n, wemb_n, l_n, return_hidden=False, hc0=None, last_only=False)",
                            "Call"
                        ],
                        [
                            "encode(self.enc_n, wemb_n, l_n, return_hidden=False, hc0=None, last_only=False)",
                            "Call"
                        ],
                        [
                            "torch.cat([wenc_n, feature], -1)",
                            "Call"
                        ],
                        [
                            "encode(self.enc_n, wemb_n, l_n, return_hidden=False, hc0=(hidden, cell), last_only=False)",
                            "Call"
                        ],
                        [
                            "torch.cat([wenc_n, feature], -1)",
                            "Call"
                        ],
                        [
                            "encode(self.enc_n, wemb_n, l_n, return_hidden=False, hc0=None, last_only=False)",
                            "Call"
                        ],
                        [
                            "torch.cat([wenc_n, feature], -1)",
                            "Call"
                        ],
                        [
                            "wenc_n.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "encode(self.enc_n, wemb_n, l_n, return_hidden=False, hc0=None, last_only=False)",
                            "Call"
                        ],
                        [
                            "torch.cat([wenc_n, feature], -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([wenc_n, feature], -1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "p_n.unsqueeze(2).expand_as(wenc_n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_901": {
                "variable": {
                    "value": "c_n",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_915": {
                "variable": {
                    "value": "self.enc_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "iS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "int(hS / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "lS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_919": {
                "variable": {
                    "value": "self.enc_n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "iS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "int(hS / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "lS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_923": {
                "variable": {
                    "value": "self.W_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hS + self.question_knowledge_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hS + self.header_knowledge_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_924": {
                "variable": {
                    "value": "self.W_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hS + self.question_knowledge_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_925": {
                "variable": {
                    "value": "self.W_hs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hS + self.header_knowledge_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_926": {
                "variable": {
                    "value": "self.W_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Tanh()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_930": {
                "variable": {
                    "value": "self.softmax_dim1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_931": {
                "variable": {
                    "value": "self.softmax_dim2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_944": {
                "variable": {
                    "value": "knowledge",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "knowledge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[k + (mL_n - len(k)) * [0] for k in knowledge]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (mL_n - len(k)) * [0] for k in knowledge]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (mL_n - len(k)) * [0] for k in knowledge]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (mL_n - len(k)) * [0] for k in knowledge]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (mL_n - len(k)) * [0] for k in knowledge]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (mL_n - len(k)) * [0] for k in knowledge]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_944": {
                "variable": {
                    "value": "knowledge",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_946": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "cls_vec.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "mL_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.question_knowledge_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_949": {
                "variable": {
                    "value": "wenc_n",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[wenc_n, feature]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_953": {
                "variable": {
                    "value": "knowledge_header",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "knowledge_header",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[k + (max(l_hs) - len(k)) * [0] for k in knowledge_header]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge_header).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (max(l_hs) - len(k)) * [0] for k in knowledge_header]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge_header).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (max(l_hs) - len(k)) * [0] for k in knowledge_header]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge_header).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (max(l_hs) - len(k)) * [0] for k in knowledge_header]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge_header).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (max(l_hs) - len(k)) * [0] for k in knowledge_header]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge_header).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (max(l_hs) - len(k)) * [0] for k in knowledge_header]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge_header).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_953": {
                "variable": {
                    "value": "knowledge_header",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_954": {
                "variable": {
                    "value": "feature2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "cls_vec.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max(l_hs)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.header_knowledge_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_957": {
                "variable": {
                    "value": "wenc_hs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[wenc_hs, feature2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_962": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "wenc_hs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encode_hpu(self.enc_h, wemb_hpu, l_hpu, l_hs)",
                            "Call"
                        ],
                        [
                            "torch.cat([wenc_hs, feature2], -1)",
                            "Call"
                        ],
                        [
                            "encode_hpu(self.enc_h, wemb_hpu, l_hpu, l_hs)",
                            "Call"
                        ],
                        [
                            "torch.cat([wenc_hs, feature2], -1)",
                            "Call"
                        ],
                        [
                            "encode_hpu(self.enc_h, wemb_hpu, l_hpu, l_hs)",
                            "Call"
                        ],
                        [
                            "torch.cat([wenc_hs, feature2], -1)",
                            "Call"
                        ],
                        [
                            "encode_hpu(self.enc_h, wemb_hpu, l_hpu, l_hs)",
                            "Call"
                        ],
                        [
                            "torch.cat([wenc_hs, feature2], -1)",
                            "Call"
                        ],
                        [
                            "encode_hpu(self.enc_h, wemb_hpu, l_hpu, l_hs)",
                            "Call"
                        ],
                        [
                            "torch.cat([wenc_hs, feature2], -1)",
                            "Call"
                        ],
                        [
                            "encode_hpu(self.enc_h, wemb_hpu, l_hpu, l_hs)",
                            "Call"
                        ],
                        [
                            "torch.cat([wenc_hs, feature2], -1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.W_att(wenc_n).transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_999": {
                "variable": {
                    "value": "c_n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "wenc_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encode(self.enc_n, wemb_n, l_n, return_hidden=False, hc0=None, last_only=False)",
                            "Call"
                        ],
                        [
                            "torch.cat([wenc_n, feature], -1)",
                            "Call"
                        ],
                        [
                            "encode(self.enc_n, wemb_n, l_n, return_hidden=False, hc0=None, last_only=False)",
                            "Call"
                        ],
                        [
                            "encode(self.enc_n, wemb_n, l_n, return_hidden=False, hc0=None, last_only=False)",
                            "Call"
                        ],
                        [
                            "torch.cat([wenc_n, feature], -1)",
                            "Call"
                        ],
                        [
                            "encode(self.enc_n, wemb_n, l_n, return_hidden=False, hc0=(hidden, cell), last_only=False)",
                            "Call"
                        ],
                        [
                            "torch.cat([wenc_n, feature], -1)",
                            "Call"
                        ],
                        [
                            "encode(self.enc_n, wemb_n, l_n, return_hidden=False, hc0=None, last_only=False)",
                            "Call"
                        ],
                        [
                            "torch.cat([wenc_n, feature], -1)",
                            "Call"
                        ],
                        [
                            "wenc_n.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "encode(self.enc_n, wemb_n, l_n, return_hidden=False, hc0=None, last_only=False)",
                            "Call"
                        ],
                        [
                            "torch.cat([wenc_n, feature], -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([wenc_n, feature], -1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(s_wc)",
                            "Call"
                        ],
                        [
                            "self.softmax_dim1(att)",
                            "Call"
                        ],
                        [
                            "self.softmax_dim2(att)",
                            "Call"
                        ],
                        [
                            "p.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "self.softmax_dim2(att)",
                            "Call"
                        ],
                        [
                            "self.softmax_dim2(att)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_999": {
                "variable": {
                    "value": "c_n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1008": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.W_c(c_n), self.W_hs(wenc_hs)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_1032": {
                "variable": {
                    "value": "self.enc_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "iS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "int(hS / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "lS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_1036": {
                "variable": {
                    "value": "self.enc_n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "iS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "int(hS / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "lS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1040": {
                "variable": {
                    "value": "self.W_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hS + self.question_knowledge_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hS + self.header_knowledge_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_1041": {
                "variable": {
                    "value": "self.W_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hS + self.question_knowledge_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_1042": {
                "variable": {
                    "value": "self.W_hs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hS + self.header_knowledge_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_1043": {
                "variable": {
                    "value": "self.wo_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2 * hS, hS)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_1049": {
                "variable": {
                    "value": "self.softmax_dim1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_1050": {
                "variable": {
                    "value": "self.softmax_dim2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1095": {
                "variable": {
                    "value": "wenc_hs_ob",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "wenc_hs_ob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "wenc_hs[list(range(bS)), pr_sc]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(wenc_hs_ob)",
                            "Call"
                        ],
                        [
                            "wenc_hs_ob.to(device)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(wenc_hs_ob)",
                            "Call"
                        ],
                        [
                            "wenc_hs_ob.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_1101": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W_att(wenc_n).unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "wenc_hs_ob.unsqueeze(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_1101": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_1135": {
                "variable": {
                    "value": "c_n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "wenc_n.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "p.unsqueeze(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_1135": {
                "variable": {
                    "value": "c_n",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1139": {
                "variable": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.W_c(c_n), self.W_hs(wenc_hs_ob)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_1163": {
                "variable": {
                    "value": "self.enc_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "iS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "int(hS / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "lS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_1167": {
                "variable": {
                    "value": "self.enc_n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "iS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "int(hS / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "lS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1171": {
                "variable": {
                    "value": "self.W_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hS + self.question_knowledge_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hS + self.header_knowledge_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_1172": {
                "variable": {
                    "value": "self.W_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hS + self.question_knowledge_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_1173": {
                "variable": {
                    "value": "self.W_hs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hS + self.header_knowledge_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_1174": {
                "variable": {
                    "value": "self.W_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_cond_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Softmax_1193": {
                "variable": {
                    "value": "self.softmax_dim1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_1194": {
                "variable": {
                    "value": "self.softmax_dim2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_1219": {
                "variable": {
                    "value": "knowledge_header",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "knowledge_header",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[k + (max(l_hs) - len(k)) * [0] for k in knowledge_header]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge_header).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (max(l_hs) - len(k)) * [0] for k in knowledge_header]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge_header).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (max(l_hs) - len(k)) * [0] for k in knowledge_header]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge_header).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (max(l_hs) - len(k)) * [0] for k in knowledge_header]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge_header).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (max(l_hs) - len(k)) * [0] for k in knowledge_header]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge_header).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (max(l_hs) - len(k)) * [0] for k in knowledge_header]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge_header).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_1219": {
                "variable": {
                    "value": "knowledge_header",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_1220": {
                "variable": {
                    "value": "feature2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "cls_vec.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max(l_hs)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.header_knowledge_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_1223": {
                "variable": {
                    "value": "wenc_hs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[wenc_hs, feature2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_1237": {
                "variable": {
                    "value": "wenc_hs_ob",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "wenc_hs_ob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "wenc_hs[list(range(bS)), pr_sc]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(wenc_hs_ob)",
                            "Call"
                        ],
                        [
                            "wenc_hs_ob.to(device)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(wenc_hs_ob)",
                            "Call"
                        ],
                        [
                            "wenc_hs_ob.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_1245": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W_att(wenc_n).unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "wenc_hs_ob.unsqueeze(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_1245": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_1280": {
                "variable": {
                    "value": "c_n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "wenc_n.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "p.unsqueeze(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_1280": {
                "variable": {
                    "value": "c_n",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1305": {
                "variable": {
                    "value": "wenc_op",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "wenc_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(wenc_op)",
                            "Call"
                        ],
                        [
                            "wenc_op.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_1310": {
                "variable": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.W_c(c_n), self.W_hs(wenc_hs_ob), self.W_op(wenc_op)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1317": {
                "variable": {
                    "value": "vec2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vec1e, wenc_ne]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_1421": {
                "variable": {
                    "value": "g_wvi1",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "g_wvi1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(g_wvi1).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "LSTM_1487": {
                "variable": {
                    "value": "self.enc_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "iS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "int(hS / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "lS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_1491": {
                "variable": {
                    "value": "self.enc_n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "iS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "int(hS / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "lS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_1495": {
                "variable": {
                    "value": "self.decode_pn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "max_seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "222",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "lS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_1499": {
                "variable": {
                    "value": "self.W_s2s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "iS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_1500": {
                "variable": {
                    "value": "self.W_pnt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_1502": {
                "variable": {
                    "value": "self.wv_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Tanh()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_1521": {
                "variable": {
                    "value": "h_0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.lS, bS, self.hS]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_1522": {
                "variable": {
                    "value": "c_0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.lS, bS, self.hS]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_1625": {
                "variable": {
                    "value": "h_0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.lS, bS, self.hS]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_1626": {
                "variable": {
                    "value": "c_0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.lS, bS, self.hS]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_1820": {
                "variable": {
                    "value": "s_sc",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "cls_vec.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_header_len",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_1835": {
                "variable": {
                    "value": "s_sa",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[bS, self.n_agg_ops]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_1844": {
                "variable": {
                    "value": "s_wn",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "cls_vec.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.n_where_num + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_1852": {
                "variable": {
                    "value": "s_wc",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "cls_vec.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_header_len",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_1866": {
                "variable": {
                    "value": "s_wo",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[bS, self.n_where_num, self.n_cond_ops]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_1878": {
                "variable": {
                    "value": "s_wv",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[bS, self.n_where_num, max(l_n), 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_1989": {
                "variable": {
                    "value": "prob_sc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_sc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.scp(wemb_n, l_n, wemb_h, l_hpu, l_hs, show_p_sc=show_p_sc, knowledge=knowledge, knowledge_header=knowledge_header)",
                            "Call"
                        ],
                        [
                            "self.scp(wemb_n, l_n, wemb_hpu, l_hpu, l_hs, show_p_sc=show_p_sc, knowledge=knowledge, knowledge_header=knowledge_header)",
                            "Call"
                        ],
                        [
                            "self.scp(wemb_n, l_n, wemb_hpu, l_hpu, l_hs, show_p_sc=show_p_sc)",
                            "Call"
                        ],
                        [
                            "self.sc_out(vec).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.zeros(bS, max_header_len).to(device)",
                            "Call"
                        ],
                        [
                            "self.scp(wemb_h, l_hs)",
                            "Call"
                        ],
                        [
                            "self.scp(wemb_h, l_hs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_1997": {
                "variable": {
                    "value": "prob_sc_sa",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[bS, beam_size, self.n_agg_ops]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_1998": {
                "variable": {
                    "value": "score_sc_sa",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[bS, beam_size, self.n_agg_ops]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_2000": {
                "variable": {
                    "value": "prob_sca",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_sc_sa",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([bS, beam_size, self.n_agg_ops]).to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros([bS, beam_size, self.n_agg_ops]).to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros([bS, beam_size, self.n_agg_ops]).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_2081": {
                "variable": {
                    "value": "prob_wn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_wn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.wnp(wemb_n, l_n, wemb_h, l_hpu, l_hs, show_p_wn=show_p_wn, knowledge=knowledge, knowledge_header=knowledge_header)",
                            "Call"
                        ],
                        [
                            "self.wnp(wemb_n, l_n, wemb_hpu, l_hpu, l_hs, show_p_wn=show_p_wn, knowledge=knowledge, knowledge_header=knowledge_header)",
                            "Call"
                        ],
                        [
                            "self.wnp(wemb_n, l_n, wemb_hpu, l_hpu, l_hs, show_p_wn=show_p_wn)",
                            "Call"
                        ],
                        [
                            "self.wn_out(c_n)",
                            "Call"
                        ],
                        [
                            "torch.zeros(bS, self.n_where_num + 1).to(device)",
                            "Call"
                        ],
                        [
                            "self.wnp(cls_vec)",
                            "Call"
                        ],
                        [
                            "self.wnp(cls_vec)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_2089": {
                "variable": {
                    "value": "prob_wc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_wc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.wcp(wemb_n, l_n, wemb_h, l_hpu, l_hs, show_p_wc=show_p_wc, penalty=True, predict_select_column=pr_sc, knowledge=knowledge, knowledge_header=knowledge_header)",
                            "Call"
                        ],
                        [
                            "self.wcp(wemb_n, l_n, wemb_hpu, l_hpu, l_hs, show_p_wc=show_p_wc, penalty=True, knowledge=knowledge, knowledge_header=knowledge_header)",
                            "Call"
                        ],
                        [
                            "self.wcp(wemb_n, l_n, wemb_hpu, l_hpu, l_hs, show_p_wc=show_p_wc, penalty=True)",
                            "Call"
                        ],
                        [
                            "torch.zeros(bS, max_header_len, 1).to(device)",
                            "Call"
                        ],
                        [
                            "s_wc.squeeze(2)",
                            "Call"
                        ],
                        [
                            "self.wcp(wemb_h, l_hs, idx_st, idx_ed)",
                            "Call"
                        ],
                        [
                            "self.wcp(wemb_h, l_hs, idx_st, idx_ed)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_2104": {
                "variable": {
                    "value": "prob_wo_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_wo_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.wop(wemb_n, l_n, wemb_hpu, l_hpu, l_hs, wn=pr_wn_max, wc=pr_wc_max, show_p_wo=show_p_wo, knowledge=knowledge, knowledge_header=knowledge_header)",
                            "Call"
                        ],
                        [
                            "self.wop(wemb_n, l_n, wemb_hpu, l_hpu, l_hs, wn=pr_wn_max, wc=pr_wc_max, show_p_wo=show_p_wo)",
                            "Call"
                        ],
                        [
                            "self.wop(wemb_h, pr_wc_max, idx_st, idx_ed)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_available_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_135": {
                "variable": {
                    "value": "prob_sa",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_sa",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sap(wemb_n, l_n, wemb_h, l_hpu, l_hs, pr_sc, show_p_sa=show_p_sa, knowledge=knowledge, knowledge_header=knowledge_header)",
                            "Call"
                        ],
                        [
                            "self.sap(wemb_n, l_n, wemb_hpu, l_hpu, l_hs, pr_sc, show_p_sa=show_p_sa, knowledge=knowledge, knowledge_header=knowledge_header)",
                            "Call"
                        ],
                        [
                            "self.sap(wemb_n, l_n, wemb_h, l_hpu, l_hs, None, show_p_sa=show_p_sa)",
                            "Call"
                        ],
                        [
                            "self.sap(wemb_n, l_n, wemb_hpu, l_hpu, l_hs, pr_sc, show_p_sa=show_p_sa)",
                            "Call"
                        ],
                        [
                            "self.sa_out(wenc_n).sum(dim=1)",
                            "Call"
                        ],
                        [
                            "self.sa_out(c_n)",
                            "Call"
                        ],
                        [
                            "torch.zeros([bS, self.n_agg_ops]).to(device)",
                            "Call"
                        ],
                        [
                            "self.sap(wemb_h, pr_sc, idx_st, idx_ed)",
                            "Call"
                        ],
                        [
                            "self.sap(wemb_h, pr_sc, idx_st, idx_ed)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_220": {
                "variable": {
                    "value": "prob_wv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_wv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.wvp(wemb_n, l_n, wemb_h, l_hpu, l_hs, wn=pr_wn, wc=pr_wc, wo=pr_wo, show_p_wv=show_p_wv, knowledge=knowledge, knowledge_header=knowledge_header)",
                            "Call"
                        ],
                        [
                            "self.wvp(wemb_n, l_n, wemb_hpu, l_hpu, l_hs, wn=pr_wn_max, wc=pr_wc_max, wo=pr_wo_temp, show_p_wv=show_p_wv, knowledge=knowledge, knowledge_header=knowledge_header)",
                            "Call"
                        ],
                        [
                            "self.wvp(wemb_n, l_n, wemb_hpu, l_hpu, l_hs, wn=pr_wn_max, wc=pr_wc_max, wo=pr_wo_temp, show_p_wv=show_p_wv)",
                            "Call"
                        ],
                        [
                            "self.wv_out(vec2)",
                            "Call"
                        ],
                        [
                            "self.wv_out(self.W_s2s(wenc_s2s) + self.W_pnt(dec_pn)).squeeze(3)",
                            "Call"
                        ],
                        [
                            "torch.stack(s_wv_list, 1)",
                            "Call"
                        ],
                        [
                            "s_wv.squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.zeros([bS, self.n_where_num, max(l_n), 2]).to(device)",
                            "Call"
                        ],
                        [
                            "self.wvp(wemb_n, l_n, pr_wc)",
                            "Call"
                        ],
                        [
                            "self.wvp(wemb_n, l_n, pr_wc_max)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_363": {
                "variable": {
                    "value": "prob_sa",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_sa",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sap(wemb_n, l_n, wemb_h, l_hpu, l_hs, pr_sc, show_p_sa=show_p_sa, knowledge=knowledge, knowledge_header=knowledge_header)",
                            "Call"
                        ],
                        [
                            "self.sap(wemb_n, l_n, wemb_hpu, l_hpu, l_hs, pr_sc, show_p_sa=show_p_sa, knowledge=knowledge, knowledge_header=knowledge_header)",
                            "Call"
                        ],
                        [
                            "self.sap(wemb_n, l_n, wemb_h, l_hpu, l_hs, None, show_p_sa=show_p_sa)",
                            "Call"
                        ],
                        [
                            "self.sap(wemb_n, l_n, wemb_hpu, l_hpu, l_hs, pr_sc, show_p_sa=show_p_sa)",
                            "Call"
                        ],
                        [
                            "self.sa_out(wenc_n).sum(dim=1)",
                            "Call"
                        ],
                        [
                            "self.sa_out(c_n)",
                            "Call"
                        ],
                        [
                            "torch.zeros([bS, self.n_agg_ops]).to(device)",
                            "Call"
                        ],
                        [
                            "self.sap(wemb_h, pr_sc, idx_st, idx_ed)",
                            "Call"
                        ],
                        [
                            "self.sap(wemb_h, pr_sc, idx_st, idx_ed)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_444": {
                "variable": {
                    "value": "prob_wv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_wv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.wvp(wemb_n, l_n, wemb_h, l_hpu, l_hs, wn=pr_wn, wc=pr_wc, wo=pr_wo, show_p_wv=show_p_wv, knowledge=knowledge, knowledge_header=knowledge_header)",
                            "Call"
                        ],
                        [
                            "self.wvp(wemb_n, l_n, wemb_hpu, l_hpu, l_hs, wn=pr_wn_max, wc=pr_wc_max, wo=pr_wo_temp, show_p_wv=show_p_wv, knowledge=knowledge, knowledge_header=knowledge_header)",
                            "Call"
                        ],
                        [
                            "self.wvp(wemb_n, l_n, wemb_hpu, l_hpu, l_hs, wn=pr_wn_max, wc=pr_wc_max, wo=pr_wo_temp, show_p_wv=show_p_wv)",
                            "Call"
                        ],
                        [
                            "self.wv_out(vec2)",
                            "Call"
                        ],
                        [
                            "self.wv_out(self.W_s2s(wenc_s2s) + self.W_pnt(dec_pn)).squeeze(3)",
                            "Call"
                        ],
                        [
                            "torch.stack(s_wv_list, 1)",
                            "Call"
                        ],
                        [
                            "s_wv.squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.zeros([bS, self.n_where_num, max(l_n), 2]).to(device)",
                            "Call"
                        ],
                        [
                            "self.wvp(wemb_n, l_n, pr_wc)",
                            "Call"
                        ],
                        [
                            "self.wvp(wemb_n, l_n, pr_wc_max)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_712": {
                "variable": {
                    "value": "self.W_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_713": {
                "variable": {
                    "value": "self.W_hs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_1075": {
                "variable": {
                    "value": "knowledge_header",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "knowledge_header",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[k + (max(l_hs) - len(k)) * [0] for k in knowledge_header]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge_header).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (max(l_hs) - len(k)) * [0] for k in knowledge_header]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge_header).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (max(l_hs) - len(k)) * [0] for k in knowledge_header]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge_header).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (max(l_hs) - len(k)) * [0] for k in knowledge_header]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge_header).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (max(l_hs) - len(k)) * [0] for k in knowledge_header]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge_header).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (max(l_hs) - len(k)) * [0] for k in knowledge_header]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge_header).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_1075": {
                "variable": {
                    "value": "knowledge_header",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_1076": {
                "variable": {
                    "value": "feature2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "cls_vec.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max(l_hs)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.header_knowledge_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_1079": {
                "variable": {
                    "value": "wenc_hs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[wenc_hs, feature2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_1091": {
                "variable": {
                    "value": "wenc_hs_ob1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "real + pad",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_1178": {
                "variable": {
                    "value": "self.wv_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(4 * hS, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_1182": {
                "variable": {
                    "value": "self.wv_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(4 * hS + self.question_knowledge_dim, hS)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_1209": {
                "variable": {
                    "value": "knowledge",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "knowledge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[k + (mL_n - len(k)) * [0] for k in knowledge]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (mL_n - len(k)) * [0] for k in knowledge]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (mL_n - len(k)) * [0] for k in knowledge]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (mL_n - len(k)) * [0] for k in knowledge]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (mL_n - len(k)) * [0] for k in knowledge]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (mL_n - len(k)) * [0] for k in knowledge]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_1209": {
                "variable": {
                    "value": "knowledge",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_1211": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "cls_vec.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "mL_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.question_knowledge_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_1214": {
                "variable": {
                    "value": "wenc_n",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[wenc_n, feature]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_1233": {
                "variable": {
                    "value": "wenc_hs_ob1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "real + pad",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_1289": {
                "variable": {
                    "value": "wenc_op1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.mL_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_cond_ops",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_1365": {
                "data": {
                    "value": "g_sc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_1372": {
                "data": {
                    "value": "g_sa",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_1376": {
                "data": {
                    "value": "g_wn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cross_entropy_1404": {
                "input": {
                    "value": "s_wo1[:g_wn1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.tensor(g_wo1).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_1425": {
                "input": {
                    "value": "s_wv[b, :g_wn1, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "g_st1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g_wvi1[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cross_entropy_1429": {
                "input": {
                    "value": "s_wv[b, :g_wn1, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "g_ed1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g_wvi1[:, 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_1535": {
                "variable": {
                    "value": "pnt_n",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "cls_vec.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.Tmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "mL_input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_1600": {
                "variable": {
                    "value": "s_wv",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "s_wv_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_2011": {
                "variable": {
                    "value": "prob_sa",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_sa",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sap(wemb_n, l_n, wemb_h, l_hpu, l_hs, pr_sc, show_p_sa=show_p_sa, knowledge=knowledge, knowledge_header=knowledge_header)",
                            "Call"
                        ],
                        [
                            "self.sap(wemb_n, l_n, wemb_hpu, l_hpu, l_hs, pr_sc, show_p_sa=show_p_sa, knowledge=knowledge, knowledge_header=knowledge_header)",
                            "Call"
                        ],
                        [
                            "self.sap(wemb_n, l_n, wemb_h, l_hpu, l_hs, None, show_p_sa=show_p_sa)",
                            "Call"
                        ],
                        [
                            "self.sap(wemb_n, l_n, wemb_hpu, l_hpu, l_hs, pr_sc, show_p_sa=show_p_sa)",
                            "Call"
                        ],
                        [
                            "self.sa_out(wenc_n).sum(dim=1)",
                            "Call"
                        ],
                        [
                            "self.sa_out(c_n)",
                            "Call"
                        ],
                        [
                            "torch.zeros([bS, self.n_agg_ops]).to(device)",
                            "Call"
                        ],
                        [
                            "self.sap(wemb_h, pr_sc, idx_st, idx_ed)",
                            "Call"
                        ],
                        [
                            "self.sap(wemb_h, pr_sc, idx_st, idx_ed)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_2117": {
                "variable": {
                    "value": "prob_wv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_wv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.wvp(wemb_n, l_n, wemb_h, l_hpu, l_hs, wn=pr_wn, wc=pr_wc, wo=pr_wo, show_p_wv=show_p_wv, knowledge=knowledge, knowledge_header=knowledge_header)",
                            "Call"
                        ],
                        [
                            "self.wvp(wemb_n, l_n, wemb_hpu, l_hpu, l_hs, wn=pr_wn_max, wc=pr_wc_max, wo=pr_wo_temp, show_p_wv=show_p_wv, knowledge=knowledge, knowledge_header=knowledge_header)",
                            "Call"
                        ],
                        [
                            "self.wvp(wemb_n, l_n, wemb_hpu, l_hpu, l_hs, wn=pr_wn_max, wc=pr_wc_max, wo=pr_wo_temp, show_p_wv=show_p_wv)",
                            "Call"
                        ],
                        [
                            "self.wv_out(vec2)",
                            "Call"
                        ],
                        [
                            "self.wv_out(self.W_s2s(wenc_s2s) + self.W_pnt(dec_pn)).squeeze(3)",
                            "Call"
                        ],
                        [
                            "torch.stack(s_wv_list, 1)",
                            "Call"
                        ],
                        [
                            "s_wv.squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.zeros([bS, self.n_where_num, max(l_n), 2]).to(device)",
                            "Call"
                        ],
                        [
                            "self.wvp(wemb_n, l_n, pr_wc)",
                            "Call"
                        ],
                        [
                            "self.wvp(wemb_n, l_n, pr_wc_max)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cross_entropy_2280": {
                "input": {
                    "value": "score_part",
                    "type": "variable",
                    "possible_values": [
                        [
                            "score[b, :ed]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "torch.tensor(g_pnt_idxs1[1:]).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_147": {
                "data": {
                    "value": "prob_sca",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(prob_sc_sa).to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(prob_sc_sa).to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(prob_sc_sa).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_249": {
                "data": {
                    "value": "prob_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zeros([bS, self.max_wn, self.n_cond_ops - 1, n_wv_beam_pairs])",
                            "Call"
                        ],
                        [
                            "zeros([bS, self.max_wn, self.n_cond_ops - 1, n_wv_beam_pairs])",
                            "Call"
                        ],
                        [
                            "zeros([bS, self.n_where_num, self.n_cond_ops - 1, n_wv_beam_pairs])",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_375": {
                "data": {
                    "value": "prob_sca",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(prob_sc_sa).to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(prob_sc_sa).to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(prob_sc_sa).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_473": {
                "data": {
                    "value": "prob_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zeros([bS, self.max_wn, self.n_cond_ops - 1, n_wv_beam_pairs])",
                            "Call"
                        ],
                        [
                            "zeros([bS, self.max_wn, self.n_cond_ops - 1, n_wv_beam_pairs])",
                            "Call"
                        ],
                        [
                            "zeros([bS, self.n_where_num, self.n_cond_ops - 1, n_wv_beam_pairs])",
                            "Call"
                        ]
                    ]
                }
            },
            "Tanh_547": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_547": {
                "in_features": {
                    "value": "2 * hS",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_645": {
                "in_features": {
                    "value": "hS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tanh_646": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_647": {
                "in_features": {
                    "value": "hS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_agg_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_703": {
                "in_features": {
                    "value": "hS + self.question_knowledge_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tanh_704": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_705": {
                "in_features": {
                    "value": "hS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_agg_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_803": {
                "in_features": {
                    "value": "hS + self.question_knowledge_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tanh_804": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_805": {
                "in_features": {
                    "value": "hS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.mL_w + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tanh_927": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_927": {
                "in_features": {
                    "value": "2 * hS",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_1044": {
                "in_features": {
                    "value": "2 * hS",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tanh_1045": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_1046": {
                "in_features": {
                    "value": "hS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_cond_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_1065": {
                "variable": {
                    "value": "knowledge",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "knowledge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[k + (mL_n - len(k)) * [0] for k in knowledge]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (mL_n - len(k)) * [0] for k in knowledge]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (mL_n - len(k)) * [0] for k in knowledge]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (mL_n - len(k)) * [0] for k in knowledge]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (mL_n - len(k)) * [0] for k in knowledge]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[k + (mL_n - len(k)) * [0] for k in knowledge]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(knowledge).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_1065": {
                "variable": {
                    "value": "knowledge",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_1067": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "cls_vec.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "mL_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ],
                        [
                            "max(l_n)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.question_knowledge_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_1070": {
                "variable": {
                    "value": "wenc_n",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[wenc_n, feature]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_1404": {
                "data": {
                    "value": "g_wo1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g_wo[b]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Tanh_1502": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_1502": {
                "in_features": {
                    "value": "hS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_1592": {
                "variable": {
                    "value": "cpnt",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "cls_vec.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "mL_input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_1688": {
                "variable": {
                    "value": "(prob, idxs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "s_wv1.view(bS, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_1688": {
                "variable": {
                    "value": "(prob, idxs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "k": {
                    "value": "max(l_input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_1689": {
                "variable": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_1781": {
                "variable": {
                    "value": "cpnt",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "len(l_hs)",
                            "Call"
                        ],
                        [
                            "cls_vec.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "mL_input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_1784": {
                "variable": {
                    "value": "pnt_n",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "idx_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[seq_score[0][-1] for seq_score in pnt_list_beam[i_beam]]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_2023": {
                "data": {
                    "value": "prob_sca",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(prob_sc_sa).to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(prob_sc_sa).to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(prob_sc_sa).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_2163": {
                "data": {
                    "value": "prob_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zeros([bS, self.max_wn, self.n_cond_ops - 1, n_wv_beam_pairs])",
                            "Call"
                        ],
                        [
                            "zeros([bS, self.max_wn, self.n_cond_ops - 1, n_wv_beam_pairs])",
                            "Call"
                        ],
                        [
                            "zeros([bS, self.n_where_num, self.n_cond_ops - 1, n_wv_beam_pairs])",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_2280": {
                "data": {
                    "value": "g_pnt_idxs1[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_1179": {
                "in_features": {
                    "value": "4 * hS",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_1183": {
                "in_features": {
                    "value": "4 * hS + self.question_knowledge_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tanh_1184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_1185": {
                "in_features": {
                    "value": "hS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_1300": {
                "data": {
                    "value": "idx_scatter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "sqlova/utils/utils_wikisql.py": {
        "torch": {}
    },
    "train.py": {
        "torch": {
            "device_25": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_104": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_138": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_141": {
                "variable": {
                    "value": "opt_bert",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model_bert.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr_bert",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_144": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_106": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_183": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path_model_bert",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./model_bert_best.pt'",
                            "str"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_185": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path_model_bert",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./model_bert_best.pt'",
                            "str"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_190": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./model_best.pt'",
                            "str"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_192": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./model_best.pt'",
                            "str"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_515": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_129": {
                "f": {
                    "value": "init_checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(BERT_PT_PATH, f'pytorch_model_{bert_type}.bin')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_736": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_764": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': model.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'model_bert': model_bert.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join('.', 'model_best.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_767": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': model.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'model_bert': model_bert.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join('.', 'model_bert_best.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}