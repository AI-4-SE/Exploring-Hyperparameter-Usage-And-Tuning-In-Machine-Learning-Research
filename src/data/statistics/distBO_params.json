{
    "distBO/bayes_opt/bayesian_optimization.py": {
        "sklearn": {}
    },
    "distBO/data/data.py": {
        "sklearn": {
            "LabelBinarizer_29": {
                "variable": {
                    "value": "self.lb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "check_random_state_45": {
                "variable": {
                    "value": "random_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "distBO/data/generate_data.py": {
        "sklearn": {
            "check_random_state_14": {
                "variable": {
                    "value": "rs",
                    "type": "Variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "args.data_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "check_random_state_29": {
                "variable": {
                    "value": "rs",
                    "type": "Variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "args.data_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "check_random_state_63": {
                "variable": {
                    "value": "rs",
                    "type": "Variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "args.data_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "distBO/data/load_datasets.py": {
        "sklearn": {
            "train_test_split_73": {
                "variable": {
                    "value": "(train_x, test_x, train_y, test_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "patient_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "patient_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "test_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                },
                "stratify": {
                    "value": "binarize_labels(patient_y)",
                    "type": "Call",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "train_test_split_31": {
                "variable": {
                    "value": "(train_x, test_x, train_y, test_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "protein_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "protein_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "stratify": {
                    "value": "protein_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.expand_dims(protein[:, -1], 1)",
                            "Call"
                        ]
                    ]
                },
                "test_size": {
                    "value": "test_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "random_state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "scale_67": {
                "variable": {
                    "value": "patient_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "patient_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "patient[:, :-2]",
                            "Subscript"
                        ],
                        [
                            "patient_x[:, 2:]",
                            "Subscript"
                        ],
                        [
                            "preprocessing.scale(patient_x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "distBO/data/toy_datasets.py": {
        "sklearn": {
            "check_random_state_30": {
                "variable": {
                    "value": "rs",
                    "type": "Variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "23",
                            "MethodArgument"
                        ],
                        [
                            "23",
                            "MethodArgument"
                        ],
                        [
                            "23",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "check_random_state_38": {
                "variable": {
                    "value": "rs",
                    "type": "Variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "23",
                            "MethodArgument"
                        ],
                        [
                            "23",
                            "MethodArgument"
                        ],
                        [
                            "23",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "check_random_state_53": {
                "variable": {
                    "value": "rs",
                    "type": "Variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "23",
                            "MethodArgument"
                        ],
                        [
                            "23",
                            "MethodArgument"
                        ],
                        [
                            "23",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "scale_55": {
                "variable": {
                    "value": "data_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rs.normal(loc=mu, scale=1.0, size=(n_total, 1))",
                            "Call"
                        ],
                        [
                            "rs.normal(loc=0.0, scale=1.0, size=(n_total, dim))",
                            "Call"
                        ]
                    ]
                }
            },
            "RBFSampler_59": {
                "variable": {
                    "value": "rbf_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "n_components": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "check_random_state_82": {
                "variable": {
                    "value": "rs",
                    "type": "Variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "args.data_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scale_28": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "preprocessing.scale(data)",
                            "Call"
                        ]
                    ]
                }
            },
            "train_test_split_74": {
                "variable": {
                    "value": "(train_x, test_x, train_y, test_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "data_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "stratify": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "standardise(label)",
                            "Call"
                        ],
                        [
                            "standardise(y)",
                            "Call"
                        ],
                        [
                            "(uni_values > prob).astype(int)",
                            "Call"
                        ]
                    ]
                },
                "test_size": {
                    "value": "float(n_test) / n_total",
                    "type": "BinOp",
                    "possible_values": []
                },
                "random_state": {
                    "value": "rs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "check_random_state(seed)",
                            "Call"
                        ],
                        [
                            "check_random_state(seed)",
                            "Call"
                        ],
                        [
                            "check_random_state(seed)",
                            "Call"
                        ],
                        [
                            "check_random_state(args.data_seed)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "distBO/model_embed/meta_fea.py": {
        "sklearn": {
            "PCA_98": {
                "variable": {
                    "value": "pca",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "train_test_split_113": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "dataset_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "dataset_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MinMaxScaler_62": {
                "variable": {
                    "value": "scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "KNeighborsRegressor_118": {
                "variable": {
                    "value": "neigh",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LinearRegression_122": {
                "variable": {
                    "value": "linear",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DecisionTreeRegressor_126": {
                "variable": {
                    "value": "tree",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "KNeighborsClassifier_134": {
                "variable": {
                    "value": "neigh",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LinearDiscriminantAnalysis_138": {
                "variable": {
                    "value": "lda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DecisionTreeClassifier_142": {
                "variable": {
                    "value": "tree",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GaussianNB_146": {
                "variable": {
                    "value": "nb",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "distBO/model_embed/models.py": {
        "sklearn": {
            "RBFSampler_114": {
                "variable": {
                    "value": "rbf_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "gamma": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.exp(log_gamma)",
                            "Call"
                        ],
                        [
                            "np.exp(log_gamma)",
                            "Call"
                        ],
                        [
                            "np.exp(log_gamma)",
                            "Call"
                        ],
                        [
                            "np.exp(log_gamma)",
                            "Call"
                        ]
                    ]
                },
                "n_components": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogisticRegression_117": {
                "variable": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "solver": {
                    "value": "lbfgs",
                    "type": "str",
                    "possible_values": []
                },
                "multi_class": {
                    "value": "multinomial",
                    "type": "str",
                    "possible_values": []
                },
                "C": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.exp(log_C)",
                            "Call"
                        ],
                        [
                            "np.exp(log_C)",
                            "Call"
                        ],
                        [
                            "np.exp(log_C)",
                            "Call"
                        ],
                        [
                            "np.exp(log_C)",
                            "Call"
                        ]
                    ]
                }
            },
            "SVC_136": {
                "variable": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "C": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.exp(log_C)",
                            "Call"
                        ],
                        [
                            "np.exp(log_C)",
                            "Call"
                        ],
                        [
                            "np.exp(log_C)",
                            "Call"
                        ],
                        [
                            "np.exp(log_C)",
                            "Call"
                        ]
                    ]
                },
                "kernel": {
                    "value": "precomputed",
                    "type": "str",
                    "possible_values": []
                }
            },
            "RBFSampler_149": {
                "variable": {
                    "value": "rbf_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "gamma": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.exp(log_gamma)",
                            "Call"
                        ],
                        [
                            "np.exp(log_gamma)",
                            "Call"
                        ],
                        [
                            "np.exp(log_gamma)",
                            "Call"
                        ],
                        [
                            "np.exp(log_gamma)",
                            "Call"
                        ]
                    ]
                },
                "n_components": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LinearSVC_152": {
                "variable": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "C": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.exp(log_C)",
                            "Call"
                        ],
                        [
                            "np.exp(log_C)",
                            "Call"
                        ],
                        [
                            "np.exp(log_C)",
                            "Call"
                        ],
                        [
                            "np.exp(log_C)",
                            "Call"
                        ]
                    ]
                }
            },
            "CalibratedClassifierCV_153": {
                "variable": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "base_estimator": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LogisticRegression(random_state=0, solver='lbfgs', multi_class='multinomial', C=C)",
                            "Call"
                        ],
                        [
                            "SVC(C=C, kernel='precomputed')",
                            "Call"
                        ],
                        [
                            "LinearSVC(C=C)",
                            "Call"
                        ],
                        [
                            "CalibratedClassifierCV(clf)",
                            "Call"
                        ],
                        [
                            "LogisticRegression(random_state=0, solver='lbfgs', C=C)",
                            "Call"
                        ],
                        [
                            "Ridge(alpha=alpha)",
                            "Call"
                        ],
                        [
                            "Ridge(alpha=alpha)",
                            "Call"
                        ],
                        [
                            "Ridge(alpha=alpha)",
                            "Call"
                        ]
                    ]
                }
            },
            "RBFSampler_171": {
                "variable": {
                    "value": "rbf_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "n_components": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogisticRegression_174": {
                "variable": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "solver": {
                    "value": "lbfgs",
                    "type": "str",
                    "possible_values": []
                },
                "C": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.exp(log_C)",
                            "Call"
                        ],
                        [
                            "np.exp(log_C)",
                            "Call"
                        ],
                        [
                            "np.exp(log_C)",
                            "Call"
                        ],
                        [
                            "np.exp(log_C)",
                            "Call"
                        ]
                    ]
                }
            },
            "RBFSampler_190": {
                "variable": {
                    "value": "rbf_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "n_components": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Ridge_193": {
                "variable": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "alpha": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.exp(log_alpha)",
                            "Call"
                        ],
                        [
                            "5e-07",
                            "Constant"
                        ],
                        [
                            "np.exp(log_alpha)",
                            "Call"
                        ]
                    ]
                }
            },
            "RBFSampler_203": {
                "variable": {
                    "value": "rbf_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "gamma": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.exp(log_gamma)",
                            "Call"
                        ],
                        [
                            "np.exp(log_gamma)",
                            "Call"
                        ],
                        [
                            "np.exp(log_gamma)",
                            "Call"
                        ],
                        [
                            "np.exp(log_gamma)",
                            "Call"
                        ]
                    ]
                },
                "n_components": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Ridge_206": {
                "variable": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "alpha": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.exp(log_alpha)",
                            "Call"
                        ],
                        [
                            "5e-07",
                            "Constant"
                        ],
                        [
                            "np.exp(log_alpha)",
                            "Call"
                        ]
                    ]
                }
            },
            "RBFSampler_216": {
                "variable": {
                    "value": "rbf_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "gamma": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.exp(log_gamma)",
                            "Call"
                        ],
                        [
                            "np.exp(log_gamma)",
                            "Call"
                        ],
                        [
                            "np.exp(log_gamma)",
                            "Call"
                        ],
                        [
                            "np.exp(log_gamma)",
                            "Call"
                        ]
                    ]
                },
                "n_components": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Ridge_219": {
                "variable": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "alpha": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.exp(log_alpha)",
                            "Call"
                        ],
                        [
                            "5e-07",
                            "Constant"
                        ],
                        [
                            "np.exp(log_alpha)",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomForestClassifier_231": {
                "variable": {
                    "value": "forest",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "int(n_trees)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "int(depth)",
                    "type": "Call",
                    "possible_values": []
                },
                "min_samples_split": {
                    "value": "min_samples_split",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(0.01, 1.0)",
                            "Tuple"
                        ]
                    ]
                },
                "min_samples_leaf": {
                    "value": "min_samples_leaf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(0.01, 0.5)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "roc_auc_score_121": {
                "y_true": {
                    "value": "data.test_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_score": {
                    "value": "te_predict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "clf.predict_proba(trans_test_x)",
                            "Call"
                        ],
                        [
                            "clf.predict_proba(trans_test_x)",
                            "Call"
                        ],
                        [
                            "np.array(forest.predict_proba(data.test_x)[:, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_177": {
                "y_true": {
                    "value": "data.test_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_score": {
                    "value": "te_predict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "clf.predict_proba(trans_test_x)",
                            "Call"
                        ],
                        [
                            "clf.predict_proba(trans_test_x)",
                            "Call"
                        ],
                        [
                            "np.array(forest.predict_proba(data.test_x)[:, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_237": {
                "y_true": {
                    "value": "data.test_y[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_score": {
                    "value": "te_predict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "clf.predict_proba(trans_test_x)",
                            "Call"
                        ],
                        [
                            "clf.predict_proba(trans_test_x)",
                            "Call"
                        ],
                        [
                            "np.array(forest.predict_proba(data.test_x)[:, 1])",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {}
    },
    "distBO/train/RandomFourierMaternFeatureMapper.py": {
        "sklearn": {
            "check_random_state_45": {
                "variable": {
                    "value": "self.rs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Matern_73": {
                "variable": {
                    "value": "kernel_class",
                    "type": "Variable",
                    "possible_values": []
                },
                "length_scale": {
                    "value": "self.stddev",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nu": {
                    "value": "nu",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.5",
                            "MethodArgument"
                        ],
                        [
                            "1.5",
                            "MethodArgument"
                        ],
                        [
                            "1.5",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "constant_59": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2.0 * pi * uniform.rvs(size=self.n_rff, random_state=self.rs)",
                            "BinOp"
                        ],
                        [
                            "tf.constant(bias, dtype=dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "constant_60": {
                "variable": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.transpose(self.sample(nu))",
                            "Call"
                        ],
                        [
                            "tf.constant(samples, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.divide(samples, self.stddev)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "divide_61": {
                "variable": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.transpose(self.sample(nu))",
                            "Call"
                        ],
                        [
                            "tf.constant(samples, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.divide(samples, self.stddev)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.stddev",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_62": {
                "variable": {
                    "value": "phi",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(inputs, samples) + bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_62": {
                "a": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.divide(inputs, self.stddev)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.transpose(self.sample(nu))",
                            "Call"
                        ],
                        [
                            "tf.constant(samples, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.divide(samples, self.stddev)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "distBO/train/gp_regressor.py": {
        "sklearn": {
            "StandardScaler_60": {
                "variable": {
                    "value": "self.params_scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "reset_default_graph_202": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "distBO/train/gp_utils.py": {
        "sklearn": {
            "LabelBinarizer_34": {
                "variable": {
                    "value": "lb",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "train_test_split_88": {
                "variable": {
                    "value": "(_, sampX, _, sampY)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "dataX",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "dataY",
                    "type": "Variable",
                    "possible_values": []
                },
                "stratify": {
                    "value": "binarize_labels(dataY)",
                    "type": "Call",
                    "possible_values": []
                },
                "test_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "rs",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "cast_107": {
                "variable": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(size, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_108": {
                "variable": {
                    "value": "tile_embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "multiples": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(size, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "tile",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_109": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tile_embed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.tile(embed, size, name='tile')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.squeeze(size), tf.shape(embed)[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "while_loop_115": {
                "variable": {
                    "value": "(i, repeat_arr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "condition",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda i, x: tf.less(i, n_embed)",
                            "Lambda"
                        ]
                    ]
                },
                "body": {
                    "value": "body",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda i, x: (i + 1, tf.concat([x, repeater(object_repeat[i], sizes[i])], 0))",
                            "Lambda"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "(tf.constant(1), start_arr)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cast_143": {
                "variable": {
                    "value": "num_dims",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(d)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "L.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "check_numerics_150": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.check_numerics(A, 'A')",
                            "Call"
                        ],
                        [
                            "(A + tf.transpose(A)) / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "message": {
                    "value": "A",
                    "type": "str",
                    "possible_values": []
                }
            },
            "where_153": {
                "variable": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "e > 1e-06",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(e > 1e-06, e, 1e-06 * tf.ones_like(e))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1e-06 * tf.ones_like(e)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_154": {
                "a": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.matrix_diag(e)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "glorot_normal_17": {
                "variable": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "23",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Variable_18": {
                "variable": {
                    "value": "params[weights_{}_1.format(name)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "cst(initializer([in_dim, weight_dim[0]]))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Variable_19": {
                "variable": {
                    "value": "params[bias_{}_1.format(name)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant([0] * weight_dim[0], dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Variable_20": {
                "variable": {
                    "value": "params[weights_{}_2.format(name)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "cst(initializer([weight_dim[0], weight_dim[1]]))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_146": {
                "input_tensor": {
                    "value": "tf.log(tf.matrix_diag_part(L))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_22": {
                "variable": {
                    "value": "params[bias_{}_2.format(name)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant([0] * weight_dim[1], dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "bias_2",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Variable_24": {
                "variable": {
                    "value": "params[weights_{}_3.format(name)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "cst(initializer([weight_dim[1], weight_dim[2]]))",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "weights_2",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "less_113": {
                "x": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "range(0, n_datasets)",
                            "Call"
                        ],
                        [
                            "range(0, n_datasets)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "n_embed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_sum_144": {
                "input_tensor": {
                    "value": "tf.square(alpha)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_146": {
                "x": {
                    "value": "tf.matrix_diag_part(L)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_154": {
                "a": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "constant_19": {
                "value": {
                    "value": "[0] * weight_dim[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "squeeze_109": {
                "input": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(size, tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_114": {
                "values": {
                    "value": "[x, repeater(object_repeat[i], sizes[i])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_115": {
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_143": {
                "input": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x - mu",
                            "BinOp"
                        ]
                    ]
                }
            },
            "square_144": {
                "x": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matrix_triangular_solve(L, d, lower=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_151": {
                "a": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.check_numerics(A, 'A')",
                            "Call"
                        ],
                        [
                            "(A + tf.transpose(A)) / 2.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_like_153": {
                "input": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(e > 1e-06, e, 1e-06 * tf.ones_like(e))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_22": {
                "value": {
                    "value": "[0] * weight_dim[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_109": {
                "input": {
                    "value": "embed",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "distBO/train/train.py": {
        "sklearn": {
            "check_random_state_24": {
                "variable": {
                    "value": "rs",
                    "type": "Variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "23",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "get_collection_19": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_30": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_34": {
                "variable": {
                    "value": "(gradients, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "global_variables_initializer_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "distBO/utils.py": {
        "sklearn": {
            "check_random_state_128": {
                "variable": {
                    "value": "rs",
                    "type": "Variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "23",
                            "MethodArgument"
                        ],
                        [
                            "23",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "euclidean_distances_155": {
                "variable": {
                    "value": "D2",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "sub",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "all_Xs[np.random.choice(N, min(n_sub, N), replace=False)]",
                            "Subscript"
                        ]
                    ]
                },
                "squared": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "ConfigProto_82": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "intra_op_parallelism_threads": {
                    "value": "n_cpus",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "inter_op_parallelism_threads": {
                    "value": "n_cpus",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Session_84": {
                "config": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(intra_op_parallelism_threads=n_cpus, inter_op_parallelism_threads=n_cpus, **config_args)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/train_test.py": {
        "sklearn": {
            "check_random_state_181": {
                "variable": {
                    "value": "opt_rs",
                    "type": "Variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "args.opt_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "check_random_state_270": {
                "variable": {
                    "value": "bo_config[rs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "seed": {
                    "value": "args.opt_seed + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "distBO/train/base.py": {
        "tensorflow": {
            "SparseTensor_10": {
                "variable": {
                    "value": "sum_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "*sum_matrix_input",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "placeholder_64": {
                "variable": {
                    "value": "self.inputs[X]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[None, in_dim_x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_65": {
                "variable": {
                    "value": "self.inputs[X_pred]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[None, in_dim_x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_66": {
                "variable": {
                    "value": "self.inputs[y]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[None, in_dim_y]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_67": {
                "variable": {
                    "value": "self.inputs[y_pred]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[None, in_dim_y]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_68": {
                "variable": {
                    "value": "self.inputs[sizes]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_69": {
                "variable": {
                    "value": "self.inputs[sizes_pred]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_70": {
                "variable": {
                    "value": "self.inputs[embed_sizes]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_71": {
                "variable": {
                    "value": "self.inputs[embed_sizes_pred]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_74": {
                "variable": {
                    "value": "self.inputs[data_sizes]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_75": {
                "variable": {
                    "value": "self.inputs[data_sizes_pred]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_76": {
                "variable": {
                    "value": "self.inputs[dist]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_77": {
                "variable": {
                    "value": "self.inputs[dist_pred]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_19": {
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_20": {
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_21": {
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_59": {
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[None, in_dim_params]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_60": {
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_61": {
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[None, in_dim_params]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_79": {
                "variable": {
                    "value": "self.inputs[max_size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "placeholder_81": {
                "variable": {
                    "value": "self.inputs[sizes]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_82": {
                "variable": {
                    "value": "self.inputs[sizes_pred]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_84": {
                "variable": {
                    "value": "self.inputs[sizes]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_85": {
                "variable": {
                    "value": "self.inputs[sizes_pred]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_86": {
                "variable": {
                    "value": "self.inputs[embed]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[None, in_dim_meta]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_87": {
                "variable": {
                    "value": "self.inputs[embed_pred]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[None, in_dim_meta]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "distBO/train/distbo_net.py": {
        "tensorflow": {
            "tanh_9": {
                "variable": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(input_array, params['weights_{}_1'.format(name)]) + params['bias_{}_1'.format(name)]",
                            "BinOp"
                        ],
                        [
                            "tf.nn.tanh(hidden)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_10": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(input_array, params['weights_{}_1'.format(name)]) + params['bias_{}_1'.format(name)]",
                            "BinOp"
                        ],
                        [
                            "tf.nn.tanh(hidden)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "params['weights_{}_2'.format(name)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tanh_12": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output + params['bias_{}_2'.format(name)]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_13": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(hidden, params['weights_{}_2'.format(name)])",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(output + params['bias_{}_2'.format(name)])",
                            "Call"
                        ],
                        [
                            "tf.matmul(output, params['weights_{}_3'.format(name)])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "params['weights_{}_3'.format(name)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "concat_19": {
                "variable": {
                    "value": "xy",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_36": {
                "variable": {
                    "value": "feature_x_expand",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_37": {
                "variable": {
                    "value": "feature_y_expand",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nn_net(params, y, 'y', dtype=dtype)",
                            "Call"
                        ],
                        [
                            "y",
                            "Name"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_40": {
                "variable": {
                    "value": "outer_product",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bil,blj->bij",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "feature_x_expand",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(feature_x, 2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(feature_x, 2)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "feature_y_expand",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(feature_y, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(feature_y, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_42": {
                "variable": {
                    "value": "feature_xy",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outer_product",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.einsum('bil,blj->bij', feature_x_expand, feature_y_expand)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n_datapoints, dim_all]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_50": {
                "variable": {
                    "value": "c_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.constant([0], tf.int32), tf.cumsum(tf.cast(tf.reshape(embed_sizes, [-1]), tf.int32))]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "map_fn_83": {
                "variable": {
                    "value": "marginal_embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda k: marg_embed_func(k)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "tf.range(tf.cast(n_datasets, dtype=tf.int32))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "map_fn_86": {
                "variable": {
                    "value": "cond_embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda k: cond_embed_func(k)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "tf.range(tf.cast(n_datasets, dtype=tf.int32))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_89": {
                "variable": {
                    "value": "pool_embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[marginal_embed, cond_embed]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_8": {
                "a": {
                    "value": "input_array",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "params['weights_{}_1'.format(name)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "concat_48": {
                "variable": {
                    "value": "pool_embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[pool_embed, class_ratio]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_58": {
                "variable": {
                    "value": "reg",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "params['log_reg']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "expand_dims_68": {
                "variable": {
                    "value": "feature_x_expand",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_69": {
                "variable": {
                    "value": "feature_y_expand",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nn_net(params, y, 'y', dtype=dtype)",
                            "Call"
                        ],
                        [
                            "y",
                            "Name"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_71": {
                "variable": {
                    "value": "fea_y_t_fea_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.transpose(fea_task_y)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "fea_task_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "feature_x[c_size[k]:c_size[k + 1]]",
                            "Subscript"
                        ],
                        [
                            "feature_x[c_size[k]:c_size[k + 1]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "matmul_72": {
                "variable": {
                    "value": "fea_x_t_fea_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.transpose(fea_task_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "fea_task_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "feature_x[c_size[k]:c_size[k + 1]]",
                            "Subscript"
                        ],
                        [
                            "feature_x[c_size[k]:c_size[k + 1]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "inv_73": {
                "variable": {
                    "value": "inv_term",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fea_x_t_fea_x + reg * tf.eye(feature_x_dim, dtype=dtype)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_33": {
                "input": {
                    "value": "feature_x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_34": {
                "input": {
                    "value": "feature_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nn_net(params, y, 'y', dtype=dtype)",
                            "Call"
                        ],
                        [
                            "y",
                            "Name"
                        ]
                    ]
                }
            },
            "shape_41": {
                "input": {
                    "value": "outer_product",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.einsum('bil,blj->bij', feature_x_expand, feature_y_expand)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_53": {
                "input": {
                    "value": "feature_x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_54": {
                "input": {
                    "value": "feature_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nn_net(params, y, 'y', dtype=dtype)",
                            "Call"
                        ],
                        [
                            "y",
                            "Name"
                        ]
                    ]
                }
            },
            "reshape_76": {
                "tensor": {
                    "value": "cond_embed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.map_fn(fn=lambda k: cond_embed_func(k), elems=tf.range(tf.cast(n_datasets, dtype=tf.int32)), dtype=dtype)",
                            "Call"
                        ],
                        [
                            "lambda_inv * (fea_y_t_fea_x - tf.matmul(fea_y_t_fea_x, tf.matmul(inv_term, fea_x_t_fea_x)))",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[dim_all]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_80": {
                "tensor": {
                    "value": "tf.reduce_mean(fea_task_x, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[feature_x_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_82": {
                "input": {
                    "value": "embed_sizes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "constant_50": {
                "value": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cumsum_51": {
                "x": {
                    "value": "tf.cast(tf.reshape(embed_sizes, [-1]), tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_71": {
                "a": {
                    "value": "fea_task_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "feature_y[c_size[k]:c_size[k + 1]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "transpose_72": {
                "a": {
                    "value": "fea_task_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "feature_x[c_size[k]:c_size[k + 1]]",
                            "Subscript"
                        ],
                        [
                            "feature_x[c_size[k]:c_size[k + 1]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_mean_80": {
                "input_tensor": {
                    "value": "fea_task_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "feature_x[c_size[k]:c_size[k + 1]]",
                            "Subscript"
                        ],
                        [
                            "feature_x[c_size[k]:c_size[k + 1]]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_51": {
                "x": {
                    "value": "tf.reshape(embed_sizes, [-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_75": {
                "a": {
                    "value": "inv_term",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.linalg.inv(fea_x_t_fea_x + reg * tf.eye(feature_x_dim, dtype=dtype))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "fea_x_t_fea_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.transpose(fea_task_x), fea_task_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_84": {
                "x": {
                    "value": "n_datasets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(embed_sizes)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_87": {
                "x": {
                    "value": "n_datasets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(embed_sizes)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_51": {
                "tensor": {
                    "value": "embed_sizes",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "eye_73": {
                "num_rows": {
                    "value": "feature_x_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(feature_x)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(feature_x)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "distBO/train/feature_map.py": {
        "tensorflow": {
            "while_loop_34": {
                "variable": {
                    "value": "(i, embed)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "condition",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda i, x: tf.less(i, n_data)",
                            "Lambda"
                        ],
                        [
                            "lambda i, x: tf.less(i, n_task)",
                            "Lambda"
                        ]
                    ]
                },
                "body": {
                    "value": "body",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda i, x: (i + 1, tf.concat([x, repeater(embed[i], sizes[i])], 0))",
                            "Lambda"
                        ],
                        [
                            "lambda i, x: (i + 1, tf.concat([x, repeater(task_mat[i], sizes[i])], 0))",
                            "Lambda"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "(tf.constant(1), start_arr)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "eye_38": {
                "variable": {
                    "value": "task_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_rows": {
                    "value": "n_task",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tanh_14": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(feature, params['weights__1']) + params['bias__1']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_15": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.tanh(tf.matmul(feature, params['weights__1']) + params['bias__1'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(feature, params['weights__2'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.nn.tanh(feature + params['bias__2']), params['weights__3'])",
                            "Call"
                        ],
                        [
                            "tf.divide(feature, tf.exp(params['log_bw']))",
                            "Call"
                        ],
                        [
                            "tf.cast(feature, tf.float32)",
                            "Call"
                        ],
                        [
                            "rff_mapper.map(feature)",
                            "Call"
                        ],
                        [
                            "tf.cast(feature, dtype)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "params['weights__2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "divide_20": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.tanh(tf.matmul(feature, params['weights__1']) + params['bias__1'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(feature, params['weights__2'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.nn.tanh(feature + params['bias__2']), params['weights__3'])",
                            "Call"
                        ],
                        [
                            "tf.divide(feature, tf.exp(params['log_bw']))",
                            "Call"
                        ],
                        [
                            "tf.cast(feature, tf.float32)",
                            "Call"
                        ],
                        [
                            "rff_mapper.map(feature)",
                            "Call"
                        ],
                        [
                            "tf.cast(feature, dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.exp(params['log_bw'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_21": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.tanh(tf.matmul(feature, params['weights__1']) + params['bias__1'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(feature, params['weights__2'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.nn.tanh(feature + params['bias__2']), params['weights__3'])",
                            "Call"
                        ],
                        [
                            "tf.divide(feature, tf.exp(params['log_bw']))",
                            "Call"
                        ],
                        [
                            "tf.cast(feature, tf.float32)",
                            "Call"
                        ],
                        [
                            "rff_mapper.map(feature)",
                            "Call"
                        ],
                        [
                            "tf.cast(feature, dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_26": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.tanh(tf.matmul(feature, params['weights__1']) + params['bias__1'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(feature, params['weights__2'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.nn.tanh(feature + params['bias__2']), params['weights__3'])",
                            "Call"
                        ],
                        [
                            "tf.divide(feature, tf.exp(params['log_bw']))",
                            "Call"
                        ],
                        [
                            "tf.cast(feature, tf.float32)",
                            "Call"
                        ],
                        [
                            "rff_mapper.map(feature)",
                            "Call"
                        ],
                        [
                            "tf.cast(feature, dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "while_loop_45": {
                "variable": {
                    "value": "(i, embed)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "condition",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda i, x: tf.less(i, n_data)",
                            "Lambda"
                        ],
                        [
                            "lambda i, x: tf.less(i, n_task)",
                            "Lambda"
                        ]
                    ]
                },
                "body": {
                    "value": "body",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda i, x: (i + 1, tf.concat([x, repeater(embed[i], sizes[i])], 0))",
                            "Lambda"
                        ],
                        [
                            "lambda i, x: (i + 1, tf.concat([x, repeater(task_mat[i], sizes[i])], 0))",
                            "Lambda"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "(tf.constant(1), start_arr)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "divide_59": {
                "variable": {
                    "value": "data_ratio",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "data_sizes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "max_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_63": {
                "variable": {
                    "value": "embed_arr",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[embed_arr, data_ratio_arr]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_18": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.nn.tanh(feature + params['bias__2'])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "params['weights__3']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_30": {
                "input": {
                    "value": "sizes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "less_32": {
                "x": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "n_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(sizes)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_56": {
                "input": {
                    "value": "sizes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_20": {
                "x": {
                    "value": "params['log_bw']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "concat_33": {
                "values": {
                    "value": "[x, repeater(embed[i], sizes[i])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_34": {
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "less_43": {
                "x": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "n_task",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_14": {
                "a": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.tanh(tf.matmul(feature, params['weights__1']) + params['bias__1'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(feature, params['weights__2'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.nn.tanh(feature + params['bias__2']), params['weights__3'])",
                            "Call"
                        ],
                        [
                            "tf.divide(feature, tf.exp(params['log_bw']))",
                            "Call"
                        ],
                        [
                            "tf.cast(feature, tf.float32)",
                            "Call"
                        ],
                        [
                            "rff_mapper.map(feature)",
                            "Call"
                        ],
                        [
                            "tf.cast(feature, dtype)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "params['weights__1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tanh_18": {
                "x": {
                    "value": "feature + params['bias__2']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_44": {
                "values": {
                    "value": "[x, repeater(task_mat[i], sizes[i])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_45": {
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "distBO/train/kernels.py": {
        "tensorflow": {
            "divide_12": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.divide(X, stddev)",
                            "Call"
                        ],
                        [
                            "tf.divide(X, stddev)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "stddev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "divide_13": {
                "variable": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.divide(Y, stddev)",
                            "Call"
                        ],
                        [
                            "tf.divide(Y, stddev)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "stddev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "expand_dims_14": {
                "variable": {
                    "value": "X_sqnorms_row",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reduce_sum(tf.square(X), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_15": {
                "variable": {
                    "value": "Y_sqnorms_col",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reduce_sum(tf.square(Y), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_16": {
                "variable": {
                    "value": "XY",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.divide(X, stddev)",
                            "Call"
                        ],
                        [
                            "tf.divide(X, stddev)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.divide(Y, stddev)",
                            "Call"
                        ],
                        [
                            "tf.divide(Y, stddev)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "divide_20": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.divide(X, stddev)",
                            "Call"
                        ],
                        [
                            "tf.divide(X, stddev)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "stddev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "divide_21": {
                "variable": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.divide(Y, stddev)",
                            "Call"
                        ],
                        [
                            "tf.divide(Y, stddev)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "stddev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "expand_dims_22": {
                "variable": {
                    "value": "X_sqnorms_row",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reduce_sum(tf.square(X), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_23": {
                "variable": {
                    "value": "Y_sqnorms_col",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reduce_sum(tf.square(Y), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_24": {
                "variable": {
                    "value": "XY",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.divide(X, stddev)",
                            "Call"
                        ],
                        [
                            "tf.divide(X, stddev)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.divide(Y, stddev)",
                            "Call"
                        ],
                        [
                            "tf.divide(Y, stddev)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_25": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(-2 * XY + X_sqnorms_row + Y_sqnorms_col, 1e-32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_27": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0 + value",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.exp(-value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_35": {
                "variable": {
                    "value": "task_kernel_single",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "task_triangular",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(task_triangular)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_37": {
                "variable": {
                    "value": "diag_sqrt",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.diag_part(task_kernel_single)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "while_loop_44": {
                "variable": {
                    "value": "(i, task_kernel_vert)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "condition",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda i, x: tf.less(i, n_data_1)",
                            "Lambda"
                        ],
                        [
                            "lambda i, x: tf.less(i, n_data_1)",
                            "Lambda"
                        ]
                    ]
                },
                "body": {
                    "value": "body",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda i, x: (i + 1, tf.concat([x, repeater(task_kernel_single[i], sizes_1[i])], 0))",
                            "Lambda"
                        ],
                        [
                            "lambda i, x: (i + 1, tf.concat([x, repeater(task_kernel_vert[i], sizes_1[i])], 0))",
                            "Lambda"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "(tf.constant(1), start_task_kernel_vert)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_45": {
                "variable": {
                    "value": "task_kernel_vert",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "task_kernel_vert",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(task_kernel_vert)",
                            "Call"
                        ]
                    ]
                }
            },
            "while_loop_54": {
                "variable": {
                    "value": "(i, t_kernel)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "condition",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda i, x: tf.less(i, n_data_1)",
                            "Lambda"
                        ],
                        [
                            "lambda i, x: tf.less(i, n_data_1)",
                            "Lambda"
                        ]
                    ]
                },
                "body": {
                    "value": "body",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda i, x: (i + 1, tf.concat([x, repeater(task_kernel_single[i], sizes_1[i])], 0))",
                            "Lambda"
                        ],
                        [
                            "lambda i, x: (i + 1, tf.concat([x, repeater(task_kernel_vert[i], sizes_1[i])], 0))",
                            "Lambda"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "(tf.constant(1), start_task_kernel_horz)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_55": {
                "a": {
                    "value": "t_kernel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "repeater(task_kernel_vert[-1], sizes_2[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_14": {
                "input_tensor": {
                    "value": "tf.square(X)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_15": {
                "input_tensor": {
                    "value": "tf.square(Y)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_17": {
                "x": {
                    "value": "-0.5 * (-2 * XY + X_sqnorms_row + Y_sqnorms_col)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_22": {
                "input_tensor": {
                    "value": "tf.square(X)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_23": {
                "input_tensor": {
                    "value": "tf.square(Y)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_25": {
                "x": {
                    "value": "-2 * XY + X_sqnorms_row + Y_sqnorms_col",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "1e-32",
                    "type": "float",
                    "possible_values": []
                }
            },
            "exp_27": {
                "x": {
                    "value": "-value",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_33": {
                "input": {
                    "value": "sizes_1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "transpose_35": {
                "a": {
                    "value": "task_triangular",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "diag_part_37": {
                "input": {
                    "value": "task_kernel_single",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(task_triangular, tf.transpose(task_triangular))",
                            "Call"
                        ],
                        [
                            "task_kernel_single / tf.expand_dims(diag_sqrt, axis=1)",
                            "BinOp"
                        ],
                        [
                            "task_kernel_single / tf.expand_dims(diag_sqrt, axis=0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "expand_dims_38": {
                "input": {
                    "value": "diag_sqrt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.diag_part(task_kernel_single))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_39": {
                "input": {
                    "value": "diag_sqrt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.diag_part(task_kernel_single))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "less_42": {
                "x": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "n_data_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(sizes_1)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "square_14": {
                "x": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.divide(X, stddev)",
                            "Call"
                        ],
                        [
                            "tf.divide(X, stddev)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_15": {
                "x": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.divide(Y, stddev)",
                            "Call"
                        ],
                        [
                            "tf.divide(Y, stddev)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_22": {
                "x": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.divide(X, stddev)",
                            "Call"
                        ],
                        [
                            "tf.divide(X, stddev)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_23": {
                "x": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.divide(Y, stddev)",
                            "Call"
                        ],
                        [
                            "tf.divide(Y, stddev)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_43": {
                "values": {
                    "value": "[x, repeater(task_kernel_single[i], sizes_1[i])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_44": {
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "less_52": {
                "x": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "n_data_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(sizes_1)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "exp_65": {
                "x": {
                    "value": "params['log_bw_embed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_87": {
                "x": {
                    "value": "params['log_bw_embed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "concat_53": {
                "values": {
                    "value": "[x, repeater(task_kernel_vert[i], sizes_1[i])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_54": {
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "distBO/train/log_gaus_likelihood.py": {
        "tensorflow": {
            "Variable_79": {
                "variable": {
                    "value": "params[log_bw]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.log(tf.constant(bw_ard_init, dtype=dtype))",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "log_bw",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_82": {
                "variable": {
                    "value": "params[log_scale]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant([0], dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "log_scale",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_83": {
                "variable": {
                    "value": "params[mean]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant([0], dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_84": {
                "variable": {
                    "value": "params[log_sigma]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(log_sigma_init, dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "log_sigma",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_86": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "params['log_scale']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_87": {
                "variable": {
                    "value": "stddev",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "params['log_bw']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_88": {
                "variable": {
                    "value": "sigma_sq",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "2.0 * params['log_sigma']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cholesky_123": {
                "variable": {
                    "value": "net.L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "k_sigma_sq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "k + (sigma_sq + 1e-06) * tf.eye(n_datapoints, dtype=net.dtype)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "expand_dims_124": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "params['mean'] * tf.ones(n_datapoints, dtype=dtype)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_141": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "params['log_scale']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tile_187": {
                "variable": {
                    "value": "net.pred_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(fvar, (-1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, tf.shape(inputs['obs'])[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_194": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "params['log_scale']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_195": {
                "variable": {
                    "value": "stddev",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "params['log_bw']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_196": {
                "variable": {
                    "value": "sigma_sq",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "2.0 * params['log_sigma']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cholesky_211": {
                "variable": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k_sigma_sq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "k + (sigma_sq + 1e-06) * tf.eye(n_datapoints, dtype=net.dtype)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tile_217": {
                "variable": {
                    "value": "net.pred_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(fvar, (-1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, tf.shape(inputs['obs'])[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_61": {
                "variable": {
                    "value": "params[log_bw_embed]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.log(tf.constant([1.0] * num_bw, dtype=dtype))",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "log_bw_embed",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_71": {
                "variable": {
                    "value": "params[log_triangular_task]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(np.random.normal(size=n_tasks * (n_tasks + 1) // 2), dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "log_triangular_task",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_65": {
                "variable": {
                    "value": "params[log_bw_embed]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.log(tf.constant([1.0] * in_dim_meta, dtype=dtype))",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "log_bw_embed",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_79": {
                "x": {
                    "value": "tf.constant(bw_ard_init, dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_82": {
                "value": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_83": {
                "value": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_84": {
                "value": {
                    "value": "log_sigma_init",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "log(0.001)",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_89": {
                "input": {
                    "value": "inputs['h_params']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_125": {
                "input": {
                    "value": "multivariate_normal(inputs['obs'], mean, L)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_185": {
                "a": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matrix_triangular_solve(net.L, k_pred, lower=True)",
                            "Call"
                        ],
                        [
                            "tf.matrix_triangular_solve(L, k_pred, lower=True)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "V",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matrix_triangular_solve(net.L, inputs['obs'] - params['mean'])",
                            "Call"
                        ],
                        [
                            "tf.matrix_triangular_solve(L, inputs['obs'] - params['mean'])",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_185": {
                "input": {
                    "value": "params['mean']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_186": {
                "input_tensor": {
                    "value": "tf.square(A)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_187": {
                "tensor": {
                    "value": "fvar",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "k_diag - tf.reduce_sum(tf.square(A), 0)",
                            "BinOp"
                        ],
                        [
                            "k_diag - tf.reduce_sum(tf.square(A), 0)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "shape_197": {
                "input": {
                    "value": "inputs['h_params']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_215": {
                "a": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matrix_triangular_solve(net.L, k_pred, lower=True)",
                            "Call"
                        ],
                        [
                            "tf.matrix_triangular_solve(L, k_pred, lower=True)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "V",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matrix_triangular_solve(net.L, inputs['obs'] - params['mean'])",
                            "Call"
                        ],
                        [
                            "tf.matrix_triangular_solve(L, inputs['obs'] - params['mean'])",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_215": {
                "input": {
                    "value": "params['mean']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_216": {
                "input_tensor": {
                    "value": "tf.square(A)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_217": {
                "tensor": {
                    "value": "fvar",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "k_diag - tf.reduce_sum(tf.square(A), 0)",
                            "BinOp"
                        ],
                        [
                            "k_diag - tf.reduce_sum(tf.square(A), 0)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "log_61": {
                "x": {
                    "value": "tf.constant([1.0] * num_bw, dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_71": {
                "value": {
                    "value": "np.random.normal(size=n_tasks * (n_tasks + 1) // 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "exp_75": {
                "x": {
                    "value": "params['log_triangular_task']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_79": {
                "value": {
                    "value": "bw_ard_init",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[bw_params_init for _ in range(in_dim_params)]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "eye_122": {
                "num_rows": {
                    "value": "n_datapoints",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(inputs['h_params'])[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(inputs['h_params'])[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_124": {
                "shape": {
                    "value": "n_datapoints",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(inputs['h_params'])[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(inputs['h_params'])[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "exp_179": {
                "x": {
                    "value": "params['log_bw']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "square_186": {
                "x": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matrix_triangular_solve(net.L, k_pred, lower=True)",
                            "Call"
                        ],
                        [
                            "tf.matrix_triangular_solve(L, k_pred, lower=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_210": {
                "num_rows": {
                    "value": "n_datapoints",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(inputs['h_params'])[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(inputs['h_params'])[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "net.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_216": {
                "x": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matrix_triangular_solve(net.L, k_pred, lower=True)",
                            "Call"
                        ],
                        [
                            "tf.matrix_triangular_solve(L, k_pred, lower=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_61": {
                "value": {
                    "value": "[1.0] * num_bw",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_65": {
                "x": {
                    "value": "tf.constant([1.0] * in_dim_meta, dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_187": {
                "input": {
                    "value": "inputs['obs']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_217": {
                "input": {
                    "value": "inputs['obs']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_47": {
                "variable": {
                    "value": "params[log_reg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.log(tf.constant(1.0, dtype=dtype))",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "log_reg",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_65": {
                "value": {
                    "value": "[1.0] * in_dim_meta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_47": {
                "x": {
                    "value": "tf.constant(1.0, dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_47": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "distBO/train/log_gaus_likelihood_feature.py": {
        "tensorflow": {
            "Variable_78": {
                "variable": {
                    "value": "params[log_sigma]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(log_sigma_init, dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "log_sigma",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_79": {
                "variable": {
                    "value": "params[log_bw]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant([0] * rff_input_dim, dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "log_bw",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_80": {
                "variable": {
                    "value": "params[log_alpha]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0, dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "log_alpha",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_82": {
                "variable": {
                    "value": "sigma_sq",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "2.0 * params['log_sigma']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_83": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "params['log_alpha']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "square_127": {
                "variable": {
                    "value": "term_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.norm(y, ord=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_130": {
                "variable": {
                    "value": "phi_t_phi",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.transpose(nn_fea)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "nn_fea",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cholesky_133": {
                "variable": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inside_term",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0 * tf.eye(nn_fea_dim, dtype=dtype) + alpha * sigma_sq_inv * phi_t_phi",
                            "BinOp"
                        ],
                        [
                            "tf.eye(nn_fea_dim, dtype=net.dtype) + alpha * sigma_sq_inv * phi_t_phi",
                            "BinOp"
                        ]
                    ]
                }
            },
            "inv_134": {
                "variable": {
                    "value": "net.L_inv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cholesky(inside_term)",
                            "Call"
                        ],
                        [
                            "tf.cholesky(inside_term)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_135": {
                "variable": {
                    "value": "phi_t_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.transpose(nn_fea)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs['obs']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "matmul_136": {
                "variable": {
                    "value": "net.e_term",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "L_inv",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "phi_t_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.transpose(nn_fea), y)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.transpose(nn_fea), inputs['obs'])",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_158": {
                "variable": {
                    "value": "sigma_sq",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "2.0 * params['log_sigma']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_159": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "params['log_alpha']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_192": {
                "variable": {
                    "value": "L_inv_fea_pred_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "net.L_inv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(nn_fea_pred)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_201": {
                "variable": {
                    "value": "sigma_sq",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "2.0 * params['log_sigma']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_202": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "params['log_alpha']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "concat_204": {
                "variable": {
                    "value": "net.feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs['dist'], inputs['h_params']]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_205": {
                "variable": {
                    "value": "net.feature_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs['dist_pred'], inputs['h_params_pred']]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_213": {
                "variable": {
                    "value": "phi_t_phi",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.transpose(nn_fea)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "nn_fea",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cholesky_216": {
                "variable": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inside_term",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0 * tf.eye(nn_fea_dim, dtype=dtype) + alpha * sigma_sq_inv * phi_t_phi",
                            "BinOp"
                        ],
                        [
                            "tf.eye(nn_fea_dim, dtype=net.dtype) + alpha * sigma_sq_inv * phi_t_phi",
                            "BinOp"
                        ]
                    ]
                }
            },
            "inv_217": {
                "variable": {
                    "value": "net.L_inv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cholesky(inside_term)",
                            "Call"
                        ],
                        [
                            "tf.cholesky(inside_term)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_218": {
                "variable": {
                    "value": "phi_t_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.transpose(nn_fea)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "inputs['obs']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_219": {
                "variable": {
                    "value": "net.e_term",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "L_inv",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "phi_t_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.transpose(nn_fea), y)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.transpose(nn_fea), inputs['obs'])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_221": {
                "variable": {
                    "value": "L_inv_fea_pred_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "L_inv",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(nn_fea_pred)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_98": {
                "variable": {
                    "value": "net.feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[dist_fea, inputs['h_params']]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_173": {
                "variable": {
                    "value": "net.feature_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[dist_fea_pred, inputs['h_params_pred']]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_78": {
                "value": {
                    "value": "log_sigma_init",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "log(0.001)",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_79": {
                "value": {
                    "value": "[0] * rff_input_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_80": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_84": {
                "input": {
                    "value": "inputs['h_params']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "concat_102": {
                "variable": {
                    "value": "net.feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[man_fea, inputs['h_params']]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_111": {
                "input": {
                    "value": "nn_fea",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "norm_127": {
                "tensor": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs['obs']",
                            "Subscript"
                        ]
                    ]
                },
                "ord": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_130": {
                "a": {
                    "value": "nn_fea",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "transpose_135": {
                "a": {
                    "value": "nn_fea",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "square_137": {
                "x": {
                    "value": "tf.norm(e_term, ord=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_140": {
                "x": {
                    "value": "sigma_sq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.exp(2.0 * params['log_sigma'])",
                            "Call"
                        ],
                        [
                            "tf.exp(2.0 * params['log_sigma'])",
                            "Call"
                        ],
                        [
                            "tf.exp(2.0 * params['log_sigma'])",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_140": {
                "x": {
                    "value": "n_datapoints",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(inputs['h_params'])[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_143": {
                "input_tensor": {
                    "value": "tf.log(tf.matrix_diag_part(L))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_179": {
                "variable": {
                    "value": "net.feature_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[man_fea_pred, inputs['h_params_pred']]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_192": {
                "a": {
                    "value": "nn_fea_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "transpose_193": {
                "a": {
                    "value": "net.e_term",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_195": {
                "input": {
                    "value": "tf.reduce_sum(tf.square(L_inv_fea_pred_t), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_213": {
                "a": {
                    "value": "nn_fea",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_214": {
                "input": {
                    "value": "nn_fea",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "eye_215": {
                "num_rows": {
                    "value": "nn_fea_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(nn_fea)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(nn_fea)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "net.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_218": {
                "a": {
                    "value": "nn_fea",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "transpose_221": {
                "a": {
                    "value": "nn_fea_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "transpose_222": {
                "a": {
                    "value": "net.e_term",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_224": {
                "input": {
                    "value": "tf.reduce_sum(tf.square(L_inv_fea_pred_t), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_105": {
                "variable": {
                    "value": "net.feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[task_fea, inputs['h_params']]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_132": {
                "num_rows": {
                    "value": "nn_fea_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(nn_fea)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(nn_fea)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "norm_137": {
                "tensor": {
                    "value": "e_term",
                    "type": "Variable",
                    "possible_values": []
                },
                "ord": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_143": {
                "x": {
                    "value": "tf.matrix_diag_part(L)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_183": {
                "variable": {
                    "value": "net.feature_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[task_fea_pred, inputs['h_params_pred']]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_193": {
                "a": {
                    "value": "tf.transpose(net.e_term)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "L_inv_fea_pred_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(net.L_inv, tf.transpose(nn_fea_pred))",
                            "Call"
                        ],
                        [
                            "tf.matmul(L_inv, tf.transpose(nn_fea_pred))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_195": {
                "input_tensor": {
                    "value": "tf.square(L_inv_fea_pred_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_222": {
                "a": {
                    "value": "tf.transpose(net.e_term)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "L_inv_fea_pred_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(net.L_inv, tf.transpose(nn_fea_pred))",
                            "Call"
                        ],
                        [
                            "tf.matmul(L_inv, tf.transpose(nn_fea_pred))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_224": {
                "input_tensor": {
                    "value": "tf.square(L_inv_fea_pred_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_195": {
                "x": {
                    "value": "L_inv_fea_pred_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(net.L_inv, tf.transpose(nn_fea_pred))",
                            "Call"
                        ],
                        [
                            "tf.matmul(L_inv, tf.transpose(nn_fea_pred))",
                            "Call"
                        ]
                    ]
                }
            },
            "square_224": {
                "x": {
                    "value": "L_inv_fea_pred_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(net.L_inv, tf.transpose(nn_fea_pred))",
                            "Call"
                        ],
                        [
                            "tf.matmul(L_inv, tf.transpose(nn_fea_pred))",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_45": {
                "variable": {
                    "value": "params[log_reg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.log(tf.constant(1.0, dtype=dtype))",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "log_reg",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_45": {
                "x": {
                    "value": "tf.constant(1.0, dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_45": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    }
}