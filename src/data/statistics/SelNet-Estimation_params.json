{
    "model/selnet.py": {
        "sklearn": {},
        "tensorflow": {
            "get_default_graph_43": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dense_140": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[None, self.original_x_dim], name=self.regressor_name + 'original_X')",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[None, self.original_x_dim], name=self.regressor_name + 'original_X')",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[None, self.original_x_dim], name=self.regressor_name + 'original_X')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.vae_hidden_units[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'vae_fc_e1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_142": {
                "variable": {
                    "value": "fc2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=x_input, units=self.vae_hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'vae_fc_e1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.vae_hidden_units[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'vae_fc_e2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_144": {
                "variable": {
                    "value": "fc3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=fc1, units=self.vae_hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'vae_fc_e2')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.vae_hidden_units[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'vae_fc_e3'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_148": {
                "variable": {
                    "value": "z_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=fc2, units=self.vae_hidden_units[2], activation=tf.nn.elu, name=self.regressor_name + 'vae_fc_e3')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self._vae_n_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'vae_fc_e4'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_155": {
                "variable": {
                    "value": "g1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hidden_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_mu",
                            "variable"
                        ]
                    ]
                },
                "units": {
                    "value": "self.vae_hidden_units[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'vae_fc_d1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_157": {
                "variable": {
                    "value": "g2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "g1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=hidden_z, units=self.vae_hidden_units[2], activation=tf.nn.elu, name=self.regressor_name + 'vae_fc_d1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.vae_hidden_units[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'vae_fc_d2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_159": {
                "variable": {
                    "value": "g3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "g2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=g1, units=self.vae_hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'vae_fc_d2')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.vae_hidden_units[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'vae_fc_d3'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_162": {
                "variable": {
                    "value": "x_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "g3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=g2, units=self.vae_hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'vae_fc_d3')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.original_x_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_squared_error_165": {
                "variable": {
                    "value": "recon_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "x_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=g3, units=self.original_x_dim, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[None, self.original_x_dim], name=self.regressor_name + 'original_X')",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[None, self.original_x_dim], name=self.regressor_name + 'original_X')",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[None, self.original_x_dim], name=self.regressor_name + 'original_X')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_166": {
                "variable": {
                    "value": "recon_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "recon_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.losses.mean_squared_error(predictions=x_hat, labels=x_input)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(recon_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_179": {
                "variable": {
                    "value": "new_x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_fea, x_fea_dr]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_187": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "new_x_fea",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_x",
                            "variable"
                        ]
                    ]
                },
                "units": {
                    "value": "self.hidden_units[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'fc_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_191": {
                "variable": {
                    "value": "rho_1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                },
                "units": {
                    "value": "self.hidden_unit_len * (self.tau_part_num + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'embed_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_195": {
                "variable": {
                    "value": "rho_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "rho_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_unit_len * (self.tau_part_num + 1), activation=tf.nn.relu, name=self.regressor_name + 'embed_1')",
                            "Call"
                        ],
                        [
                            "tf.reshape(rho_1, [-1, self.tau_part_num + 1, self.hidden_unit_len])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.tau_part_num + 1, self.hidden_unit_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_199": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                },
                "units": {
                    "value": "self.hidden_units[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'fc_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_203": {
                "variable": {
                    "value": "rho_2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                },
                "units": {
                    "value": "self.hidden_unit_len * (self.tau_part_num + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'embed_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_207": {
                "variable": {
                    "value": "rho_2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "rho_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_unit_len * (self.tau_part_num + 1), activation=tf.nn.relu, name=self.regressor_name + 'embed_2')",
                            "Call"
                        ],
                        [
                            "tf.reshape(rho_2, [-1, self.tau_part_num + 1, self.hidden_unit_len])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.tau_part_num + 1, self.hidden_unit_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_211": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                },
                "units": {
                    "value": "self.hidden_units[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'fc_3'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_216": {
                "variable": {
                    "value": "rho_3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                },
                "units": {
                    "value": "self.hidden_unit_len * (self.tau_part_num + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'embed_3'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_220": {
                "variable": {
                    "value": "rho_3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "rho_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_unit_len * (self.tau_part_num + 1), activation=tf.nn.relu, name=self.regressor_name + 'embed_3')",
                            "Call"
                        ],
                        [
                            "tf.reshape(rho_3, [-1, self.tau_part_num + 1, self.hidden_unit_len])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.tau_part_num + 1, self.hidden_unit_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_224": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                },
                "units": {
                    "value": "self.hidden_units[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'fc_4'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_228": {
                "variable": {
                    "value": "rho_4",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                },
                "units": {
                    "value": "self.hidden_unit_len * (self.tau_part_num + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'embed_4'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_232": {
                "variable": {
                    "value": "rho_4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "rho_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_unit_len * (self.tau_part_num + 1), activation=tf.nn.relu, name=self.regressor_name + 'embed_4')",
                            "Call"
                        ],
                        [
                            "tf.reshape(rho_4, [-1, self.tau_part_num + 1, self.hidden_unit_len])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.tau_part_num + 1, self.hidden_unit_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_246": {
                "variable": {
                    "value": "new_x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_fea, x_fea_dr]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_247": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "new_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([x_fea, x_fea_dr], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([x_fea, x_fea_dr], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([x_fea, x_fea_dr], 1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.hidden_units[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'tau_part_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_249": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                },
                "units": {
                    "value": "self.hidden_units[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'tau_part_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_252": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                },
                "units": {
                    "value": "self.tau_part_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'tau_part_3'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_266": {
                "variable": {
                    "value": "residue_tau",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tau - accum_tau * self.max_tau",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_269": {
                "variable": {
                    "value": "residue_tau_s",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[residue_tau_s, tf.expand_dims(tf.zeros(self.input_num), axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "divide_271": {
                "variable": {
                    "value": "precent_tau",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.relu(residue_tau - residue_tau_s)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "dist_tau * self.max_tau",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_273": {
                "variable": {
                    "value": "precent_tau",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.expand_dims(tf.ones(self.input_num), axis=1), precent_tau]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_283": {
                "variable": {
                    "value": "w_t",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'w_t'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.tau_part_num + 1, self.unit_len]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_284": {
                "variable": {
                    "value": "b_t",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'b_t'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.tau_part_num + 1, self.unit_len]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_285": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.multiply(gate, w_t) + b_t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_288": {
                "variable": {
                    "value": "kernel_",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.unit_len]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'k'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_289": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "kernel_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones([self.unit_len], dtype=tf.float32, name=self.regressor_name + 'k')",
                            "Call"
                        ],
                        [
                            "tf.ones([self.unit_len], dtype=tf.float32, name=self.regressor_name + 'k')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, int(kernel_.shape[0]), 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'kernel'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_292": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.squeeze(tf.nn.conv1d(gate, kernel, 1, 'VALID'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_296": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rhos[0]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([gate, rhos[hidden_id]], 2)",
                            "Call"
                        ],
                        [
                            "self._construct_rhos(x_fea, x_fea_dr)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.multiply(gate, w_t) + b_t)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.squeeze(tf.nn.conv1d(gate, kernel, 1, 'VALID')))",
                            "Call"
                        ],
                        [
                            "tf.multiply(gate, tau_gate)",
                            "Call"
                        ],
                        [
                            "self._construct_rhos(x_fea, x_fea_dr)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.multiply(gate, w_t) + b_t)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.squeeze(tf.nn.conv1d(gate, kernel, 1, 'VALID')))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tau_gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._partition_threshold(x_fea, x_fea_dr, tau)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_298": {
                "variable": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rhos[0]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([gate, rhos[hidden_id]], 2)",
                            "Call"
                        ],
                        [
                            "self._construct_rhos(x_fea, x_fea_dr)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.multiply(gate, w_t) + b_t)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.squeeze(tf.nn.conv1d(gate, kernel, 1, 'VALID')))",
                            "Call"
                        ],
                        [
                            "tf.multiply(gate, tau_gate)",
                            "Call"
                        ],
                        [
                            "self._construct_rhos(x_fea, x_fea_dr)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.multiply(gate, w_t) + b_t)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.squeeze(tf.nn.conv1d(gate, kernel, 1, 'VALID')))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_300": {
                "variable": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(gate, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(prediction, 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(P, mask), 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(prediction, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_310": {
                "variable": {
                    "value": "new_x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_fea, x_fea_dr]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_311": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "new_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([x_fea, x_fea_dr], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([x_fea, x_fea_dr], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([x_fea, x_fea_dr], 1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.hidden_units[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'tau_part_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_313": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                },
                "units": {
                    "value": "self.hidden_units[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'tau_part_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_316": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                },
                "units": {
                    "value": "self.tau_part_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'tau_part_3'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "range_335": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "fill_336": {
                "variable": {
                    "value": "diag",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[n]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "fill_337": {
                "variable": {
                    "value": "sub",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[n - 1]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "fill_338": {
                "variable": {
                    "value": "sup",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[n - 1]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "concat_339": {
                "variable": {
                    "value": "ii",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[r, r[1:], r[:-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_340": {
                "variable": {
                    "value": "jj",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[r, r[:-1], r[1:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_341": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[ii, jj]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_342": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[diag, sub, sup]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_352": {
                "variable": {
                    "value": "w_t",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'w_t'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.tau_part_num + 1, self.unit_len]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_353": {
                "variable": {
                    "value": "b_t",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'b_t'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.tau_part_num + 1, self.unit_len]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_354": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.multiply(gate, w_t) + b_t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_357": {
                "variable": {
                    "value": "kernel_",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.unit_len]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'k'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_358": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "kernel_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones([self.unit_len], dtype=tf.float32, name=self.regressor_name + 'k')",
                            "Call"
                        ],
                        [
                            "tf.ones([self.unit_len], dtype=tf.float32, name=self.regressor_name + 'k')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, int(kernel_.shape[0]), 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'kernel'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_361": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.squeeze(tf.nn.conv1d(gate, kernel, 1, 'VALID'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "fill_369": {
                "variable": {
                    "value": "Z_zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[tf.shape(Z)[0], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "concat_370": {
                "variable": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[Z_zeros, Z]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_371": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.matmul(trid, tf.expand_dims(Z, 2))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cumsum_376": {
                "variable": {
                    "value": "Px",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.concat([f_first, DeltaP], 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fill_378": {
                "variable": {
                    "value": "tau_first",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[tf.shape(partition_tau)[0], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "concat_379": {
                "variable": {
                    "value": "partition_tau_",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tau_first, partition_tau[:, :-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "searchsorted_380": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "sorted_sequence": {
                    "value": "partition_tau_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tau_first, partition_tau[:, :-1]], 1)",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "tau",
                    "type": "variable",
                    "possible_values": []
                },
                "side": {
                    "value": "left",
                    "type": "str",
                    "possible_values": []
                }
            },
            "one_hot_382": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.searchsorted(partition_tau_, tau, side='left')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(indices) - 1",
                            "BinOp"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.tau_part_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_384": {
                "variable": {
                    "value": "tau_exp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tau",
                    "type": "variable",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, self.tau_part_num]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_387": {
                "variable": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(P, mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_389": {
                "variable": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(gate, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(prediction, 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(P, mask), 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(prediction, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_397": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.original_x_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'original_X'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_400": {
                "variable": {
                    "value": "tau_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.tau_part_num]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'tau'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_401": {
                "variable": {
                    "value": "self.bn_phase",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'Phase'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_402": {
                "variable": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'Dropout'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_404": {
                "variable": {
                    "value": "self.input_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'input_num'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_406": {
                "variable": {
                    "value": "self.vae_option",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'vae_option'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Saver_413": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_441": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.original_x_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'original_X'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_444": {
                "variable": {
                    "value": "tau_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.tau_part_num]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'tau'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_446": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'Target'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_447": {
                "variable": {
                    "value": "target_taus",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.tau_max]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'Target_taus'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_450": {
                "variable": {
                    "value": "self.bn_phase",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'Phase'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_453": {
                "variable": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'Dropout'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_456": {
                "variable": {
                    "value": "self.input_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'input_num'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_458": {
                "variable": {
                    "value": "self.vae_option",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'vae_option'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_461": {
                "variable": {
                    "value": "self.learning_rate_vae",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'lr_vae'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_462": {
                "variable": {
                    "value": "self.learning_rate_nn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'lr_nn'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AdamOptimizer_519": {
                "variable": {
                    "value": "optimizer_vae",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate_vae",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_520": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate_nn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_523": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_526": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_529": {
                "variable": {
                    "value": "session_config",
                    "type": "variable",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_688": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.original_x_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'original_X'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_692": {
                "variable": {
                    "value": "tau_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'tau'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_694": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'Target'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_695": {
                "variable": {
                    "value": "target_taus",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.tau_max]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'Target_taus'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_698": {
                "variable": {
                    "value": "self.bn_phase",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'Phase'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_701": {
                "variable": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'Dropout'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_704": {
                "variable": {
                    "value": "self.input_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'input_num'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_706": {
                "variable": {
                    "value": "self.vae_option",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'vae_option'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_709": {
                "variable": {
                    "value": "self.learning_rate_vae",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'lr_vae'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_710": {
                "variable": {
                    "value": "self.learning_rate_nn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'lr_nn'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AdamOptimizer_768": {
                "variable": {
                    "value": "optimizer_vae",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate_vae",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_769": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate_nn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_772": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_775": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_778": {
                "variable": {
                    "value": "session_config",
                    "type": "variable",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "RegisterGradient_42": {
                "op_type": {
                    "value": "rnd_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'PyFuncGrad' + str(np.random.randint(0, 100000000.0))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "py_func_45": {
                "func": {
                    "value": "func",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "Tout": {
                    "value": "Tout",
                    "type": "variable",
                    "possible_values": []
                },
                "stateful": {
                    "value": "stateful",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_239": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[gate, rhos[hidden_id]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_256": {
                "variable": {
                    "value": "dist_tau",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_320": {
                "variable": {
                    "value": "dist_tau",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                }
            },
            "expand_dims_343": {
                "input": {
                    "value": "tf.scatter_nd(idx, values, [n, n])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reset_default_graph_439": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_686": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "expand_dims_259": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reduce_sum(out, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_260": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.reduce_sum(out, 1), 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(norm, [1, self.tau_part_num])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.reduce_sum(out, 1), 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(norm, [1, self.tau_part_num])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, self.tau_part_num]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truediv_261": {
                "variable": {
                    "value": "dist_tau",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.reduce_sum(out, 1), 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(norm, [1, self.tau_part_num])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.reduce_sum(out, 1), 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(norm, [1, self.tau_part_num])",
                            "Call"
                        ]
                    ]
                }
            },
            "cumsum_265": {
                "x": {
                    "value": "dist_tau",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(out)",
                            "Call"
                        ],
                        [
                            "tf.truediv(out, norm)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(out)",
                            "Call"
                        ],
                        [
                            "tf.truediv(out, norm)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_271": {
                "features": {
                    "value": "residue_tau - residue_tau_s",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_292": {
                "input": {
                    "value": "tf.nn.conv1d(gate, kernel, 1, 'VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_323": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reduce_sum(out, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_324": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.reduce_sum(out, 1), 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(norm, [1, self.tau_part_num])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.reduce_sum(out, 1), 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(norm, [1, self.tau_part_num])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, self.tau_part_num]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truediv_325": {
                "variable": {
                    "value": "dist_tau",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.reduce_sum(out, 1), 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(norm, [1, self.tau_part_num])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.reduce_sum(out, 1), 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(norm, [1, self.tau_part_num])",
                            "Call"
                        ]
                    ]
                }
            },
            "cumsum_329": {
                "x": {
                    "value": "dist_tau",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(out)",
                            "Call"
                        ],
                        [
                            "tf.truediv(out, norm)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(out)",
                            "Call"
                        ],
                        [
                            "tf.truediv(out, norm)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scatter_nd_343": {
                "indices": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([ii, jj], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([diag, sub, sup], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n, n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_361": {
                "input": {
                    "value": "tf.nn.conv1d(gate, kernel, 1, 'VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_371": {
                "a": {
                    "value": "trid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tridiagonal(self.tau_part_num + 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.expand_dims(Z, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_375": {
                "x": {
                    "value": "D[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist_tau * self.tau_max",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_376": {
                "values": {
                    "value": "[f_first, DeltaP]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_381": {
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.searchsorted(partition_tau_, tau, side='left')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(indices) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "multiply_387": {
                "x": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(Z[:, :-1], tau_exp - partition_tau_) + 0.5 * (Z[:, 1:] - Z[:, :-1]) / H * (tau_exp - partition_tau_) ** 2 + Px[:, :-1]",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(indices, self.tau_part_num)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_414": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_531": {
                "config": {
                    "value": "session_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(log_device_placement=True)",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(log_device_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_780": {
                "config": {
                    "value": "session_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(log_device_placement=True)",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(log_device_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_269": {
                "input": {
                    "value": "tf.zeros(self.input_num)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_273": {
                "input": {
                    "value": "tf.ones(self.input_num)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_285": {
                "x": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rhos[0]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([gate, rhos[hidden_id]], 2)",
                            "Call"
                        ],
                        [
                            "self._construct_rhos(x_fea, x_fea_dr)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.multiply(gate, w_t) + b_t)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.squeeze(tf.nn.conv1d(gate, kernel, 1, 'VALID')))",
                            "Call"
                        ],
                        [
                            "tf.multiply(gate, tau_gate)",
                            "Call"
                        ],
                        [
                            "self._construct_rhos(x_fea, x_fea_dr)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.multiply(gate, w_t) + b_t)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.squeeze(tf.nn.conv1d(gate, kernel, 1, 'VALID')))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "w_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(self.regressor_name + 'w_t', [self.tau_part_num + 1, self.unit_len], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(self.regressor_name + 'w_t', [self.tau_part_num + 1, self.unit_len], tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv1d_292": {
                "input": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rhos[0]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([gate, rhos[hidden_id]], 2)",
                            "Call"
                        ],
                        [
                            "self._construct_rhos(x_fea, x_fea_dr)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.multiply(gate, w_t) + b_t)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.squeeze(tf.nn.conv1d(gate, kernel, 1, 'VALID')))",
                            "Call"
                        ],
                        [
                            "tf.multiply(gate, tau_gate)",
                            "Call"
                        ],
                        [
                            "self._construct_rhos(x_fea, x_fea_dr)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.multiply(gate, w_t) + b_t)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.squeeze(tf.nn.conv1d(gate, kernel, 1, 'VALID')))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(kernel_, [1, int(kernel_.shape[0]), 1], name=self.regressor_name + 'kernel')",
                            "Call"
                        ],
                        [
                            "tf.reshape(kernel_, [1, int(kernel_.shape[0]), 1], name=self.regressor_name + 'kernel')",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_354": {
                "x": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rhos[0]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([gate, rhos[hidden_id]], 2)",
                            "Call"
                        ],
                        [
                            "self._construct_rhos(x_fea, x_fea_dr)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.multiply(gate, w_t) + b_t)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.squeeze(tf.nn.conv1d(gate, kernel, 1, 'VALID')))",
                            "Call"
                        ],
                        [
                            "tf.multiply(gate, tau_gate)",
                            "Call"
                        ],
                        [
                            "self._construct_rhos(x_fea, x_fea_dr)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.multiply(gate, w_t) + b_t)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.squeeze(tf.nn.conv1d(gate, kernel, 1, 'VALID')))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "w_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(self.regressor_name + 'w_t', [self.tau_part_num + 1, self.unit_len], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(self.regressor_name + 'w_t', [self.tau_part_num + 1, self.unit_len], tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv1d_361": {
                "input": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rhos[0]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([gate, rhos[hidden_id]], 2)",
                            "Call"
                        ],
                        [
                            "self._construct_rhos(x_fea, x_fea_dr)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.multiply(gate, w_t) + b_t)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.squeeze(tf.nn.conv1d(gate, kernel, 1, 'VALID')))",
                            "Call"
                        ],
                        [
                            "tf.multiply(gate, tau_gate)",
                            "Call"
                        ],
                        [
                            "self._construct_rhos(x_fea, x_fea_dr)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.multiply(gate, w_t) + b_t)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.squeeze(tf.nn.conv1d(gate, kernel, 1, 'VALID')))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(kernel_, [1, int(kernel_.shape[0]), 1], name=self.regressor_name + 'kernel')",
                            "Call"
                        ],
                        [
                            "tf.reshape(kernel_, [1, int(kernel_.shape[0]), 1], name=self.regressor_name + 'kernel')",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_371": {
                "input": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gate[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([Z_zeros, Z], 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_385": {
                "x": {
                    "value": "Z[:, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "tau_exp - partition_tau_",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_squared_error_485": {
                "predictions": {
                    "value": "tf.log(predictions_tensor + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.log(target + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_squared_error_734": {
                "predictions": {
                    "value": "tf.log(predictions_tensor + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.log(target + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_258": {
                "x": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_259": {
                "input_tensor": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_269": {
                "shape": {
                    "value": "self.input_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_273": {
                "shape": {
                    "value": "self.input_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_322": {
                "x": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_323": {
                "input_tensor": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_369": {
                "input": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gate[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([Z_zeros, Z], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_378": {
                "input": {
                    "value": "partition_tau",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cumsum(dist_tau, 1) * self.tau_max",
                            "BinOp"
                        ]
                    ]
                }
            },
            "absolute_difference_487": {
                "labels": {
                    "value": "tf.log(target + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.log(predictions_tensor + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "absolute_difference_736": {
                "labels": {
                    "value": "tf.log(target + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.log(predictions_tensor + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_485": {
                "x": {
                    "value": "target + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "huber_loss_490": {
                "labels": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[None, 1], name=self.regressor_name + 'Target')",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[None, 1], name=self.regressor_name + 'Target')",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "predictions_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "delta": {
                    "value": "1.345",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_734": {
                "x": {
                    "value": "target + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "huber_loss_739": {
                "labels": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[None, 1], name=self.regressor_name + 'Target')",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[None, 1], name=self.regressor_name + 'Target')",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "predictions_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "delta": {
                    "value": "1.345",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_487": {
                "x": {
                    "value": "predictions_tensor + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "huber_loss_492": {
                "labels": {
                    "value": "tf.log(target + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.log(predictions_tensor + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "delta": {
                    "value": "1.345",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_736": {
                "x": {
                    "value": "predictions_tensor + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "huber_loss_741": {
                "labels": {
                    "value": "tf.log(target + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.log(predictions_tensor + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "delta": {
                    "value": "1.345",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_495": {
                "x": {
                    "value": "predictions_tensor + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_744": {
                "x": {
                    "value": "predictions_tensor + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_492": {
                "x": {
                    "value": "predictions_tensor + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_741": {
                "x": {
                    "value": "predictions_tensor + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "model/selnet_bak.py": {
        "sklearn": {},
        "tensorflow": {
            "get_default_graph_43": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dense_140": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[None, self.original_x_dim], name=self.regressor_name + 'original_X')",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[None, self.original_x_dim], name=self.regressor_name + 'original_X')",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[None, self.original_x_dim], name=self.regressor_name + 'original_X')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.vae_hidden_units[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'vae_fc_e1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_142": {
                "variable": {
                    "value": "fc2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=x_input, units=self.vae_hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'vae_fc_e1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.vae_hidden_units[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'vae_fc_e2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_144": {
                "variable": {
                    "value": "fc3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=fc1, units=self.vae_hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'vae_fc_e2')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.vae_hidden_units[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'vae_fc_e3'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_148": {
                "variable": {
                    "value": "z_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=fc2, units=self.vae_hidden_units[2], activation=tf.nn.elu, name=self.regressor_name + 'vae_fc_e3')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self._vae_n_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'vae_fc_e4'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_155": {
                "variable": {
                    "value": "g1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hidden_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_mu",
                            "variable"
                        ]
                    ]
                },
                "units": {
                    "value": "self.vae_hidden_units[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'vae_fc_d1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_157": {
                "variable": {
                    "value": "g2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "g1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=hidden_z, units=self.vae_hidden_units[2], activation=tf.nn.elu, name=self.regressor_name + 'vae_fc_d1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.vae_hidden_units[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'vae_fc_d2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_159": {
                "variable": {
                    "value": "g3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "g2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=g1, units=self.vae_hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'vae_fc_d2')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.vae_hidden_units[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'vae_fc_d3'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_162": {
                "variable": {
                    "value": "x_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "g3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=g2, units=self.vae_hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'vae_fc_d3')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.original_x_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_squared_error_165": {
                "variable": {
                    "value": "recon_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "x_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=g3, units=self.original_x_dim, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[None, self.original_x_dim], name=self.regressor_name + 'original_X')",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[None, self.original_x_dim], name=self.regressor_name + 'original_X')",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[None, self.original_x_dim], name=self.regressor_name + 'original_X')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_166": {
                "variable": {
                    "value": "recon_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "recon_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.losses.mean_squared_error(predictions=x_hat, labels=x_input)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(recon_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_179": {
                "variable": {
                    "value": "new_x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_fea, x_fea_dr]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_187": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "new_x_fea",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_x",
                            "variable"
                        ]
                    ]
                },
                "units": {
                    "value": "self.hidden_units[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'fc_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_191": {
                "variable": {
                    "value": "rho_1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                },
                "units": {
                    "value": "self.hidden_unit_len * (self.tau_part_num + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'embed_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_195": {
                "variable": {
                    "value": "rho_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "rho_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_unit_len * (self.tau_part_num + 1), activation=tf.nn.relu, name=self.regressor_name + 'embed_1')",
                            "Call"
                        ],
                        [
                            "tf.reshape(rho_1, [-1, self.tau_part_num + 1, self.hidden_unit_len])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.tau_part_num + 1, self.hidden_unit_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_199": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                },
                "units": {
                    "value": "self.hidden_units[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'fc_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_203": {
                "variable": {
                    "value": "rho_2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                },
                "units": {
                    "value": "self.hidden_unit_len * (self.tau_part_num + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'embed_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_207": {
                "variable": {
                    "value": "rho_2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "rho_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_unit_len * (self.tau_part_num + 1), activation=tf.nn.relu, name=self.regressor_name + 'embed_2')",
                            "Call"
                        ],
                        [
                            "tf.reshape(rho_2, [-1, self.tau_part_num + 1, self.hidden_unit_len])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.tau_part_num + 1, self.hidden_unit_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_211": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                },
                "units": {
                    "value": "self.hidden_units[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'fc_3'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_216": {
                "variable": {
                    "value": "rho_3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                },
                "units": {
                    "value": "self.hidden_unit_len * (self.tau_part_num + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'embed_3'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_220": {
                "variable": {
                    "value": "rho_3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "rho_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_unit_len * (self.tau_part_num + 1), activation=tf.nn.relu, name=self.regressor_name + 'embed_3')",
                            "Call"
                        ],
                        [
                            "tf.reshape(rho_3, [-1, self.tau_part_num + 1, self.hidden_unit_len])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.tau_part_num + 1, self.hidden_unit_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_224": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                },
                "units": {
                    "value": "self.hidden_units[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'fc_4'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_228": {
                "variable": {
                    "value": "rho_4",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                },
                "units": {
                    "value": "self.hidden_unit_len * (self.tau_part_num + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'embed_4'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_232": {
                "variable": {
                    "value": "rho_4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "rho_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_unit_len * (self.tau_part_num + 1), activation=tf.nn.relu, name=self.regressor_name + 'embed_4')",
                            "Call"
                        ],
                        [
                            "tf.reshape(rho_4, [-1, self.tau_part_num + 1, self.hidden_unit_len])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.tau_part_num + 1, self.hidden_unit_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_246": {
                "variable": {
                    "value": "new_x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_fea, x_fea_dr]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_247": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "new_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([x_fea, x_fea_dr], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([x_fea, x_fea_dr], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([x_fea, x_fea_dr], 1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.hidden_units[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'tau_part_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_249": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                },
                "units": {
                    "value": "self.hidden_units[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'tau_part_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_252": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                },
                "units": {
                    "value": "self.tau_part_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'tau_part_3'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_266": {
                "variable": {
                    "value": "residue_tau",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tau - accum_tau * self.max_tau",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_269": {
                "variable": {
                    "value": "residue_tau_s",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[residue_tau_s, tf.expand_dims(tf.zeros(self.input_num), axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "divide_271": {
                "variable": {
                    "value": "precent_tau",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.relu(residue_tau - residue_tau_s)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "dist_tau * self.max_tau",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_273": {
                "variable": {
                    "value": "precent_tau",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.expand_dims(tf.ones(self.input_num), axis=1), precent_tau]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_283": {
                "variable": {
                    "value": "w_t",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'w_t'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.tau_part_num + 1, self.unit_len]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_284": {
                "variable": {
                    "value": "b_t",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'b_t'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.tau_part_num + 1, self.unit_len]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_285": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.multiply(gate, w_t) + b_t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_288": {
                "variable": {
                    "value": "kernel_",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.unit_len]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'k'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_289": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "kernel_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones([self.unit_len], dtype=tf.float32, name=self.regressor_name + 'k')",
                            "Call"
                        ],
                        [
                            "tf.ones([self.unit_len], dtype=tf.float32, name=self.regressor_name + 'k')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, int(kernel_.shape[0]), 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'kernel'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_292": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.squeeze(tf.nn.conv1d(gate, kernel, 1, 'VALID'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_296": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rhos[0]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([gate, rhos[hidden_id]], 2)",
                            "Call"
                        ],
                        [
                            "self._construct_rhos(x_fea, x_fea_dr)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.multiply(gate, w_t) + b_t)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.squeeze(tf.nn.conv1d(gate, kernel, 1, 'VALID')))",
                            "Call"
                        ],
                        [
                            "tf.multiply(gate, tau_gate)",
                            "Call"
                        ],
                        [
                            "self._construct_rhos(x_fea, x_fea_dr)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.multiply(gate, w_t) + b_t)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.squeeze(tf.nn.conv1d(gate, kernel, 1, 'VALID')))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tau_gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._partition_threshold(x_fea, x_fea_dr, tau)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_298": {
                "variable": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rhos[0]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([gate, rhos[hidden_id]], 2)",
                            "Call"
                        ],
                        [
                            "self._construct_rhos(x_fea, x_fea_dr)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.multiply(gate, w_t) + b_t)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.squeeze(tf.nn.conv1d(gate, kernel, 1, 'VALID')))",
                            "Call"
                        ],
                        [
                            "tf.multiply(gate, tau_gate)",
                            "Call"
                        ],
                        [
                            "self._construct_rhos(x_fea, x_fea_dr)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.multiply(gate, w_t) + b_t)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.squeeze(tf.nn.conv1d(gate, kernel, 1, 'VALID')))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_300": {
                "variable": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(gate, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(prediction, 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(P, mask), 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(prediction, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_310": {
                "variable": {
                    "value": "new_x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_fea, x_fea_dr]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_311": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "new_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([x_fea, x_fea_dr], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([x_fea, x_fea_dr], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([x_fea, x_fea_dr], 1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.hidden_units[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'tau_part_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_313": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                },
                "units": {
                    "value": "self.hidden_units[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'tau_part_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_316": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                },
                "units": {
                    "value": "self.tau_part_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'tau_part_3'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "range_335": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "fill_336": {
                "variable": {
                    "value": "diag",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[n]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "fill_337": {
                "variable": {
                    "value": "sub",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[n - 1]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "fill_338": {
                "variable": {
                    "value": "sup",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[n - 1]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "concat_339": {
                "variable": {
                    "value": "ii",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[r, r[1:], r[:-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_340": {
                "variable": {
                    "value": "jj",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[r, r[:-1], r[1:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_341": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[ii, jj]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_342": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[diag, sub, sup]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_352": {
                "variable": {
                    "value": "w_t",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'w_t'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.tau_part_num + 1, self.unit_len]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_353": {
                "variable": {
                    "value": "b_t",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'b_t'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.tau_part_num + 1, self.unit_len]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_354": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.multiply(gate, w_t) + b_t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_357": {
                "variable": {
                    "value": "kernel_",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.unit_len]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'k'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_358": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "kernel_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones([self.unit_len], dtype=tf.float32, name=self.regressor_name + 'k')",
                            "Call"
                        ],
                        [
                            "tf.ones([self.unit_len], dtype=tf.float32, name=self.regressor_name + 'k')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, int(kernel_.shape[0]), 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'kernel'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_361": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.squeeze(tf.nn.conv1d(gate, kernel, 1, 'VALID'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "fill_369": {
                "variable": {
                    "value": "Z_zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[tf.shape(Z)[0], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "concat_370": {
                "variable": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[Z_zeros, Z]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_371": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.matmul(trid, tf.expand_dims(Z, 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cumsum_376": {
                "variable": {
                    "value": "Px",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.concat([f_first, DeltaP], 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fill_378": {
                "variable": {
                    "value": "tau_first",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[tf.shape(partition_tau)[0], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "concat_379": {
                "variable": {
                    "value": "partition_tau_",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tau_first, partition_tau[:, :-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "searchsorted_380": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "sorted_sequence": {
                    "value": "partition_tau_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tau_first, partition_tau[:, :-1]], 1)",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "tau",
                    "type": "variable",
                    "possible_values": []
                },
                "side": {
                    "value": "left",
                    "type": "str",
                    "possible_values": []
                }
            },
            "one_hot_382": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.searchsorted(partition_tau_, tau, side='left')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(indices) - 1",
                            "BinOp"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.tau_part_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_384": {
                "variable": {
                    "value": "tau_exp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tau",
                    "type": "variable",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, self.tau_part_num]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_387": {
                "variable": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(P, mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_389": {
                "variable": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(gate, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(prediction, 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(P, mask), 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(prediction, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_396": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.original_x_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'original_X'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_399": {
                "variable": {
                    "value": "tau_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.tau_part_num]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'tau'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_400": {
                "variable": {
                    "value": "self.bn_phase",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'Phase'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_401": {
                "variable": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'Dropout'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_403": {
                "variable": {
                    "value": "self.input_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'input_num'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_405": {
                "variable": {
                    "value": "self.vae_option",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'vae_option'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Saver_412": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_440": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.original_x_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'original_X'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_443": {
                "variable": {
                    "value": "tau_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.tau_part_num]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'tau'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_445": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'Target'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_446": {
                "variable": {
                    "value": "target_taus",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.tau_max]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'Target_taus'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_449": {
                "variable": {
                    "value": "self.bn_phase",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'Phase'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_452": {
                "variable": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'Dropout'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_455": {
                "variable": {
                    "value": "self.input_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'input_num'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_457": {
                "variable": {
                    "value": "self.vae_option",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'vae_option'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_460": {
                "variable": {
                    "value": "self.learning_rate_vae",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'lr_vae'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_461": {
                "variable": {
                    "value": "self.learning_rate_nn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'lr_nn'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AdamOptimizer_518": {
                "variable": {
                    "value": "optimizer_vae",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate_vae",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_519": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate_nn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_522": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_525": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_528": {
                "variable": {
                    "value": "session_config",
                    "type": "variable",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_687": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.original_x_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'original_X'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_691": {
                "variable": {
                    "value": "tau_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'tau'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_693": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'Target'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_694": {
                "variable": {
                    "value": "target_taus",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.tau_max]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'Target_taus'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_697": {
                "variable": {
                    "value": "self.bn_phase",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'Phase'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_700": {
                "variable": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'Dropout'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_703": {
                "variable": {
                    "value": "self.input_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'input_num'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_705": {
                "variable": {
                    "value": "self.vae_option",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'vae_option'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_708": {
                "variable": {
                    "value": "self.learning_rate_vae",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'lr_vae'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_709": {
                "variable": {
                    "value": "self.learning_rate_nn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'lr_nn'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AdamOptimizer_767": {
                "variable": {
                    "value": "optimizer_vae",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate_vae",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_768": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate_nn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_771": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_774": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_777": {
                "variable": {
                    "value": "session_config",
                    "type": "variable",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "RegisterGradient_42": {
                "op_type": {
                    "value": "rnd_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'PyFuncGrad' + str(np.random.randint(0, 100000000.0))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "py_func_45": {
                "func": {
                    "value": "func",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "Tout": {
                    "value": "Tout",
                    "type": "variable",
                    "possible_values": []
                },
                "stateful": {
                    "value": "stateful",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_239": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[gate, rhos[hidden_id]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_256": {
                "variable": {
                    "value": "dist_tau",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_320": {
                "variable": {
                    "value": "dist_tau",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                }
            },
            "expand_dims_343": {
                "input": {
                    "value": "tf.scatter_nd(idx, values, [n, n])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reset_default_graph_438": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_685": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "expand_dims_259": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reduce_sum(out, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_260": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.reduce_sum(out, 1), 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(norm, [1, self.tau_part_num])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.reduce_sum(out, 1), 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(norm, [1, self.tau_part_num])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, self.tau_part_num]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truediv_261": {
                "variable": {
                    "value": "dist_tau",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.reduce_sum(out, 1), 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(norm, [1, self.tau_part_num])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.reduce_sum(out, 1), 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(norm, [1, self.tau_part_num])",
                            "Call"
                        ]
                    ]
                }
            },
            "cumsum_265": {
                "x": {
                    "value": "dist_tau",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(out)",
                            "Call"
                        ],
                        [
                            "tf.truediv(out, norm)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(out)",
                            "Call"
                        ],
                        [
                            "tf.truediv(out, norm)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_271": {
                "features": {
                    "value": "residue_tau - residue_tau_s",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_292": {
                "input": {
                    "value": "tf.nn.conv1d(gate, kernel, 1, 'VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_323": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reduce_sum(out, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_324": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.reduce_sum(out, 1), 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(norm, [1, self.tau_part_num])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.reduce_sum(out, 1), 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(norm, [1, self.tau_part_num])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, self.tau_part_num]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truediv_325": {
                "variable": {
                    "value": "dist_tau",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.reduce_sum(out, 1), 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(norm, [1, self.tau_part_num])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.reduce_sum(out, 1), 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(norm, [1, self.tau_part_num])",
                            "Call"
                        ]
                    ]
                }
            },
            "cumsum_329": {
                "x": {
                    "value": "dist_tau",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(out)",
                            "Call"
                        ],
                        [
                            "tf.truediv(out, norm)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(out)",
                            "Call"
                        ],
                        [
                            "tf.truediv(out, norm)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scatter_nd_343": {
                "indices": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([ii, jj], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([diag, sub, sup], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n, n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_361": {
                "input": {
                    "value": "tf.nn.conv1d(gate, kernel, 1, 'VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_371": {
                "a": {
                    "value": "trid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tridiagonal(self.tau_part_num + 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.expand_dims(Z, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_375": {
                "x": {
                    "value": "D[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist_tau * self.tau_max",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_376": {
                "values": {
                    "value": "[f_first, DeltaP]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_381": {
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.searchsorted(partition_tau_, tau, side='left')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(indices) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "multiply_387": {
                "x": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(Z[:, :-1], tau_exp - partition_tau_) + 0.5 * (Z[:, 1:] - Z[:, :-1]) / H * (tau_exp - partition_tau_) ** 2 + Px[:, :-1]",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(indices, self.tau_part_num)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_413": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_530": {
                "config": {
                    "value": "session_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(log_device_placement=True)",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(log_device_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_779": {
                "config": {
                    "value": "session_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(log_device_placement=True)",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(log_device_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_269": {
                "input": {
                    "value": "tf.zeros(self.input_num)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_273": {
                "input": {
                    "value": "tf.ones(self.input_num)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_285": {
                "x": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rhos[0]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([gate, rhos[hidden_id]], 2)",
                            "Call"
                        ],
                        [
                            "self._construct_rhos(x_fea, x_fea_dr)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.multiply(gate, w_t) + b_t)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.squeeze(tf.nn.conv1d(gate, kernel, 1, 'VALID')))",
                            "Call"
                        ],
                        [
                            "tf.multiply(gate, tau_gate)",
                            "Call"
                        ],
                        [
                            "self._construct_rhos(x_fea, x_fea_dr)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.multiply(gate, w_t) + b_t)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.squeeze(tf.nn.conv1d(gate, kernel, 1, 'VALID')))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "w_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(self.regressor_name + 'w_t', [self.tau_part_num + 1, self.unit_len], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(self.regressor_name + 'w_t', [self.tau_part_num + 1, self.unit_len], tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv1d_292": {
                "input": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rhos[0]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([gate, rhos[hidden_id]], 2)",
                            "Call"
                        ],
                        [
                            "self._construct_rhos(x_fea, x_fea_dr)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.multiply(gate, w_t) + b_t)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.squeeze(tf.nn.conv1d(gate, kernel, 1, 'VALID')))",
                            "Call"
                        ],
                        [
                            "tf.multiply(gate, tau_gate)",
                            "Call"
                        ],
                        [
                            "self._construct_rhos(x_fea, x_fea_dr)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.multiply(gate, w_t) + b_t)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.squeeze(tf.nn.conv1d(gate, kernel, 1, 'VALID')))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(kernel_, [1, int(kernel_.shape[0]), 1], name=self.regressor_name + 'kernel')",
                            "Call"
                        ],
                        [
                            "tf.reshape(kernel_, [1, int(kernel_.shape[0]), 1], name=self.regressor_name + 'kernel')",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_354": {
                "x": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rhos[0]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([gate, rhos[hidden_id]], 2)",
                            "Call"
                        ],
                        [
                            "self._construct_rhos(x_fea, x_fea_dr)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.multiply(gate, w_t) + b_t)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.squeeze(tf.nn.conv1d(gate, kernel, 1, 'VALID')))",
                            "Call"
                        ],
                        [
                            "tf.multiply(gate, tau_gate)",
                            "Call"
                        ],
                        [
                            "self._construct_rhos(x_fea, x_fea_dr)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.multiply(gate, w_t) + b_t)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.squeeze(tf.nn.conv1d(gate, kernel, 1, 'VALID')))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "w_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(self.regressor_name + 'w_t', [self.tau_part_num + 1, self.unit_len], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(self.regressor_name + 'w_t', [self.tau_part_num + 1, self.unit_len], tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv1d_361": {
                "input": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rhos[0]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([gate, rhos[hidden_id]], 2)",
                            "Call"
                        ],
                        [
                            "self._construct_rhos(x_fea, x_fea_dr)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.multiply(gate, w_t) + b_t)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.squeeze(tf.nn.conv1d(gate, kernel, 1, 'VALID')))",
                            "Call"
                        ],
                        [
                            "tf.multiply(gate, tau_gate)",
                            "Call"
                        ],
                        [
                            "self._construct_rhos(x_fea, x_fea_dr)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.multiply(gate, w_t) + b_t)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.squeeze(tf.nn.conv1d(gate, kernel, 1, 'VALID')))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(kernel_, [1, int(kernel_.shape[0]), 1], name=self.regressor_name + 'kernel')",
                            "Call"
                        ],
                        [
                            "tf.reshape(kernel_, [1, int(kernel_.shape[0]), 1], name=self.regressor_name + 'kernel')",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_371": {
                "input": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gate[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([Z_zeros, Z], 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_385": {
                "x": {
                    "value": "Z[:, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "tau_exp - partition_tau_",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_squared_error_484": {
                "predictions": {
                    "value": "tf.log(predictions_tensor + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.log(target + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_squared_error_733": {
                "predictions": {
                    "value": "tf.log(predictions_tensor + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.log(target + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_258": {
                "x": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_259": {
                "input_tensor": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_269": {
                "shape": {
                    "value": "self.input_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_273": {
                "shape": {
                    "value": "self.input_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_322": {
                "x": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_323": {
                "input_tensor": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3')",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_369": {
                "input": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gate[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([Z_zeros, Z], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_378": {
                "input": {
                    "value": "partition_tau",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cumsum(dist_tau, 1) * self.tau_max",
                            "BinOp"
                        ]
                    ]
                }
            },
            "absolute_difference_486": {
                "labels": {
                    "value": "tf.log(target + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.log(predictions_tensor + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "absolute_difference_735": {
                "labels": {
                    "value": "tf.log(target + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.log(predictions_tensor + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_484": {
                "x": {
                    "value": "target + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "huber_loss_489": {
                "labels": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[None, 1], name=self.regressor_name + 'Target')",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[None, 1], name=self.regressor_name + 'Target')",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "predictions_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "delta": {
                    "value": "1.345",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_733": {
                "x": {
                    "value": "target + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "huber_loss_738": {
                "labels": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[None, 1], name=self.regressor_name + 'Target')",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[None, 1], name=self.regressor_name + 'Target')",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "predictions_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "delta": {
                    "value": "1.345",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_486": {
                "x": {
                    "value": "predictions_tensor + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "huber_loss_491": {
                "labels": {
                    "value": "tf.log(target + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.log(predictions_tensor + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "delta": {
                    "value": "1.345",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_735": {
                "x": {
                    "value": "predictions_tensor + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "huber_loss_740": {
                "labels": {
                    "value": "tf.log(target + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.log(predictions_tensor + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "delta": {
                    "value": "1.345",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_494": {
                "x": {
                    "value": "predictions_tensor + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_743": {
                "x": {
                    "value": "predictions_tensor + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_491": {
                "x": {
                    "value": "predictions_tensor + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_506": {
                "value": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "quadratic.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_740": {
                "x": {
                    "value": "predictions_tensor + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_755": {
                "value": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "quadratic.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model/selnetpart.py": {
        "sklearn": {},
        "tensorflow": {
            "multiply_104": {
                "variable": {
                    "value": "predictions_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "predictions_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(predictions_tensor, mapping[:, expert_id:expert_id + 1])",
                            "Call"
                        ],
                        [
                            "tf.multiply(predictions_tensor, mapping[:, expert_id:expert_id + 1])",
                            "Call"
                        ],
                        [
                            "prediction_expert",
                            "variable"
                        ],
                        [
                            "predictions_tensor + prediction_expert",
                            "BinOp"
                        ],
                        [
                            "prediction_expert",
                            "variable"
                        ],
                        [
                            "prediction_expert",
                            "variable"
                        ]
                    ]
                },
                "y": {
                    "value": "mapping[:, expert_id:expert_id + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_122": {
                "variable": {
                    "value": "predictions_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "predictions_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(predictions_tensor, mapping[:, expert_id:expert_id + 1])",
                            "Call"
                        ],
                        [
                            "tf.multiply(predictions_tensor, mapping[:, expert_id:expert_id + 1])",
                            "Call"
                        ],
                        [
                            "prediction_expert",
                            "variable"
                        ],
                        [
                            "predictions_tensor + prediction_expert",
                            "BinOp"
                        ],
                        [
                            "prediction_expert",
                            "variable"
                        ],
                        [
                            "prediction_expert",
                            "variable"
                        ]
                    ]
                },
                "y": {
                    "value": "mapping[:, expert_id:expert_id + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dense_143": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[None, self.original_x_dim], name=self.regressor_name + 'original_X')",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[None, self.original_x_dim], name=self.regressor_name + 'original_X')",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[None, self.original_x_dim], name=self.regressor_name + 'original_X')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.vae_hidden_units[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'vae_fc_e1_' + expert_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_145": {
                "variable": {
                    "value": "fc2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=x_input, units=self.vae_hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'vae_fc_e1_' + expert_name)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.vae_hidden_units[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'vae_fc_e2_' + expert_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_147": {
                "variable": {
                    "value": "fc3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=fc1, units=self.vae_hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'vae_fc_e2_' + expert_name)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.vae_hidden_units[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'vae_fc_e3_' + expert_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_151": {
                "variable": {
                    "value": "z_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=fc2, units=self.vae_hidden_units[2], activation=tf.nn.elu, name=self.regressor_name + 'vae_fc_e3_' + expert_name)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self._vae_n_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'vae_fc_e4_' + expert_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_158": {
                "variable": {
                    "value": "g1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hidden_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_mu",
                            "variable"
                        ]
                    ]
                },
                "units": {
                    "value": "self.vae_hidden_units[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'vae_fc_d1_' + expert_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_160": {
                "variable": {
                    "value": "g2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "g1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=hidden_z, units=self.vae_hidden_units[2], activation=tf.nn.elu, name=self.regressor_name + 'vae_fc_d1_' + expert_name)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.vae_hidden_units[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'vae_fc_d2_' + expert_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_162": {
                "variable": {
                    "value": "g3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "g2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=g1, units=self.vae_hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'vae_fc_d2_' + expert_name)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.vae_hidden_units[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'vae_fc_d3_' + expert_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_165": {
                "variable": {
                    "value": "x_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "g3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=g2, units=self.vae_hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'vae_fc_d3_' + expert_name)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.original_x_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_squared_error_168": {
                "variable": {
                    "value": "recon_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "x_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=g3, units=self.original_x_dim, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[None, self.original_x_dim], name=self.regressor_name + 'original_X')",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[None, self.original_x_dim], name=self.regressor_name + 'original_X')",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[None, self.original_x_dim], name=self.regressor_name + 'original_X')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_169": {
                "variable": {
                    "value": "recon_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "recon_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.losses.mean_squared_error(predictions=x_hat, labels=x_input)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(recon_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_182": {
                "variable": {
                    "value": "new_x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_fea, x_fea_dr]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_190": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "new_x_fea",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_x",
                            "variable"
                        ]
                    ]
                },
                "units": {
                    "value": "self.hidden_units[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'fc_1_' + expert_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_194": {
                "variable": {
                    "value": "rho_1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                },
                "units": {
                    "value": "self.hidden_unit_len * (self.tau_part_num + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'embed_1' + expert_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_198": {
                "variable": {
                    "value": "rho_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "rho_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_unit_len * (self.tau_part_num + 1), activation=tf.nn.relu, name=self.regressor_name + 'embed_1' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(rho_1, [-1, self.tau_part_num + 1, self.hidden_unit_len])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.tau_part_num + 1, self.hidden_unit_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_202": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                },
                "units": {
                    "value": "self.hidden_units[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'fc_2_' + expert_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_206": {
                "variable": {
                    "value": "rho_2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                },
                "units": {
                    "value": "self.hidden_unit_len * (self.tau_part_num + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'embed_2_' + expert_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_210": {
                "variable": {
                    "value": "rho_2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "rho_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_unit_len * (self.tau_part_num + 1), activation=tf.nn.relu, name=self.regressor_name + 'embed_2_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(rho_2, [-1, self.tau_part_num + 1, self.hidden_unit_len])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.tau_part_num + 1, self.hidden_unit_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_214": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                },
                "units": {
                    "value": "self.hidden_units[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'fc_3_' + expert_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_219": {
                "variable": {
                    "value": "rho_3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                },
                "units": {
                    "value": "self.hidden_unit_len * (self.tau_part_num + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'embed_3_' + expert_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_223": {
                "variable": {
                    "value": "rho_3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "rho_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_unit_len * (self.tau_part_num + 1), activation=tf.nn.relu, name=self.regressor_name + 'embed_3_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(rho_3, [-1, self.tau_part_num + 1, self.hidden_unit_len])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.tau_part_num + 1, self.hidden_unit_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_227": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                },
                "units": {
                    "value": "self.hidden_units[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'fc_4_' + expert_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_231": {
                "variable": {
                    "value": "rho_4",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                },
                "units": {
                    "value": "self.hidden_unit_len * (self.tau_part_num + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'embed_4_' + expert_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_235": {
                "variable": {
                    "value": "rho_4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "rho_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_unit_len * (self.tau_part_num + 1), activation=tf.nn.relu, name=self.regressor_name + 'embed_4_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(rho_4, [-1, self.tau_part_num + 1, self.hidden_unit_len])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.tau_part_num + 1, self.hidden_unit_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_247": {
                "variable": {
                    "value": "new_x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_fea, x_fea_dr]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_248": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "new_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([x_fea, x_fea_dr], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([x_fea, x_fea_dr], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([x_fea, x_fea_dr], 1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.hidden_units[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'tau_part_1' + expert_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_250": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                },
                "units": {
                    "value": "self.hidden_units[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'tau_part_2' + expert_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_253": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                },
                "units": {
                    "value": "self.tau_part_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'tau_part_3' + expert_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_267": {
                "variable": {
                    "value": "residue_tau",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tau - accum_tau * self.max_tau",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_269": {
                "variable": {
                    "value": "residue_tau_s",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[residue_tau_s, tf.expand_dims(tf.zeros(self.input_num), axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "divide_271": {
                "variable": {
                    "value": "precent_tau",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.relu(residue_tau - residue_tau_s)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "dist_tau * self.max_tau",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_273": {
                "variable": {
                    "value": "precent_tau",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.expand_dims(tf.ones(self.input_num), axis=1), precent_tau]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_282": {
                "variable": {
                    "value": "w_t",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'w_t_' + expert_name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.tau_part_num + 1, self.unit_len]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_283": {
                "variable": {
                    "value": "b_t",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'b_t_' + expert_name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.tau_part_num + 1, self.unit_len]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_284": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.multiply(gate, w_t) + b_t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_287": {
                "variable": {
                    "value": "kernel_",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.unit_len]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'k_' + expert_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_288": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "kernel_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones([self.unit_len], dtype=tf.float32, name=self.regressor_name + 'k_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.ones([self.unit_len], dtype=tf.float32, name=self.regressor_name + 'k_' + expert_name)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, int(kernel_.shape[0]), 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'kernel_' + expert_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_291": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.squeeze(tf.nn.conv1d(gate, kernel, 1, 'VALID'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_295": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rhos[0]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([gate, rhos[hidden_id]], 2)",
                            "Call"
                        ],
                        [
                            "self._construct_rhos(x_fea, x_fea_dr, expert_name)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.multiply(gate, w_t) + b_t)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.squeeze(tf.nn.conv1d(gate, kernel, 1, 'VALID')))",
                            "Call"
                        ],
                        [
                            "tf.multiply(gate, tau_gate)",
                            "Call"
                        ],
                        [
                            "self._construct_rhos(x_fea, x_fea_dr, expert_name)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.multiply(gate, w_t) + b_t)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.squeeze(tf.nn.conv1d(gate, kernel, 1, 'VALID')))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tau_gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._partition_threshold(x_fea, x_fea_dr, tau, expert_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_297": {
                "variable": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rhos[0]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([gate, rhos[hidden_id]], 2)",
                            "Call"
                        ],
                        [
                            "self._construct_rhos(x_fea, x_fea_dr, expert_name)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.multiply(gate, w_t) + b_t)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.squeeze(tf.nn.conv1d(gate, kernel, 1, 'VALID')))",
                            "Call"
                        ],
                        [
                            "tf.multiply(gate, tau_gate)",
                            "Call"
                        ],
                        [
                            "self._construct_rhos(x_fea, x_fea_dr, expert_name)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.multiply(gate, w_t) + b_t)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.squeeze(tf.nn.conv1d(gate, kernel, 1, 'VALID')))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_299": {
                "variable": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(gate, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(prediction, 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(P, mask), 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(prediction, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_306": {
                "variable": {
                    "value": "new_x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_fea, x_fea_dr]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_307": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "new_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([x_fea, x_fea_dr], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([x_fea, x_fea_dr], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([x_fea, x_fea_dr], 1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.hidden_units[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'tau_part_1_' + expert_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_309": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                },
                "units": {
                    "value": "self.hidden_units[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'tau_part_2_' + expert_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_312": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                },
                "units": {
                    "value": "self.tau_part_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'tau_part_3_' + expert_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "range_330": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "fill_331": {
                "variable": {
                    "value": "diag",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[n]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "fill_332": {
                "variable": {
                    "value": "sub",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[n - 1]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "fill_333": {
                "variable": {
                    "value": "sup",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[n - 1]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "concat_334": {
                "variable": {
                    "value": "ii",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[r, r[1:], r[:-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_335": {
                "variable": {
                    "value": "jj",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[r, r[:-1], r[1:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_336": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[ii, jj]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_337": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[diag, sub, sup]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_347": {
                "variable": {
                    "value": "w_t",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'w_t_' + expert_name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.tau_part_num + 1, self.unit_len]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_348": {
                "variable": {
                    "value": "b_t",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'b_t_' + expert_name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.tau_part_num + 1, self.unit_len]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_349": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.multiply(gate, w_t) + b_t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_352": {
                "variable": {
                    "value": "kernel_",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.unit_len]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'k_' + expert_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_353": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "kernel_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones([self.unit_len], dtype=tf.float32, name=self.regressor_name + 'k_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.ones([self.unit_len], dtype=tf.float32, name=self.regressor_name + 'k_' + expert_name)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, int(kernel_.shape[0]), 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'kernel_' + expert_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_356": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.squeeze(tf.nn.conv1d(gate, kernel, 1, 'VALID'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "fill_364": {
                "variable": {
                    "value": "Z_zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[tf.shape(Z)[0], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "concat_365": {
                "variable": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[Z_zeros, Z]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_366": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.matmul(trid, tf.expand_dims(Z, 2))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cumsum_371": {
                "variable": {
                    "value": "Px",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.concat([f_first, DeltaP], 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fill_373": {
                "variable": {
                    "value": "tau_first",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[tf.shape(partition_tau)[0], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "concat_374": {
                "variable": {
                    "value": "partition_tau_",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tau_first, partition_tau[:, :-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "searchsorted_375": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "sorted_sequence": {
                    "value": "partition_tau_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tau_first, partition_tau[:, :-1]], 1)",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "tau",
                    "type": "variable",
                    "possible_values": []
                },
                "side": {
                    "value": "left",
                    "type": "str",
                    "possible_values": []
                }
            },
            "one_hot_377": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.searchsorted(partition_tau_, tau, side='left')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(indices) - 1",
                            "BinOp"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.tau_part_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_379": {
                "variable": {
                    "value": "tau_exp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tau",
                    "type": "variable",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, self.tau_part_num]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_382": {
                "variable": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(P, mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_384": {
                "variable": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(gate, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(prediction, 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(P, mask), 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(prediction, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_392": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.original_x_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'original_X'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_395": {
                "variable": {
                    "value": "tau_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.tau_part_num]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'tau_gate'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_396": {
                "variable": {
                    "value": "mapping",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.leaf_num]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'mapping'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_397": {
                "variable": {
                    "value": "init_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'init_indices'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_398": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.leaf_num + 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'Target'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_399": {
                "variable": {
                    "value": "self.bn_phase",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'Phase'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_400": {
                "variable": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'Dropout'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_402": {
                "variable": {
                    "value": "self.input_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'input_num'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_405": {
                "variable": {
                    "value": "self.vae_option",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'VAE_Option'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Saver_422": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_461": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.original_x_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'original_X'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_464": {
                "variable": {
                    "value": "tau_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.tau_part_num]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'tau'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_467": {
                "variable": {
                    "value": "mapping",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.leaf_num]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'mapping'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_470": {
                "variable": {
                    "value": "init_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'init_indices'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_472": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.leaf_num + 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'Targets'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_475": {
                "variable": {
                    "value": "self.bn_phase",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'Phase'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_478": {
                "variable": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'Dropout'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_481": {
                "variable": {
                    "value": "self.input_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'input_num'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_484": {
                "variable": {
                    "value": "self.vae_option",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'VAE_Option'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_487": {
                "variable": {
                    "value": "self.learning_rate_vae",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'lr_vae'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_488": {
                "variable": {
                    "value": "self.learning_rate_nn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'lr_nn'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AdamOptimizer_527": {
                "variable": {
                    "value": "optimizer_vae",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate_vae",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_528": {
                "variable": {
                    "value": "optimizer_expert",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate_nn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_529": {
                "variable": {
                    "value": "optimizer_one",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate_nn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_532": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_535": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_538": {
                "variable": {
                    "value": "session_config",
                    "type": "variable",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_705": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.original_x_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'original_X'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_709": {
                "variable": {
                    "value": "tau_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'tau'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_712": {
                "variable": {
                    "value": "mapping",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.leaf_num]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'mapping'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_715": {
                "variable": {
                    "value": "init_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'init_indices'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_717": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.leaf_num + 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'Targets'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_720": {
                "variable": {
                    "value": "self.bn_phase",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'Phase'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_723": {
                "variable": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'Dropout'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_726": {
                "variable": {
                    "value": "self.input_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'input_num'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_729": {
                "variable": {
                    "value": "self.vae_option",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'VAE_Option'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_732": {
                "variable": {
                    "value": "self.learning_rate_vae",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'lr_vae'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_733": {
                "variable": {
                    "value": "self.learning_rate_nn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.regressor_name + 'lr_nn'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AdamOptimizer_775": {
                "variable": {
                    "value": "optimizer_vae",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate_vae",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_776": {
                "variable": {
                    "value": "optimizer_expert",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate_nn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_777": {
                "variable": {
                    "value": "optimizer_one",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate_nn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_780": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_783": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_786": {
                "variable": {
                    "value": "session_config",
                    "type": "variable",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_squared_error_106": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.log(predictions_tensor + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.log(target_leaf + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_squared_error_124": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.log(predictions_tensor + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.log(target_leaf + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_242": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[gate, rhos[hidden_id]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_257": {
                "variable": {
                    "value": "dist_tau",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_316": {
                "variable": {
                    "value": "dist_tau",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                }
            },
            "expand_dims_338": {
                "input": {
                    "value": "tf.scatter_nd(idx, values, [n, n])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reset_default_graph_459": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_703": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "huber_loss_109": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "target_leaf",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "predictions_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(predictions_tensor, mapping[:, expert_id:expert_id + 1])",
                            "Call"
                        ],
                        [
                            "tf.multiply(predictions_tensor, mapping[:, expert_id:expert_id + 1])",
                            "Call"
                        ],
                        [
                            "prediction_expert",
                            "variable"
                        ],
                        [
                            "predictions_tensor + prediction_expert",
                            "BinOp"
                        ],
                        [
                            "prediction_expert",
                            "variable"
                        ],
                        [
                            "prediction_expert",
                            "variable"
                        ]
                    ]
                },
                "delta": {
                    "value": "1.345",
                    "type": "float",
                    "possible_values": []
                }
            },
            "huber_loss_127": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "target_leaf",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "predictions_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(predictions_tensor, mapping[:, expert_id:expert_id + 1])",
                            "Call"
                        ],
                        [
                            "tf.multiply(predictions_tensor, mapping[:, expert_id:expert_id + 1])",
                            "Call"
                        ],
                        [
                            "prediction_expert",
                            "variable"
                        ],
                        [
                            "predictions_tensor + prediction_expert",
                            "BinOp"
                        ],
                        [
                            "prediction_expert",
                            "variable"
                        ],
                        [
                            "prediction_expert",
                            "variable"
                        ]
                    ]
                },
                "delta": {
                    "value": "1.345",
                    "type": "float",
                    "possible_values": []
                }
            },
            "expand_dims_260": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reduce_sum(out, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_261": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.reduce_sum(out, 1), 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(norm, [1, self.tau_part_num])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.reduce_sum(out, 1), 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(norm, [1, self.tau_part_num])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, self.tau_part_num]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truediv_262": {
                "variable": {
                    "value": "dist_tau",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.reduce_sum(out, 1), 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(norm, [1, self.tau_part_num])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.reduce_sum(out, 1), 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(norm, [1, self.tau_part_num])",
                            "Call"
                        ]
                    ]
                }
            },
            "cumsum_266": {
                "x": {
                    "value": "dist_tau",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(out)",
                            "Call"
                        ],
                        [
                            "tf.truediv(out, norm)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(out)",
                            "Call"
                        ],
                        [
                            "tf.truediv(out, norm)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_271": {
                "features": {
                    "value": "residue_tau - residue_tau_s",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_291": {
                "input": {
                    "value": "tf.nn.conv1d(gate, kernel, 1, 'VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_319": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reduce_sum(out, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_320": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.reduce_sum(out, 1), 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(norm, [1, self.tau_part_num])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.reduce_sum(out, 1), 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(norm, [1, self.tau_part_num])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, self.tau_part_num]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truediv_321": {
                "variable": {
                    "value": "dist_tau",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.reduce_sum(out, 1), 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(norm, [1, self.tau_part_num])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.reduce_sum(out, 1), 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(norm, [1, self.tau_part_num])",
                            "Call"
                        ]
                    ]
                }
            },
            "cumsum_325": {
                "x": {
                    "value": "dist_tau",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(out)",
                            "Call"
                        ],
                        [
                            "tf.truediv(out, norm)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(out)",
                            "Call"
                        ],
                        [
                            "tf.truediv(out, norm)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scatter_nd_338": {
                "indices": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([ii, jj], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([diag, sub, sup], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n, n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_356": {
                "input": {
                    "value": "tf.nn.conv1d(gate, kernel, 1, 'VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_366": {
                "a": {
                    "value": "trid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tridiagonal(self.tau_part_num + 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.expand_dims(Z, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_370": {
                "x": {
                    "value": "D[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist_tau * self.max_tau",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_371": {
                "values": {
                    "value": "[f_first, DeltaP]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_376": {
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.searchsorted(partition_tau_, tau, side='left')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(indices) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "multiply_382": {
                "x": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(Z[:, :-1], tau_exp - partition_tau_) + 0.5 * (Z[:, 1:] - Z[:, :-1]) / H * (tau_exp - partition_tau_) ** 2 + Px[:, :-1]",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(indices, self.tau_part_num)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_423": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_540": {
                "config": {
                    "value": "session_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(log_device_placement=True)",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(log_device_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_788": {
                "config": {
                    "value": "session_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(log_device_placement=True)",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(log_device_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "huber_loss_111": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.log(target_leaf + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.log(predictions_tensor + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "delta": {
                    "value": "1.345",
                    "type": "float",
                    "possible_values": []
                }
            },
            "huber_loss_129": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.log(target_leaf + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.log(predictions_tensor + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "delta": {
                    "value": "1.345",
                    "type": "float",
                    "possible_values": []
                }
            },
            "expand_dims_269": {
                "input": {
                    "value": "tf.zeros(self.input_num)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_273": {
                "input": {
                    "value": "tf.ones(self.input_num)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_284": {
                "x": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rhos[0]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([gate, rhos[hidden_id]], 2)",
                            "Call"
                        ],
                        [
                            "self._construct_rhos(x_fea, x_fea_dr, expert_name)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.multiply(gate, w_t) + b_t)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.squeeze(tf.nn.conv1d(gate, kernel, 1, 'VALID')))",
                            "Call"
                        ],
                        [
                            "tf.multiply(gate, tau_gate)",
                            "Call"
                        ],
                        [
                            "self._construct_rhos(x_fea, x_fea_dr, expert_name)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.multiply(gate, w_t) + b_t)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.squeeze(tf.nn.conv1d(gate, kernel, 1, 'VALID')))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "w_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(self.regressor_name + 'w_t_' + expert_name, [self.tau_part_num + 1, self.unit_len], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(self.regressor_name + 'w_t_' + expert_name, [self.tau_part_num + 1, self.unit_len], tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv1d_291": {
                "input": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rhos[0]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([gate, rhos[hidden_id]], 2)",
                            "Call"
                        ],
                        [
                            "self._construct_rhos(x_fea, x_fea_dr, expert_name)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.multiply(gate, w_t) + b_t)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.squeeze(tf.nn.conv1d(gate, kernel, 1, 'VALID')))",
                            "Call"
                        ],
                        [
                            "tf.multiply(gate, tau_gate)",
                            "Call"
                        ],
                        [
                            "self._construct_rhos(x_fea, x_fea_dr, expert_name)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.multiply(gate, w_t) + b_t)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.squeeze(tf.nn.conv1d(gate, kernel, 1, 'VALID')))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(kernel_, [1, int(kernel_.shape[0]), 1], name=self.regressor_name + 'kernel_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(kernel_, [1, int(kernel_.shape[0]), 1], name=self.regressor_name + 'kernel_' + expert_name)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_349": {
                "x": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rhos[0]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([gate, rhos[hidden_id]], 2)",
                            "Call"
                        ],
                        [
                            "self._construct_rhos(x_fea, x_fea_dr, expert_name)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.multiply(gate, w_t) + b_t)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.squeeze(tf.nn.conv1d(gate, kernel, 1, 'VALID')))",
                            "Call"
                        ],
                        [
                            "tf.multiply(gate, tau_gate)",
                            "Call"
                        ],
                        [
                            "self._construct_rhos(x_fea, x_fea_dr, expert_name)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.multiply(gate, w_t) + b_t)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.squeeze(tf.nn.conv1d(gate, kernel, 1, 'VALID')))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "w_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(self.regressor_name + 'w_t_' + expert_name, [self.tau_part_num + 1, self.unit_len], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(self.regressor_name + 'w_t_' + expert_name, [self.tau_part_num + 1, self.unit_len], tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv1d_356": {
                "input": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rhos[0]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([gate, rhos[hidden_id]], 2)",
                            "Call"
                        ],
                        [
                            "self._construct_rhos(x_fea, x_fea_dr, expert_name)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.multiply(gate, w_t) + b_t)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.squeeze(tf.nn.conv1d(gate, kernel, 1, 'VALID')))",
                            "Call"
                        ],
                        [
                            "tf.multiply(gate, tau_gate)",
                            "Call"
                        ],
                        [
                            "self._construct_rhos(x_fea, x_fea_dr, expert_name)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.multiply(gate, w_t) + b_t)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.squeeze(tf.nn.conv1d(gate, kernel, 1, 'VALID')))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(kernel_, [1, int(kernel_.shape[0]), 1], name=self.regressor_name + 'kernel_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(kernel_, [1, int(kernel_.shape[0]), 1], name=self.regressor_name + 'kernel_' + expert_name)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_366": {
                "input": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gate[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([Z_zeros, Z], 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_380": {
                "x": {
                    "value": "Z[:, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "tau_exp - partition_tau_",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_squared_error_516": {
                "predictions": {
                    "value": "tf.log(predictions_tensor + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.log(targets[:, -1:] + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_squared_error_764": {
                "predictions": {
                    "value": "tf.log(predictions_tensor + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.log(targets[:, -1:] + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_106": {
                "x": {
                    "value": "predictions_tensor + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_107": {
                "x": {
                    "value": "target_leaf + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_124": {
                "x": {
                    "value": "predictions_tensor + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_125": {
                "x": {
                    "value": "target_leaf + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_259": {
                "x": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_260": {
                "input_tensor": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_269": {
                "shape": {
                    "value": "self.input_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_273": {
                "shape": {
                    "value": "self.input_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_318": {
                "x": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_319": {
                "input_tensor": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=new_x_fea, units=self.hidden_units[0], activation=tf.nn.relu, name=self.regressor_name + 'fc_1_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.relu, name=self.regressor_name + 'fc_2_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[2], activation=tf.nn.relu, name=self.regressor_name + 'fc_3_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[3], activation=tf.nn.relu, name=self.regressor_name + 'fc_4_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=new_x, units=self.hidden_units[0], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_1_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.hidden_units[1], activation=tf.nn.elu, name=self.regressor_name + 'tau_part_2_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=out, units=self.tau_part_num, activation=tf.nn.elu, name=self.regressor_name + 'tau_part_3_' + expert_name)",
                            "Call"
                        ],
                        [
                            "tf.multiply(out, out) + eps",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_364": {
                "input": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gate[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([Z_zeros, Z], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_373": {
                "input": {
                    "value": "partition_tau",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cumsum(dist_tau, 1) * self.max_tau",
                            "BinOp"
                        ]
                    ]
                }
            },
            "huber_loss_520": {
                "labels": {
                    "value": "targets[:, -1:]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[None, self.leaf_num + 1], name=self.regressor_name + 'Target')",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[None, self.leaf_num + 1], name=self.regressor_name + 'Targets')",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[None, self.leaf_num + 1], name=self.regressor_name + 'Targets')",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "predictions_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(predictions_tensor, mapping[:, expert_id:expert_id + 1])",
                            "Call"
                        ],
                        [
                            "tf.multiply(predictions_tensor, mapping[:, expert_id:expert_id + 1])",
                            "Call"
                        ],
                        [
                            "prediction_expert",
                            "variable"
                        ],
                        [
                            "predictions_tensor + prediction_expert",
                            "BinOp"
                        ],
                        [
                            "prediction_expert",
                            "variable"
                        ],
                        [
                            "prediction_expert",
                            "variable"
                        ]
                    ]
                },
                "delta": {
                    "value": "1.345",
                    "type": "float",
                    "possible_values": []
                }
            },
            "huber_loss_768": {
                "labels": {
                    "value": "targets[:, -1:]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[None, self.leaf_num + 1], name=self.regressor_name + 'Target')",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[None, self.leaf_num + 1], name=self.regressor_name + 'Targets')",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[None, self.leaf_num + 1], name=self.regressor_name + 'Targets')",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "predictions_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(predictions_tensor, mapping[:, expert_id:expert_id + 1])",
                            "Call"
                        ],
                        [
                            "tf.multiply(predictions_tensor, mapping[:, expert_id:expert_id + 1])",
                            "Call"
                        ],
                        [
                            "prediction_expert",
                            "variable"
                        ],
                        [
                            "predictions_tensor + prediction_expert",
                            "BinOp"
                        ],
                        [
                            "prediction_expert",
                            "variable"
                        ],
                        [
                            "prediction_expert",
                            "variable"
                        ]
                    ]
                },
                "delta": {
                    "value": "1.345",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_516": {
                "x": {
                    "value": "predictions_tensor + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_517": {
                "x": {
                    "value": "targets[:, -1:] + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "huber_loss_523": {
                "labels": {
                    "value": "tf.log(targets[:, -1:] + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.log(predictions_tensor + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "delta": {
                    "value": "1.345",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_764": {
                "x": {
                    "value": "predictions_tensor + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_765": {
                "x": {
                    "value": "targets[:, -1:] + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "huber_loss_771": {
                "labels": {
                    "value": "tf.log(targets[:, -1:] + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.log(predictions_tensor + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "delta": {
                    "value": "1.345",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_111": {
                "x": {
                    "value": "predictions_tensor + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_129": {
                "x": {
                    "value": "predictions_tensor + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_523": {
                "x": {
                    "value": "predictions_tensor + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_771": {
                "x": {
                    "value": "predictions_tensor + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "model/Dispatcher.py": {
        "tensorflow": {
            "to_int32_21": {
                "variable": {
                    "value": "where",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.where(tf.transpose(self.gate) > 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unstack_22": {
                "variable": {
                    "value": "(self._expert_index, self._batch_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "where",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_int32(tf.where(tf.transpose(self.gate) > 0))",
                            "Call"
                        ]
                    ]
                },
                "num": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_23": {
                "variable": {
                    "value": "self._part_sizes_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.to_int32(self.gate > 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_24": {
                "variable": {
                    "value": "self._nonzeros_gates",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.reshape(self.gate, [-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "self._batch_index * self.num_children_nodes + self._expert_index",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_29": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(X, self._batch_index)",
                            "Call"
                        ],
                        [
                            "tf.gather(X, self._batch_index)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self._batch_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_30": {
                "variable": {
                    "value": "_X_s",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(X, self._batch_index)",
                            "Call"
                        ],
                        [
                            "tf.gather(X, self._batch_index)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "self._part_sizes_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "num": {
                    "value": "self.num_children_nodes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_32": {
                "variable": {
                    "value": "Tau",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "Tau",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(Tau, self._batch_index)",
                            "Call"
                        ],
                        [
                            "tf.gather(Tau, self._batch_index)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self._batch_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_33": {
                "variable": {
                    "value": "_Tau_s",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "Tau",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(Tau, self._batch_index)",
                            "Call"
                        ],
                        [
                            "tf.gather(Tau, self._batch_index)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "self._part_sizes_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "num": {
                    "value": "self.num_children_nodes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_35": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(Y, self._batch_index)",
                            "Call"
                        ],
                        [
                            "tf.gather(Y, self._batch_index)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self._batch_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_36": {
                "variable": {
                    "value": "_Y_s",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(Y, self._batch_index)",
                            "Call"
                        ],
                        [
                            "tf.gather(Y, self._batch_index)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "self._part_sizes_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "num": {
                    "value": "self.num_children_nodes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_41": {
                "variable": {
                    "value": "Repr",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "Repr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(Repr, self._batch_index)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self._batch_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_42": {
                "variable": {
                    "value": "_Repr_s",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "Repr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(Repr, self._batch_index)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "self._part_sizes_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "num": {
                    "value": "self.num_children_nodes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_44": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(X, self._batch_index)",
                            "Call"
                        ],
                        [
                            "tf.gather(X, self._batch_index)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self._batch_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_45": {
                "variable": {
                    "value": "_X_s",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(X, self._batch_index)",
                            "Call"
                        ],
                        [
                            "tf.gather(X, self._batch_index)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "self._part_sizes_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "num": {
                    "value": "self.num_children_nodes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_47": {
                "variable": {
                    "value": "Tau",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "Tau",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(Tau, self._batch_index)",
                            "Call"
                        ],
                        [
                            "tf.gather(Tau, self._batch_index)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self._batch_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_48": {
                "variable": {
                    "value": "_Tau_s",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "Tau",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(Tau, self._batch_index)",
                            "Call"
                        ],
                        [
                            "tf.gather(Tau, self._batch_index)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "self._part_sizes_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "num": {
                    "value": "self.num_children_nodes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_50": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(Y, self._batch_index)",
                            "Call"
                        ],
                        [
                            "tf.gather(Y, self._batch_index)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self._batch_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_51": {
                "variable": {
                    "value": "_Y_s",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(Y, self._batch_index)",
                            "Call"
                        ],
                        [
                            "tf.gather(Y, self._batch_index)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "self._part_sizes_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "num": {
                    "value": "self.num_children_nodes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_57": {
                "variable": {
                    "value": "stitched",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "children_labels_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_58": {
                "variable": {
                    "value": "stitched",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._nonzeros_gates",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsorted_segment_sum_59": {
                "variable": {
                    "value": "combined",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "stitched",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(children_labels_vec, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(self._nonzeros_gates, 1)",
                            "Call"
                        ]
                    ]
                },
                "segment_ids": {
                    "value": "self._batch_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_segments": {
                    "value": "tf.shape(self.gate)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "where_21": {
                "condition": {
                    "value": "tf.transpose(self.gate) > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "to_int32_23": {
                "x": {
                    "value": "self.gate > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "reshape_25": {
                "tensor": {
                    "value": "self.gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_60": {
                "input": {
                    "value": "self.gate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_21": {
                "a": {
                    "value": "self.gate",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "proc/covertree/cover_tree.py": {
        "tensorflow": {}
    }
}