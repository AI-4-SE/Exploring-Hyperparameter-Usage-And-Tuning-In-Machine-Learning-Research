{
    "data_reader.py": {
        "tensorflow": {
            "decode_jpeg_9": {
                "variable": {
                    "value": "decoded_frames",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "jpeg_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "jpeg_data",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_image_dtype_10": {
                "image": {
                    "value": "decoded_frames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(jpeg_data)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "parse_single_example_87": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.parse_single_example(example, feature_map)",
                            "Call"
                        ],
                        [
                            "example",
                            "Method Argument"
                        ],
                        [
                            "example",
                            "Method Argument"
                        ],
                        [
                            "example",
                            "Method Argument"
                        ]
                    ]
                },
                "features": {
                    "value": "feature_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'frames': tf.FixedLenFeature(shape=self._sequence_size, dtype=tf.string), 'cameras': tf.FixedLenFeature(shape=[self._sequence_size * self._num_camera_params], dtype=tf.float32)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "range_100": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "slice_103": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_randomized_indices()",
                            "Call"
                        ],
                        [
                            "tf.range(0, self._sequence_size)",
                            "Call"
                        ],
                        [
                            "tf.random_shuffle(indices)",
                            "Call"
                        ],
                        [
                            "tf.slice(indices, begin=[0], size=[example_size])",
                            "Call"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[example_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_108": {
                "variable": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._preprocess_frames(example, indices)",
                            "Call"
                        ],
                        [
                            "example['frames']",
                            "Subscript"
                        ],
                        [
                            "tf.gather(frames, indices, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(_convert_frame_data, frames, dtype=tf.uint8, back_prop=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(frames, img_shape)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_randomized_indices()",
                            "Call"
                        ],
                        [
                            "tf.range(0, self._sequence_size)",
                            "Call"
                        ],
                        [
                            "tf.random_shuffle(indices)",
                            "Call"
                        ],
                        [
                            "tf.slice(indices, begin=[0], size=[example_size])",
                            "Call"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "map_fn_109": {
                "variable": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "_convert_frame_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_convert_frame_data",
                            "Call"
                        ]
                    ]
                },
                "elems": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._preprocess_frames(example, indices)",
                            "Call"
                        ],
                        [
                            "example['frames']",
                            "Subscript"
                        ],
                        [
                            "tf.gather(frames, indices, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(_convert_frame_data, frames, dtype=tf.uint8, back_prop=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(frames, img_shape)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_112": {
                "variable": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._preprocess_frames(example, indices)",
                            "Call"
                        ],
                        [
                            "example['frames']",
                            "Subscript"
                        ],
                        [
                            "tf.gather(frames, indices, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(_convert_frame_data, frames, dtype=tf.uint8, back_prop=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(frames, img_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "img_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self._context_size + 1, im_size, im_size, _NUM_CHANNELS]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_117": {
                "variable": {
                    "value": "pose",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "example['cameras']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(pose, [self._sequence_size, self._num_camera_params])",
                            "Call"
                        ],
                        [
                            "tf.gather(pose, indices, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self._sequence_size, self._num_camera_params]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_118": {
                "variable": {
                    "value": "pose",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "pose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "example['cameras']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(pose, [self._sequence_size, self._num_camera_params])",
                            "Call"
                        ],
                        [
                            "tf.gather(pose, indices, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_randomized_indices()",
                            "Call"
                        ],
                        [
                            "tf.range(0, self._sequence_size)",
                            "Call"
                        ],
                        [
                            "tf.random_shuffle(indices)",
                            "Call"
                        ],
                        [
                            "tf.slice(indices, begin=[0], size=[example_size])",
                            "Call"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_125": {
                "variable": {
                    "value": "cameras",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[pos, tf.sin(yaw), tf.cos(yaw), tf.sin(pitch), tf.cos(pitch)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "prefetch_to_device_47": {
                "device": {
                    "value": "f'/gpu:{gpu_id}'",
                    "type": "JoinedStr",
                    "possible_values": []
                },
                "buffer_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "FixedLenFeature_81": {
                "shape": {
                    "value": "self._sequence_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_83": {
                "shape": {
                    "value": "[self._sequence_size * self._num_camera_params]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_95": {
                "value": {
                    "value": "self._fov",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_94": {
                "shape": {
                    "value": "[self._context_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sin_126": {
                "x": {
                    "value": "pitch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pose[:, 4:5]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cos_126": {
                "x": {
                    "value": "pitch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pose[:, 4:5]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Glob_67": {
                "filename": {
                    "value": "dataset_paths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_dataset_paths(self._dataset_root, self._dataset_path)",
                            "Call"
                        ],
                        [
                            "join(dataset_root, dataset_path)",
                            "Call"
                        ],
                        [
                            "[join(dataset_root, dp) for dp in dataset_path]",
                            "ListComp"
                        ],
                        [
                            "list(sorted(tf.gfile.Glob(dataset_paths)))",
                            "Call"
                        ],
                        [
                            "[datatset_paths]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "test_data_reader.py": {
        "tensorflow": {
            "Session_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}