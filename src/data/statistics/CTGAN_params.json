{
    "tests/integration/synthesizer/test_tvae.py": {
        "sklearn": {
            "load_iris_21": {
                "variable": {
                    "value": "iris",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ctgan/synthesizers/base.py": {
        "torch": {
            "get_rng_state_20": {
                "variable": {
                    "value": "original_torch_state",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_rng_state_25": {
                "new_state": {
                    "value": "random_torch_state.get_state()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Generator_32": {
                "variable": {
                    "value": "current_torch_state",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_77": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_78": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "set_rng_state_37": {
                "new_state": {
                    "value": "original_torch_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.get_rng_state()",
                            "Call"
                        ]
                    ]
                }
            },
            "save_71": {
                "obj": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_rng_state_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_70": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Generator_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_95": {
                "seed": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "ctgan/synthesizers/ctgan.py": {
        "torch": {
            "Sequential_31": {
                "variable": {
                    "value": "self.seq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*seq",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "rand_35": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "real_data.size(0) // pac",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "str"
                        ],
                        [
                            "cuda",
                            "variable"
                        ],
                        [
                            "'cuda'",
                            "str"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_65": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            [
                                0,
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                8,
                                9
                            ],
                            "Call"
                        ],
                        [
                            "range(epochs)",
                            "Call"
                        ],
                        [
                            "range(steps)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_66": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_67": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "variable": {
                    "value": "self.seq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*seq",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "device_173": {
                "variable": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "str"
                        ],
                        [
                            "cuda",
                            "variable"
                        ],
                        [
                            "'cuda'",
                            "str"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_252": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(loss, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_329": {
                "variable": {
                    "value": "optimizerG",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self._generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self._generator_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self._generator_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_334": {
                "variable": {
                    "value": "optimizerD",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self._discriminator_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self._discriminator_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_339": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self._batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self._embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_74": {
                "tensors": {
                    "value": "[out, input_]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gumbel_softmax_208": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tau": {
                    "value": "tau",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "hard": {
                    "value": "hard",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-10",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim * pac",
                            "BinOp"
                        ],
                        [
                            "item",
                            "variable"
                        ],
                        [
                            "embedding_dim",
                            "variable"
                        ],
                        [
                            "dim + item",
                            "BinOp"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_228": {
                "tensors": {
                    "value": "data_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_454": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self._batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self._embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normal_456": {
                "variable": {
                    "value": "fakez",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(self._batch_size, self._embedding_dim, device=self._device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(self._batch_size, self._embedding_dim)",
                            "Call"
                        ]
                    ]
                },
                "std": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mean + 1",
                            "BinOp"
                        ],
                        [
                            "mean + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_30": {
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim * pac",
                            "BinOp"
                        ],
                        [
                            "item",
                            "variable"
                        ],
                        [
                            "embedding_dim",
                            "variable"
                        ],
                        [
                            "dim + item",
                            "BinOp"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_43": {
                "outputs": {
                    "value": "disc_interpolates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self(interpolates)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "interpolates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alpha * real_data + (1 - alpha) * fake_data",
                            "BinOp"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones(disc_interpolates.size(), device=device)",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_87": {
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim * pac",
                            "BinOp"
                        ],
                        [
                            "item",
                            "variable"
                        ],
                        [
                            "embedding_dim",
                            "variable"
                        ],
                        [
                            "dim + item",
                            "BinOp"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "data_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._transformer.output_dimensions",
                            "Attribute"
                        ]
                    ]
                }
            },
            "gumbel_softmax_202": {
                "variable": {
                    "value": "transformed",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tau": {
                    "value": "tau",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "hard": {
                    "value": "hard",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-10",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim * pac",
                            "BinOp"
                        ],
                        [
                            "item",
                            "variable"
                        ],
                        [
                            "embedding_dim",
                            "variable"
                        ],
                        [
                            "dim + item",
                            "BinOp"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "normal_389": {
                "variable": {
                    "value": "fakez",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(self._batch_size, self._embedding_dim, device=self._device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(self._batch_size, self._embedding_dim)",
                            "Call"
                        ]
                    ]
                },
                "std": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mean + 1",
                            "BinOp"
                        ],
                        [
                            "mean + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_467": {
                "variable": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(c1).to(self._device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(c1).to(self._device)",
                            "Call"
                        ],
                        [
                            "condvec",
                            "variable"
                        ],
                        [
                            "torch.from_numpy(c1).to(self._device)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_468": {
                "variable": {
                    "value": "fakez",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fakez, c1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim * pac",
                            "BinOp"
                        ],
                        [
                            "item",
                            "variable"
                        ],
                        [
                            "embedding_dim",
                            "variable"
                        ],
                        [
                            "dim + item",
                            "BinOp"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(discriminator_dim)",
                            "Call"
                        ],
                        [
                            "list(generator_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "LeakyReLU_27": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_27": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_243": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data[:, st:ed]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.argmax(c[:, st_c:ed_c], dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "normal_347": {
                "variable": {
                    "value": "fakez",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(self._batch_size, self._embedding_dim, device=self._device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(self._batch_size, self._embedding_dim)",
                            "Call"
                        ]
                    ]
                },
                "std": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mean + 1",
                            "BinOp"
                        ],
                        [
                            "mean + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_368": {
                "variable": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "real.astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_396": {
                "variable": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(c1).to(self._device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(c1).to(self._device)",
                            "Call"
                        ],
                        [
                            "condvec",
                            "variable"
                        ],
                        [
                            "torch.from_numpy(c1).to(self._device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_397": {
                "variable": {
                    "value": "m1",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "m1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(m1).to(self._device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(m1).to(self._device)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_398": {
                "variable": {
                    "value": "fakez",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fakez, c1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_45": {
                "*size": {
                    "value": "disc_interpolates.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "str"
                        ],
                        [
                            "cuda",
                            "variable"
                        ],
                        [
                            "'cuda'",
                            "str"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "isnan_204": {
                "input": {
                    "value": "transformed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "functional.gumbel_softmax(logits, tau=tau, hard=hard, eps=eps, dim=dim)",
                            "Call"
                        ],
                        [
                            "self._gumbel_softmax(data[:, st:ed], tau=0.2)",
                            "Call"
                        ]
                    ]
                }
            },
            "any_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_355": {
                "variable": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(c1).to(self._device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(c1).to(self._device)",
                            "Call"
                        ],
                        [
                            "condvec",
                            "variable"
                        ],
                        [
                            "torch.from_numpy(c1).to(self._device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_356": {
                "variable": {
                    "value": "m1",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "m1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(m1).to(self._device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(m1).to(self._device)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_357": {
                "variable": {
                    "value": "fakez",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fakez, c1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_371": {
                "variable": {
                    "value": "fake_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fakeact, c1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_372": {
                "variable": {
                    "value": "real_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[real, c2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_218": {
                "input": {
                    "value": "data[:, st:ed]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "argmax_245": {
                "input": {
                    "value": "c[:, st_c:ed_c]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_404": {
                "tensors": {
                    "value": "[fakeact, c1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_413": {
                "input": {
                    "value": "y_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator(torch.cat([fakeact, c1], dim=1))",
                            "Call"
                        ],
                        [
                            "discriminator(fakeact)",
                            "Call"
                        ],
                        [
                            "discriminator(fake_cat)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_382": {
                "input": {
                    "value": "y_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator(torch.cat([fakeact, c1], dim=1))",
                            "Call"
                        ],
                        [
                            "discriminator(fakeact)",
                            "Call"
                        ],
                        [
                            "discriminator(fake_cat)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ctgan/synthesizers/tvae.py": {
        "torch": {
            "Sequential_37": {
                "variable": {
                    "value": "self.seq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*seq",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_dim",
                            "variable"
                        ],
                        [
                            "item",
                            "variable"
                        ],
                        [
                            "embedding_dim",
                            "variable"
                        ],
                        [
                            "item",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_dim",
                            "variable"
                        ],
                        [
                            "item",
                            "variable"
                        ],
                        [
                            "embedding_dim",
                            "variable"
                        ],
                        [
                            "item",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_46": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_71": {
                "variable": {
                    "value": "self.seq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*seq",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Parameter_72": {
                "variable": {
                    "value": "self.sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(data_dim) * 0.1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_134": {
                "variable": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "str"
                        ],
                        [
                            "cuda",
                            "variable"
                        ],
                        [
                            "'cuda'",
                            "str"
                        ]
                    ]
                }
            },
            "TensorDataset_152": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(train_data.astype('float32')).to(self._device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_153": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(torch.from_numpy(train_data.astype('float32')).to(self._device))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_158": {
                "variable": {
                    "value": "optimizerAE",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(encoder.parameters()) + list(self.decoder.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.l2scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_99": {
                "input": {
                    "value": "1 + logvar - mu ** 2 - logvar.exp()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_195": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normal_197": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(self.batch_size, self.embedding_dim)",
                            "Call"
                        ]
                    ]
                },
                "std": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sigmas[st]",
                            "Subscript"
                        ],
                        [
                            "torch.exp(0.5 * logvar)",
                            "Call"
                        ],
                        [
                            "mean + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tanh_199": {
                "variable": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(fake)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_70": {
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_dim",
                            "variable"
                        ],
                        [
                            "item",
                            "variable"
                        ],
                        [
                            "embedding_dim",
                            "variable"
                        ],
                        [
                            "item",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "data_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transformer.output_dimensions",
                            "Attribute"
                        ]
                    ]
                }
            },
            "from_numpy_152": {
                "ndarray": {
                    "value": "train_data.astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_like_167": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sigmas[st]",
                            "Subscript"
                        ],
                        [
                            "torch.exp(0.5 * logvar)",
                            "Call"
                        ],
                        [
                            "mean + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_32": {
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_dim",
                            "variable"
                        ],
                        [
                            "item",
                            "variable"
                        ],
                        [
                            "embedding_dim",
                            "variable"
                        ],
                        [
                            "item",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(compress_dims)",
                            "Call"
                        ],
                        [
                            "list(decompress_dims)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_67": {
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_dim",
                            "variable"
                        ],
                        [
                            "item",
                            "variable"
                        ],
                        [
                            "embedding_dim",
                            "variable"
                        ],
                        [
                            "item",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(compress_dims)",
                            "Call"
                        ],
                        [
                            "list(decompress_dims)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_72": {
                "*size": {
                    "value": "data_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transformer.output_dimensions",
                            "Attribute"
                        ]
                    ]
                }
            },
            "is_available_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_87": {
                "input": {
                    "value": "recon_x[:, st]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cross_entropy_94": {
                "input": {
                    "value": "recon_x[:, st:ed]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.argmax(x[:, st:ed], dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_89": {
                "input": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sigmas[st]",
                            "Subscript"
                        ],
                        [
                            "torch.exp(0.5 * logvar)",
                            "Call"
                        ],
                        [
                            "mean + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "argmax_95": {
                "input": {
                    "value": "x[:, st:ed]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "tests/unit/synthesizer/test_base.py": {
        "torch": {}
    },
    "tests/unit/synthesizer/test_ctgan.py": {
        "torch": {
            "randn_202": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_242": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, -1.0, 0.0, 0.05, 0.05, 0.9, 0.1, 0.4]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_247": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 0.0, 1.0, 0.0, 0.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_255": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cross_entropy_258": {
                "variable": {
                    "value": "expected",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor([[0.05, 0.05, 0.9]])",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.tensor([2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_61": {
                "*size": {
                    "value": "70",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_97": {
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_157": {
                "*size": {
                    "value": "70",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "60",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_259": {
                "data": {
                    "value": "[[0.05, 0.05, 0.9]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_262": {
                "data": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    }
}