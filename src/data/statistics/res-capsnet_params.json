{
    "train.py": {
        "sklearn": {},
        "tensorflow": {
            "reduce_mean_91": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "margin_loss(logits, tf.one_hot(y, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ],
                        [
                            "loss + reconstruction_loss",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_109": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(tf.nn.softmax(logits), axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MirroredStrategy_118": {
                "variable": {
                    "value": "strategy",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_file_writer_127": {
                "variable": {
                    "value": "train_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "'%s/log/train' % args.log_dir",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "create_file_writer_128": {
                "variable": {
                    "value": "test_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "'%s/log/test' % args.log_dir",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "list_physical_devices_296": {
                "variable": {
                    "value": "physical_devices",
                    "type": "Variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "square_96": {
                "variable": {
                    "value": "distance",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "reconstruction - x_1d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_97": {
                "variable": {
                    "value": "reconstruction_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "distance",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.square(reconstruction - x_1d)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_110": {
                "input_tensor": {
                    "value": "tf.cast(tf.equal(predictions, labels), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_135": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Checkpoint_136": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.optimizers.Adam(learning_rate=args.learning_rate)",
                            "Call"
                        ]
                    ]
                },
                "model": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ConvCapsNet(args)",
                            "Call"
                        ],
                        [
                            "CapsNet(args)",
                            "Call"
                        ]
                    ]
                }
            },
            "Mean_139": {
                "variable": {
                    "value": "test_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "test_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_88": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "one_hot_90": {
                "indices": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(logits)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "argmax_109": {
                "input": {
                    "value": "tf.nn.softmax(logits)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_110": {
                "x": {
                    "value": "tf.equal(predictions, labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_164": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "function_176": {
                "variable": {
                    "value": "distributed_train_step",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "function_177": {
                "variable": {
                    "value": "distributed_test_step",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "set_memory_growth_299": {
                "device": {
                    "value": "physical_devices[r]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "enable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Flatten_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_99": {
                "input_tensor": {
                    "value": "reconstruction_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(distance, axis=-1)",
                            "Call"
                        ],
                        [
                            "args.reconstruction_weight * tf.reduce_mean(reconstruction_loss)",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "softmax_109": {
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "equal_110": {
                "x": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.argmax(tf.nn.softmax(logits), axis=1), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GradientTape_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_191": {
                "input_tensor": {
                    "value": "distr_loss.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_193": {
                "input_tensor": {
                    "value": "distr_acc.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_206": {
                "variable": {
                    "value": "recon_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "recon_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "distr_imgs[1].values[0] if num_replicas > 1 else distr_imgs[1]",
                            "IfExp"
                        ],
                        [
                            "tf.reshape(recon_x, [-1, tf.shape(x)[1], tf.shape(x)[2], args.img_depth])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, tf.shape(x)[1], tf.shape(x)[2], args.img_depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_208": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "distr_imgs[0].values[0] if num_replicas > 1 else distr_imgs[0]",
                            "IfExp"
                        ],
                        [
                            "tf.reshape(x, [-1, tf.shape(x)[1], tf.shape(x)[2], args.img_depth])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, tf.shape(x)[1], tf.shape(x)[2], args.img_depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_210": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x, recon_x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_263": {
                "name": {
                    "value": "bundle/Num",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "conflicts[-1][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "step": {
                    "value": "epoch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "range(args.epochs)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_265": {
                "name": {
                    "value": "bundle/Entropy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "conflicts[-1][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "step": {
                    "value": "epoch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "range(args.epochs)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_278": {
                "name": {
                    "value": "General/Accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "test_acc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.mean(test_acc)",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "step + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_279": {
                "name": {
                    "value": "General/Loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "test_loss.result()",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "step + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_220": {
                "name": {
                    "value": "General/Accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "acc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(distr_acc.values) if num_replicas > 1 else distr_acc",
                            "IfExp"
                        ],
                        [
                            "compute_accuracy(logits, y)",
                            "Call"
                        ],
                        [
                            "compute_accuracy(logits, y)",
                            "Call"
                        ],
                        [
                            "train(train_ds, test_ds, class_names)",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "step + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_221": {
                "name": {
                    "value": "General/Loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "train_loss.numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "step + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "image_212": {
                "name": {
                    "value": "X & Recon",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([x, recon_x], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "step + 1",
                            "BinOp"
                        ]
                    ]
                },
                "max_outputs": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_207": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "distr_imgs[0].values[0] if num_replicas > 1 else distr_imgs[0]",
                            "IfExp"
                        ],
                        [
                            "tf.reshape(x, [-1, tf.shape(x)[1], tf.shape(x)[2], args.img_depth])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_209": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "distr_imgs[0].values[0] if num_replicas > 1 else distr_imgs[0]",
                            "IfExp"
                        ],
                        [
                            "tf.reshape(x, [-1, tf.shape(x)[1], tf.shape(x)[2], args.img_depth])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils.py": {
        "sklearn": {},
        "tensorflow": {
            "decode_png_26": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "buf.getvalue()",
                    "type": "Call",
                    "possible_values": []
                },
                "channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_28": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.decode_png(buf.getvalue(), channels=4)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_65": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "logits.numpy()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "capsule/capsule_layer.py": {
        "tensorflow": {
            "expand_dims_36": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(u, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(u, 3)",
                            "Call"
                        ],
                        [
                            "tf.tile(u, [1, self.out_capsules, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(u, [1, 1, 1, self.out_dim, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_37": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(u, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(u, 3)",
                            "Call"
                        ],
                        [
                            "tf.tile(u, [1, self.out_capsules, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(u, [1, 1, 1, self.out_dim, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_38": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(u, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(u, 3)",
                            "Call"
                        ],
                        [
                            "tf.tile(u, [1, self.out_capsules, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(u, [1, 1, 1, self.out_dim, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, self.out_capsules, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_39": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(u, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(u, 3)",
                            "Call"
                        ],
                        [
                            "tf.tile(u, [1, self.out_capsules, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(u, [1, 1, 1, self.out_dim, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 1, self.out_dim, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_41": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch_size, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_43": {
                "variable": {
                    "value": "u_hat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "u * w",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_46": {
                "variable": {
                    "value": "b_ij",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self.out_capsules, self.in_capsules, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_normal_initializer_22": {
                "variable": {
                    "value": "w_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Variable_23": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "w_init(shape=(1, out_capsules, in_capsules, out_dim, in_dim), dtype='float32')",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_48": {
                "variable": {
                    "value": "c_ij",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "b_ij",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros(shape=[batch_size, self.out_capsules, self.in_capsules, 1])",
                            "Call"
                        ],
                        [
                            "b_ij + tf.expand_dims(u_x_v, axis=-1)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_49": {
                "variable": {
                    "value": "c_ij_tiled",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c_ij",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(b_ij, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 1, self.out_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_21": {
                "name": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_27": {
                "variable": {
                    "value": "bias_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Variable_28": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "bias_init(shape=(1, out_capsules, out_dim), dtype='float32')",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_34": {
                "input": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(u, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(u, 3)",
                            "Call"
                        ],
                        [
                            "tf.tile(u, [1, self.out_capsules, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(u, [1, 1, 1, self.out_dim, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_45": {
                "input": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch_size, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_54": {
                "variable": {
                    "value": "v_j",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_j",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "squash(s_j)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(v_j, 2)",
                            "Call"
                        ],
                        [
                            "tf.tile(v_j, [1, 1, self.in_capsules, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_55": {
                "variable": {
                    "value": "v_j",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_j",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "squash(s_j)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(v_j, 2)",
                            "Call"
                        ],
                        [
                            "tf.tile(v_j, [1, 1, self.in_capsules, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, self.in_capsules, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_56": {
                "variable": {
                    "value": "u_x_v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "v_j * u_hat",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_50": {
                "input_tensor": {
                    "value": "c_ij_tiled * u_hat",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_57": {
                "input": {
                    "value": "u_x_v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(v_j * u_hat, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "capsule/capsule_network.py": {
        "tensorflow": {
            "Reshape_40": {
                "variable": {
                    "value": "self.reshape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "target_shape": {
                    "value": "[args.img_height, args.img_width, args.img_depth]",
                    "type": "List",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(args.img_height, args.img_width)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_45": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "channels * dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(9, 9)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_39": {
                "name": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "capsule/conv_capsule_layer.py": {
        "tensorflow": {
            "transpose_93": {
                "variable": {
                    "value": "votes_trans",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "votes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(conv, [input_shape[1], input_shape[0], votes_shape[1], votes_shape[2], self.num_caps, self.caps_dim])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "votes_t_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[5, 0, 1, 2, 3, 4]",
                            "List"
                        ],
                        [
                            "[5, 0, 1, 2, 3, 4]",
                            "List"
                        ]
                    ]
                }
            },
            "TensorArray_124": {
                "variable": {
                    "value": "activations",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "num_routing",
                    "type": "Variable",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "fill_126": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "logit_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([input_shape[1], input_shape[0], votes_shape[1], votes_shape[2], self.num_caps])",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_128": {
                "variable": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_129": {
                "variable": {
                    "value": "(_, logits, activations)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, logits, activations: i < num_routing",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_body",
                    "type": "Variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[i, logits, activations]",
                    "type": "List",
                    "possible_values": []
                },
                "swap_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_143": {
                "variable": {
                    "value": "votes_trans",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "votes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(conv, [input_shape[1], input_shape[0], votes_shape[1], votes_shape[2], self.num_caps, self.caps_dim])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "votes_t_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[5, 0, 1, 2, 3, 4]",
                            "List"
                        ],
                        [
                            "[5, 0, 1, 2, 3, 4]",
                            "List"
                        ]
                    ]
                }
            },
            "TensorArray_161": {
                "variable": {
                    "value": "activations",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "num_routing",
                    "type": "Variable",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "fill_163": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "logit_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([input_shape[1], input_shape[0], votes_shape[1], votes_shape[2], self.num_caps])",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_165": {
                "variable": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_166": {
                "variable": {
                    "value": "(_, logits, activations)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, logits, activations: i < num_routing",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_body",
                    "type": "Variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[i, logits, activations]",
                    "type": "List",
                    "possible_values": []
                },
                "swap_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "random_normal_initializer_31": {
                "variable": {
                    "value": "self.w_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_32": {
                "variable": {
                    "value": "self.b_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "transpose_59": {
                "variable": {
                    "value": "input_transposed",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[3, 0, 1, 2, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_60": {
                "variable": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_transposed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(input_tensor, [3, 0, 1, 2, 4])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_61": {
                "variable": {
                    "value": "input_tensor_reshaped",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_transposed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(input_tensor, [3, 0, 1, 2, 4])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[input_shape[0] * input_shape[1], self.input_height, self.input_width, self.in_caps_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_65": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_tensor_reshaped",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_transposed, [input_shape[0] * input_shape[1], self.input_height, self.input_width, self.in_caps_dim])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "(self.strides, self.strides)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding.upper()",
                    "type": "Call",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_71": {
                "variable": {
                    "value": "votes",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input_tensor_reshaped, self.W, (self.strides, self.strides), padding=self.padding.upper(), data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[input_shape[1], input_shape[0], votes_shape[1], votes_shape[2], self.num_caps, self.caps_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_76": {
                "variable": {
                    "value": "logit_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[input_shape[1], input_shape[0], votes_shape[1], votes_shape[2], self.num_caps]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_77": {
                "variable": {
                    "value": "biases_replicated",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[conv_height, conv_width, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_100": {
                "variable": {
                    "value": "route",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.fill(logit_shape, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.norm(t * d, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.fill(logit_shape, 0.0)",
                            "Call"
                        ],
                        [
                            "logits + distances",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_102": {
                "variable": {
                    "value": "preact_trans",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "preactivate_unrolled",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "route * votes_trans",
                            "BinOp"
                        ],
                        [
                            "route * votes_trans",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "r_t_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1, 2, 3, 4, 5, 0]",
                            "List"
                        ],
                        [
                            "[1, 2, 3, 4, 5, 0]",
                            "List"
                        ]
                    ]
                }
            },
            "expand_dims_107": {
                "variable": {
                    "value": "act_3d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "squash(preactivate)",
                            "Call"
                        ],
                        [
                            "squash(preactivate)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_108": {
                "variable": {
                    "value": "act_replicated",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "act_3d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(activation, 1)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, input_dim, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "norm_112": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "act_replicated - votes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_113": {
                "input_tensor": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.norm(act_replicated - votes, axis=-1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_117": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(np.log(p_p * (out_capsules - 1)) - np.log(1 - p_p), dtype=tf.float32) / (d_p - d_o + 1e-12)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(t, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_120": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "t * d",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_135": {
                "x": {
                    "value": "activations.read(num_routing - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_148": {
                "variable": {
                    "value": "route",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.fill(logit_shape, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.norm(t * d, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.fill(logit_shape, 0.0)",
                            "Call"
                        ],
                        [
                            "logits + distances",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_150": {
                "variable": {
                    "value": "preact_trans",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "preactivate_unrolled",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "route * votes_trans",
                            "BinOp"
                        ],
                        [
                            "route * votes_trans",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "r_t_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1, 2, 3, 4, 5, 0]",
                            "List"
                        ],
                        [
                            "[1, 2, 3, 4, 5, 0]",
                            "List"
                        ]
                    ]
                }
            },
            "expand_dims_155": {
                "variable": {
                    "value": "act_3d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "squash(preactivate)",
                            "Call"
                        ],
                        [
                            "squash(preactivate)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_156": {
                "variable": {
                    "value": "act_replicated",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "act_3d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(activation, 1)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, input_dim, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_157": {
                "variable": {
                    "value": "distances",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "votes * act_replicated",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_172": {
                "x": {
                    "value": "activations.read(num_routing - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_103": {
                "input_tensor": {
                    "value": "preact_trans",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(preactivate_unrolled, r_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(preactivate_unrolled, r_t_shape)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_115": {
                "value": {
                    "value": "np.log(p_p * (out_capsules - 1)) - np.log(1 - p_p)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_151": {
                "input_tensor": {
                    "value": "preact_trans",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(preactivate_unrolled, r_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(preactivate_unrolled, r_t_shape)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "capsule/conv_capsule_network.py": {
        "tensorflow": {
            "Conv2D_51": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "conv1_filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "conv1_kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "conv1_stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Reshape_60": {
                "variable": {
                    "value": "self.capsuleShape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "target_shape": {
                    "value": "(out_height, out_width, 1, conv1_filters)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "toCapsuleShape",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Reshape_76": {
                "variable": {
                    "value": "self.flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "target_shape": {
                    "value": "(out_height * out_width * layers[-2], dimensions[-2])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "flatten",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_48": {
                "name": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "capsule/em_capsule_layer.py": {
        "tensorflow": {
            "expand_dims_56": {
                "variable": {
                    "value": "a_tiled",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_j",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(inv_temp * (beta_a_tiled - cost_j))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_57": {
                "variable": {
                    "value": "a_tiled",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_tiled",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(a_j, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.tile(a_tiled, [1, 1, self.out_dim])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, self.out_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_64": {
                "variable": {
                    "value": "rr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "expand_dims_67": {
                "variable": {
                    "value": "a_i_tiled",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.norm(u + epsilon, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_68": {
                "variable": {
                    "value": "a_i_tiled",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_i_tiled",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(a_i, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.tile(a_i_tiled, [1, self.out_capsules, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, self.out_capsules, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_71": {
                "variable": {
                    "value": "rr_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ones(shape=[batch_size, self.out_capsules, self.in_capsules]) * 1 / self.out_capsules",
                            "BinOp"
                        ],
                        [
                            "self.e_step(mean_j, stdv_j, a_j, V_ij)",
                            "Call"
                        ],
                        [
                            "tf.identity(R)",
                            "Call"
                        ],
                        [
                            "rr * a_i_tiled",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tile_72": {
                "variable": {
                    "value": "rr_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rr_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(rr, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.tile(rr_h, [1, 1, 1, self.out_dim])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 1, self.out_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_73": {
                "variable": {
                    "value": "rr_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "rr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ones(shape=[batch_size, self.out_capsules, self.in_capsules]) * 1 / self.out_capsules",
                            "BinOp"
                        ],
                        [
                            "self.e_step(mean_j, stdv_j, a_j, V_ij)",
                            "Call"
                        ],
                        [
                            "tf.identity(R)",
                            "Call"
                        ],
                        [
                            "rr * a_i_tiled",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_74": {
                "variable": {
                    "value": "rr_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rr_sum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(rr, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(rr_sum, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.tile(rr_sum, [1, 1, self.out_dim])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tile_75": {
                "variable": {
                    "value": "rr_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rr_sum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(rr, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(rr_sum, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.tile(rr_sum, [1, 1, self.out_dim])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, self.out_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_78": {
                "variable": {
                    "value": "mean_ij",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mean_j",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "a_tiled * mean_j / (tf.norm(mean_j + epsilon, axis=-1, keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(rr_h * V_ij, axis=2) / (rr_sum + epsilon)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_79": {
                "variable": {
                    "value": "mean_ij",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mean_ij",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(mean_j, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.tile(mean_ij, [1, 1, self.in_capsules, 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mean_j, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.tile(mean_ij, [1, 1, self.in_capsules, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, self.in_capsules, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_80": {
                "variable": {
                    "value": "var_j",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "rr_h * tf.square(V_ij - mean_ij)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_87": {
                "variable": {
                    "value": "beta_a_tiled",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.beta_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_88": {
                "variable": {
                    "value": "beta_u_tiled",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.beta_u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch_size, 1, self.out_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_91": {
                "variable": {
                    "value": "cost_j",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cost_j_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(beta_u_tiled + tf.math.log(stdv_j)) * rr_sum",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_92": {
                "variable": {
                    "value": "a_j",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inv_temp * (beta_a_tiled - cost_j)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_100": {
                "variable": {
                    "value": "mean_ij",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mean_j",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "a_tiled * mean_j / (tf.norm(mean_j + epsilon, axis=-1, keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(rr_h * V_ij, axis=2) / (rr_sum + epsilon)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_101": {
                "variable": {
                    "value": "mean_ij",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mean_ij",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(mean_j, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.tile(mean_ij, [1, 1, self.in_capsules, 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mean_j, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.tile(mean_ij, [1, 1, self.in_capsules, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, self.in_capsules, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_103": {
                "variable": {
                    "value": "stdv_ij",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "stdv_j",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "var_j",
                            "Name"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_104": {
                "variable": {
                    "value": "stdv_ij",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "stdv_ij",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(stdv_j, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.tile(stdv_ij, [1, 1, self.in_capsules, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, self.in_capsules, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_106": {
                "variable": {
                    "value": "p_ij_tmp_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "2 * math.pi * tf.reduce_prod(stdv_ij, axis=-1) + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_110": {
                "variable": {
                    "value": "a_ij",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_j",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(inv_temp * (beta_a_tiled - cost_j))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_111": {
                "variable": {
                    "value": "a_ij",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_ij",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(a_j, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.tile(a_ij, [1, 1, self.in_capsules])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, self.in_capsules]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "norm_122": {
                "variable": {
                    "value": "a_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "u + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_124": {
                "variable": {
                    "value": "uT",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_125": {
                "variable": {
                    "value": "uT",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "uT",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(u, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(uT, 3)",
                            "Call"
                        ],
                        [
                            "tf.tile(uT, [1, self.out_capsules, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(uT, [1, 1, 1, self.out_dim, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_126": {
                "variable": {
                    "value": "uT",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "uT",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(u, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(uT, 3)",
                            "Call"
                        ],
                        [
                            "tf.tile(uT, [1, self.out_capsules, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(uT, [1, 1, 1, self.out_dim, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, self.out_capsules, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_127": {
                "variable": {
                    "value": "uT",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "uT",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(u, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(uT, 3)",
                            "Call"
                        ],
                        [
                            "tf.tile(uT, [1, self.out_capsules, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(uT, [1, 1, 1, self.out_dim, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 1, self.out_dim, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_129": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch_size, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_normal_initializer_24": {
                "variable": {
                    "value": "w_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stdev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Variable_25": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "w_init(shape=(1, out_capsules, in_capsules, out_dim, in_dim), dtype='float32')",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "random_normal_initializer_28": {
                "variable": {
                    "value": "beta_a_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stdev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Variable_29": {
                "variable": {
                    "value": "self.beta_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "beta_a",
                    "type": "str",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "beta_a_init(shape=(1, out_capsules), dtype='float32')",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "random_normal_initializer_32": {
                "variable": {
                    "value": "beta_u_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stdev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Variable_33": {
                "variable": {
                    "value": "self.beta_u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "beta_u",
                    "type": "str",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "beta_u_init(shape=(1, out_capsules, 1), dtype='float32')",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_133": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_134": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(self.bias, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.tile(bias, [1, 1, self.in_capsules, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, self.in_capsules, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_23": {
                "name": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_37": {
                "variable": {
                    "value": "bias_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Variable_38": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "bias_init(shape=(1, out_capsules, out_dim), dtype='float32')",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_43": {
                "input": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_65": {
                "input": {
                    "value": "V_ij",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(uT * w, axis=-1) + epsilon",
                            "BinOp"
                        ],
                        [
                            "V_ij + bias",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_76": {
                "input_tensor": {
                    "value": "rr_h * V_ij",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_107": {
                "input_tensor": {
                    "value": "tf.square(V_ij - mean_ij) / (2 * stdv_ij + epsilon)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_108": {
                "x": {
                    "value": "p_ij_tmp_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-tf.reduce_sum(tf.square(V_ij - mean_ij) / (2 * stdv_ij + epsilon), axis=-1)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "shape_120": {
                "input": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_sum_131": {
                "input_tensor": {
                    "value": "uT * w",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_46": {
                "shape": {
                    "value": "[batch_size, self.out_capsules, self.in_capsules]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "norm_58": {
                "tensor": {
                    "value": "mean_j + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "square_80": {
                "x": {
                    "value": "V_ij - mean_ij",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_90": {
                "x": {
                    "value": "stdv_j",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "var_j",
                            "Name"
                        ]
                    ]
                }
            },
            "reduce_sum_113": {
                "input_tensor": {
                    "value": "a_ij * p_ij",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_51": {
                "x": {
                    "value": "0.95",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(i + 1, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_prod_106": {
                "input_tensor": {
                    "value": "stdv_ij",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(stdv_j, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.tile(stdv_ij, [1, 1, self.in_capsules, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "square_107": {
                "x": {
                    "value": "V_ij - mean_ij",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_51": {
                "x": {
                    "value": "i + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "capsule/gamma_capsule_layer.py": {
        "tensorflow": {
            "norm_40": {
                "variable": {
                    "value": "u_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(u, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(u, 3)",
                            "Call"
                        ],
                        [
                            "tf.tile(u, [1, self.out_capsules, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(u, [1, 1, 1, self.out_dim, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_43": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(u, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(u, 3)",
                            "Call"
                        ],
                        [
                            "tf.tile(u, [1, self.out_capsules, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(u, [1, 1, 1, self.out_dim, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_44": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(u, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(u, 3)",
                            "Call"
                        ],
                        [
                            "tf.tile(u, [1, self.out_capsules, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(u, [1, 1, 1, self.out_dim, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_45": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(u, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(u, 3)",
                            "Call"
                        ],
                        [
                            "tf.tile(u, [1, self.out_capsules, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(u, [1, 1, 1, self.out_dim, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, self.out_capsules, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_46": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(u, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(u, 3)",
                            "Call"
                        ],
                        [
                            "tf.tile(u, [1, self.out_capsules, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(u, [1, 1, 1, self.out_dim, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 1, self.out_dim, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_49": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch_size, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_53": {
                "variable": {
                    "value": "u_hat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "u * w",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_56": {
                "variable": {
                    "value": "u_hat_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "u_hat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(u * w, axis=-1)",
                            "Call"
                        ],
                        [
                            "u_hat / u_hat_norm * new_u_hat_norm",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_57": {
                "variable": {
                    "value": "u_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.norm(u, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(u_norm, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(u_norm, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.tile(u_norm, [1, self.out_capsules, 1, self.out_dim])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_58": {
                "variable": {
                    "value": "u_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.norm(u, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(u_norm, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(u_norm, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.tile(u_norm, [1, self.out_capsules, 1, self.out_dim])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_59": {
                "variable": {
                    "value": "u_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.norm(u, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(u_norm, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(u_norm, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.tile(u_norm, [1, self.out_capsules, 1, self.out_dim])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, self.out_capsules, 1, self.out_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "minimum_60": {
                "variable": {
                    "value": "new_u_hat_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "u_hat_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.norm(u_hat, axis=-1, keepdims=True)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "u_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.norm(u, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(u_norm, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(u_norm, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.tile(u_norm, [1, self.out_capsules, 1, self.out_dim])",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_64": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch_size, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_65": {
                "variable": {
                    "value": "b_ij",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self.out_capsules, self.in_capsules, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_normal_initializer_23": {
                "variable": {
                    "value": "w_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stdev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Variable_24": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "w_init(shape=(1, out_capsules, in_capsules, out_dim, in_dim), dtype='float32')",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_67": {
                "variable": {
                    "value": "c_ij",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "b_ij",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros(shape=[batch_size, self.out_capsules, self.in_capsules, 1])",
                            "Call"
                        ],
                        [
                            "t * d",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_68": {
                "variable": {
                    "value": "c_ij_tiled",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c_ij",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(b_ij, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 1, self.out_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_22": {
                "name": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_29": {
                "variable": {
                    "value": "bias_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Variable_30": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "bias_init(shape=(1, out_capsules, out_dim), dtype='float32')",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_39": {
                "input": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(u, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(u, 3)",
                            "Call"
                        ],
                        [
                            "tf.tile(u, [1, self.out_capsules, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(u, [1, 1, 1, self.out_dim, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_73": {
                "variable": {
                    "value": "v_j",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_j",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "squash(s_j)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(v_j, 2)",
                            "Call"
                        ],
                        [
                            "tf.tile(v_j, [1, 1, self.in_capsules, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_74": {
                "variable": {
                    "value": "v_j",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_j",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "squash(s_j)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(v_j, 2)",
                            "Call"
                        ],
                        [
                            "tf.tile(v_j, [1, 1, self.in_capsules, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, self.in_capsules, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "norm_78": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "v_j - u_hat",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_79": {
                "input_tensor": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.norm(v_j - u_hat, axis=-1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_83": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(np.log(p_p * (self.out_capsules - 1)) - np.log(1 - p_p), dtype=tf.float32) / (d_p - d_o + 1e-12)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(t, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_69": {
                "input_tensor": {
                    "value": "c_ij_tiled * u_hat",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_81": {
                "value": {
                    "value": "np.log(p_p * (self.out_capsules - 1)) - np.log(1 - p_p)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "capsule/norm_layer.py": {
        "tensorflow": {
            "norm_10": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "norm",
                    "type": "str",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "capsule/primary_capsule_layer.py": {
        "tensorflow": {}
    },
    "capsule/reconstruction_network.py": {
        "tensorflow": {}
    },
    "capsule/residual_layer.py": {
        "tensorflow": {
            "Add_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "capsule/utils.py": {
        "tensorflow": {
            "reduce_sum_16": {
                "variable": {
                    "value": "L_k",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "L_k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "T_k * tf.square(tf.maximum(0.0, m_plus - v_k)) + down_weighting * (1.0 - T_k) * tf.square(tf.maximum(0.0, v_k - m_minus))",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(L_k, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_8": {
                "input_tensor": {
                    "value": "tf.math.square(vectors)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "square_8": {
                "x": {
                    "value": "vectors",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "square_13": {
                "x": {
                    "value": "tf.maximum(0.0, m_plus - v_k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_14": {
                "x": {
                    "value": "tf.maximum(0.0, v_k - m_minus)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_9": {
                "x": {
                    "value": "vector_squared_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.math.reduce_sum(tf.math.square(vectors), axis=axis, keepdims=True) + epsilon",
                            "BinOp"
                        ]
                    ]
                }
            },
            "maximum_13": {
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "m_plus - v_k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_14": {
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "v_k - m_minus",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "conflicting_bundle.py": {
        "tensorflow": {
            "concat_65": {
                "variable": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat(Y, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_124": {
                "variable": {
                    "value": "bundle",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(X)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_125": {
                "variable": {
                    "value": "bundle_entropy",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_133": {
                "variable": {
                    "value": "num_bundles",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "bundle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros(tf.shape(X)[0], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "bundle + same_bundle * next_bundle_id * zero_out",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_145": {
                "variable": {
                    "value": "dim_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(X)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_151": {
                "variable": {
                    "value": "zero_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less_equal(bundle, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_156": {
                "variable": {
                    "value": "zero_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less_equal(bundle, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_158": {
                "variable": {
                    "value": "equal_components",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(x, X)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_160": {
                "variable": {
                    "value": "num_equal_components",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "equal_components",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.equal(x, X), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_161": {
                "variable": {
                    "value": "same_bundle",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater_equal(num_equal_components, dim_X)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_167": {
                "variable": {
                    "value": "bundle_only",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.boolean_mask(Y, same_bundle)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bincount_168": {
                "variable": {
                    "value": "bundle_class_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "arr": {
                    "value": "bundle_only",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.boolean_mask(Y, same_bundle), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "minlength": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "maxlength": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_171": {
                "variable": {
                    "value": "bundle_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(same_bundle)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_74": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.concat(a, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_75": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.concat(a, axis=0), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat(a, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(a, [int(train_batch_size), -1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_76": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.concat(a, axis=0), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat(a, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(a, [int(train_batch_size), -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int(train_batch_size), -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_88": {
                "variable": {
                    "value": "equality_check",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "equality_check",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weights_amplitude - a * train_lr * (1.0 / train_batch_size)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(equality_check, [tf.shape(equality_check)[0], -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(equality_check)[0], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_114": {
                "input_tensor": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_sum_170": {
                "input_tensor": {
                    "value": "bundle_class_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.math.bincount(bundle_only, minlength=num_classes, maxlength=num_classes, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "bundle_class_prob / tf.reduce_sum(bundle_class_prob)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_max_146": {
                "input_tensor": {
                    "value": "bundle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros(tf.shape(X)[0], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "bundle + same_bundle * next_bundle_id * zero_out",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_146": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_147": {
                "input": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "less_equal_151": {
                "x": {
                    "value": "bundle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros(tf.shape(X)[0], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "bundle + same_bundle * next_bundle_id * zero_out",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "less_equal_156": {
                "x": {
                    "value": "bundle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros(tf.shape(X)[0], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "bundle + same_bundle * next_bundle_id * zero_out",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "equal_158": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "X[i]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "greater_equal_161": {
                "x": {
                    "value": "num_equal_components",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(equal_components, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "dim_X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(X)[1], tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_167": {
                "tensor": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat(Y, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "same_bundle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.greater_equal(num_equal_components, dim_X), tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_171": {
                "input_tensor": {
                    "value": "same_bundle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.greater_equal(num_equal_components, dim_X), tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_172": {
                "input_tensor": {
                    "value": "bundle_class_prob * tf.math.log(bundle_class_prob + 1e-05)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "maximum_174": {
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "entropy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-tf.reduce_sum(bundle_class_prob * tf.math.log(bundle_class_prob + 1e-05), axis=-1)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "concat_74": {
                "values": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.concat(a, axis=0), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat(a, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(a, [int(train_batch_size), -1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_113": {
                "input_tensor": {
                    "value": "tf.abs(weights)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_124": {
                "input": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_145": {
                "input": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "one_hot_153": {
                "indices": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "range(len(X))",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "num_samples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(X)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_113": {
                "x": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layer.trainable_weights",
                            "Attribute"
                        ]
                    ]
                }
            },
            "log_173": {
                "x": {
                    "value": "bundle_class_prob + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_89": {
                "input": {
                    "value": "equality_check",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weights_amplitude - a * train_lr * (1.0 / train_batch_size)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(equality_check, [tf.shape(equality_check)[0], -1])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_134": {
                "input": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "data/cifar10.py": {
        "tensorflow": {
            "convert_image_dtype_39": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(x, size=[HEIGHT, WIDTH, DEPTH])",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(x, max_delta=0.25)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_crop_or_pad(x, HEIGHT, WIDTH)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(x)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_crop_40": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(x, size=[HEIGHT, WIDTH, DEPTH])",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(x, max_delta=0.25)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_crop_or_pad(x, HEIGHT, WIDTH)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[HEIGHT, WIDTH, DEPTH]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_brightness_41": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(x, size=[HEIGHT, WIDTH, DEPTH])",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(x, max_delta=0.25)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_crop_or_pad(x, HEIGHT, WIDTH)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(x)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "convert_image_dtype_46": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(x, size=[HEIGHT, WIDTH, DEPTH])",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(x, max_delta=0.25)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_crop_or_pad(x, HEIGHT, WIDTH)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(x)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "resize_with_crop_or_pad_47": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(x, size=[HEIGHT, WIDTH, DEPTH])",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(x, max_delta=0.25)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_crop_or_pad(x, HEIGHT, WIDTH)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(x)",
                            "Call"
                        ]
                    ]
                },
                "target_height": {
                    "value": "HEIGHT",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "target_width": {
                    "value": "WIDTH",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                }
            },
            "per_image_standardization_52": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(x, size=[HEIGHT, WIDTH, DEPTH])",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(x, max_delta=0.25)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_crop_or_pad(x, HEIGHT, WIDTH)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_53": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(y, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "data/fashion_mnist.py": {
        "tensorflow": {
            "convert_image_dtype_39": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(x, size=[HEIGHT, WIDTH, DEPTH])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(x)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_crop_or_pad(x, HEIGHT, WIDTH)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(x)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_crop_40": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(x, size=[HEIGHT, WIDTH, DEPTH])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(x)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_crop_or_pad(x, HEIGHT, WIDTH)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[HEIGHT, WIDTH, DEPTH]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_flip_left_right_41": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(x, size=[HEIGHT, WIDTH, DEPTH])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(x)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_crop_or_pad(x, HEIGHT, WIDTH)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_image_dtype_46": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(x, size=[HEIGHT, WIDTH, DEPTH])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(x)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_crop_or_pad(x, HEIGHT, WIDTH)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(x)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "resize_with_crop_or_pad_47": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(x, size=[HEIGHT, WIDTH, DEPTH])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(x)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_crop_or_pad(x, HEIGHT, WIDTH)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(x)",
                            "Call"
                        ]
                    ]
                },
                "target_height": {
                    "value": "HEIGHT",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "24",
                            "Constant"
                        ]
                    ]
                },
                "target_width": {
                    "value": "WIDTH",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "24",
                            "Constant"
                        ]
                    ]
                }
            },
            "per_image_standardization_52": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(x, size=[HEIGHT, WIDTH, DEPTH])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(x)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_crop_or_pad(x, HEIGHT, WIDTH)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_53": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(y, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "data/mnist.py": {
        "tensorflow": {
            "convert_image_dtype_39": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(x, size=[HEIGHT, WIDTH, DEPTH])",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_crop_or_pad(x, HEIGHT, WIDTH)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(x)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_crop_40": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(x, size=[HEIGHT, WIDTH, DEPTH])",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_crop_or_pad(x, HEIGHT, WIDTH)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[HEIGHT, WIDTH, DEPTH]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_image_dtype_45": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(x, size=[HEIGHT, WIDTH, DEPTH])",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_crop_or_pad(x, HEIGHT, WIDTH)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(x)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "resize_with_crop_or_pad_46": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(x, size=[HEIGHT, WIDTH, DEPTH])",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_crop_or_pad(x, HEIGHT, WIDTH)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(x)",
                            "Call"
                        ]
                    ]
                },
                "target_height": {
                    "value": "HEIGHT",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "24",
                            "Constant"
                        ]
                    ]
                },
                "target_width": {
                    "value": "WIDTH",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "24",
                            "Constant"
                        ]
                    ]
                }
            },
            "per_image_standardization_51": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(x, size=[HEIGHT, WIDTH, DEPTH])",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_crop_or_pad(x, HEIGHT, WIDTH)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_52": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(y, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "data/norb.py": {
        "tensorflow": {
            "convert_image_dtype_39": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_pad(x, 28, 28)",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(x, size=[HEIGHT, WIDTH, DEPTH])",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(x, max_delta=0.1)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_pad(x, 28, 28)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_crop_or_pad(x, HEIGHT, WIDTH)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(x)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "resize_with_pad_40": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_pad(x, 28, 28)",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(x, size=[HEIGHT, WIDTH, DEPTH])",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(x, max_delta=0.1)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_pad(x, 28, 28)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_crop_or_pad(x, HEIGHT, WIDTH)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(x)",
                            "Call"
                        ]
                    ]
                },
                "target_height": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "target_width": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "random_crop_41": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_pad(x, 28, 28)",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(x, size=[HEIGHT, WIDTH, DEPTH])",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(x, max_delta=0.1)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_pad(x, 28, 28)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_crop_or_pad(x, HEIGHT, WIDTH)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[HEIGHT, WIDTH, DEPTH]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_brightness_42": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_pad(x, 28, 28)",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(x, size=[HEIGHT, WIDTH, DEPTH])",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(x, max_delta=0.1)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_pad(x, 28, 28)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_crop_or_pad(x, HEIGHT, WIDTH)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(x)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "convert_image_dtype_47": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_pad(x, 28, 28)",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(x, size=[HEIGHT, WIDTH, DEPTH])",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(x, max_delta=0.1)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_pad(x, 28, 28)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_crop_or_pad(x, HEIGHT, WIDTH)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(x)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "resize_with_pad_48": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_pad(x, 28, 28)",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(x, size=[HEIGHT, WIDTH, DEPTH])",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(x, max_delta=0.1)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_pad(x, 28, 28)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_crop_or_pad(x, HEIGHT, WIDTH)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(x)",
                            "Call"
                        ]
                    ]
                },
                "target_height": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "target_width": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "resize_with_crop_or_pad_49": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_pad(x, 28, 28)",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(x, size=[HEIGHT, WIDTH, DEPTH])",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(x, max_delta=0.1)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_pad(x, 28, 28)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_crop_or_pad(x, HEIGHT, WIDTH)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(x)",
                            "Call"
                        ]
                    ]
                },
                "target_height": {
                    "value": "HEIGHT",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "24",
                            "Constant"
                        ]
                    ]
                },
                "target_width": {
                    "value": "WIDTH",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "24",
                            "Constant"
                        ]
                    ]
                }
            },
            "per_image_standardization_54": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_pad(x, 28, 28)",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(x, size=[HEIGHT, WIDTH, DEPTH])",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(x, max_delta=0.1)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_pad(x, 28, 28)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_crop_or_pad(x, HEIGHT, WIDTH)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_55": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(y, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "data/svhn.py": {
        "tensorflow": {
            "convert_image_dtype_39": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(x, size=[HEIGHT, WIDTH, DEPTH])",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(x, max_delta=0.25)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_crop_or_pad(x, HEIGHT, WIDTH)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(x)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_crop_40": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(x, size=[HEIGHT, WIDTH, DEPTH])",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(x, max_delta=0.25)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_crop_or_pad(x, HEIGHT, WIDTH)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[HEIGHT, WIDTH, DEPTH]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_brightness_41": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(x, size=[HEIGHT, WIDTH, DEPTH])",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(x, max_delta=0.25)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_crop_or_pad(x, HEIGHT, WIDTH)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(x)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "convert_image_dtype_46": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(x, size=[HEIGHT, WIDTH, DEPTH])",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(x, max_delta=0.25)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_crop_or_pad(x, HEIGHT, WIDTH)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(x)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "resize_with_crop_or_pad_47": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(x, size=[HEIGHT, WIDTH, DEPTH])",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(x, max_delta=0.25)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_crop_or_pad(x, HEIGHT, WIDTH)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(x)",
                            "Call"
                        ]
                    ]
                },
                "target_height": {
                    "value": "HEIGHT",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "24",
                            "Constant"
                        ]
                    ]
                },
                "target_width": {
                    "value": "WIDTH",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "24",
                            "Constant"
                        ]
                    ]
                }
            },
            "per_image_standardization_52": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(x, size=[HEIGHT, WIDTH, DEPTH])",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(x, max_delta=0.25)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_crop_or_pad(x, HEIGHT, WIDTH)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_53": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(y, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}