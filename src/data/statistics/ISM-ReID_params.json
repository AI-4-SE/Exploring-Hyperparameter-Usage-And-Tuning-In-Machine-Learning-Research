{
    "fastreid/evaluation/roc.py": {
        "sklearn": {
            "roc_curve_47": {
                "variable": {
                    "value": "(fpr, tpr, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.hstack((np.zeros(len(pos)), np.ones(len(neg))))",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.hstack((pos, neg))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fastreid/utils/visualizer.py": {
        "sklearn": {
            "roc_curve_174": {
                "variable": {
                    "value": "(fpr, tpr, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.hstack((np.zeros(len(pos)), np.ones(len(neg))))",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.hstack((pos, neg))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fastreid/export/tensorflow_export.py": {
        "tensorflow": {
            "GraphDef_102": {
                "variable": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_graph_def_105": {
                "graph_def": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "no_grad_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "demo/demo.py": {
        "torch": {}
    },
    "demo/modeify-visualize_result.py": {
        "torch": {
            "cat_114": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feats, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_123": {
                "input": {
                    "value": "q_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feats[:num_query]",
                            "Subscript"
                        ]
                    ]
                },
                "mat2": {
                    "value": "g_feat.t()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "demo/predictor.py": {
        "torch": {
            "device_count_35": {
                "variable": {
                    "value": "self.num_gpus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "as_tensor_54": {
                "data": {
                    "value": "image.astype('float32').transpose(2, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "demo/visualize_result.py": {
        "torch": {
            "cat_166": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feats, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_175": {
                "input": {
                    "value": "q_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feats[:num_query]",
                            "Subscript"
                        ]
                    ]
                },
                "mat2": {
                    "value": "g_feat.t()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "fastreid/data/build.py": {
        "torch": {
            "BatchSampler_57": {
                "variable": {
                    "value": "batch_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "data_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "samplers.TrainingSampler(len(train_set))",
                            "Call"
                        ],
                        [
                            "samplers.NaiveIdentitySampler(train_set.img_items, global_batch_size, num_instance)",
                            "Call"
                        ],
                        [
                            "samplers.BalancedIdentitySampler(train_set.img_items, global_batch_size, num_instance)",
                            "Call"
                        ],
                        [
                            "samplers.TrainingSampler(len(train_set))",
                            "Call"
                        ],
                        [
                            "samplers.NaiveIdentitySampler(train_set.img_items, cfg.SOLVER.IMS_PER_BATCH, num_instance)",
                            "Call"
                        ],
                        [
                            "samplers.BalancedIdentitySampler(train_set.img_items, cfg.SOLVER.IMS_PER_BATCH, num_instance)",
                            "Call"
                        ],
                        [
                            "samplers.InferenceSampler(len(test_set))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "mini_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.SOLVER.IMS_PER_BATCH",
                            "Attribute"
                        ],
                        [
                            "cfg.SOLVER.IMS_PER_BATCH // comm.get_world_size()",
                            "BinOp"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_59": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PairDataset(train_items, hazy_items, train_transforms, relabel=True)",
                            "Call"
                        ],
                        [
                            "CommDataset(train_items, train_transforms, relabel=True)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.DATALOADER.NUM_WORKERS",
                            "Attribute"
                        ],
                        [
                            "cfg.DATALOADER.NUM_WORKERS",
                            "Attribute"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "batch_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.sampler.BatchSampler(data_sampler, mini_batch_size, True)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.sampler.BatchSampler(data_sampler, mini_batch_size, True)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.BatchSampler(data_sampler, batch_size, False)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "fast_batch_collator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fast_batch_collator",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchSampler_92": {
                "variable": {
                    "value": "batch_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "data_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "samplers.TrainingSampler(len(train_set))",
                            "Call"
                        ],
                        [
                            "samplers.NaiveIdentitySampler(train_set.img_items, global_batch_size, num_instance)",
                            "Call"
                        ],
                        [
                            "samplers.BalancedIdentitySampler(train_set.img_items, global_batch_size, num_instance)",
                            "Call"
                        ],
                        [
                            "samplers.TrainingSampler(len(train_set))",
                            "Call"
                        ],
                        [
                            "samplers.NaiveIdentitySampler(train_set.img_items, cfg.SOLVER.IMS_PER_BATCH, num_instance)",
                            "Call"
                        ],
                        [
                            "samplers.BalancedIdentitySampler(train_set.img_items, cfg.SOLVER.IMS_PER_BATCH, num_instance)",
                            "Call"
                        ],
                        [
                            "samplers.InferenceSampler(len(test_set))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "mini_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.SOLVER.IMS_PER_BATCH",
                            "Attribute"
                        ],
                        [
                            "cfg.SOLVER.IMS_PER_BATCH // comm.get_world_size()",
                            "BinOp"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_94": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PairDataset(train_items, hazy_items, train_transforms, relabel=True)",
                            "Call"
                        ],
                        [
                            "CommDataset(train_items, train_transforms, relabel=True)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.DATALOADER.NUM_WORKERS",
                            "Attribute"
                        ],
                        [
                            "cfg.DATALOADER.NUM_WORKERS",
                            "Attribute"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "batch_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.sampler.BatchSampler(data_sampler, mini_batch_size, True)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.sampler.BatchSampler(data_sampler, mini_batch_size, True)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.BatchSampler(data_sampler, batch_size, False)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "fast_batch_collator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fast_batch_collator",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchSampler_115": {
                "variable": {
                    "value": "batch_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "data_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "samplers.TrainingSampler(len(train_set))",
                            "Call"
                        ],
                        [
                            "samplers.NaiveIdentitySampler(train_set.img_items, global_batch_size, num_instance)",
                            "Call"
                        ],
                        [
                            "samplers.BalancedIdentitySampler(train_set.img_items, global_batch_size, num_instance)",
                            "Call"
                        ],
                        [
                            "samplers.TrainingSampler(len(train_set))",
                            "Call"
                        ],
                        [
                            "samplers.NaiveIdentitySampler(train_set.img_items, cfg.SOLVER.IMS_PER_BATCH, num_instance)",
                            "Call"
                        ],
                        [
                            "samplers.BalancedIdentitySampler(train_set.img_items, cfg.SOLVER.IMS_PER_BATCH, num_instance)",
                            "Call"
                        ],
                        [
                            "samplers.InferenceSampler(len(test_set))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.TEST.IMS_PER_BATCH",
                            "Attribute"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_116": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CommDataset(test_items, test_transforms, relabel=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "batch_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.sampler.BatchSampler(data_sampler, mini_batch_size, True)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.sampler.BatchSampler(data_sampler, mini_batch_size, True)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.BatchSampler(data_sampler, batch_size, False)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "fast_batch_collator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fast_batch_collator",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_137": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(batched_inputs), *elem.size())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "elem.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_146": {
                "data": {
                    "value": "batched_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batched_inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_148": {
                "data": {
                    "value": "batched_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batched_inputs",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "fastreid/data/common.py": {
        "torch": {}
    },
    "fastreid/data/samplers/data_sampler.py": {
        "torch": {}
    },
    "fastreid/data/samplers/triplet_sampler.py": {
        "torch": {}
    },
    "fastreid/data/transforms/functional.py": {
        "torch": {
            "from_numpy_29": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pic.transpose((2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_38": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(pic, np.int32, copy=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_40": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(pic, np.int16, copy=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_42": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(pic, np.float32, copy=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_44": {
                "ndarray": {
                    "value": "np.array(pic, np.uint8, copy=False)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "fastreid/engine/defaults.py": {
        "torch": {
            "normalize_161": {
                "variable": {
                    "value": "pred_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_220": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.build_model(cfg)",
                            "Call"
                        ],
                        [
                            "DistributedDataParallel(model, device_ids=[comm.get_local_rank()], broadcast_buffers=False)",
                            "Call"
                        ],
                        [
                            "build_model(cfg)",
                            "Call"
                        ],
                        [
                            "self.build_model(cfg)",
                            "Call"
                        ],
                        [
                            "DistributedDataParallel(model, device_ids=[comm.get_local_rank()], broadcast_buffers=False)",
                            "Call"
                        ],
                        [
                            "build_model(cfg)",
                            "Call"
                        ],
                        [
                            "self.build_model(cfg)",
                            "Call"
                        ],
                        [
                            "DistributedDataParallel(model, device_ids=[comm.get_local_rank()], broadcast_buffers=False)",
                            "Call"
                        ],
                        [
                            "build_model(cfg)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[comm.get_local_rank()]",
                    "type": "List",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_587": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.build_model(cfg)",
                            "Call"
                        ],
                        [
                            "DistributedDataParallel(model, device_ids=[comm.get_local_rank()], broadcast_buffers=False)",
                            "Call"
                        ],
                        [
                            "build_model(cfg)",
                            "Call"
                        ],
                        [
                            "self.build_model(cfg)",
                            "Call"
                        ],
                        [
                            "DistributedDataParallel(model, device_ids=[comm.get_local_rank()], broadcast_buffers=False)",
                            "Call"
                        ],
                        [
                            "build_model(cfg)",
                            "Call"
                        ],
                        [
                            "self.build_model(cfg)",
                            "Call"
                        ],
                        [
                            "DistributedDataParallel(model, device_ids=[comm.get_local_rank()], broadcast_buffers=False)",
                            "Call"
                        ],
                        [
                            "build_model(cfg)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[comm.get_local_rank()]",
                    "type": "List",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_1008": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.build_model(cfg)",
                            "Call"
                        ],
                        [
                            "DistributedDataParallel(model, device_ids=[comm.get_local_rank()], broadcast_buffers=False)",
                            "Call"
                        ],
                        [
                            "build_model(cfg)",
                            "Call"
                        ],
                        [
                            "self.build_model(cfg)",
                            "Call"
                        ],
                        [
                            "DistributedDataParallel(model, device_ids=[comm.get_local_rank()], broadcast_buffers=False)",
                            "Call"
                        ],
                        [
                            "build_model(cfg)",
                            "Call"
                        ],
                        [
                            "self.build_model(cfg)",
                            "Call"
                        ],
                        [
                            "DistributedDataParallel(model, device_ids=[comm.get_local_rank()], broadcast_buffers=False)",
                            "Call"
                        ],
                        [
                            "build_model(cfg)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[comm.get_local_rank()]",
                    "type": "List",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_323": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_696": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_1120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fastreid/engine/hooks.py": {
        "torch": {
            "profile_307": {
                "variable": {
                    "value": "self._profiler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_cuda": {
                    "value": "self._use_cuda",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineAnnealingWarmRestarts_532": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.trainer.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "T_0": {
                    "value": "self.swa_freq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "self.eta_min",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fastreid/engine/launch.py": {
        "torch": {
            "is_available_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_92": {
                "device": {
                    "value": "local_rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "local_rank",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_count_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fastreid/engine/train_loop.py": {
        "torch": {
            "GradScaler_464": {
                "variable": {
                    "value": "self.scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradScaler_626": {
                "variable": {
                    "value": "self.scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isfinite_386": {
                "input": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum(loss_dict.values())",
                            "Call"
                        ],
                        [
                            "sum(loss_dict.values())",
                            "Call"
                        ],
                        [
                            "sum(loss_dict.values())",
                            "Call"
                        ],
                        [
                            "sum(loss_dict.values())",
                            "Call"
                        ],
                        [
                            "losses",
                            "Method Argument"
                        ],
                        [
                            "losses",
                            "Method Argument"
                        ],
                        [
                            "losses",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "all_386": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isfinite_548": {
                "input": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum(loss_dict.values())",
                            "Call"
                        ],
                        [
                            "sum(loss_dict.values())",
                            "Call"
                        ],
                        [
                            "sum(loss_dict.values())",
                            "Call"
                        ],
                        [
                            "sum(loss_dict.values())",
                            "Call"
                        ],
                        [
                            "losses",
                            "Method Argument"
                        ],
                        [
                            "losses",
                            "Method Argument"
                        ],
                        [
                            "losses",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "all_548": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_643": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isfinite_677": {
                "input": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum(loss_dict.values())",
                            "Call"
                        ],
                        [
                            "sum(loss_dict.values())",
                            "Call"
                        ],
                        [
                            "sum(loss_dict.values())",
                            "Call"
                        ],
                        [
                            "sum(loss_dict.values())",
                            "Call"
                        ],
                        [
                            "losses",
                            "Method Argument"
                        ],
                        [
                            "losses",
                            "Method Argument"
                        ],
                        [
                            "losses",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "all_677": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_489": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_524": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fastreid/evaluation/evaluator.py": {
        "torch": {
            "no_grad_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fastreid/evaluation/query_expansion.py": {
        "torch": {
            "cat_28": {
                "variable": {
                    "value": "all_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(query_feat, gallery_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_29": {
                "variable": {
                    "value": "norm_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((query_feat, gallery_feat), dim=0)",
                            "Call"
                        ],
                        [
                            "all_feat.numpy()",
                            "Call"
                        ],
                        [
                            "np.stack(all_feat_list, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_44": {
                "variable": {
                    "value": "query_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "all_feat[:num_query]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_45": {
                "variable": {
                    "value": "gallery_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "all_feat[num_query:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mm_34": {
                "variable": {
                    "value": "sims",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(all_feat, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "F.normalize(torch.from_numpy(all_feat), p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "norm_feat.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_42": {
                "variable": {
                    "value": "norm_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.from_numpy(all_feat)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_42": {
                "ndarray": {
                    "value": "all_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((query_feat, gallery_feat), dim=0)",
                            "Call"
                        ],
                        [
                            "all_feat.numpy()",
                            "Call"
                        ],
                        [
                            "np.stack(all_feat_list, axis=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fastreid/evaluation/reid_evaluation.py": {
        "torch": {
            "normalize_54": {
                "variable": {
                    "value": "query_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(query_feat, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_55": {
                "variable": {
                    "value": "gallery_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gallery_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(gallery_feat, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_59": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(query_feat, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_59": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_60": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gallery_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(gallery_feat, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_60": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_60": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_116": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.hazy_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_56": {
                "input": {
                    "value": "query_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(query_feat, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "gallery_feat.t()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "fastreid/export/demo.py": {
        "torch": {
            "load_152": {
                "variable": {
                    "value": "feat_extractor",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "reid_feat_extractor.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "rand_42": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "trace_module_44": {
                "variable": {
                    "value": "traced_script_module",
                    "type": "variable",
                    "possible_values": []
                },
                "mod": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_model(cfg)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "{'inference': example}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "from_numpy_56": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.imread(img_path)",
                            "Call"
                        ],
                        [
                            "cv2.cvtColor(img, cv2.COLOR_BGR2RGB)",
                            "Call"
                        ],
                        [
                            "cv2.resize(img, (128, 256))",
                            "Call"
                        ],
                        [
                            "img / 255.0",
                            "BinOp"
                        ],
                        [
                            "(img - [0.485, 0.456, 0.406]) / [0.229, 0.224, 0.225]",
                            "BinOp"
                        ],
                        [
                            "img.transpose((2, 0, 1)).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "img[np.newaxis, :, :, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fastreid/export/tf_modeling.py": {
        "torch": {}
    },
    "fastreid/layers/activation.py": {
        "torch": {
            "sigmoid_44": {
                "variable": {
                    "value": "sigmoid_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ctx.saved_variables[0]",
                            "Subscript"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_26": {
                "input": {
                    "value": "F.softplus(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_31": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_37": {
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ctx.saved_variables[0]",
                            "Subscript"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softplus_26": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_59": {
                "input": {
                    "value": "math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_59": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "fastreid/layers/arcface.py": {
        "torch": {
            "Parameter_28": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_classes, in_feat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_33": {
                "variable": {
                    "value": "cos_theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.normalize(features)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "F.normalize(self.weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_38": {
                "variable": {
                    "value": "sin_theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0 - torch.pow(target_logit, 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_41": {
                "variable": {
                    "value": "final_target_logit",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "target_logit > self.threshold",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "cos_theta_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_logit * self.cos_m - sin_theta * self.sin_m",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "target_logit - self.mm",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_29": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_33": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_38": {
                "input": {
                    "value": "target_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cos_theta[torch.arange(0, features.size(0)), targets].view(-1, 1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_36": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "features.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "fastreid/layers/batch_drop.py": {
        "torch": {}
    },
    "fastreid/layers/batch_norm.py": {
        "torch": {
            "InstanceNorm2d_49": {
                "variable": {
                    "value": "self.IN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "half1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(planes / 2)",
                            "Call"
                        ]
                    ]
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "split_53": {
                "variable": {
                    "value": "split",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.half",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_56": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out1, out2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "batch_norm_72": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input.view(-1, C * self.num_splits, H, W)",
                    "type": "Call",
                    "possible_values": []
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight.repeat(self.num_splits)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias.repeat(self.num_splits)",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_76": {
                "variable": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.running_mean.view(self.num_splits, self.num_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_77": {
                "variable": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.running_var.view(self.num_splits, self.num_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_64": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_65": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "batch_norm_80": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "batch_norm_120": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_139": {
                "variable": {
                    "value": "state_dict[prefix + running_mean]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_141": {
                "variable": {
                    "value": "state_dict[prefix + running_var]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GroupNorm_201": {
                "num_groups": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "fastreid/layers/circle.py": {
        "torch": {
            "Parameter_21": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_classes, in_feat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_24": {
                "variable": {
                    "value": "sim_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.normalize(features)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "F.normalize(self.weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_25": {
                "variable": {
                    "value": "alpha_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-sim_mat.detach() + 1 + self._m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_26": {
                "variable": {
                    "value": "alpha_n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_mat.detach() + self._m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "one_hot_33": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.one_hot(targets, num_classes=self._num_classes)",
                            "Call"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "self._num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_24": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fastreid/layers/context_block.py": {
        "torch": {
            "Conv2d_39": {
                "variable": {
                    "value": "self.conv_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_40": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_42": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "self.channel_add_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, self.planes, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "self.channel_mul_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, self.planes, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_90": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "input_x.view(batch, channel, height * width)",
                            "Call"
                        ],
                        [
                            "input_x.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "context_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_mask(x)",
                            "Call"
                        ],
                        [
                            "context_mask.view(batch, 1, height * width)",
                            "Call"
                        ],
                        [
                            "self.softmax(context_mask)",
                            "Call"
                        ],
                        [
                            "context_mask.unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_106": {
                "variable": {
                    "value": "channel_mul_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.channel_mul_conv(context)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.planes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LayerNorm_46": {
                "normalized_shape": {
                    "value": "[self.planes, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ReLU_47": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "in_channels": {
                    "value": "self.planes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.planes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LayerNorm_54": {
                "normalized_shape": {
                    "value": "[self.planes, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ReLU_55": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "self.planes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "fastreid/layers/frn.py": {
        "torch": {
            "Parameter_19": {
                "variable": {
                    "value": "self.tau",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_47": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_48": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_29": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.rand(batch_size, *in_size) for in_size in input_size]",
                            "ListComp"
                        ],
                        [
                            "x * torch.rsqrt(nu2 + self.eps.abs())",
                            "BinOp"
                        ],
                        [
                            "self.weight.view(1, self.num_features, 1, 1) * x + self.bias.view(1, self.num_features, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_50": {
                "variable": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_181": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "*in_size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "rsqrt_78": {
                "input": {
                    "value": "nu2 + self.eps.abs()",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "fastreid/layers/non_local.py": {
        "torch": {
            "Conv2d_16": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inter_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_19": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=self.inter_channels, out_channels=self.in_channels, kernel_size=1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inter_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "variable": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inter_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_45": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.theta(x).view(batch_size, self.inter_channels, -1)",
                            "Call"
                        ],
                        [
                            "theta_x.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "phi_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.phi(x).view(batch_size, self.inter_channels, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_49": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_div_C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f / N",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "g_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g(x).view(batch_size, self.inter_channels, -1)",
                            "Call"
                        ],
                        [
                            "g_x.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "self.inter_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "fastreid/layers/pooling.py": {
        "torch": {
            "Parameter_54": {
                "variable": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1) * norm",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "adaptive_max_pool2d_64": {
                "variable": {
                    "value": "x_max",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_40": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.clamp(min=self.eps).pow(self.p)",
                            "Call"
                        ],
                        [
                            "x_max + x_avg",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "output_size": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_40": {
                "input": {
                    "value": "1.0 / self.p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_54": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "fastreid/layers/se_layer.py": {
        "torch": {
            "AdaptiveAvgPool2d_13": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_14": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(channel, int(channel / reduction), bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "in_features": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "int(channel / reduction)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "in_features": {
                    "value": "int(channel / reduction)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fastreid/layers/splat.py": {
        "torch": {
            "ReLU_43": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(in_channels * radix // reduction_factor, 32)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.cardinality",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inter_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(in_channels * radix // reduction_factor, 32)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels * radix",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.cardinality",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_65": {
                "variable": {
                    "value": "gap",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum(splited)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "F.adaptive_avg_pool2d(gap, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(gap)",
                            "Call"
                        ],
                        [
                            "self.bn1(gap)",
                            "Call"
                        ],
                        [
                            "self.relu(gap)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels * radix",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_pair(padding)",
                            "Call"
                        ],
                        [
                            "(0",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups * radix",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "split_61": {
                "variable": {
                    "value": "splited",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "self.dropblock(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "x.view(batch, self.cardinality, self.radix, -1).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "x.reshape(batch, -1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "rchannel // self.radix",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_76": {
                "variable": {
                    "value": "attens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "atten",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc2(gap)",
                            "Call"
                        ],
                        [
                            "self.rsoftmax(atten).view(batch, -1, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "rchannel // self.radix",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_93": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "self.dropblock(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "x.view(batch, self.cardinality, self.radix, -1).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "x.reshape(batch, -1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_96": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "self.dropblock(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "x.view(batch, self.cardinality, self.radix, -1).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "x.reshape(batch, -1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "fastreid/modeling/Net/Nets.py": {
        "torch": {
            "ModuleList_7": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_9": {
                "variable": {
                    "value": "self.first_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "za_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "za_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_dim // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Sequential_18": {
                "variable": {
                    "value": "last_block",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(in_channels=hidden_dim, out_channels=attribute_dim, kernel_size=3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.first_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(in_channels=embed_dim, out_channels=hidden_size, kernel_size=3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_43": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.Liner",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "cam_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cam_class",
                            "Method Argument"
                        ],
                        [
                            "cam_class",
                            "Method Argument"
                        ],
                        [
                            "cam_class",
                            "Method Argument"
                        ],
                        [
                            "cam_class",
                            "Method Argument"
                        ],
                        [
                            "cam_class",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_69": {
                "variable": {
                    "value": "self.first_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(in_channels=embed_dim, out_channels=hidden_size, kernel_size=3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_74": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_83": {
                "variable": {
                    "value": "self.Liner",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "cam_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cam_class",
                            "Method Argument"
                        ],
                        [
                            "cam_class",
                            "Method Argument"
                        ],
                        [
                            "cam_class",
                            "Method Argument"
                        ],
                        [
                            "cam_class",
                            "Method Argument"
                        ],
                        [
                            "cam_class",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_99": {
                "variable": {
                    "value": "self.first_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(in_channels=embed_dim, out_channels=hidden_size, kernel_size=3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_104": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_113": {
                "variable": {
                    "value": "self.Liner",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "cam_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cam_class",
                            "Method Argument"
                        ],
                        [
                            "cam_class",
                            "Method Argument"
                        ],
                        [
                            "cam_class",
                            "Method Argument"
                        ],
                        [
                            "cam_class",
                            "Method Argument"
                        ],
                        [
                            "cam_class",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_129": {
                "variable": {
                    "value": "self.first_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(embed_dim, hidden_size, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_134": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_143": {
                "variable": {
                    "value": "self.Liner",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "cam_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cam_class",
                            "Method Argument"
                        ],
                        [
                            "cam_class",
                            "Method Argument"
                        ],
                        [
                            "cam_class",
                            "Method Argument"
                        ],
                        [
                            "cam_class",
                            "Method Argument"
                        ],
                        [
                            "cam_class",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_157": {
                "variable": {
                    "value": "self.first_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(embed_dim, hidden_size, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_162": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_171": {
                "variable": {
                    "value": "self.Liner",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "cam_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cam_class",
                            "Method Argument"
                        ],
                        [
                            "cam_class",
                            "Method Argument"
                        ],
                        [
                            "cam_class",
                            "Method Argument"
                        ],
                        [
                            "cam_class",
                            "Method Argument"
                        ],
                        [
                            "cam_class",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_196": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "target_cam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_cam",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_11": {
                "variable": {
                    "value": "conv_block",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(in_channels=hidden_dim, out_channels=hidden_dim // 2, kernel_size=3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "conv_block",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(in_channels=hidden_size, out_channels=hidden_size // 2, kernel_size=3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "variable": {
                    "value": "conv_block",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(in_channels=hidden_size, out_channels=hidden_size // 2, kernel_size=3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_106": {
                "variable": {
                    "value": "conv_block",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(in_channels=hidden_size, out_channels=hidden_size // 2, kernel_size=3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_136": {
                "variable": {
                    "value": "conv_block",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(hidden_size, hidden_size // 2, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_164": {
                "variable": {
                    "value": "conv_block",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(hidden_size, hidden_size // 2, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_202": {
                "*args": {
                    "value": "*block",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv1d_19": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_dim // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "attribute_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attribute_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_21": {
                "num_features": {
                    "value": "attribute_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attribute_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_39": {
                "in_channels": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_40": {
                "num_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_41": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_70": {
                "in_channels": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_71": {
                "num_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_72": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_100": {
                "in_channels": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_101": {
                "num_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_102": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_130": {
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_131": {
                "num_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_132": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_158": {
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_159": {
                "num_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_160": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_199": {
                "in_channels": {
                    "value": "in_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_200": {
                "num_features": {
                    "value": "out_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_nc",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_201": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_12": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_dim // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_13": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_14": {
                "num_features": {
                    "value": "hidden_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv1d_46": {
                "in_channels": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_47": {
                "num_features": {
                    "value": "hidden_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_48": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_77": {
                "in_channels": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_78": {
                "num_features": {
                    "value": "hidden_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_79": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_107": {
                "in_channels": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_108": {
                "num_features": {
                    "value": "hidden_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_109": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_137": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_138": {
                "num_features": {
                    "value": "hidden_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_139": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_165": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_166": {
                "num_features": {
                    "value": "hidden_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_167": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "fastreid/modeling/backbones/osnet.py": {
        "torch": {
            "load_432": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_46": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_59": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_82": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_83": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_100": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_113": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_122": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_123": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_139": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_142": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "groups": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_151": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_152": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_181": {
                "variable": {
                    "value": "self.global_avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_183": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_192": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_193": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_gates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_235": {
                "variable": {
                    "value": "self.conv2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "LightConv3x3(mid_channels, mid_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_239": {
                "variable": {
                    "value": "self.conv2c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "LightConv3x3(mid_channels, mid_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_244": {
                "variable": {
                    "value": "self.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "LightConv3x3(mid_channels, mid_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_257": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_303": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_56": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_58": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_191": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "(in_channels // reduction, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sigmoid_200": {
                "variable": {
                    "value": "self.gate_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InstanceNorm2d_256": {
                "variable": {
                    "value": "self.IN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_353": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_201": {
                "variable": {
                    "value": "self.gate_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Identity_202": {
                "variable": {
                    "value": "self.gate_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_347": {
                "*args": {
                    "value": "Conv1x1(out_channels, out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AvgPool2d_349": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "fastreid/modeling/backbones/resnest.py": {
        "torch": {
            "Conv2d_57": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "group_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(planes * (bottleneck_width / 64.0)) * cardinality",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_95": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "group_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(planes * (bottleneck_width / 64.0)) * cardinality",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_102": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_207": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_208": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_298": {
                "variable": {
                    "value": "self.NL_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Non_local(256, bn_norm, num_splits) for _ in range(non_layers[0])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_301": {
                "variable": {
                    "value": "self.NL_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Non_local(512, bn_norm, num_splits) for _ in range(non_layers[1])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_304": {
                "variable": {
                    "value": "self.NL_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Non_local(1024, bn_norm, num_splits) for _ in range(non_layers[2])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_307": {
                "variable": {
                    "value": "self.NL_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Non_local(2048, bn_norm, num_splits) for _ in range(non_layers[3])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "AvgPool2d_68": {
                "variable": {
                    "value": "self.avd_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_194": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_layer(3, stem_width, kernel_size=3, stride=2, padding=1, bias=False, **conv_kwargs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_258": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*down_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_295": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_89": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "group_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(planes * (bottleneck_width / 64.0)) * cardinality",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "group_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(planes * (bottleneck_width / 64.0)) * cardinality",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "cardinality",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_197": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_200": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_252": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_255": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_247": {
                "kernel_size": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_250": {
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "fastreid/modeling/backbones/resnet.py": {
        "torch": {
            "Conv2d_41": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_78": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_83": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_86": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_88": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_124": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_127": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_128": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_161": {
                "variable": {
                    "value": "self.NL_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Non_local(256, bn_norm, num_splits) for _ in range(non_layers[0])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_164": {
                "variable": {
                    "value": "self.NL_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Non_local(512, bn_norm, num_splits) for _ in range(non_layers[1])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_167": {
                "variable": {
                    "value": "self.NL_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Non_local(1024, bn_norm, num_splits) for _ in range(non_layers[2])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_170": {
                "variable": {
                    "value": "self.NL_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Non_local(2048, bn_norm, num_splits) for _ in range(non_layers[3])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Identity_49": {
                "variable": {
                    "value": "self.se",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_92": {
                "variable": {
                    "value": "self.se",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_144": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_158": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_145": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_273": {
                "f": {
                    "value": "pretrain_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.BACKBONE.PRETRAIN_PATH",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_259": {
                "f": {
                    "value": "pretrain_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.BACKBONE.PRETRAIN_PATH",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_273": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_259": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "fastreid/modeling/backbones/resnext.py": {
        "torch": {
            "Conv2d_39": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "D * C",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "D * C",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "D * C",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cardinality",
                            "variable"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_45": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "D * C",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "D * C",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_47": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_48": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_96": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_97": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_98": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_99": {
                "variable": {
                    "value": "self.maxpool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_43": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "D * C",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_118": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_132": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "load_186": {
                "f": {
                    "value": "pretrain_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.BACKBONE.PRETRAIN_PATH",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Conv2d_119": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_121": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "fastreid/modeling/losses/cross_entroy_loss.py": {
        "torch": {
            "log_softmax_55": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_class_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_class_logits",
                            "Method Argument"
                        ],
                        [
                            "pred_class_logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_52": {
                "variable": {
                    "value": "soft_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_class_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_class_logits",
                            "Method Argument"
                        ],
                        [
                            "pred_class_logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_57": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(pred_class_logits, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_53": {
                "start": {
                    "value": "soft_label.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "fastreid/modeling/losses/focal_loss.py": {
        "torch": {
            "softmax_47": {
                "variable": {
                    "value": "input_soft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_50": {
                "variable": {
                    "value": "target_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "input.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pow_53": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-input_soft + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_56": {
                "variable": {
                    "value": "loss_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_one_hot * focal",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_tensor_23": {
                "obj": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_55": {
                "input": {
                    "value": "input_soft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(input, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_61": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(target_one_hot * focal, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_63": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(target_one_hot * focal, dim=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fastreid/modeling/losses/metric_loss.py": {
        "torch": {
            "cat_28": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tensors_gather",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.ones_like(tensor) for _ in range(torch.distributed.get_world_size())]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_45": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 * x / (torch.norm(x, 2, axis, keepdim=True).expand_as(x) + 1e-12)",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_45": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_46": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist_an.new().resize_as_(dist_an).fill_(1)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_46": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_46": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_55": {
                "variable": {
                    "value": "frac_up",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 * x / (torch.norm(x, 2, axis, keepdim=True).expand_as(x) + 1e-12)",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "y.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_95": {
                "variable": {
                    "value": "(dist_ap, relative_p_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_mat[is_pos].contiguous().view(N, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "min_99": {
                "variable": {
                    "value": "(dist_an, relative_n_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_mat[is_neg].contiguous().view(N, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_132": {
                "variable": {
                    "value": "dist_ap",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_ap * weights_ap",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_133": {
                "variable": {
                    "value": "dist_an",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_an * weights_an",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_191": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalize(embedding, axis=-1)",
                            "Call"
                        ],
                        [
                            "F.normalize(embedding, dim=1)",
                            "Call"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_200": {
                "variable": {
                    "value": "dist_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalize(embedding, axis=-1)",
                            "Call"
                        ],
                        [
                            "F.normalize(embedding, dim=1)",
                            "Call"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "all_embedding.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_209": {
                "variable": {
                    "value": "alpha_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-s_p.detach() + 1 + self.m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_210": {
                "variable": {
                    "value": "alpha_n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_n.detach() + self.m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_217": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.logsumexp(logit_p, dim=1) + torch.logsumexp(logit_n, dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_217": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_24": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_56": {
                "input": {
                    "value": "torch.sum(torch.pow(x, 2), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_57": {
                "input": {
                    "value": "torch.sum(torch.pow(y, 2), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_63": {
                "input": {
                    "value": "dist * mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_65": {
                "input": {
                    "value": "torch.exp(diff) * mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "margin_ranking_loss_175": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input1": {
                    "value": "dist_an",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(dist_mat[is_neg].contiguous().view(N, -1), 1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "dist_an.squeeze(1)",
                            "Call"
                        ],
                        [
                            "dist_mat * is_neg",
                            "BinOp"
                        ],
                        [
                            "torch.sum(dist_an * weights_an, dim=1)",
                            "Call"
                        ],
                        [
                            "hard_example_mining(dist_mat, is_pos, is_neg)",
                            "Call"
                        ],
                        [
                            "weighted_example_mining(dist_mat, is_pos, is_neg)",
                            "Call"
                        ]
                    ]
                },
                "input2": {
                    "value": "dist_ap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(dist_mat[is_pos].contiguous().view(N, -1), 1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "dist_ap.squeeze(1)",
                            "Call"
                        ],
                        [
                            "dist_mat * is_pos",
                            "BinOp"
                        ],
                        [
                            "torch.sum(dist_ap * weights_ap, dim=1)",
                            "Call"
                        ],
                        [
                            "hard_example_mining(dist_mat, is_pos, is_neg)",
                            "Call"
                        ],
                        [
                            "weighted_example_mining(dist_mat, is_pos, is_neg)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist_an.new().resize_as_(dist_an).fill_(1)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "margin": {
                    "value": "self._margin",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "soft_margin_loss_177": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_an - dist_ap",
                    "type": "BinOp",
                    "possible_values": []
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist_an.new().resize_as_(dist_an).fill_(1)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "norm_39": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 * x / (torch.norm(x, 2, axis, keepdim=True).expand_as(x) + 1e-12)",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_66": {
                "input": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist - max_v",
                            "BinOp"
                        ]
                    ]
                }
            },
            "margin_ranking_loss_178": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input1": {
                    "value": "dist_an",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(dist_mat[is_neg].contiguous().view(N, -1), 1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "dist_an.squeeze(1)",
                            "Call"
                        ],
                        [
                            "dist_mat * is_neg",
                            "BinOp"
                        ],
                        [
                            "torch.sum(dist_an * weights_an, dim=1)",
                            "Call"
                        ],
                        [
                            "hard_example_mining(dist_mat, is_pos, is_neg)",
                            "Call"
                        ],
                        [
                            "weighted_example_mining(dist_mat, is_pos, is_neg)",
                            "Call"
                        ]
                    ]
                },
                "input2": {
                    "value": "dist_ap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(dist_mat[is_pos].contiguous().view(N, -1), 1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "dist_ap.squeeze(1)",
                            "Call"
                        ],
                        [
                            "dist_mat * is_pos",
                            "BinOp"
                        ],
                        [
                            "torch.sum(dist_ap * weights_ap, dim=1)",
                            "Call"
                        ],
                        [
                            "hard_example_mining(dist_mat, is_pos, is_neg)",
                            "Call"
                        ],
                        [
                            "weighted_example_mining(dist_mat, is_pos, is_neg)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist_an.new().resize_as_(dist_an).fill_(1)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "margin": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "exp_65": {
                "input": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist - max_v",
                            "BinOp"
                        ]
                    ]
                }
            },
            "logsumexp_217": {
                "input": {
                    "value": "logit_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.s * alpha_n * (s_n - delta_n)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_56": {
                "input": {
                    "value": "torch.pow(x, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_57": {
                "input": {
                    "value": "torch.pow(y, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_56": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 * x / (torch.norm(x, 2, axis, keepdim=True).expand_as(x) + 1e-12)",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_57": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist_an.new().resize_as_(dist_an).fill_(1)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "fastreid/modeling/losses/model_loss.py": {
        "torch": {
            "BCEWithLogitsLoss_14": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_35": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "KLDivLoss_75": {
                "variable": {
                    "value": "self.kl_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_softmax_82": {
                "variable": {
                    "value": "student_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "student_logits / self.temp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_83": {
                "variable": {
                    "value": "teacher_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "teacher_logits / self.temp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "KLDivLoss_102": {
                "variable": {
                    "value": "self.kl_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "self.reduction",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_106": {
                "variable": {
                    "value": "student_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "student_logits / self.temp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_107": {
                "variable": {
                    "value": "teacher_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "teacher_logits / self.temp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "L1Loss_141": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pow_149": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_149": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_150": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_150": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_150": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_157": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hazy_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hazy_f",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_157": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_158": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hazy_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hazy_f",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_158": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_158": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "KLDivLoss_85": {
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "KLDivLoss_109": {
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "normalize_166": {
                "variable": {
                    "value": "f_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_169": {
                "variable": {
                    "value": "hf_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hazy_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hazy_f",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_177": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_177": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_178": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_178": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_178": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_185": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hazy_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hazy_f",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_185": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_186": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hazy_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hazy_f",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_186": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_186": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_192": {
                "variable": {
                    "value": "f_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_194": {
                "variable": {
                    "value": "hf_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hazy_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hazy_f",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_167": {
                "input": {
                    "value": "f_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(f, dim=1)",
                            "Call"
                        ],
                        [
                            "F.normalize(f, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "f_feat.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_170": {
                "input": {
                    "value": "hf_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(hazy_f, dim=1)",
                            "Call"
                        ],
                        [
                            "F.normalize(hazy_f, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "hf_feat.t()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "fastreid/modeling/meta_arch/baseline.py": {
        "torch": {
            "CrossEntropyLoss_50": {
                "variable": {
                    "value": "self.CrossEntropy_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_51": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_148": {
                "variable": {
                    "value": "pair_gt_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0] * pair_pred_logits.size(0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_151": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hazy_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hazy_f",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_151": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_152": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hazy_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hazy_f",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_152": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_152": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_160": {
                "variable": {
                    "value": "fake_pair_gt_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1] * fake_pair_pred_logits.size(0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_163": {
                "variable": {
                    "value": "pair_f",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f, hazy_f]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_165": {
                "variable": {
                    "value": "pair_gt_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0] * pair_pred_logits.size(0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_168": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hazy_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hazy_f",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_168": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_169": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hazy_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hazy_f",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_169": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_169": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_176": {
                "variable": {
                    "value": "fake_pair_f",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hazy_f, hazy_f[fake_imgs]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_178": {
                "variable": {
                    "value": "fake_pair_gt_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1] * fake_pair_pred_logits.size(0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_211": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pair_pred_logits, fake_pair_pred_logits]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_212": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pair_gt_labels.reshape([-1, 1]), fake_pair_gt_labels.reshape([-1, 1])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_241": {
                "variable": {
                    "value": "real_label",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0] * t_tea_features.size(0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_242": {
                "variable": {
                    "value": "hazy_label",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1] * t_hazy_stu_features.size(0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_24": {
                "data": {
                    "value": "cfg.MODEL.PIXEL_MEAN",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_25": {
                "data": {
                    "value": "cfg.MODEL.PIXEL_STD",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_49": {
                "type": {
                    "value": "cfg.MODEL.DEVICE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_50": {
                "type": {
                    "value": "cfg.MODEL.DEVICE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdaptiveMaxPool2d_58": {
                "variable": {
                    "value": "pool_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_147": {
                "input": {
                    "value": "f - hazy_f",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_159": {
                "input": {
                    "value": "f - hazy_f[fake_imgs_idx]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Identity_61": {
                "variable": {
                    "value": "pool_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fastreid/modeling/meta_arch/build.py": {
        "torch": {
            "device_25": {
                "type": {
                    "value": "cfg.MODEL.DEVICE",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fastreid/modeling/meta_arch/mgn.py": {
        "torch": {
            "Sequential_35": {
                "variable": {
                    "value": "self.backbone",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "backbone.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "res_conv4",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*backbone.layer3[1:]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "res_p_conv5",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "Bottleneck(1024, 512, bn_norm, num_splits, False, with_se, downsample=nn.Sequential(nn.Conv2d(1024, 2048, 1, bias=False), get_norm(bn_norm, 2048, num_splits)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_68": {
                "variable": {
                    "value": "self.b1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "copy.deepcopy(res_conv4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "variable": {
                    "value": "self.b2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "copy.deepcopy(res_conv4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_89": {
                "variable": {
                    "value": "self.b3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "copy.deepcopy(res_conv4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_106": {
                "variable": {
                    "value": "pool_reduce",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "pool_layer",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "chunk_133": {
                "variable": {
                    "value": "(b21_feat, b22_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "b2_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.b2(features)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_144": {
                "variable": {
                    "value": "(b31_feat, b32_feat, b33_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "b3_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.b3(features)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_194": {
                "variable": {
                    "value": "pred_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[b1_pool_feat, b2_pool_feat, b3_pool_feat, b21_pool_feat, b22_pool_feat, b31_pool_feat, b32_pool_feat, b33_pool_feat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveMaxPool2d_56": {
                "variable": {
                    "value": "pool_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Identity_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_108": {
                "in_channels": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "reduce_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_110": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_179": {
                "tensors": {
                    "value": "(b21_pool_feat, b22_pool_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_180": {
                "tensors": {
                    "value": "(b31_pool_feat, b32_pool_feat, b33_pool_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "*args": {
                    "value": "nn.Conv2d(1024, 2048, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Identity_59": {
                "variable": {
                    "value": "pool_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fastreid/solver/lr_scheduler.py": {
        "torch": {
            "StepLR_147": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "step_size": {
                    "value": "args.SOLVER.D_STEPS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "iterations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MultiStepLR_151": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "milestones": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.SOLVER.D_STEPS",
                            "Attribute"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "iterations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "fastreid/solver/optim/adam.py": {
        "torch": {
            "zeros_like_81": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_83": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_86": {
                "variable": {
                    "value": "state[max_exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_103": {
                "input": {
                    "value": "max_exp_avg_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_exp_avg_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "fastreid/solver/optim/lamb.py": {
        "torch": {
            "tensor_23": {
                "data": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "results.items()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_83": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_85": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fastreid/solver/optim/sgd.py": {
        "torch": {
            "clone_104": {
                "variable": {
                    "value": "buf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "d_p.add(momentum, buf)",
                            "Call"
                        ],
                        [
                            "buf",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "fastreid/solver/optim/swa.py": {
        "torch": {
            "zeros_like_156": {
                "variable": {
                    "value": "param_state[swa_buffer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_like_185": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fastreid/utils/checkpoint.py": {
        "torch": {
            "load_185": {
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_74": {
                "obj": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_248": {
                "variable": {
                    "value": "state_dict[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_dict[k]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "device_185": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "fastreid/utils/collect_env.py": {
        "torch": {
            "is_available_64": {
                "variable": {
                    "value": "has_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_device_name_101": {
                "device": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k in range(torch.cuda.device_count())",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fastreid/utils/comm.py": {
        "torch": {
            "device_96": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu if backend == gloo else cuda",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_121": {
                "variable": {
                    "value": "local_size",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[tensor.numel()]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_133": {
                "variable": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(max_size - local_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_134": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tensor, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_248": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(values, dim=0)",
                            "Call"
                        ],
                        [
                            "values / world_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_123": {
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_162": {
                "*size": {
                    "value": "(max_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_203": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ByteTensor(storage).to(device=device)",
                            "Call"
                        ],
                        [
                            "torch.cat((tensor, padding), dim=0)",
                            "Call"
                        ],
                        [
                            "_serialize_to_tensor(data, group)",
                            "Call"
                        ],
                        [
                            "_pad_to_largest_tensor(tensor, group)",
                            "Call"
                        ],
                        [
                            "zip(size_list, tensor_list)",
                            "Call"
                        ],
                        [
                            "_serialize_to_tensor(data, group)",
                            "Call"
                        ],
                        [
                            "_pad_to_largest_tensor(tensor, group)",
                            "Call"
                        ],
                        [
                            "zip(size_list, tensor_list)",
                            "Call"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "tensor_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.empty((max_size,), dtype=torch.uint8, device=tensor.device) for _ in size_list]",
                            "ListComp"
                        ],
                        [
                            "[torch.empty((max_size,), dtype=torch.uint8, device=tensor.device) for _ in size_list]",
                            "ListComp"
                        ]
                    ]
                },
                "dst": {
                    "value": "dst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "group": {
                    "value": "group",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_get_global_gloo_group()",
                            "Call"
                        ],
                        [
                            "_get_global_gloo_group()",
                            "Call"
                        ],
                        [
                            "group",
                            "Method Argument"
                        ],
                        [
                            "group",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gather_211": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ByteTensor(storage).to(device=device)",
                            "Call"
                        ],
                        [
                            "torch.cat((tensor, padding), dim=0)",
                            "Call"
                        ],
                        [
                            "_serialize_to_tensor(data, group)",
                            "Call"
                        ],
                        [
                            "_pad_to_largest_tensor(tensor, group)",
                            "Call"
                        ],
                        [
                            "zip(size_list, tensor_list)",
                            "Call"
                        ],
                        [
                            "_serialize_to_tensor(data, group)",
                            "Call"
                        ],
                        [
                            "_pad_to_largest_tensor(tensor, group)",
                            "Call"
                        ],
                        [
                            "zip(size_list, tensor_list)",
                            "Call"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dst": {
                    "value": "dst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "group": {
                    "value": "group",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_get_global_gloo_group()",
                            "Call"
                        ],
                        [
                            "_get_global_gloo_group()",
                            "Call"
                        ],
                        [
                            "group",
                            "Method Argument"
                        ],
                        [
                            "group",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_241": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_201": {
                "*size": {
                    "value": "(max_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fastreid/utils/env.py": {
        "torch": {
            "set_rng_state_36": {
                "new_state": {
                    "value": "torch.manual_seed(seed).get_state()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_36": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.getpid() + int(datetime.now().strftime('%S%f')) + int.from_bytes(os.urandom(2), 'big')",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "split_15": {
                "tensor": {
                    "value": ".",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "fastreid/utils/events.py": {
        "torch": {
            "SummaryWriter_119": {
                "variable": {
                    "value": "self._writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "log_dir",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fastreid/utils/precision_bn.py": {
        "torch": {
            "no_grad_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_56": {
                "input": {
                    "value": "bn.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_57": {
                "input": {
                    "value": "bn.running_var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fastreid/utils/summary.py": {
        "torch": {
            "is_available_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_65": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "*in_size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "prod_36": {
                "input": {
                    "value": "torch.LongTensor(list(module.weight.size()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "prod_39": {
                "input": {
                    "value": "torch.LongTensor(list(module.bias.size()))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "fastreid/utils/weight_init.py": {
        "torch": {}
    },
    "tests/interp_test.py": {
        "torch": {
            "load_20": {
                "f": {
                    "value": "logs/2019.8.14/market/baseline/models/model_149.pth",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "tests/lr_scheduler_test.py": {
        "torch": {
            "Linear_15": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/model_test.py": {
        "torch": {
            "DataParallel_23": {
                "variable": {
                    "value": "net2",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "se_resnet101_ibn_a()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_26": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_24": {
                "f": {
                    "value": "cfg.MODEL.BACKBONE.PRETRAIN_PATH",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tools/deploy/caffe_export.py": {
        "torch": {
            "randn_69": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cfg.INPUT.SIZE_TEST[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "cfg.INPUT.SIZE_TEST[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "tools/deploy/export2tf.py": {
        "torch": {
            "randn_47": {
                "variable": {
                    "value": "dummy_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tools/deploy/pytorch_to_caffe.py": {
        "torch": {
            "batch_norm_402": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones(dim, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "running_var": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args[0] * np.ones(dim, dtype=np.float32)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "running_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(input.size()[1])",
                            "Call"
                        ],
                        [
                            "running_mean",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "running_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(input.size()[1])",
                            "Call"
                        ],
                        [
                            "running_var",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "training": {
                    "value": "use_input_stats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_413": {
                "variable": {
                    "value": "running_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input.size()[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_414": {
                "variable": {
                    "value": "running_var",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input.size()[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}