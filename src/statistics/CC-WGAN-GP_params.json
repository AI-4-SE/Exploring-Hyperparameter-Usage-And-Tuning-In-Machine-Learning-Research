{
    "GAN_models/data_loader.py": {
        "sklearn": {
            "train_test_split_21": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "X",
                    "possible_values": [
                        [
                            "X[ind_list, :, :]",
                            "Subscript"
                        ],
                        [
                            "X.reshape(X.shape[0], Channels, time_step, 1)",
                            "Call"
                        ],
                        [
                            "X.astype('float32')",
                            "Call"
                        ],
                        [
                            "X.reshape(X.shape[0], Channels, time_step, 1)",
                            "Call"
                        ],
                        [
                            "X.astype('float32')",
                            "Call"
                        ],
                        [
                            "X[ind_list, :, :]",
                            "Subscript"
                        ],
                        [
                            "X.reshape(X.shape[0], 1, time_step, 1)",
                            "Call"
                        ],
                        [
                            "X.astype('float32')",
                            "Call"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.33",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "possible_values": []
                }
            }
        }
    },
    "GAN_models/training_cc_gan.py": {
        "sklearn": {
            "roc_auc_score_220": {
                "variable": {
                    "value": "auc",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "possible_values": [
                        [
                            "np.concatenate((y_T_te, y_nT_te), axis=0)",
                            "Call"
                        ],
                        [
                            "keras.utils.to_categorical(y_test, 2)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "label1[:, :2]",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "ConfigProto_31": {
                "variable": {
                    "value": "config",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_37": {
                "config": {
                    "value": "config",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "deep_classifiers/discriminator_as_classifier.py": {
        "sklearn": {
            "roc_auc_score_145": {
                "variable": {
                    "value": "auc",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "possible_values": [
                        [
                            "np.concatenate((y_T_te, y_nT_te), axis=0)",
                            "Call"
                        ],
                        [
                            "y_test.astype('int32')",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "target",
                    "possible_values": [
                        [
                            "model.predict(X_test, batch_size=32)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "ConfigProto_23": {
                "variable": {
                    "value": "config",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_29": {
                "config": {
                    "value": "config",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "deep_classifiers/training_EEGNet_classifier.py": {
        "sklearn": {
            "roc_auc_score_112": {
                "variable": {
                    "value": "auc",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "possible_values": [
                        [
                            "np.concatenate((y_T_te, y_nT_te), axis=0)",
                            "Call"
                        ],
                        [
                            "y_test.astype('int32')",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "target",
                    "possible_values": [
                        [
                            "model.predict(X_test, batch_size=32)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "ConfigProto_18": {
                "variable": {
                    "value": "config",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_24": {
                "config": {
                    "value": "config",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "GAN_models/arch_cc_gan.py": {
        "tensorflow": {
            "ConfigProto_20": {
                "variable": {
                    "value": "config",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_26": {
                "config": {
                    "value": "config",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "GAN_models/arch_one_channel.py": {
        "tensorflow": {
            "ConfigProto_19": {
                "variable": {
                    "value": "config",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_25": {
                "config": {
                    "value": "config",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "GAN_models/arch_vanilla64.py": {
        "tensorflow": {
            "ConfigProto_19": {
                "variable": {
                    "value": "config",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_25": {
                "config": {
                    "value": "config",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "GAN_models/custom_keras_layers.py": {
        "tensorflow": {
            "reduce_mean_85": {
                "input_tensor": {
                    "value": "x",
                    "possible_values": [
                        [
                            [
                                0
                            ],
                            "Call"
                        ],
                        [
                            "range(filter_size)",
                            "Call"
                        ],
                        [
                            "x - tf.expand_dims(mu, -1)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "resize_bicubic_16": {
                "images": {
                    "value": "x",
                    "possible_values": [
                        [
                            [
                                0
                            ],
                            "Call"
                        ],
                        [
                            "range(filter_size)",
                            "Call"
                        ],
                        [
                            "x - tf.expand_dims(mu, -1)",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "output_shape",
                    "possible_values": [
                        [
                            "(stride * input_shape[1], stride * input_shape[2])",
                            "Tuple"
                        ],
                        [
                            "(input_shape[1], stride * input_shape[2])",
                            "Tuple"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "resize_bicubic_27": {
                "images": {
                    "value": "x",
                    "possible_values": [
                        [
                            [
                                0
                            ],
                            "Call"
                        ],
                        [
                            "range(filter_size)",
                            "Call"
                        ],
                        [
                            "x - tf.expand_dims(mu, -1)",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "output_shape",
                    "possible_values": [
                        [
                            "(stride * input_shape[1], stride * input_shape[2])",
                            "Tuple"
                        ],
                        [
                            "(input_shape[1], stride * input_shape[2])",
                            "Tuple"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "expand_dims_86": {
                "input": {
                    "value": "mu",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.reduce_mean(x, axis=2), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            }
        }
    },
    "GAN_models/training_one_channel.py": {
        "tensorflow": {
            "ConfigProto_25": {
                "variable": {
                    "value": "config",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_30": {
                "config": {
                    "value": "config",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "GAN_models/training_vanilla64.py": {
        "tensorflow": {
            "ConfigProto_26": {
                "variable": {
                    "value": "config",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_31": {
                "config": {
                    "value": "config",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "visual_inspection/data_frm_saved_model.py": {
        "tensorflow": {
            "ConfigProto_16": {
                "variable": {
                    "value": "config",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_22": {
                "config": {
                    "value": "config",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}