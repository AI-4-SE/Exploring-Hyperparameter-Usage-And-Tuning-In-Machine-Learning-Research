{
    "layers.py": {
        "torch": {
            "Sequential_12": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_26": {
                "input": {
                    "value": "attention_map[:, i * (c // self.num_streams):(i + 1) * (c // self.num_streams), :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "Sequential_19": {
                "variable": {
                    "value": "self.reconstruct_image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Flatten()",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_21": {
                "variable": {
                    "value": "self.predict_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(512 * num_inputs, 128, 2, padding=0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_31": {
                "variable": {
                    "value": "encoded_reps",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(encoded_reps, enc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_32": {
                "variable": {
                    "value": "rec",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rec, rec1.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_48": {
                "variable": {
                    "value": "encoded_reps",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(encoded_reps, enc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_49": {
                "variable": {
                    "value": "rec",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rec, rec1.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_19": {
                "num_features": {
                    "value": "512 * 4 * 16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "in_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "image_shape[0] * image_shape[1] * image_shape[2]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "nn.Sigmoid()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_21": {
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_labels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512 * num_inputs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512 * num_inputs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "segnet.py": {
        "torch": {
            "ModuleList_22": {
                "variable": {
                    "value": "self.encoder_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self.conv_layer([3, filter[0]])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_23": {
                "variable": {
                    "value": "self.decoder_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self.conv_layer([filter[0], filter[0]])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_29": {
                "variable": {
                    "value": "self.conv_block_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self.conv_layer([filter[0], filter[0]])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_30": {
                "variable": {
                    "value": "self.conv_block_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self.conv_layer([filter[0], 3])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MaxPool2d_44": {
                "variable": {
                    "value": "self.down_sampling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "return_indices": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxUnpool2d_45": {
                "variable": {
                    "value": "self.up_sampling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_47": {
                "variable": {
                    "value": "self.logsigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([-0.5, -0.5, -0.5])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "conv_block",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=channel[0], out_channels=channel[1], kernel_size=3, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "in_channels": {
                    "value": "channel[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_74": {
                "num_features": {
                    "value": "channel[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_75": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "*args": {
                    "value": "self.conv_layer([filter[i + 1], filter[i + 1]])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "*args": {
                    "value": "self.conv_layer([filter[i], filter[i]])",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "device_10": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_73": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "transformed_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TrainingDataset(glob.glob('/kaggle/input/fruitsmulti/fruit/*/Training/*/*'), [('fruit_texture', 't'), ('fruit_shape', 's'), ('fruit_edge', 'e')])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_75": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "transformed_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TrainingDataset(glob.glob('/kaggle/input/fruitsmulti/fruit/*/Training/*/*'), [('fruit_texture', 't'), ('fruit_shape', 's'), ('fruit_edge', 'e')])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_79": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_59": {
                "data": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": [
                        [
                            "labels[i]",
                            "Subscript"
                        ],
                        [
                            "np.array(labels_list.index(curr_path[7]))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_106": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "saved-model",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_135": {
                "variable": {
                    "value": "accuracy",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "save_148": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "saved-model",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_144": {
                "input": {
                    "value": "torch.argmax(out_test[2], 1) == lab_test",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "argmax_144": {
                "input": {
                    "value": "out_test[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}