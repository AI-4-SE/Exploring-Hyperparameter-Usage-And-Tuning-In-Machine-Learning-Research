{
    "scripts/examine_structure.py": {
        "torch": {
            "device_17": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_24": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_46": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(feats_var, questions_var)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_79": {
                "input": {
                    "value": "model.tau_0[i, :i + 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_81": {
                "input": {
                    "value": "model.tau_1[i, :i + 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_86": {
                "input": {
                    "value": "model.alpha[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_77": {
                "input": {
                    "value": "model.model_bernoulli",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/run_model.py": {
        "torch": {
            "Sequential_344": {
                "variable": {
                    "value": "cnn",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_383": {
                "variable": {
                    "value": "all_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_scores, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_384": {
                "variable": {
                    "value": "all_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_probs, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_201": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ee(*pos_args, **kwargs)",
                            "Call"
                        ],
                        [
                            "model(questions_var, feats_var)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "upsample_bilinear_317": {
                "variable": {
                    "value": "alpha_upsampled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha4d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alpha.unsqueeze(0).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "torch.Size(orig_img_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_317": {
                "variable": {
                    "value": "alpha_upsampled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_317": {
                "variable": {
                    "value": "alpha_upsampled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_370": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ee(*pos_args, **kwargs)",
                            "Call"
                        ],
                        [
                            "model(questions_var, feats_var)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_237": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(all_control_scores[i].size(0), all_control_scores[i].size(1), max_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "save_269": {
                "obj": {
                    "value": "gamma_means",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gammas.mean(0)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_program_stats_dir, 'gamma_means')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_271": {
                "obj": {
                    "value": "beta_means",
                    "type": "variable",
                    "possible_values": [
                        [
                            "betas.mean(0)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_program_stats_dir, 'beta_means')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_273": {
                "obj": {
                    "value": "gamma_medians",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gammas.median(0)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_program_stats_dir, 'gamma_medians')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_275": {
                "obj": {
                    "value": "beta_medians",
                    "type": "variable",
                    "possible_values": [
                        [
                            "betas.median(0)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_program_stats_dir, 'beta_medians')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_278": {
                "obj": {
                    "value": "gammas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_programs[:, :, :pg.module_dim]",
                            "Subscript"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_program_stats_dir, 'gammas')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_279": {
                "obj": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_programs[:, :, pg.module_dim:2 * pg.module_dim]",
                            "Subscript"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_program_stats_dir, 'betas')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clone_226": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_248": {
                "tensors": {
                    "value": "all_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_scores, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_249": {
                "tensors": {
                    "value": "all_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_probs, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_250": {
                "tensors": {
                    "value": "all_correct",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_252": {
                "tensors": {
                    "value": "all_film_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_254": {
                "tensors": {
                    "value": "all_vib_costs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_256": {
                "tensors": {
                    "value": "all_read_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_258": {
                "tensors": {
                    "value": "all_control_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_260": {
                "tensors": {
                    "value": "all_connections",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_226": {
                "tensors": {
                    "value": "[conn.unsqueeze(1) for conn in ee.connections]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/train_model.py": {
        "torch": {
            "device_40": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_489": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_795": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "json.load(f)",
                            "Call"
                        ],
                        [
                            "{'args': args.__dict__, 'program_generator_kwargs': pg_kwargs, 'program_generator_state': pg_state, 'execution_engine_kwargs': ee_kwargs, 'execution_engine_state': ee_state, 'baseline_kwargs': baseline_kwargs, 'baseline_state': baseline_state, 'baseline_type': baseline_type, 'vocab': vocab}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "args.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_806": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "json.load(f)",
                            "Call"
                        ],
                        [
                            "{'args': args.__dict__, 'program_generator_kwargs': pg_kwargs, 'program_generator_state': pg_state, 'execution_engine_kwargs': ee_kwargs, 'execution_engine_state': ee_state, 'baseline_kwargs': baseline_kwargs, 'baseline_state': baseline_state, 'baseline_type': baseline_type, 'vocab': vocab}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "args.checkpoint_path + '.best'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__610": {
                "parameters": {
                    "value": "allMacParams",
                    "type": "variable",
                    "possible_values": [
                        [
                            "itertools.chain(program_generator.parameters(), execution_engine.parameters())",
                            "Call"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "args.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_689": {
                "variable": {
                    "value": "p_tree",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "execution_engine.tree_odds",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "vr/data.py": {
        "torch": {}
    },
    "vr/models/baselines.py": {
        "torch": {
            "Conv2d_22": {
                "variable": {
                    "value": "self.Wv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.Wu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "variable": {
                    "value": "self.Wp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_43": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_proj + u_proj_expand",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_44": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Wp(h).view(N, H * W)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_61": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(token_to_idx)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "wordvec_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_62": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "wordvec_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "rnn_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_129": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_201": {
                "variable": {
                    "value": "cat_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[q_feats, img_feats.view(N, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_223": {
                "variable": {
                    "value": "self.image_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "res_block_dim",
                            "variable"
                        ],
                        [
                            "proj_dim",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "rnn_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_109": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_128": {
                "in_features": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "variable"
                        ],
                        [
                            "dim",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "in_channels": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "res_block_dim",
                            "variable"
                        ],
                        [
                            "proj_dim",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "res_block_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_98": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_103": {
                "in_channels": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "res_block_dim",
                            "variable"
                        ],
                        [
                            "proj_dim",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "proj_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_104": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_107": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_117": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_119": {
                "num_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_121": {
                "in_features": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "variable"
                        ],
                        [
                            "dim",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dims",
                            "variable"
                        ]
                    ]
                }
            },
            "ReLU_126": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_123": {
                "num_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dims",
                            "variable"
                        ]
                    ]
                }
            },
            "Dropout_125": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "vr/models/convlstm.py": {
        "torch": {
            "cat_71": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img_feats, q_feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_42": {
                "*size": {
                    "value": "[1] + feature_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "vr/models/film_gen.py": {
        "torch": {
            "device_15": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Embedding_93": {
                "variable": {
                    "value": "self.encoder_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "encoder_vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "wordvec_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_278": {
                "variable": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t.unsqueeze(0) for t in self.scores]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_105": {
                "variable": {
                    "value": "self.decoder_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim * self.num_dir",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_modules * self.cond_feat_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_112": {
                "variable": {
                    "value": "self.context2key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim * self.num_dir",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.module_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_125": {
                "variable": {
                    "value": "self.output_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.cond_feat_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tensor_195": {
                "variable": {
                    "value": "varDrop",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_199": {
                "variable": {
                    "value": "embed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder_embed(x)",
                            "Call"
                        ],
                        [
                            "embed / (1.0 - self.variational_embedding_dropout) * varDrop.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "pack_padded_sequence(embed, seq_lengths.data.cpu().numpy(), batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "seq_lengths.data.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_212": {
                "variable": {
                    "value": "(out, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out[iperm_idx]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_282": {
                "tensors": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out[iperm_idx]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GRU_336": {
                "*args": {
                    "value": "hidden_dim1",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_117": {
                "variable": {
                    "value": "mod",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim * self.num_dir",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "attention_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.module_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_120": {
                "variable": {
                    "value": "mod",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim * self.num_dir",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * self.module_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_190": {
                "*size": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder_rnn.num_layers * self.num_dir",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size(0) if x is not None else None",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder_rnn.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "LSTM_339": {
                "*args": {
                    "value": "hidden_dim1",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_192": {
                "*size": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder_rnn.num_layers * self.num_dir",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size(0) if x is not None else None",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder_rnn.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_242": {
                "*size": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder_rnn.num_layers * self.num_dir",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size(0) if x is not None else None",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder_rnn.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "exp_270": {
                "input": {
                    "value": "scores - scores.max(1, keepdim=True)[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_246": {
                "*size": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder_rnn.num_layers * self.num_dir",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size(0) if x is not None else None",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder_rnn.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "vr/models/filmed_net.py": {
        "torch": {
            "device_17": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "linspace_346": {
                "variable": {
                    "value": "x_coord_row",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "start",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                },
                "end": {
                    "value": "end",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "steps": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "linspace_347": {
                "variable": {
                    "value": "y_coord_row",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "start",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                },
                "end": {
                    "value": "end",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "steps": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_114": {
                "variable": {
                    "value": "self.default_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.module_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_115": {
                "variable": {
                    "value": "self.default_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.module_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_188": {
                "variable": {
                    "value": "module_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "feats.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_188": {
                "variable": {
                    "value": "module_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_257": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim + self.num_cond_maps + (num_extra_channels if self.extra_channel_freq >= 2 else 0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_308": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classifier(final_module_output)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "torch.cat([out, cond_maps], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([out, extra_channels], 1)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.film(out, gammas, betas)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.film(out, gammas, betas)",
                            "Call"
                        ],
                        [
                            "self.drop(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.film(out, gammas, betas)",
                            "Call"
                        ],
                        [
                            "x + out",
                            "BinOp"
                        ],
                        [
                            "self.film(out, gammas, betas)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.proj(out))",
                            "Call"
                        ],
                        [
                            "self.tfilmedResBlock(out, gammas=gammas, betas=betas, extra_channels=extra_channels, cond_maps=cond_maps)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_326": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_input * in_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_334": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([x, stem_batch_coords], 1)",
                            "Call"
                        ],
                        [
                            "self.film(x, gammas, betas)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, extra_channels], 1)",
                            "Call"
                        ],
                        [
                            "self.input_proj(x)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_335": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.proj(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_166": {
                "variable": {
                    "value": "(gammas, betas)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "film[:, :, :2 * self.module_dim]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "self.module_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_181": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, stem_batch_coords]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_214": {
                "variable": {
                    "value": "final_module_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[final_module_output, batch_coords]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_254": {
                "variable": {
                    "value": "self.input_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim + (num_extra_channels if self.extra_channel_freq >= 1 else 0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.with_input_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.with_input_proj // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_264": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "not self.with_cond[0] or self.batchnorm_affine",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_266": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "not self.with_cond[0] or self.batchnorm_affine",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "Dropout2d_270": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_291": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([x, stem_batch_coords], 1)",
                            "Call"
                        ],
                        [
                            "self.film(x, gammas, betas)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, extra_channels], 1)",
                            "Call"
                        ],
                        [
                            "self.input_proj(x)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_296": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, cond_maps]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_298": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, extra_channels]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_350": {
                "tensors": {
                    "value": "[x_coords, y_coords]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_287": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, extra_channels]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_108": {
                "*size": {
                    "value": "[1, feature_dim[0], feature_dim[1], feature_dim[2]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "vr/models/hetero_net.py": {
        "torch": {
            "device_15": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "image_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "map_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "500",
                            "Method Argument"
                        ],
                        [
                            "500",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_27": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "text_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "map_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "500",
                            "Method Argument"
                        ],
                        [
                            "500",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_28": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "map_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "500",
                            "Method Argument"
                        ],
                        [
                            "500",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_35": {
                "variable": {
                    "value": "mult_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_mapped * text_mapped",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "map_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "500",
                            "Method Argument"
                        ],
                        [
                            "500",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_50": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "text_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "map_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "500",
                            "Method Argument"
                        ],
                        [
                            "500",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_51": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "map_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "500",
                            "Method Argument"
                        ],
                        [
                            "500",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_58": {
                "variable": {
                    "value": "mult_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_att_mapped * text_mapped",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_79": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_answers",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "att_reduced",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(att_min, att_mean, att_max)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_69": {
                "input": {
                    "value": "att1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_167": {
                "variable": {
                    "value": "input_text",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "vr/models/layers.py": {
        "torch": {
            "Conv2d_35": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "variable"
                        ],
                        [
                            "in_dim",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_layers * kernel_size",
                            "BinOp"
                        ],
                        [
                            "[3]",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_38": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "variable"
                        ],
                        [
                            "in_dim",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_layers * kernel_size",
                            "BinOp"
                        ],
                        [
                            "[3]",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "variable"
                        ],
                        [
                            "in_dim",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "variable"
                        ],
                        [
                            "in_dim",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_layers * kernel_size",
                            "BinOp"
                        ],
                        [
                            "[3]",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2 * dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_89": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_90": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.proj(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_196": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "BatchNorm2d_55": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "variable"
                        ],
                        [
                            "in_dim",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_56": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "variable"
                        ],
                        [
                            "in_dim",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_61": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "variable"
                        ],
                        [
                            "in_dim",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_65": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_71": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res + out",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_73": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(res + out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, y], 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.proj(out))",
                            "Call"
                        ],
                        [
                            "self.vis_block(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_195": {
                "in_features": {
                    "value": "prev_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_dim",
                            "variable"
                        ],
                        [
                            "curr_out",
                            "variable"
                        ],
                        [
                            "module_C * module_H * module_W",
                            "BinOp"
                        ],
                        [
                            "proj_dim * module_H * module_W",
                            "BinOp"
                        ],
                        [
                            "cur_dim * math.ceil(module_H / pool_size) * math.ceil(module_W / pool_size)",
                            "BinOp"
                        ],
                        [
                            "next_dim",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_answers",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_136": {
                "in_channels": {
                    "value": "prev_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_dim",
                            "variable"
                        ],
                        [
                            "curr_out",
                            "variable"
                        ],
                        [
                            "module_C * module_H * module_W",
                            "BinOp"
                        ],
                        [
                            "proj_dim * module_H * module_W",
                            "BinOp"
                        ],
                        [
                            "cur_dim * math.ceil(module_H / pool_size) * math.ceil(module_W / pool_size)",
                            "BinOp"
                        ],
                        [
                            "next_dim",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "curr_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module_dim if i == num_layers - 1 else stem_dim",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "cur_kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "cur_stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "cur_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cur_kernel_size // 2",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "not with_batchnorm",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_141": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_155": {
                "in_channels": {
                    "value": "module_C",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "proj_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "not with_batchnorm",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_158": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_188": {
                "in_features": {
                    "value": "prev_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_dim",
                            "variable"
                        ],
                        [
                            "curr_out",
                            "variable"
                        ],
                        [
                            "module_C * module_H * module_W",
                            "BinOp"
                        ],
                        [
                            "proj_dim * module_H * module_W",
                            "BinOp"
                        ],
                        [
                            "cur_dim * math.ceil(module_H / pool_size) * math.ceil(module_W / pool_size)",
                            "BinOp"
                        ],
                        [
                            "next_dim",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "next_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "not with_batchnorm",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_191": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_68": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_140": {
                "num_features": {
                    "value": "curr_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module_dim if i == num_layers - 1 else stem_dim",
                            "IfExp"
                        ]
                    ]
                }
            },
            "MaxPool2d_143": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_157": {
                "num_features": {
                    "value": "proj_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MaxPool2d_176": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_177": {
                "kernel_size": {
                    "value": "module_H // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "module_W // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_190": {
                "num_features": {
                    "value": "next_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_193": {
                "p": {
                    "value": "next_dropout",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "vr/models/maced_net.py": {
        "torch": {
            "device_20": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "zeros_573": {
                "variable": {
                    "value": "x_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "modules",
                            "variable"
                        ]
                    ]
                },
                "out": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_574": {
                "variable": {
                    "value": "y_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "modules",
                            "variable"
                        ]
                    ]
                },
                "out": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_583": {
                "variable": {
                    "value": "x_coords",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_583": {
                "variable": {
                    "value": "x_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_584": {
                "variable": {
                    "value": "y_coords",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_584": {
                "variable": {
                    "value": "y_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_125": {
                "variable": {
                    "value": "self.init_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(module_dim).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_128": {
                "variable": {
                    "value": "self.init_question_transformer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.module_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.module_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_129": {
                "variable": {
                    "value": "self.init_question_non_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_133": {
                "variable": {
                    "value": "self.question_embedding_dropout_module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.question_embedding_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_191": {
                "variable": {
                    "value": "memory_storage",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1 + self.num_modules",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.module_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_347": {
                "variable": {
                    "value": "self.non_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_348": {
                "variable": {
                    "value": "self.dropout_module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRUCell_386": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "common_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "common_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_399": {
                "variable": {
                    "value": "self.control_memory_transfomer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * common_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "common_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_460": {
                "variable": {
                    "value": "self.pre_memory_transformer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "common_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "common_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_461": {
                "variable": {
                    "value": "self.image_element_transformer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "common_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "common_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_464": {
                "variable": {
                    "value": "self.intermediate_transformer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * common_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "common_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_468": {
                "variable": {
                    "value": "self.read_attention_transformer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "common_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_471": {
                "variable": {
                    "value": "self.read_dropout_module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.read_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_514": {
                "variable": {
                    "value": "rscores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rscores - rscores.max(1, keepdim=True)[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_534": {
                "variable": {
                    "value": "self.score_transformer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "common_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_564": {
                "variable": {
                    "value": "self.question_transformer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "common_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "common_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_146": {
                "variable": {
                    "value": "mod",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.module_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.module_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_161": {
                "variable": {
                    "value": "self.compute_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.module_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.module_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_162": {
                "variable": {
                    "value": "self.compute_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.module_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.module_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_184": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, stem_batch_coords]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_195": {
                "variable": {
                    "value": "dropout_mask_memory",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_211": {
                "variable": {
                    "value": "control_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 1 + self.num_modules, time_steps)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "q_rep.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_218": {
                "variable": {
                    "value": "controls",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 1 + self.num_modules, dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "q_rep.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_250": {
                "variable": {
                    "value": "controls",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[c.unsqueeze(1) for c in controls]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_251": {
                "variable": {
                    "value": "control_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[c.unsqueeze(1) for c in control_scores]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_318": {
                "variable": {
                    "value": "self.read_scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rs.unsqueeze(1) for rs in self.read_scores]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_333": {
                "variable": {
                    "value": "self.question_transformer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "module_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "module_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_340": {
                "variable": {
                    "value": "mod",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nin",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_356": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[final_memory, transformed_question]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_374": {
                "input": {
                    "value": "current_read",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_402": {
                "variable": {
                    "value": "self.current_control_transformer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "common_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "common_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_404": {
                "variable": {
                    "value": "self.control_transformer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "common_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_405": {
                "variable": {
                    "value": "self.acc_memory_transformer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "common_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "common_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_406": {
                "variable": {
                    "value": "self.pre_memory_transformer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "common_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "common_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_409": {
                "variable": {
                    "value": "self.gated_control_transformer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "common_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_410": {
                "variable": {
                    "value": "self.non_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_532": {
                "variable": {
                    "value": "self.control_question_transformer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * common_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "common_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_586": {
                "tensors": {
                    "value": "[x_coords, y_coords]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_125": {
                "*size": {
                    "value": "module_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_154": {
                "variable": {
                    "value": "mod",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.module_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.module_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_229": {
                "variable": {
                    "value": "connect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "controls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((batch_size, 1 + self.num_modules, dim), dtype=q_rep.dtype, device=device)",
                            "Call"
                        ],
                        [
                            "[init_control]",
                            "List"
                        ],
                        [
                            "torch.cat([c.unsqueeze(1) for c in controls], 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "pre_connect(controls).permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_256": {
                "variable": {
                    "value": "connect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "controls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((batch_size, 1 + self.num_modules, dim), dtype=q_rep.dtype, device=device)",
                            "Call"
                        ],
                        [
                            "[init_control]",
                            "List"
                        ],
                        [
                            "torch.cat([c.unsqueeze(1) for c in controls], 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "pre_connect(controls).permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_419": {
                "tensors": {
                    "value": "[current_read, prior_memory]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_429": {
                "variable": {
                    "value": "cscores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cscores - cscores.max(1, keepdim=True)[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_498": {
                "tensors": {
                    "value": "[intermediate, trans_image]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_552": {
                "input": {
                    "value": "scores - scores.max(1, keepdim=True)[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_238": {
                "input": {
                    "value": "q_context[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "bmm_280": {
                "input": {
                    "value": "connect[:, [fn_num + 1], :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "memory_storage",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(N, 1 + self.num_modules, self.module_dim).to(device)",
                            "Call"
                        ],
                        [
                            "memory_updated",
                            "variable"
                        ]
                    ]
                }
            },
            "squeeze_280": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_343": {
                "num_features": {
                    "value": "nin",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_544": {
                "tensors": {
                    "value": "[pre_control, question]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_231": {
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_258": {
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "triu_226": {
                "input": {
                    "value": "torch.ones(controls.size(1), controls.size(1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "triu_253": {
                "input": {
                    "value": "torch.ones(controls.size(1), controls.size(1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_226": {
                "*size": {
                    "value": "controls.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "controls.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_253": {
                "*size": {
                    "value": "controls.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "controls.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_265": {
                "*size": {
                    "value": "*std.size()",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "vr/models/module_net.py": {
        "torch": {
            "cat_240": {
                "variable": {
                    "value": "final_module_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "final_module_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(final_module_outputs, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(final_module_outputs, 0)",
                            "Call"
                        ],
                        [
                            "self._forward_modules_json(feats, program)",
                            "Call"
                        ],
                        [
                            "self._forward_modules_ints(feats, program)",
                            "Call"
                        ],
                        [
                            "self._forward_modules_probs(feats, program)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_314": {
                "variable": {
                    "value": "final_module_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "final_module_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(final_module_outputs, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(final_module_outputs, 0)",
                            "Call"
                        ],
                        [
                            "self._forward_modules_json(feats, program)",
                            "Call"
                        ],
                        [
                            "self._forward_modules_ints(feats, program)",
                            "Call"
                        ],
                        [
                            "self._forward_modules_probs(feats, program)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_186": {
                "variable": {
                    "value": "self.gammas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, len(self.fn_str_2_filmId), self.module_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_188": {
                "variable": {
                    "value": "self.betas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, len(self.fn_str_2_filmId), self.module_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_69": {
                "*size": {
                    "value": "[1, feature_dim[0], feature_dim[1], feature_dim[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Tensor_188": {},
            "is_tensor_327": {
                "obj": {
                    "value": "program",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "vr/models/relation_net.py": {
        "torch": {
            "device_15": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "linspace_63": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "module_W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tmp.size(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "linspace_64": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "module_H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tmp.size(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_67": {
                "variable": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xv, yv]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_75": {
                "variable": {
                    "value": "self.relation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*relation_modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_99": {
                "variable": {
                    "value": "features_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[features_flat, batch_coords]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_102": {
                "variable": {
                    "value": "x_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features_coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([features_flat, batch_coords], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_104": {
                "variable": {
                    "value": "x_j",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features_coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([features_flat, batch_coords], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_106": {
                "variable": {
                    "value": "feature_pairs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_i, x_j]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "feature_pairs_ques",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[feature_pairs, ques]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_118": {
                "variable": {
                    "value": "relations",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relation(feature_pairs_ques)",
                            "Call"
                        ],
                        [
                            "torch.sum(relations, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_72": {
                "in_features": {
                    "value": "(stem_dim + 2) * 2 + rnn_hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "module_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_57": {
                "*size": {
                    "value": "[1, feature_dim[0], feature_dim[1], feature_dim[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_74": {
                "in_features": {
                    "value": "module_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "module_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "vr/models/seq2seq.py": {
        "torch": {
            "Embedding_33": {
                "variable": {
                    "value": "self.encoder_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "encoder_vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "wordvec_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_34": {
                "variable": {
                    "value": "self.encoder_rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "wordvec_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "rnn_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_36": {
                "variable": {
                    "value": "self.decoder_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "decoder_vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "wordvec_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_37": {
                "variable": {
                    "value": "self.decoder_rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "wordvec_dim + hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dropout": {
                    "value": "rnn_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_39": {
                "variable": {
                    "value": "self.decoder_rnn_new",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "rnn_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "variable": {
                    "value": "self.decoder_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "decoder_vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_102": {
                "variable": {
                    "value": "rnn_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[encoded_repeat, y_embed]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_137": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_masked",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_logprobs[out_mask].view(-1, V_out)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y_masked",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[y_mask]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "softmax_184": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs.view(N, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "backward_221": {
                "tensors": {
                    "value": "self.multinomial_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "grad_tensors": {
                    "value": "grad_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "retain_variables": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_86": {
                "*size": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder_rnn.num_layers",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size(0) if x is not None else None",
                            "IfExp"
                        ],
                        [
                            "y.size(0) if N is None and y is not None else N",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder_rnn.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_87": {
                "*size": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder_rnn.num_layers",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size(0) if x is not None else None",
                            "IfExp"
                        ],
                        [
                            "y.size(0) if N is None and y is not None else N",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder_rnn.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_146": {
                "*size": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder_rnn.num_layers",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size(0) if x is not None else None",
                            "IfExp"
                        ],
                        [
                            "y.size(0) if N is None and y is not None else N",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder_rnn.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_147": {
                "*size": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder_rnn.num_layers",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size(0) if x is not None else None",
                            "IfExp"
                        ],
                        [
                            "y.size(0) if N is None and y is not None else N",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder_rnn.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_104": {
                "*size": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder_rnn.num_layers",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size(0) if x is not None else None",
                            "IfExp"
                        ],
                        [
                            "y.size(0) if N is None and y is not None else N",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder_rnn.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_106": {
                "*size": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder_rnn.num_layers",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size(0) if x is not None else None",
                            "IfExp"
                        ],
                        [
                            "y.size(0) if N is None and y is not None else N",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder_rnn.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "vr/models/seq2seq_att.py": {
        "torch": {
            "device_21": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "sum_249": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x != null",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_250": {
                "variable": {
                    "value": "(sorted_lengths, sorted_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(x != null, dim=1).long()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_29": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_48": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn(torch.cat([hidden, encoder_outputs], 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_51": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v.repeat(encoder_outputs.data.shape[0], 1).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.tanh(self.attn(torch.cat([hidden, encoder_outputs], 2)))",
                            "Call"
                        ],
                        [
                            "energy.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(v, energy)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_68": {
                "variable": {
                    "value": "self.encoder_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "encoder_vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "wordvec_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_69": {
                "variable": {
                    "value": "self.encoder_rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "wordvec_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "rnn_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_71": {
                "variable": {
                    "value": "self.decoder_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "decoder_vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "wordvec_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_72": {
                "variable": {
                    "value": "self.decoder_rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "wordvec_dim + hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dropout": {
                    "value": "rnn_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_74": {
                "variable": {
                    "value": "self.decoder_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "decoder_vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pack_padded_sequence_102": {
                "variable": {
                    "value": "packed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder_embed(x)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "x_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_104": {
                "variable": {
                    "value": "(out, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "out_packed",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_118": {
                "variable": {
                    "value": "rnn_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(word_embedded, context)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_149": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_masked",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_logprobs[out_mask].view(-1, V_out)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y_masked",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[y_mask]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_164": {
                "variable": {
                    "value": "decoder_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "decoder_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(decoder_outputs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_45": {
                "input": {
                    "value": "attn_energies",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.score(H, encoder_outputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_202": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs.view(N, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "backward_239": {
                "tensors": {
                    "value": "self.multinomial_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "grad_tensors": {
                    "value": "grad_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "retain_variables": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_29": {
                "*size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_48": {
                "tensors": {
                    "value": "[hidden, encoder_outputs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "vr/models/shnmn.py": {
        "torch": {
            "device_18": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "zeros_22": {
                "variable": {
                    "value": "tau_0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_modules",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_modules + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_23": {
                "variable": {
                    "value": "tau_1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_modules",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_modules + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_30": {
                "variable": {
                    "value": "tau_0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_31": {
                "variable": {
                    "value": "tau_1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_38": {
                "variable": {
                    "value": "tau_0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_39": {
                "variable": {
                    "value": "tau_1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_47": {
                "variable": {
                    "value": "tau_0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_48": {
                "variable": {
                    "value": "tau_1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_80": {
                "variable": {
                    "value": "sentinel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_81": {
                "variable": {
                    "value": "h_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sentinel, img]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_84": {
                "variable": {
                    "value": "alpha_curr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_85": {
                "variable": {
                    "value": "tau_0_curr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tau_0[i, :i + 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_86": {
                "variable": {
                    "value": "tau_1_curr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tau_1[i, :i + 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_88": {
                "variable": {
                    "value": "question_rep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_curr.view(1, -1, 1) * question",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_90": {
                "variable": {
                    "value": "lhs_rep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tau_0_curr.view(1, i + 2, 1, 1, 1) * h_prev",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_92": {
                "variable": {
                    "value": "rhs_rep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tau_1_curr.view(1, i + 2, 1, 1, 1) * h_prev",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "h_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_prev, h_i.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_105": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2 * dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_106": {
                "variable": {
                    "value": "self.conv_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_109": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv_1(torch.cat([lhs_rep, rhs_rep], 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_352": {
                "variable": {
                    "value": "self.tree_odds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([tree_odds])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_374": {
                "variable": {
                    "value": "p_tree",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.tree_odds[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_377": {
                "variable": {
                    "value": "output_probs_tree",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.tree_scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_378": {
                "variable": {
                    "value": "output_probs_chain",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.chain_scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_111": {
                "input": {
                    "value": "self.conv_2(out * question_rep)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_149": {
                "variable": {
                    "value": "cnn_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.conv2d(torch.cat([lhs_rep[[i]], rhs_rep[[i]]], 1), proj_weight_curr, bias=proj_bias_curr, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_153": {
                "variable": {
                    "value": "cnn1_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.conv2d(cnn_inp, cnn1_weight_curr, bias=cnn1_bias_curr, padding=self.kernel_size // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_154": {
                "variable": {
                    "value": "cnn2_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cnn1_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(F.conv2d(cnn_inp, cnn1_weight_curr, bias=cnn1_bias_curr, padding=self.kernel_size // 2))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "cnn2_weight_curr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cnn2_weight[i].view(self.dim, self.dim, self.kernel_size, self.kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "cnn2_bias_curr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cnn2_bias[i]",
                            "Subscript"
                        ]
                    ]
                },
                "padding": {
                    "value": "self.kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_158": {
                "tensors": {
                    "value": "cnn_out_total",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "conv2d_193": {
                "variable": {
                    "value": "cnn_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([lhs_rep[[i]], rhs_rep[[i]]], 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "proj_weight_curr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proj_weight[i].view(self.dim, 2 * self.dim, 1, 1)",
                            "Call"
                        ],
                        [
                            "proj_weight[i].view(self.dim, 2 * self.dim, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "proj_bias_curr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proj_bias[i]",
                            "Subscript"
                        ],
                        [
                            "proj_bias[i]",
                            "Subscript"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_199": {
                "tensors": {
                    "value": "cnn_out_total",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Parameter_259": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "INITS[alpha_init](torch.Tensor(num_modules, num_question_tokens))",
                            "Call"
                        ],
                        [
                            "INITS[alpha_init](torch.Tensor(num_modules, num_question_tokens), 1)",
                            "Call"
                        ],
                        [
                            "INITS[alpha_init](torch.Tensor(num_modules, num_question_tokens))",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_283": {
                "variable": {
                    "value": "self.tau_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "tau_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(num_modules, num_modules + 1)",
                            "Call"
                        ],
                        [
                            "torch.zeros(3, 4)",
                            "Call"
                        ],
                        [
                            "torch.zeros(3, 4)",
                            "Call"
                        ],
                        [
                            "torch.zeros(3, 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_284": {
                "variable": {
                    "value": "self.tau_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "tau_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(num_modules, num_modules + 1)",
                            "Call"
                        ],
                        [
                            "torch.zeros(3, 4)",
                            "Call"
                        ],
                        [
                            "torch.zeros(3, 4)",
                            "Call"
                        ],
                        [
                            "torch.zeros(3, 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_292": {
                "variable": {
                    "value": "question_embeddings_1",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab['question_idx_to_token'])",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_dim_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module_dim + module_dim * module_dim * module_kernel_size * module_kernel_size",
                            "BinOp"
                        ],
                        [
                            "module_dim + module_dim * module_dim * module_kernel_size * module_kernel_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Embedding_293": {
                "variable": {
                    "value": "question_embeddings_2",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab['question_idx_to_token'])",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_dim_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module_dim + 2 * module_dim * module_dim",
                            "BinOp"
                        ],
                        [
                            "module_dim + 2 * module_dim * module_dim",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Embedding_300": {
                "variable": {
                    "value": "self.question_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab['question_idx_to_token'])",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_dim_1 + embedding_dim_2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_301": {
                "variable": {
                    "value": "self.question_embeddings.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[question_embeddings_1.weight.data, question_embeddings_2.weight.data]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_382": {
                "input": {
                    "value": "probs_mixture",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p_tree * output_probs_tree + (1.0 - p_tree) * output_probs_chain",
                            "BinOp"
                        ],
                        [
                            "(1 - eps) * probs_mixture + eps",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Embedding_310": {
                "variable": {
                    "value": "question_embeddings_a",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab['question_idx_to_token'])",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_dim_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module_dim + module_dim * module_dim * module_kernel_size * module_kernel_size",
                            "BinOp"
                        ],
                        [
                            "module_dim + module_dim * module_dim * module_kernel_size * module_kernel_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Embedding_311": {
                "variable": {
                    "value": "question_embeddings_b",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab['question_idx_to_token'])",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_dim_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module_dim + module_dim * module_dim * module_kernel_size * module_kernel_size",
                            "BinOp"
                        ],
                        [
                            "module_dim + module_dim * module_dim * module_kernel_size * module_kernel_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Embedding_312": {
                "variable": {
                    "value": "question_embeddings_2",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab['question_idx_to_token'])",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_dim_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module_dim + 2 * module_dim * module_dim",
                            "BinOp"
                        ],
                        [
                            "module_dim + 2 * module_dim * module_dim",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Embedding_320": {
                "variable": {
                    "value": "self.question_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab['question_idx_to_token'])",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "2 * embedding_dim_1 + embedding_dim_2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_321": {
                "variable": {
                    "value": "self.question_embeddings.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[question_embeddings_a.weight.data, question_embeddings_b.weight.data, question_embeddings_2.weight.data]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_326": {
                "variable": {
                    "value": "self.question_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab['question_idx_to_token'])",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "module_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_109": {
                "tensors": {
                    "value": "[lhs_rep, rhs_rep]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_149": {
                "input": {
                    "value": "torch.cat([lhs_rep[[i]], rhs_rep[[i]]], 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "proj_weight_curr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proj_weight[i].view(self.dim, 2 * self.dim, 1, 1)",
                            "Call"
                        ],
                        [
                            "proj_weight[i].view(self.dim, 2 * self.dim, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "proj_bias_curr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proj_bias[i]",
                            "Subscript"
                        ],
                        [
                            "proj_bias[i]",
                            "Subscript"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_153": {
                "input": {
                    "value": "cnn_inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(F.conv2d(torch.cat([lhs_rep[[i]], rhs_rep[[i]]], 1), proj_weight_curr, bias=proj_bias_curr, padding=0))",
                            "Call"
                        ],
                        [
                            "F.conv2d(torch.cat([lhs_rep[[i]], rhs_rep[[i]]], 1), proj_weight_curr, bias=proj_bias_curr, padding=0)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "cnn1_weight_curr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cnn1_weight[i].view(self.dim, self.dim, self.kernel_size, self.kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "cnn1_bias_curr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cnn1_bias[i]",
                            "Subscript"
                        ]
                    ]
                },
                "padding": {
                    "value": "self.kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_156": {
                "input": {
                    "value": "cnn_inp + cnn2_out",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_193": {
                "tensors": {
                    "value": "[lhs_rep[[i]], rhs_rep[[i]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_196": {
                "input": {
                    "value": "F.conv2d(cnn_inp, cnn_weight_curr, bias=cnn_bias_curr, padding=self.kernel_size // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_338": {
                "*size": {
                    "value": "[1, feature_dim[0], feature_dim[1], feature_dim[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_149": {
                "tensors": {
                    "value": "[lhs_rep[[i]], rhs_rep[[i]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_196": {
                "input": {
                    "value": "cnn_inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(F.conv2d(torch.cat([lhs_rep[[i]], rhs_rep[[i]]], 1), proj_weight_curr, bias=proj_bias_curr, padding=0))",
                            "Call"
                        ],
                        [
                            "F.conv2d(torch.cat([lhs_rep[[i]], rhs_rep[[i]]], 1), proj_weight_curr, bias=proj_bias_curr, padding=0)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "cnn_weight_curr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cnn_weight[i].view(self.dim, self.dim, self.kernel_size, self.kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "cnn_bias_curr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cnn_bias[i]",
                            "Subscript"
                        ]
                    ]
                },
                "padding": {
                    "value": "self.kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "vr/models/simple_module_net.py": {
        "torch": {
            "cat_127": {
                "variable": {
                    "value": "h_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(h_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_62": {
                "variable": {
                    "value": "h_cur",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h_next",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Parameter_256": {
                "variable": {
                    "value": "self.gammas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, num_coeff, self.module_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_258": {
                "variable": {
                    "value": "self.betas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, num_coeff, self.module_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_169": {
                "*size": {
                    "value": "[1, feature_dim[0], feature_dim[1], feature_dim[2]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "vr/utils.py": {
        "torch": {
            "load_50": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    }
}