{
    "dataloader_2d.py": {
        "sklearn": {},
        "torch": {
            "from_numpy_92": {
                "variable": {
                    "value": "fa",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "fa",
                    "type": "Name",
                    "possible_values": [
                        [
                            "variables['FAnr']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(fa).type(torch.DoubleTensor)",
                            "Call"
                        ],
                        [
                            "np.fliplr(fa)",
                            "Call"
                        ],
                        [
                            "transform.rotate(fa, angle, order=0)",
                            "Call"
                        ],
                        [
                            "shift(fa, (dx, dy), order=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_93": {
                "variable": {
                    "value": "md",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "md",
                    "type": "Name",
                    "possible_values": [
                        [
                            "variables['MDnr']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(md).type(torch.DoubleTensor)",
                            "Call"
                        ],
                        [
                            "np.fliplr(md)",
                            "Call"
                        ],
                        [
                            "transform.rotate(md, angle, order=0)",
                            "Call"
                        ],
                        [
                            "shift(md, (dx, dy), order=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_96": {
                "variable": {
                    "value": "image_all",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "images",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_97": {
                "variable": {
                    "value": "segment_F",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "segment_F",
                    "type": "Name",
                    "possible_values": [
                        [
                            "variables['SegmentationF'].astype(float)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(segment_F)",
                            "Call"
                        ],
                        [
                            "np.fliplr(segment_F)",
                            "Call"
                        ],
                        [
                            "transform.rotate(segment_F, angle, order=0)",
                            "Call"
                        ],
                        [
                            "shift(segment_F, (dx, dy), order=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_98": {
                "variable": {
                    "value": "segment_T",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "segment_T",
                    "type": "Name",
                    "possible_values": [
                        [
                            "variables['SegmentationT'].astype(float)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(segment_T)",
                            "Call"
                        ],
                        [
                            "np.fliplr(segment_T)",
                            "Call"
                        ],
                        [
                            "transform.rotate(segment_T, angle, order=0)",
                            "Call"
                        ],
                        [
                            "shift(segment_T, (dx, dy), order=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_99": {
                "variable": {
                    "value": "segment_P",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "segment_P",
                    "type": "Name",
                    "possible_values": [
                        [
                            "variables['SegmentationP'].astype(float)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(segment_P)",
                            "Call"
                        ],
                        [
                            "np.fliplr(segment_P)",
                            "Call"
                        ],
                        [
                            "transform.rotate(segment_P, angle, order=0)",
                            "Call"
                        ],
                        [
                            "shift(segment_P, (dx, dy), order=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_71": {
                "variable": {
                    "value": "im",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "im",
                    "type": "Name",
                    "possible_values": [
                        [
                            "image[:, :, i]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(im).type(torch.DoubleTensor)",
                            "Call"
                        ],
                        [
                            "np.fliplr(im)",
                            "Call"
                        ],
                        [
                            "transform.rotate(im, angle, order=0)",
                            "Call"
                        ],
                        [
                            "shift(im, (dx, dy), order=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_102": {
                "input": {
                    "value": "image_all[:7, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_102": {
                "input": {
                    "value": "image_all[:7, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_103": {
                "input": {
                    "value": "image_all[7, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_103": {
                "input": {
                    "value": "image_all[7, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_104": {
                "input": {
                    "value": "image_all[8, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_104": {
                "input": {
                    "value": "image_all[8, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "dataloader_3d.py": {
        "sklearn": {},
        "torch": {
            "from_numpy_55": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "variables['NUFnr'].transpose(3, 2, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image).type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_56": {
                "variable": {
                    "value": "fa",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "fa",
                    "type": "Name",
                    "possible_values": [
                        [
                            "variables['FAnr'].transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(fa).type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_57": {
                "variable": {
                    "value": "md",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "md",
                    "type": "Name",
                    "possible_values": [
                        [
                            "variables['MDnr'].transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(md).type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_61": {
                "variable": {
                    "value": "image_all",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "images",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_62": {
                "variable": {
                    "value": "segment_F",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "segment_F",
                    "type": "Name",
                    "possible_values": [
                        [
                            "variables['SegmentationF'].transpose(2, 0, 1).astype(float)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(segment_F).type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_63": {
                "variable": {
                    "value": "segment_T",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "segment_T",
                    "type": "Name",
                    "possible_values": [
                        [
                            "variables['SegmentationT'].transpose(2, 0, 1).astype(float)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(segment_T).type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_64": {
                "variable": {
                    "value": "segment_P",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "segment_P",
                    "type": "Name",
                    "possible_values": [
                        [
                            "variables['SegmentationP'].transpose(2, 0, 1).astype(float)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(segment_P).type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_72": {
                "variable": {
                    "value": "segments_all",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "segments",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ensemble_model.py": {
        "sklearn": {
            "accuracy_score_76": {
                "y_true": {
                    "value": "flat_true",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.ravel(tr)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "flat_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.ravel(pred)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "softmax_49": {
                "variable": {
                    "value": "preds",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cat_55": {
                "variable": {
                    "value": "prediction",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(class_0_pred_seg, class_1_pred_seg, class_2_pred_seg, class_3_pred_seg)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "round_59": {
                "variable": {
                    "value": "smooth_pred",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "F.avg_pool1d(preds, filter_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_33": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_50": {
                "input": {
                    "value": "preds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softmax(scores)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool1d_59": {
                "input": {
                    "value": "preds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softmax(scores)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "filter_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "int_chan",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "in_chan",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "int_chan",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "int_chan",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_40": {
                "num_features": {
                    "value": "int_chan",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "evaluate_2d.py": {
        "sklearn": {},
        "torch": {}
    },
    "evaluate_3d.py": {
        "sklearn": {},
        "torch": {
            "transpose_45": {
                "variable": {
                    "value": "output_reshaped",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(input)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_43": {
                "input": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "evaluate_ensemble.py": {
        "sklearn": {},
        "torch": {
            "cat_56": {
                "variable": {
                    "value": "input_pp",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "input_pp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(input_pp, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "train_2d.py": {
        "sklearn": {},
        "torch": {
            "save_93": {
                "obj": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "save_159": {
                "obj": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "'unet_patches_4_epoch{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "train_3d.py": {
        "sklearn": {},
        "torch": {
            "transpose_58": {
                "variable": {
                    "value": "output_reshaped",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(input)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_56": {
                "input": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "train_ensemble.py": {
        "sklearn": {},
        "torch": {
            "cat_71": {
                "variable": {
                    "value": "input_pp",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "input_pp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(input_pp, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_105": {
                "obj": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "unet_3d.py": {
        "sklearn": {},
        "torch": {
            "Conv3d_33": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_34": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv3d_35": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_36": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv3d_37": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "down_sample",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "down_sample",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm3d_38": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "relu_41": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_42": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_44": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(y))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_51": {
                "variable": {
                    "value": "self.upconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "up_sample",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "up_sample",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm3d_52": {
                "variable": {
                    "value": "self.bnup",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv3d_53": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_54": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv3d_55": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_56": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "relu_59": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bnup(self.upconv(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_60": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_61": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_62": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv3d_73": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_74": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv3d_75": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_76": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv3d_81": {
                "variable": {
                    "value": "self.outconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_layers",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout2d_88": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.bn1(self.conv1(x)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout2d_89": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.bn2(self.conv2(x)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_88": {
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_89": {
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "unet_basic_dilated.py": {
        "sklearn": {},
        "torch": {
            "Conv2d_33": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_34": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_36": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "relu_39": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_40": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_41": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout2d(y)",
                            "Call"
                        ],
                        [
                            "F.dropout2d(y)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_50": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "variable": {
                    "value": "self.conv2_1d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_52": {
                "variable": {
                    "value": "self.bn2_1d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "variable": {
                    "value": "self.conv2_2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_54": {
                "variable": {
                    "value": "self.bn2_2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "variable": {
                    "value": "self.conv2_3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_56": {
                "variable": {
                    "value": "self.bn2_3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_58": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "variable": {
                    "value": "self.conv_down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_60": {
                "variable": {
                    "value": "self.bn_down_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "relu_64": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_65": {
                "variable": {
                    "value": "x1",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2_1d(self.conv2_1d(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_66": {
                "variable": {
                    "value": "x2",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2_2d(self.conv2_2d(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_67": {
                "variable": {
                    "value": "x3",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2_3d(self.conv2_3d(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, x2, x3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_69": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_81": {
                "variable": {
                    "value": "self.transconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_82": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_83": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_85": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cat_92": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_93": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_94": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_101": {
                "variable": {
                    "value": "self.transconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_102": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2 * in_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_103": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_104": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_105": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_113": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_114": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_131": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_132": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_133": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_134": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_139": {
                "variable": {
                    "value": "self.outconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_layers",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout2d_146": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.bn1(self.conv1(x)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout2d_147": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.bn2(self.conv2(x)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_174": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "int_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_175": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_176": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "int_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_177": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_183": {
                "variable": {
                    "value": "self.outconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_layers",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout2d_191": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.bn1(self.conv1(x)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout2d_192": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.bn2(self.conv2(x)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_215": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "int_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_216": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "int_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_217": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "int_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_218": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "int_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_223": {
                "variable": {
                    "value": "self.outconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_layers",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout2d_230": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.bn1(self.conv1(x)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout2d_231": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.bn2(self.conv2(x)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_253": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "int_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_254": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "int_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_255": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "int_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_256": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "int_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_257": {
                "variable": {
                    "value": "self.up_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout2d_272": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.bn1(self.conv1(x)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout2d_273": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.bn2(self.conv2(x)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_281": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "xs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout2d_71": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.bn_down_conv(self.conv_down(y)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_73": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn_down_conv(self.conv_down(y))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout2d_91": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout2d(y)",
                            "Call"
                        ],
                        [
                            "F.dropout2d(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout2d_111": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout2d(y)",
                            "Call"
                        ],
                        [
                            "F.dropout2d(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_146": {
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_147": {
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_191": {
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_192": {
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_230": {
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_231": {
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_272": {
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_273": {
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_71": {
                "input": {
                    "value": "self.bn_down_conv(self.conv_down(y))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_260": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_265": {
                "in_channels": {
                    "value": "int_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "sklearn": {},
        "torch": {
            "zeros_103": {
                "variable": {
                    "value": "seg_sum",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_63": {
                "variable": {
                    "value": "preds",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "clamp_69": {
                "variable": {
                    "value": "wts",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "wts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(true, dim=2) + epsilon",
                            "BinOp"
                        ],
                        [
                            "1 / torch.pow(wts, p)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(wts, 0, 0.1)",
                            "Call"
                        ],
                        [
                            "wts / torch.sum(wts, dim=1)[:, None]",
                            "BinOp"
                        ],
                        [
                            "torch.sum(true, dim=2) + epsilon",
                            "BinOp"
                        ],
                        [
                            "1 / torch.pow(wts, p)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(wts, 0, 0.1)",
                            "Call"
                        ],
                        [
                            "wts / torch.sum(wts, dim=1)[:, None]",
                            "BinOp"
                        ],
                        [
                            "torch.sum(true, dim=2) + epsilon",
                            "BinOp"
                        ],
                        [
                            "wts / torch.sum(wts, dim=1)[:, None]",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.zeros(4).cuda()) + epsilon",
                            "BinOp"
                        ],
                        [
                            "wts / torch.sum(wts)",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_72": {
                "variable": {
                    "value": "prod",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "true * preds",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_73": {
                "variable": {
                    "value": "sum_tnp",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "true + preds",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_74": {
                "variable": {
                    "value": "num",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "wts * prod",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_80": {
                "variable": {
                    "value": "preds",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "clamp_86": {
                "variable": {
                    "value": "wts",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "wts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(true, dim=2) + epsilon",
                            "BinOp"
                        ],
                        [
                            "1 / torch.pow(wts, p)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(wts, 0, 0.1)",
                            "Call"
                        ],
                        [
                            "wts / torch.sum(wts, dim=1)[:, None]",
                            "BinOp"
                        ],
                        [
                            "torch.sum(true, dim=2) + epsilon",
                            "BinOp"
                        ],
                        [
                            "1 / torch.pow(wts, p)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(wts, 0, 0.1)",
                            "Call"
                        ],
                        [
                            "wts / torch.sum(wts, dim=1)[:, None]",
                            "BinOp"
                        ],
                        [
                            "torch.sum(true, dim=2) + epsilon",
                            "BinOp"
                        ],
                        [
                            "wts / torch.sum(wts, dim=1)[:, None]",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.zeros(4).cuda()) + epsilon",
                            "BinOp"
                        ],
                        [
                            "wts / torch.sum(wts)",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_90": {
                "variable": {
                    "value": "prod",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "true * preds",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_91": {
                "variable": {
                    "value": "sum_tnp",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "true + preds",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_92": {
                "variable": {
                    "value": "num",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "wts * prod",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_100": {
                "variable": {
                    "value": "seg_all",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(seg_1.unsqueeze(1), seg_2.unsqueeze(1), seg_3.unsqueeze(1), seg_none.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_112": {
                "variable": {
                    "value": "preds",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "sum_121": {
                "variable": {
                    "value": "prod",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "true * preds",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_122": {
                "variable": {
                    "value": "sum_tnp",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "true + preds",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_123": {
                "variable": {
                    "value": "num",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "wts * prod",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_129": {
                "variable": {
                    "value": "preds",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "mean_155": {
                "variable": {
                    "value": "dice_score_class_0",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * numerator(true, class_0_pred_seg, 0) / denominator(true, class_0_pred_seg, 0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_156": {
                "variable": {
                    "value": "dice_score_class_1",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * numerator(true, class_1_pred_seg, 1) / denominator(true, class_1_pred_seg, 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_157": {
                "variable": {
                    "value": "dice_score_class_2",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * numerator(true, class_2_pred_seg, 2) / denominator(true, class_2_pred_seg, 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_softmax_168": {
                "variable": {
                    "value": "log_prob",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "transpose_170": {
                "variable": {
                    "value": "prod_t",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "prod",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(true * preds, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(true * preds, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(true * preds, dim=2)",
                            "Call"
                        ],
                        [
                            "(log_prob * true).view(N, C, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_349": {
                "variable": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "max_350": {
                "variable": {
                    "value": "(pred_prob, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softmax(scores)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_351": {
                "variable": {
                    "value": "pred_prob_c",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_prob",
                    "type": "Name",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "0.999999",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_46": {
                "dataset": {
                    "value": "transformed_dataset[x]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_77": {
                "input": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1 - 2 * (num / denom)",
                            "BinOp"
                        ],
                        [
                            "1 - 2 * (num / denom)",
                            "BinOp"
                        ],
                        [
                            "1 - 2 * (num / denom)",
                            "BinOp"
                        ],
                        [
                            "-torch.mean(prod_t * wts)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "mean_95": {
                "input": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1 - 2 * (num / denom)",
                            "BinOp"
                        ],
                        [
                            "1 - 2 * (num / denom)",
                            "BinOp"
                        ],
                        [
                            "1 - 2 * (num / denom)",
                            "BinOp"
                        ],
                        [
                            "-torch.mean(prod_t * wts)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "sum_106": {
                "input": {
                    "value": "segF",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "sum_107": {
                "input": {
                    "value": "segP",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "sum_108": {
                "input": {
                    "value": "segT",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "mean_126": {
                "input": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1 - 2 * (num / denom)",
                            "BinOp"
                        ],
                        [
                            "1 - 2 * (num / denom)",
                            "BinOp"
                        ],
                        [
                            "1 - 2 * (num / denom)",
                            "BinOp"
                        ],
                        [
                            "-torch.mean(prod_t * wts)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "cat_236": {
                "variable": {
                    "value": "input_pp",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "input_pp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(input_pp, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(input_pp, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_239": {
                "variable": {
                    "value": "preds",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(preds[0][:, None], preds[1][:, None], preds[2][:, None])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_281": {
                "variable": {
                    "value": "input_pp",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "input_pp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(input_pp, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(input_pp, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_283": {
                "variable": {
                    "value": "preds",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "output_pp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(input_pp)",
                            "Call"
                        ],
                        [
                            "model(input_pp)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_328": {
                "variable": {
                    "value": "output_reshaped",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "j(input)",
                            "Call"
                        ],
                        [
                            "j(input)",
                            "Call"
                        ],
                        [
                            "model(input)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_330": {
                "variable": {
                    "value": "preds",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(preds[0][:, None], preds[1][:, None], preds[2][:, None])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_67": {
                "input": {
                    "value": "true",
                    "type": "Name",
                    "possible_values": [
                        [
                            "true.view(N, C, -1)",
                            "Call"
                        ],
                        [
                            "true.view(N, C, -1)",
                            "Call"
                        ],
                        [
                            "true.view(N, C, -1)",
                            "Call"
                        ],
                        [
                            "true.view(N, C, -1)",
                            "Call"
                        ],
                        [
                            "true.data.type(torch.cuda.FloatTensor)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_68": {
                "input": {
                    "value": "wts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(true, dim=2) + epsilon",
                            "BinOp"
                        ],
                        [
                            "1 / torch.pow(wts, p)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(wts, 0, 0.1)",
                            "Call"
                        ],
                        [
                            "wts / torch.sum(wts, dim=1)[:, None]",
                            "BinOp"
                        ],
                        [
                            "torch.sum(true, dim=2) + epsilon",
                            "BinOp"
                        ],
                        [
                            "1 / torch.pow(wts, p)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(wts, 0, 0.1)",
                            "Call"
                        ],
                        [
                            "wts / torch.sum(wts, dim=1)[:, None]",
                            "BinOp"
                        ],
                        [
                            "torch.sum(true, dim=2) + epsilon",
                            "BinOp"
                        ],
                        [
                            "wts / torch.sum(wts, dim=1)[:, None]",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.zeros(4).cuda()) + epsilon",
                            "BinOp"
                        ],
                        [
                            "wts / torch.sum(wts)",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_75": {
                "input": {
                    "value": "wts * sum_tnp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_84": {
                "input": {
                    "value": "true",
                    "type": "Name",
                    "possible_values": [
                        [
                            "true.view(N, C, -1)",
                            "Call"
                        ],
                        [
                            "true.view(N, C, -1)",
                            "Call"
                        ],
                        [
                            "true.view(N, C, -1)",
                            "Call"
                        ],
                        [
                            "true.view(N, C, -1)",
                            "Call"
                        ],
                        [
                            "true.data.type(torch.cuda.FloatTensor)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_85": {
                "input": {
                    "value": "wts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(true, dim=2) + epsilon",
                            "BinOp"
                        ],
                        [
                            "1 / torch.pow(wts, p)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(wts, 0, 0.1)",
                            "Call"
                        ],
                        [
                            "wts / torch.sum(wts, dim=1)[:, None]",
                            "BinOp"
                        ],
                        [
                            "torch.sum(true, dim=2) + epsilon",
                            "BinOp"
                        ],
                        [
                            "1 / torch.pow(wts, p)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(wts, 0, 0.1)",
                            "Call"
                        ],
                        [
                            "wts / torch.sum(wts, dim=1)[:, None]",
                            "BinOp"
                        ],
                        [
                            "torch.sum(true, dim=2) + epsilon",
                            "BinOp"
                        ],
                        [
                            "wts / torch.sum(wts, dim=1)[:, None]",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.zeros(4).cuda()) + epsilon",
                            "BinOp"
                        ],
                        [
                            "wts / torch.sum(wts)",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_93": {
                "input": {
                    "value": "wts * sum_tnp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_116": {
                "input": {
                    "value": "true",
                    "type": "Name",
                    "possible_values": [
                        [
                            "true.view(N, C, -1)",
                            "Call"
                        ],
                        [
                            "true.view(N, C, -1)",
                            "Call"
                        ],
                        [
                            "true.view(N, C, -1)",
                            "Call"
                        ],
                        [
                            "true.view(N, C, -1)",
                            "Call"
                        ],
                        [
                            "true.data.type(torch.cuda.FloatTensor)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_117": {
                "input": {
                    "value": "mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1 / torch.pow(mean, p)",
                            "BinOp"
                        ],
                        [
                            "1 / torch.pow(mean, p)",
                            "BinOp"
                        ],
                        [
                            "mean_s_sum",
                            "MethodArgument"
                        ],
                        [
                            "mean_s_sum",
                            "MethodArgument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_124": {
                "input": {
                    "value": "wts * sum_tnp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_130": {
                "input": {
                    "value": "preds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softmax(scores)",
                            "Call"
                        ],
                        [
                            "preds.view(N, C, -1)",
                            "Call"
                        ],
                        [
                            "F.softmax(scores)",
                            "Call"
                        ],
                        [
                            "preds.view(N, C, -1)",
                            "Call"
                        ],
                        [
                            "F.softmax(scores)",
                            "Call"
                        ],
                        [
                            "preds.view(N, C, -1)",
                            "Call"
                        ],
                        [
                            "F.softmax(scores)",
                            "Call"
                        ],
                        [
                            "predict(output_pp, smooth=smooth, filter_size=filter_size)",
                            "Call"
                        ],
                        [
                            "torch.cat((preds[0][:, None], preds[1][:, None], preds[2][:, None]), dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(output_pp)",
                            "Call"
                        ],
                        [
                            "predict(output_reshaped)",
                            "Call"
                        ],
                        [
                            "torch.cat((preds[0][:, None], preds[1][:, None], preds[2][:, None]), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_164": {
                "input": {
                    "value": "mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1 / torch.pow(mean, p)",
                            "BinOp"
                        ],
                        [
                            "1 / torch.pow(mean, p)",
                            "BinOp"
                        ],
                        [
                            "mean_s_sum",
                            "MethodArgument"
                        ],
                        [
                            "mean_s_sum",
                            "MethodArgument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_167": {
                "input": {
                    "value": "wts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(true, dim=2) + epsilon",
                            "BinOp"
                        ],
                        [
                            "1 / torch.pow(wts, p)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(wts, 0, 0.1)",
                            "Call"
                        ],
                        [
                            "wts / torch.sum(wts, dim=1)[:, None]",
                            "BinOp"
                        ],
                        [
                            "torch.sum(true, dim=2) + epsilon",
                            "BinOp"
                        ],
                        [
                            "1 / torch.pow(wts, p)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(wts, 0, 0.1)",
                            "Call"
                        ],
                        [
                            "wts / torch.sum(wts, dim=1)[:, None]",
                            "BinOp"
                        ],
                        [
                            "torch.sum(true, dim=2) + epsilon",
                            "BinOp"
                        ],
                        [
                            "wts / torch.sum(wts, dim=1)[:, None]",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.zeros(4).cuda()) + epsilon",
                            "BinOp"
                        ],
                        [
                            "wts / torch.sum(wts)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_171": {
                "input": {
                    "value": "prod_t * wts",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_352": {
                "input": {
                    "value": "1 - pred_prob_c",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_71": {
                "input": {
                    "value": "wts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(true, dim=2) + epsilon",
                            "BinOp"
                        ],
                        [
                            "1 / torch.pow(wts, p)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(wts, 0, 0.1)",
                            "Call"
                        ],
                        [
                            "wts / torch.sum(wts, dim=1)[:, None]",
                            "BinOp"
                        ],
                        [
                            "torch.sum(true, dim=2) + epsilon",
                            "BinOp"
                        ],
                        [
                            "1 / torch.pow(wts, p)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(wts, 0, 0.1)",
                            "Call"
                        ],
                        [
                            "wts / torch.sum(wts, dim=1)[:, None]",
                            "BinOp"
                        ],
                        [
                            "torch.sum(true, dim=2) + epsilon",
                            "BinOp"
                        ],
                        [
                            "wts / torch.sum(wts, dim=1)[:, None]",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.zeros(4).cuda()) + epsilon",
                            "BinOp"
                        ],
                        [
                            "wts / torch.sum(wts)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_89": {
                "input": {
                    "value": "wts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(true, dim=2) + epsilon",
                            "BinOp"
                        ],
                        [
                            "1 / torch.pow(wts, p)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(wts, 0, 0.1)",
                            "Call"
                        ],
                        [
                            "wts / torch.sum(wts, dim=1)[:, None]",
                            "BinOp"
                        ],
                        [
                            "torch.sum(true, dim=2) + epsilon",
                            "BinOp"
                        ],
                        [
                            "1 / torch.pow(wts, p)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(wts, 0, 0.1)",
                            "Call"
                        ],
                        [
                            "wts / torch.sum(wts, dim=1)[:, None]",
                            "BinOp"
                        ],
                        [
                            "torch.sum(true, dim=2) + epsilon",
                            "BinOp"
                        ],
                        [
                            "wts / torch.sum(wts, dim=1)[:, None]",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.zeros(4).cuda()) + epsilon",
                            "BinOp"
                        ],
                        [
                            "wts / torch.sum(wts)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_120": {
                "input": {
                    "value": "wts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(true, dim=2) + epsilon",
                            "BinOp"
                        ],
                        [
                            "1 / torch.pow(wts, p)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(wts, 0, 0.1)",
                            "Call"
                        ],
                        [
                            "wts / torch.sum(wts, dim=1)[:, None]",
                            "BinOp"
                        ],
                        [
                            "torch.sum(true, dim=2) + epsilon",
                            "BinOp"
                        ],
                        [
                            "1 / torch.pow(wts, p)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(wts, 0, 0.1)",
                            "Call"
                        ],
                        [
                            "wts / torch.sum(wts, dim=1)[:, None]",
                            "BinOp"
                        ],
                        [
                            "torch.sum(true, dim=2) + epsilon",
                            "BinOp"
                        ],
                        [
                            "wts / torch.sum(wts, dim=1)[:, None]",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.zeros(4).cuda()) + epsilon",
                            "BinOp"
                        ],
                        [
                            "wts / torch.sum(wts)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_135": {
                "input": {
                    "value": "class_0_pred_seg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(pred_class == 0).type(torch.cuda.FloatTensor)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(class_0_pred_seg, filter_size, 1, int((filter_size - 1) / 2)) > 0.5",
                            "Compare"
                        ],
                        [
                            "class_0_pred_seg.view(N, -1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "filter_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "int((filter_size - 1) / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_136": {
                "input": {
                    "value": "class_1_pred_seg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(pred_class == 1).type(torch.cuda.FloatTensor)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(class_1_pred_seg, filter_size, 1, int((filter_size - 1) / 2)) > 0.5",
                            "Compare"
                        ],
                        [
                            "class_1_pred_seg.view(N, -1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "filter_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "int((filter_size - 1) / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_137": {
                "input": {
                    "value": "class_2_pred_seg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(pred_class == 2).type(torch.cuda.FloatTensor)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(class_2_pred_seg, filter_size, 1, int((filter_size - 1) / 2)) > 0.5",
                            "Compare"
                        ],
                        [
                            "class_2_pred_seg.view(N, -1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "filter_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "int((filter_size - 1) / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_151": {
                "input": {
                    "value": "truth[:, idx, :] * pred",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_153": {
                "input": {
                    "value": "truth[:, idx, :] + pred",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_163": {
                "*size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_211": {
                "*size": {
                    "value": "true.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "vnet.py": {
        "sklearn": {},
        "torch": {
            "Conv3d_34": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_35": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cat_40": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, ones]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_46": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_51": {
                "variable": {
                    "value": "self.down_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "down_sample",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(2",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "down_sample",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm3d_52": {
                "variable": {
                    "value": "self.down_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "relu_56": {
                "variable": {
                    "value": "a",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.down_bn(self.down_conv(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_63": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.add(x, a)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_70": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose3d_75": {
                "variable": {
                    "value": "self.up_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "up_sample",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(2",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "up_sample",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm3d_76": {
                "variable": {
                    "value": "self.up_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_82": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.up_bn(self.up_conv(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout3d_83": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.dropout3d(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_84": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_88": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.add(x, a)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv3d_96": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_97": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv3d_98": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_101": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_41": {
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout3d_58": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.relu(self.down_bn(self.down_conv(x)))",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ]
                    ]
                }
            },
            "dropout3d_81": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([x, ones], dim=2)",
                            "Call"
                        ],
                        [
                            "F.dropout3d(a)",
                            "Call"
                        ],
                        [
                            "a",
                            "Name"
                        ],
                        [
                            "i(x)",
                            "Call"
                        ],
                        [
                            "F.relu(torch.add(x, a))",
                            "Call"
                        ],
                        [
                            "F.dropout3d(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.up_bn(self.up_conv(x)))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, y], dim=1)",
                            "Call"
                        ],
                        [
                            "i(x)",
                            "Call"
                        ],
                        [
                            "F.relu(torch.add(x, a))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.up4(x_d4, x_d3)",
                            "Call"
                        ],
                        [
                            "self.up3(x, x_d2)",
                            "Call"
                        ],
                        [
                            "self.up2(x, x_d1)",
                            "Call"
                        ],
                        [
                            "self.up1(x, x_in)",
                            "Call"
                        ],
                        [
                            "self.output(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_63": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([x, ones], dim=2)",
                            "Call"
                        ],
                        [
                            "F.dropout3d(a)",
                            "Call"
                        ],
                        [
                            "a",
                            "Name"
                        ],
                        [
                            "i(x)",
                            "Call"
                        ],
                        [
                            "F.relu(torch.add(x, a))",
                            "Call"
                        ],
                        [
                            "F.dropout3d(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.up_bn(self.up_conv(x)))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, y], dim=1)",
                            "Call"
                        ],
                        [
                            "i(x)",
                            "Call"
                        ],
                        [
                            "F.relu(torch.add(x, a))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.up4(x_d4, x_d3)",
                            "Call"
                        ],
                        [
                            "self.up3(x, x_d2)",
                            "Call"
                        ],
                        [
                            "self.up2(x, x_d1)",
                            "Call"
                        ],
                        [
                            "self.up1(x, x_in)",
                            "Call"
                        ],
                        [
                            "self.output(x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.relu(self.down_bn(self.down_conv(x)))",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ]
                    ]
                }
            },
            "add_88": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([x, ones], dim=2)",
                            "Call"
                        ],
                        [
                            "F.dropout3d(a)",
                            "Call"
                        ],
                        [
                            "a",
                            "Name"
                        ],
                        [
                            "i(x)",
                            "Call"
                        ],
                        [
                            "F.relu(torch.add(x, a))",
                            "Call"
                        ],
                        [
                            "F.dropout3d(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.up_bn(self.up_conv(x)))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, y], dim=1)",
                            "Call"
                        ],
                        [
                            "i(x)",
                            "Call"
                        ],
                        [
                            "F.relu(torch.add(x, a))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.up4(x_d4, x_d3)",
                            "Call"
                        ],
                        [
                            "self.up3(x, x_d2)",
                            "Call"
                        ],
                        [
                            "self.up2(x, x_d1)",
                            "Call"
                        ],
                        [
                            "self.up1(x, x_in)",
                            "Call"
                        ],
                        [
                            "self.output(x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.relu(self.down_bn(self.down_conv(x)))",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ]
                    ]
                }
            },
            "Conv3d_48": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_49": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ReLU_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_72": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_73": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ReLU_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_39": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "knee_dataset_patches.py": {
        "torch": {}
    }
}