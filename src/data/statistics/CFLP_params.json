{
    "cf_utils.py": {
        "sklearn": {
            "normalize_186": {
                "variable": {
                    "value": "embs",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "node_embs",
                    "type": "variable",
                    "possible_values": []
                },
                "norm": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "cat_166": {
                "variable": {
                    "value": "X_f",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z[nodepairs_f.T[0]], z[nodepairs_f.T[1]])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_167": {
                "variable": {
                    "value": "X_cf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z[nodepairs_cf.T[0]], z[nodepairs_cf.T[1]])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_171": {
                "variable": {
                    "value": "loss_disc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.mse_loss(mean_f, mean_cf) + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mse_loss_171": {
                "input": {
                    "value": "mean_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_f.mean(0)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "mean_cf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_cf.mean(0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pysbm/UnitTests/test_ground_new.py": {
        "sklearn": {}
    },
    "pysbm/UnitTests/test_test_ground.py": {
        "sklearn": {}
    },
    "pysbm/sbm/inference.py": {
        "sklearn": {
            "KMeans_1769": {
                "variable": {
                    "value": "kmeans",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "number_of_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(list(list(self.partition.get_representation().values()))) + 1",
                            "BinOp"
                        ]
                    ]
                },
                "random_state": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            }
        }
    },
    "pysbm/test_ground_new.py": {
        "sklearn": {}
    },
    "utils.py": {
        "sklearn": {
            "roc_auc_score_23": {
                "variable": {
                    "value": "roc_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.hstack([np.ones(preds.size(0)), np.zeros(preds_neg.size(0))])",
                            "Call"
                        ],
                        [
                            "ds._g.ndata['label']",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.hstack([preds, preds_neg])",
                            "Call"
                        ]
                    ]
                }
            },
            "average_precision_score_24": {
                "variable": {
                    "value": "ap_score",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.hstack([np.ones(preds.size(0)), np.zeros(preds_neg.size(0))])",
                            "Call"
                        ],
                        [
                            "ds._g.ndata['label']",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.hstack([preds, preds_neg])",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_44": {
                "variable": {
                    "value": "roc_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.hstack([np.ones(preds.size(0)), np.zeros(preds_neg.size(0))])",
                            "Call"
                        ],
                        [
                            "ds._g.ndata['label']",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.hstack([preds, preds_neg])",
                            "Call"
                        ]
                    ]
                }
            },
            "average_precision_score_45": {
                "variable": {
                    "value": "ap_score",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.hstack([np.ones(preds.size(0)), np.zeros(preds_neg.size(0))])",
                            "Call"
                        ],
                        [
                            "ds._g.ndata['label']",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.hstack([preds, preds_neg])",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "cat_85": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.arange(adj_train.shape[0]).unsqueeze(0), degrees)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_87": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_85": {
                "start": {
                    "value": "adj_train.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_85": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_86": {
                "*size": {
                    "value": "adj_train.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "device_67": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if args.gpu >= -1 else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_140": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.l2reg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_214": {
                "variable": {
                    "value": "optim_ft",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.decoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr_ft",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.l2reg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_66": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_75": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_76": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_152": {
                "dataset": {
                    "value": "range(train_edges.shape[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_159": {
                "variable": {
                    "value": "labels_f_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.ones(pos_edges.shape[0]), torch.zeros(neg_edges.shape[0]))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_173": {
                "variable": {
                    "value": "loss_f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_f",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "labels_f_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((torch.ones(pos_edges.shape[0]), torch.zeros(neg_edges.shape[0]))).to(device)",
                            "Call"
                        ],
                        [
                            "torch.cat((torch.ones(pos_edges.shape[0]), torch.zeros(neg_edges.shape[0]))).to(device)",
                            "Call"
                        ]
                    ]
                },
                "pos_weight": {
                    "value": "pos_w_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor([args.neg_rate]).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_174": {
                "variable": {
                    "value": "loss_cf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_cf",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "labels_cf_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adj_cf[train_edges_batch.T]",
                            "Subscript"
                        ]
                    ]
                },
                "pos_weight": {
                    "value": "pos_w_cf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(labels_cf_batch.shape[0] - labels_cf_batch.sum()) / labels_cf_batch.sum()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "parameters_to_vector_195": {
                "variable": {
                    "value": "pretrained_params",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "vector_to_parameters_217": {
                "vec": {
                    "value": "pretrained_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "parameters_to_vector(model.parameters())",
                            "Call"
                        ]
                    ]
                },
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_grad_norm__178": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_187": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_219": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_231": {
                "dataset": {
                    "value": "range(train_edges.shape[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_236": {
                "variable": {
                    "value": "labels_f_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.ones(pos_edges.shape[0]), torch.zeros(neg_edges.shape[0]))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_243": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.decoder(z[train_edges_batch.T[0]], z[train_edges_batch.T[1]], T_f_batch)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels_f_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((torch.ones(pos_edges.shape[0]), torch.zeros(neg_edges.shape[0]))).to(device)",
                            "Call"
                        ],
                        [
                            "torch.cat((torch.ones(pos_edges.shape[0]), torch.zeros(neg_edges.shape[0]))).to(device)",
                            "Call"
                        ]
                    ]
                },
                "pos_weight": {
                    "value": "pos_w_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor([args.neg_rate]).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "parameters_to_vector_261": {
                "variable": {
                    "value": "best_params",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "vector_to_parameters_281": {
                "vec": {
                    "value": "best_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "parameters_to_vector(model.parameters())",
                            "Call"
                        ]
                    ]
                },
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_283": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_287": {
                "dataset": {
                    "value": "range(all_pairs.shape[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_291": {
                "variable": {
                    "value": "f_estimated",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model.decoder(z[perm_pairs.T[0]], z[perm_pairs.T[1]], T_f_perm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_292": {
                "variable": {
                    "value": "cf_estimated",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model.decoder(z[perm_pairs.T[0]], z[perm_pairs.T[1]], T_cf_perm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_253": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_159": {
                "*size": {
                    "value": "pos_edges.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_159": {
                "*size": {
                    "value": "neg_edges.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_236": {
                "*size": {
                    "value": "pos_edges.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_236": {
                "*size": {
                    "value": "neg_edges.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "models.py": {
        "torch": {
            "ELU_39": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_41": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_z",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_47": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_109": {
                "variable": {
                    "value": "self.mlp_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dim_in, dim_h, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_55": {
                "variable": {
                    "value": "self.bns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[torch.nn.BatchNorm1d(dim_h) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "dropout_72": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "variable"
                        ],
                        [
                            "self.convs[i](out, adj)",
                            "Call"
                        ],
                        [
                            "self.bns[i](out)",
                            "Call"
                        ],
                        [
                            "self.act(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.jk(out_list)",
                            "Call"
                        ],
                        [
                            "torch.sum(out_stack, dim=0)",
                            "Call"
                        ],
                        [
                            "sum(out_list)",
                            "Call"
                        ],
                        [
                            "out_list[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_119": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, T.view(-1, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_61": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(len(self.convs))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_78": {
                "variable": {
                    "value": "sftmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_110": {
                "in_features": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_h * (gcn_num_layers - 1) + dim_z",
                            "BinOp"
                        ],
                        [
                            "dim_z",
                            "variable"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "dim_z + 1",
                            "BinOp"
                        ],
                        [
                            "1 + 2 * dim_z",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ELU_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_113": {
                "in_features": {
                    "value": "dim_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_121": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z_i, z_j, T.view(-1, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_83": {
                "variable": {
                    "value": "out_stack",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "out_list + [out]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_84": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_stack",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(out_list, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_124": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, T.view(-1, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_55": {
                "num_features": {
                    "value": "dim_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_61": {
                "*size": {
                    "value": "len(self.convs)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}