{
    "sonnia/compare_repertoires.py": {
        "sklearn": {
            "roc_curve_104": {
                "variable": {
                    "value": "(fpr, tpr, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(len(ratio_i.astype(np.float)) + len(ratio_j.astype(np.float)))",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([ratio_i.astype(np.float), ratio_j.astype(np.float)])",
                            "Call"
                        ],
                        [
                            "[]",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "auc_105": {
                "variable": {
                    "value": "roc_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "examples/fig2_paper/fig2_infer.py": {
        "tensorflow": {}
    },
    "sonnia/classifiers.py": {
        "tensorflow": {
            "Model_23": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keras.layers.Input(shape=(self.input_size,))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "outputs": {
                    "value": "output_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keras.layers.Dense(2, activation='softmax')(input_layer)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Input_21": {
                "variable": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.input_size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_22": {
                "units": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "sonnia/infer.py": {
        "tensorflow": {
            "set_seed_97": {
                "seed": {
                    "value": "options.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "sonnia/sonia_paired.py": {
        "tensorflow": {}
    },
    "sonnia/sonnia.py": {
        "tensorflow": {
            "Model_232": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[input_l, input_cdr3, input_vj]",
                            "List"
                        ],
                        [
                            "[]",
                            "Method Argument"
                        ]
                    ]
                },
                "outputs": {
                    "value": "clipped_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keras.layers.Lambda(lambda x: K.clip(x, min_clip, max_clip))(output_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "RMSprop_233": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_313": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_314": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "boolean_mask(y_pred, math.logical_not(y))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_325": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_326": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "boolean_mask(y_pred, math.logical_not(y))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Input_187": {
                "variable": {
                    "value": "input_l",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(l_length,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Input_188": {
                "variable": {
                    "value": "input_cdr3",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(max_depth * 2, 20)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Input_189": {
                "variable": {
                    "value": "input_vj",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(vj_length,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "dot_357": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_enc",
                            "variable"
                        ]
                    ]
                },
                "b": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Lambda_231": {
                "function": {
                    "value": "lambda x: K.clip(x, min_clip, max_clip)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_model_300": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filepath": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": []
                },
                "custom_objects": {
                    "value": "{'loss': self._loss, 'likelihood': self._likelihood, 'EmbedViaMatrix': EmbedViaMatrix}",
                    "type": "Dict",
                    "possible_values": []
                },
                "compile": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "RMSprop_301": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "boolean_mask_314": {
                "tensor": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "mask": {
                    "value": "math.logical_not(y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_logsumexp_315": {
                "input_tensor": {
                    "value": "-boolean_mask(y_pred, y)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "boolean_mask_326": {
                "tensor": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "mask": {
                    "value": "math.logical_not(y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_logsumexp_327": {
                "input_tensor": {
                    "value": "-boolean_mask(y_pred, y)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "logical_not_314": {
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cast(y_true, dtype='bool')",
                            "Call"
                        ],
                        [
                            "cast(y_true, dtype='bool')",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_not_326": {
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cast(y_true, dtype='bool')",
                            "Call"
                        ],
                        [
                            "cast(y_true, dtype='bool')",
                            "Call"
                        ]
                    ]
                }
            },
            "Flatten_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Concatenate_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_197": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "activation": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "keras.regularizers.l1_l2(l2=l2_reg, l1=l1_reg)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "zeros",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_203": {
                "units": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "lecun_normal",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "keras.regularizers.l2(l2_reg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Activation_208": {
                "activation": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Flatten_209": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_210": {
                "units": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "lecun_normal",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "keras.regularizers.l2(l2_reg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_214": {
                "units": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "lecun_normal",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "keras.regularizers.l2(l2_reg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Concatenate_219": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_220": {
                "units": {
                    "value": "60",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "lecun_normal",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "keras.regularizers.l2(l2_reg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_224": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "lecun_normal",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "keras.regularizers.l2(l2_reg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_231": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_enc",
                            "variable"
                        ]
                    ]
                },
                "a_min": {
                    "value": "min_clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "copy(self.min_energy_clip)",
                            "Call"
                        ]
                    ]
                },
                "a_max": {
                    "value": "max_clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "copy(self.max_energy_clip)",
                            "Call"
                        ]
                    ]
                }
            },
            "BinaryCrossentropy_236": {
                "from_logits": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "binary_crossentropy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "boolean_mask_315": {
                "tensor": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "mask": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cast(y_true, dtype='bool')",
                            "Call"
                        ],
                        [
                            "cast(y_true, dtype='bool')",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_327": {
                "tensor": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "mask": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cast(y_true, dtype='bool')",
                            "Call"
                        ],
                        [
                            "cast(y_true, dtype='bool')",
                            "Call"
                        ]
                    ]
                }
            },
            "BinaryCrossentropy_239": {
                "from_logits": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "binary_crossentropy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l1_l2_200": {
                "l2": {
                    "value": "l2_reg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "copy(self.l2_reg)",
                            "Call"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "l1": {
                    "value": "l1_reg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "copy(self.l1_reg)",
                            "Call"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "sonnia/sonnia_paired.py": {
        "tensorflow": {
            "Model_118": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[input_l_light, input_l_heavy, input_cdr3_light, input_cdr3_heavy, input_vj_light, input_vj_heavy]",
                            "List"
                        ],
                        [
                            "[]",
                            "Method Argument"
                        ]
                    ]
                },
                "outputs": {
                    "value": "clipped_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keras.layers.Lambda(lambda x: K.clip(x, min_clip, max_clip))(output_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "RMSprop_119": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Input_69": {
                "variable": {
                    "value": "input_l_light",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.l_length_light,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Input_70": {
                "variable": {
                    "value": "input_l_heavy",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.l_length_heavy,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Input_72": {
                "variable": {
                    "value": "input_cdr3_light",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.max_depth * 2, 20)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Input_73": {
                "variable": {
                    "value": "input_cdr3_heavy",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.max_depth * 2, 20)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Input_75": {
                "variable": {
                    "value": "input_vj_light",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.vj_length_light,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Input_76": {
                "variable": {
                    "value": "input_vj_heavy",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.vj_length_heavy,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "dot_228": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_enc",
                            "variable"
                        ]
                    ]
                },
                "b": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Lambda_117": {
                "function": {
                    "value": "lambda x: K.clip(x, min_clip, max_clip)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "sum_147": {
                "a": {
                    "value": "1.0 - y_true",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_148": {
                "x": {
                    "value": "K.sum(y_true)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_149": {
                "x": {
                    "value": "gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.log(K.sum(K.exp(-y_pred) * y_true)) - K.log(K.sum(y_true))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_model_197": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filepath": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": []
                },
                "custom_objects": {
                    "value": "{'loss': self._loss, 'likelihood': self._likelihood, 'EmbedViaMatrix': EmbedViaMatrix}",
                    "type": "Dict",
                    "possible_values": []
                },
                "compile": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "RMSprop_198": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_148": {
                "a": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Flatten_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Flatten_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Concatenate_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_89": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "activation": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                },
                "activity_regularizer": {
                    "value": "keras.regularizers.l2(l2_reg)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "zeros",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Concatenate_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_94": {
                "units": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "keras.regularizers.l2(l2_reg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNormalization_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Concatenate_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_98": {
                "units": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "keras.regularizers.l2(l2_reg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNormalization_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Concatenate_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_106": {
                "activation": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Flatten_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_109": {
                "activation": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Flatten_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Concatenate_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_113": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "activation": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                },
                "activity_regularizer": {
                    "value": "keras.regularizers.l2(l2_reg)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "lecun_normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_117": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_enc",
                            "variable"
                        ]
                    ]
                },
                "a_min": {
                    "value": "min_clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "copy(self.min_energy_clip)",
                            "Call"
                        ]
                    ]
                },
                "a_max": {
                    "value": "max_clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "copy(self.max_energy_clip)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_103": {
                "units": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "keras.regularizers.l2(l2_reg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_148": {
                "x": {
                    "value": "-y_pred",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "sonnia/sonnia_transfer.py": {
        "tensorflow": {
            "Model_220": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[input_l, input_cdr3, input_vj]",
                            "List"
                        ],
                        [
                            "[]",
                            "Method Argument"
                        ]
                    ]
                },
                "outputs": {
                    "value": "clipped_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keras.layers.Lambda(lambda x: K.clip(x, min_clip, max_clip))(output_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "RMSprop_221": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Input_177": {
                "variable": {
                    "value": "input_l",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(l_length,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Input_178": {
                "variable": {
                    "value": "input_cdr3",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(max_depth * 2, 20)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Input_179": {
                "variable": {
                    "value": "input_vj",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(vj_length,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "dot_374": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_enc",
                            "variable"
                        ]
                    ]
                },
                "b": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Add_216": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Lambda_218": {
                "function": {
                    "value": "lambda x: K.clip(x, min_clip, max_clip)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_model_342": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filepath": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": []
                },
                "custom_objects": {
                    "value": "{'loss': self._loss, 'likelihood': self._likelihood, 'EmbedViaMatrix': EmbedViaMatrix}",
                    "type": "Dict",
                    "possible_values": []
                },
                "compile": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "RMSprop_343": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_181": {
                "units": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "lecun_normal",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "keras.regularizers.l2(l2_reg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Activation_186": {
                "activation": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Flatten_187": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_188": {
                "units": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "lecun_normal",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "keras.regularizers.l2(l2_reg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_192": {
                "units": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "lecun_normal",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "keras.regularizers.l2(l2_reg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNormalization_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Concatenate_197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_198": {
                "units": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "lecun_normal",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "keras.regularizers.l2(l2_reg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_202": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "zeros",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "keras.regularizers.l2(l2_reg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Flatten_208": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Concatenate_209": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_210": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "activation": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "keras.regularizers.l1_l2(l2=l2_reg, l1=l1_reg)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "zeros",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_218": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_enc",
                            "variable"
                        ]
                    ]
                },
                "a_min": {
                    "value": "min_clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "copy(self.min_energy_clip)",
                            "Call"
                        ]
                    ]
                },
                "a_max": {
                    "value": "max_clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "copy(self.max_energy_clip)",
                            "Call"
                        ]
                    ]
                }
            },
            "l1_l2_213": {
                "l2": {
                    "value": "l2_reg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "copy(self.l2_reg)",
                            "Call"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "l1": {
                    "value": "l1_reg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "copy(self.l1_reg)",
                            "Call"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}