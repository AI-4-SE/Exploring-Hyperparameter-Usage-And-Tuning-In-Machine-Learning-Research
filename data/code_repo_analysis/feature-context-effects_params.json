{
    "plot.py": {
        "sklearn": {},
        "torch": {
            "load_29": {
                "f": {
                    "value": "param_fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'{PARAM_DIR}/{method.name}_{dataset.name}_train_params_{lr}_{wd}.pt'",
                            "JoinedStr"
                        ],
                        [
                            "param_fname",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "datasets.py": {
        "torch": {
            "tensor_185": {
                "variable": {
                    "value": "histories",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "histories",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(histories)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_186": {
                "variable": {
                    "value": "history_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "history_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(history_lengths)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_187": {
                "variable": {
                    "value": "choice_sets",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "choice_sets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choice_sets)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choice_sets)",
                            "Call"
                        ],
                        [
                            "cls.generate()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choice_sets)",
                            "Call"
                        ],
                        [
                            "cls.generate()",
                            "Call"
                        ],
                        [
                            "torch.full((samples, max_choice_set_size), -1, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.full((samples, max_choice_set_size), -1, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.full((samples, max_choice_set_size), -1, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.full((samples, max_choice_set_size), -1, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.full((samples, max_choice_set_size), -1, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.full((samples, max_choice_set_size), -1, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_188": {
                "variable": {
                    "value": "choice_sets_with_features",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "choice_sets_with_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choice_sets_with_features)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choice_sets_with_features).float()",
                            "Call"
                        ],
                        [
                            "cls.generate()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choice_sets_with_features).float()",
                            "Call"
                        ],
                        [
                            "cls.generate()",
                            "Call"
                        ],
                        [
                            "torch.zeros((samples, max_choice_set_size, n_feats), dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.zeros((samples, max_choice_set_size, cls.num_features), dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.zeros((samples, max_choice_set_size, cls.num_features), dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.zeros((samples, max_choice_set_size, cls.num_features), dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.zeros((samples, max_choice_set_size, cls.num_features), dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.zeros((samples, max_choice_set_size, cls.num_features), dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_189": {
                "variable": {
                    "value": "choice_set_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "choice_set_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choice_set_lengths)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choice_set_lengths)",
                            "Call"
                        ],
                        [
                            "cls.generate()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choice_set_lengths)",
                            "Call"
                        ],
                        [
                            "cls.generate()",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.full([samples], 6, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_190": {
                "variable": {
                    "value": "choices",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "choices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choices)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choices)",
                            "Call"
                        ],
                        [
                            "cls.generate()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choices)",
                            "Call"
                        ],
                        [
                            "cls.generate()",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_697": {
                "variable": {
                    "value": "choice_sets",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "choice_sets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choice_sets)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choice_sets)",
                            "Call"
                        ],
                        [
                            "cls.generate()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choice_sets)",
                            "Call"
                        ],
                        [
                            "cls.generate()",
                            "Call"
                        ],
                        [
                            "torch.full((samples, max_choice_set_size), -1, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.full((samples, max_choice_set_size), -1, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.full((samples, max_choice_set_size), -1, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.full((samples, max_choice_set_size), -1, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.full((samples, max_choice_set_size), -1, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.full((samples, max_choice_set_size), -1, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_698": {
                "variable": {
                    "value": "choice_sets_with_features",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "choice_sets_with_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choice_sets_with_features)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choice_sets_with_features).float()",
                            "Call"
                        ],
                        [
                            "cls.generate()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choice_sets_with_features).float()",
                            "Call"
                        ],
                        [
                            "cls.generate()",
                            "Call"
                        ],
                        [
                            "torch.zeros((samples, max_choice_set_size, n_feats), dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.zeros((samples, max_choice_set_size, cls.num_features), dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.zeros((samples, max_choice_set_size, cls.num_features), dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.zeros((samples, max_choice_set_size, cls.num_features), dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.zeros((samples, max_choice_set_size, cls.num_features), dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.zeros((samples, max_choice_set_size, cls.num_features), dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_699": {
                "variable": {
                    "value": "choice_set_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "choice_set_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choice_set_lengths)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choice_set_lengths)",
                            "Call"
                        ],
                        [
                            "cls.generate()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choice_set_lengths)",
                            "Call"
                        ],
                        [
                            "cls.generate()",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.full([samples], 6, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_700": {
                "variable": {
                    "value": "choices",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "choices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choices)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choices)",
                            "Call"
                        ],
                        [
                            "cls.generate()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choices)",
                            "Call"
                        ],
                        [
                            "cls.generate()",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_824": {
                "variable": {
                    "value": "choice_sets",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "choice_sets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choice_sets)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choice_sets)",
                            "Call"
                        ],
                        [
                            "cls.generate()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choice_sets)",
                            "Call"
                        ],
                        [
                            "cls.generate()",
                            "Call"
                        ],
                        [
                            "torch.full((samples, max_choice_set_size), -1, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.full((samples, max_choice_set_size), -1, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.full((samples, max_choice_set_size), -1, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.full((samples, max_choice_set_size), -1, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.full((samples, max_choice_set_size), -1, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.full((samples, max_choice_set_size), -1, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_825": {
                "variable": {
                    "value": "choice_sets_with_features",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "choice_sets_with_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choice_sets_with_features)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choice_sets_with_features).float()",
                            "Call"
                        ],
                        [
                            "cls.generate()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choice_sets_with_features).float()",
                            "Call"
                        ],
                        [
                            "cls.generate()",
                            "Call"
                        ],
                        [
                            "torch.zeros((samples, max_choice_set_size, n_feats), dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.zeros((samples, max_choice_set_size, cls.num_features), dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.zeros((samples, max_choice_set_size, cls.num_features), dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.zeros((samples, max_choice_set_size, cls.num_features), dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.zeros((samples, max_choice_set_size, cls.num_features), dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.zeros((samples, max_choice_set_size, cls.num_features), dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_826": {
                "variable": {
                    "value": "choice_set_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "choice_set_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choice_set_lengths)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choice_set_lengths)",
                            "Call"
                        ],
                        [
                            "cls.generate()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choice_set_lengths)",
                            "Call"
                        ],
                        [
                            "cls.generate()",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.full([samples], 6, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_827": {
                "variable": {
                    "value": "choices",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "choices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choices)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choices)",
                            "Call"
                        ],
                        [
                            "cls.generate()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choices)",
                            "Call"
                        ],
                        [
                            "cls.generate()",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "full_871": {
                "variable": {
                    "value": "choice_sets",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(samples, max_choice_set_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_872": {
                "variable": {
                    "value": "choice_sets_with_features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(samples, max_choice_set_size, n_feats)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_873": {
                "variable": {
                    "value": "choice_set_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df['srch_id'].nunique()",
                            "Call"
                        ],
                        [
                            "len(rankings)",
                            "Call"
                        ],
                        [
                            "len(comparisons)",
                            "Call"
                        ],
                        [
                            "len(comparisons)",
                            "Call"
                        ],
                        [
                            "len(comparisons)",
                            "Call"
                        ],
                        [
                            "len(data)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_874": {
                "variable": {
                    "value": "choices",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df['srch_id'].nunique()",
                            "Call"
                        ],
                        [
                            "len(rankings)",
                            "Call"
                        ],
                        [
                            "len(comparisons)",
                            "Call"
                        ],
                        [
                            "len(comparisons)",
                            "Call"
                        ],
                        [
                            "len(comparisons)",
                            "Call"
                        ],
                        [
                            "len(data)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_916": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(group[feature_names].values)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(f'{DATA_DIR}/sushi3-2016/sushi3.idata', usecols=(2, 3, 5, 6, 7, 8))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(features)",
                            "Call"
                        ],
                        [
                            "pd.read_csv(f'{DATA_DIR}/district-compactness/features.csv')",
                            "Call"
                        ],
                        [
                            "np.loadtxt(f'{DATA_DIR}/car/exp1-prefs/items1.csv', skiprows=1, delimiter=',')",
                            "Call"
                        ],
                        [
                            "np.loadtxt(f'{DATA_DIR}/car/exp2-prefs/items2.csv', skiprows=1, delimiter=',')",
                            "Call"
                        ],
                        [
                            "torch.zeros(cls.num_features, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "full_921": {
                "variable": {
                    "value": "choice_sets",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(samples, max_choice_set_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_922": {
                "variable": {
                    "value": "choice_sets_with_features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(samples, max_choice_set_size, cls.num_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_923": {
                "variable": {
                    "value": "choice_set_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df['srch_id'].nunique()",
                            "Call"
                        ],
                        [
                            "len(rankings)",
                            "Call"
                        ],
                        [
                            "len(comparisons)",
                            "Call"
                        ],
                        [
                            "len(comparisons)",
                            "Call"
                        ],
                        [
                            "len(comparisons)",
                            "Call"
                        ],
                        [
                            "len(data)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_924": {
                "variable": {
                    "value": "choices",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df['srch_id'].nunique()",
                            "Call"
                        ],
                        [
                            "len(rankings)",
                            "Call"
                        ],
                        [
                            "len(comparisons)",
                            "Call"
                        ],
                        [
                            "len(comparisons)",
                            "Call"
                        ],
                        [
                            "len(comparisons)",
                            "Call"
                        ],
                        [
                            "len(data)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_968": {
                "variable": {
                    "value": "choice_sets",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(samples, max_choice_set_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_969": {
                "variable": {
                    "value": "choice_sets_with_features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(samples, max_choice_set_size, cls.num_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_970": {
                "variable": {
                    "value": "choice_set_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df['srch_id'].nunique()",
                            "Call"
                        ],
                        [
                            "len(rankings)",
                            "Call"
                        ],
                        [
                            "len(comparisons)",
                            "Call"
                        ],
                        [
                            "len(comparisons)",
                            "Call"
                        ],
                        [
                            "len(comparisons)",
                            "Call"
                        ],
                        [
                            "len(data)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_971": {
                "variable": {
                    "value": "choices",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df['srch_id'].nunique()",
                            "Call"
                        ],
                        [
                            "len(rankings)",
                            "Call"
                        ],
                        [
                            "len(comparisons)",
                            "Call"
                        ],
                        [
                            "len(comparisons)",
                            "Call"
                        ],
                        [
                            "len(comparisons)",
                            "Call"
                        ],
                        [
                            "len(data)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_1020": {
                "variable": {
                    "value": "choice_sets",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(samples, max_choice_set_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1021": {
                "variable": {
                    "value": "choice_sets_with_features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(samples, max_choice_set_size, cls.num_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1022": {
                "variable": {
                    "value": "choice_set_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df['srch_id'].nunique()",
                            "Call"
                        ],
                        [
                            "len(rankings)",
                            "Call"
                        ],
                        [
                            "len(comparisons)",
                            "Call"
                        ],
                        [
                            "len(comparisons)",
                            "Call"
                        ],
                        [
                            "len(comparisons)",
                            "Call"
                        ],
                        [
                            "len(data)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1023": {
                "variable": {
                    "value": "choices",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df['srch_id'].nunique()",
                            "Call"
                        ],
                        [
                            "len(rankings)",
                            "Call"
                        ],
                        [
                            "len(comparisons)",
                            "Call"
                        ],
                        [
                            "len(comparisons)",
                            "Call"
                        ],
                        [
                            "len(comparisons)",
                            "Call"
                        ],
                        [
                            "len(data)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_1064": {
                "variable": {
                    "value": "choice_sets",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(samples, max_choice_set_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1065": {
                "variable": {
                    "value": "choice_sets_with_features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(samples, max_choice_set_size, cls.num_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1066": {
                "variable": {
                    "value": "choice_set_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df['srch_id'].nunique()",
                            "Call"
                        ],
                        [
                            "len(rankings)",
                            "Call"
                        ],
                        [
                            "len(comparisons)",
                            "Call"
                        ],
                        [
                            "len(comparisons)",
                            "Call"
                        ],
                        [
                            "len(comparisons)",
                            "Call"
                        ],
                        [
                            "len(data)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1067": {
                "variable": {
                    "value": "choices",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df['srch_id'].nunique()",
                            "Call"
                        ],
                        [
                            "len(rankings)",
                            "Call"
                        ],
                        [
                            "len(comparisons)",
                            "Call"
                        ],
                        [
                            "len(comparisons)",
                            "Call"
                        ],
                        [
                            "len(comparisons)",
                            "Call"
                        ],
                        [
                            "len(data)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_1107": {
                "variable": {
                    "value": "choice_sets",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(samples, max_choice_set_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1108": {
                "variable": {
                    "value": "choice_sets_with_features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(samples, max_choice_set_size, cls.num_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_1109": {
                "variable": {
                    "value": "choice_set_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[samples]",
                    "type": "List",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1110": {
                "variable": {
                    "value": "choices",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df['srch_id'].nunique()",
                            "Call"
                        ],
                        [
                            "len(rankings)",
                            "Call"
                        ],
                        [
                            "len(comparisons)",
                            "Call"
                        ],
                        [
                            "len(comparisons)",
                            "Call"
                        ],
                        [
                            "len(comparisons)",
                            "Call"
                        ],
                        [
                            "len(data)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_880": {
                "variable": {
                    "value": "choice_sets[i, :choice_set_length]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "group['prop_id'].values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_881": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "group[feature_names].values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_887": {
                "variable": {
                    "value": "choices[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.where(group['booking_bool'] == 1)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_927": {
                "variable": {
                    "value": "choice_set",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "row",
                    "type": "variable",
                    "possible_values": [
                        [
                            "row in enumerate(rankings)",
                            "Call"
                        ],
                        [
                            "comparisons.iterrows()",
                            "Call"
                        ],
                        [
                            "row in enumerate(comparisons)",
                            "Call"
                        ],
                        [
                            "row in enumerate(comparisons)",
                            "Call"
                        ],
                        [
                            "row in enumerate(data)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_979": {
                "variable": {
                    "value": "choice_sets[index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "choice_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "choice_sets",
                            "variable"
                        ],
                        [
                            "[node for node in graph.neighbors(intermediate) if not graph.has_edge(sender, node)]",
                            "ListComp"
                        ],
                        [
                            "[node for node in graph.neighbors(intermediate) if node != chooser]",
                            "ListComp"
                        ],
                        [
                            "choice_sets",
                            "variable"
                        ],
                        [
                            "[node for node in graph.neighbors(intermediate) if node != chooser]",
                            "ListComp"
                        ],
                        [
                            "choice_sets",
                            "variable"
                        ],
                        [
                            "torch.from_numpy(row)",
                            "Call"
                        ],
                        [
                            "[district_to_index[district1], district_to_index[district2]]",
                            "List"
                        ],
                        [
                            "[chosen_car - 1, other_car - 1]",
                            "List"
                        ],
                        [
                            "[chosen_car - 1, other_car - 1]",
                            "List"
                        ]
                    ]
                }
            },
            "as_tensor_982": {
                "variable": {
                    "value": "choice_sets_with_features[index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[feature_dict[district1], feature_dict[district2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_37": {
                "tensors": {
                    "value": "[train_data[i], val_data[i], test_data[i]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_85": {
                "tensors": {
                    "value": "[train_data[i], val_data[i], test_data[i]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_222": {
                "tensors": {
                    "value": "[train_data[i], val_data[i], test_data[i]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_712": {
                "input": {
                    "value": "choices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choices)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choices)",
                            "Call"
                        ],
                        [
                            "cls.generate()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choices)",
                            "Call"
                        ],
                        [
                            "cls.generate()",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_713": {
                "input": {
                    "value": "choices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choices)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choices)",
                            "Call"
                        ],
                        [
                            "cls.generate()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choices)",
                            "Call"
                        ],
                        [
                            "cls.generate()",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_839": {
                "input": {
                    "value": "choices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choices)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choices)",
                            "Call"
                        ],
                        [
                            "cls.generate()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choices)",
                            "Call"
                        ],
                        [
                            "cls.generate()",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_840": {
                "input": {
                    "value": "choices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choices)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choices)",
                            "Call"
                        ],
                        [
                            "cls.generate()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choices)",
                            "Call"
                        ],
                        [
                            "cls.generate()",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_885": {
                "input": {
                    "value": "choice_sets_with_features[i, :choice_set_length]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_889": {
                "input": {
                    "value": "choices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choices)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choices)",
                            "Call"
                        ],
                        [
                            "cls.generate()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choices)",
                            "Call"
                        ],
                        [
                            "cls.generate()",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_890": {
                "input": {
                    "value": "choices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choices)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choices)",
                            "Call"
                        ],
                        [
                            "cls.generate()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choices)",
                            "Call"
                        ],
                        [
                            "cls.generate()",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_934": {
                "input": {
                    "value": "choices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choices)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choices)",
                            "Call"
                        ],
                        [
                            "cls.generate()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choices)",
                            "Call"
                        ],
                        [
                            "cls.generate()",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_935": {
                "input": {
                    "value": "choices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choices)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choices)",
                            "Call"
                        ],
                        [
                            "cls.generate()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choices)",
                            "Call"
                        ],
                        [
                            "cls.generate()",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_984": {
                "input": {
                    "value": "choices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choices)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choices)",
                            "Call"
                        ],
                        [
                            "cls.generate()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choices)",
                            "Call"
                        ],
                        [
                            "cls.generate()",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_985": {
                "input": {
                    "value": "choices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choices)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choices)",
                            "Call"
                        ],
                        [
                            "cls.generate()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choices)",
                            "Call"
                        ],
                        [
                            "cls.generate()",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_1030": {
                "variable": {
                    "value": "choice_sets[index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "choice_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "choice_sets",
                            "variable"
                        ],
                        [
                            "[node for node in graph.neighbors(intermediate) if not graph.has_edge(sender, node)]",
                            "ListComp"
                        ],
                        [
                            "[node for node in graph.neighbors(intermediate) if node != chooser]",
                            "ListComp"
                        ],
                        [
                            "choice_sets",
                            "variable"
                        ],
                        [
                            "[node for node in graph.neighbors(intermediate) if node != chooser]",
                            "ListComp"
                        ],
                        [
                            "choice_sets",
                            "variable"
                        ],
                        [
                            "torch.from_numpy(row)",
                            "Call"
                        ],
                        [
                            "[district_to_index[district1], district_to_index[district2]]",
                            "List"
                        ],
                        [
                            "[chosen_car - 1, other_car - 1]",
                            "List"
                        ],
                        [
                            "[chosen_car - 1, other_car - 1]",
                            "List"
                        ]
                    ]
                }
            },
            "as_tensor_1033": {
                "variable": {
                    "value": "choice_sets_with_features[index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[feature_dict[chosen_car], feature_dict[other_car]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_1035": {
                "input": {
                    "value": "choices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choices)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choices)",
                            "Call"
                        ],
                        [
                            "cls.generate()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choices)",
                            "Call"
                        ],
                        [
                            "cls.generate()",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_1036": {
                "input": {
                    "value": "choices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choices)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choices)",
                            "Call"
                        ],
                        [
                            "cls.generate()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choices)",
                            "Call"
                        ],
                        [
                            "cls.generate()",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_1074": {
                "variable": {
                    "value": "choice_sets[index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "choice_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "choice_sets",
                            "variable"
                        ],
                        [
                            "[node for node in graph.neighbors(intermediate) if not graph.has_edge(sender, node)]",
                            "ListComp"
                        ],
                        [
                            "[node for node in graph.neighbors(intermediate) if node != chooser]",
                            "ListComp"
                        ],
                        [
                            "choice_sets",
                            "variable"
                        ],
                        [
                            "[node for node in graph.neighbors(intermediate) if node != chooser]",
                            "ListComp"
                        ],
                        [
                            "choice_sets",
                            "variable"
                        ],
                        [
                            "torch.from_numpy(row)",
                            "Call"
                        ],
                        [
                            "[district_to_index[district1], district_to_index[district2]]",
                            "List"
                        ],
                        [
                            "[chosen_car - 1, other_car - 1]",
                            "List"
                        ],
                        [
                            "[chosen_car - 1, other_car - 1]",
                            "List"
                        ]
                    ]
                }
            },
            "as_tensor_1077": {
                "variable": {
                    "value": "choice_sets_with_features[index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[feature_dict[chosen_car], feature_dict[other_car]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_1079": {
                "input": {
                    "value": "choices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choices)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choices)",
                            "Call"
                        ],
                        [
                            "cls.generate()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choices)",
                            "Call"
                        ],
                        [
                            "cls.generate()",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_1080": {
                "input": {
                    "value": "choices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choices)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choices)",
                            "Call"
                        ],
                        [
                            "cls.generate()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choices)",
                            "Call"
                        ],
                        [
                            "cls.generate()",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_1114": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "cls.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_1122": {
                "input": {
                    "value": "choices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choices)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choices)",
                            "Call"
                        ],
                        [
                            "cls.generate()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choices)",
                            "Call"
                        ],
                        [
                            "cls.generate()",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_1123": {
                "input": {
                    "value": "choices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choices)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "cls.build_triadic_closure_data(timestamped_edges)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choices)",
                            "Call"
                        ],
                        [
                            "cls.generate()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(choices)",
                            "Call"
                        ],
                        [
                            "cls.generate()",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(samples, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_882": {
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(group[feature_names].values)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(f'{DATA_DIR}/sushi3-2016/sushi3.idata', usecols=(2, 3, 5, 6, 7, 8))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(features)",
                            "Call"
                        ],
                        [
                            "pd.read_csv(f'{DATA_DIR}/district-compactness/features.csv')",
                            "Call"
                        ],
                        [
                            "np.loadtxt(f'{DATA_DIR}/car/exp1-prefs/items1.csv', skiprows=1, delimiter=',')",
                            "Call"
                        ],
                        [
                            "np.loadtxt(f'{DATA_DIR}/car/exp2-prefs/items2.csv', skiprows=1, delimiter=',')",
                            "Call"
                        ],
                        [
                            "torch.zeros(cls.num_features, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_40": {
                "start": {
                    "value": "choice_sets.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_44": {
                "start": {
                    "value": "train_data[3].size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_45": {
                "start": {
                    "value": "train_data[3].size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_47": {
                "start": {
                    "value": "val_data[3].size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_48": {
                "start": {
                    "value": "val_data[3].size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_50": {
                "start": {
                    "value": "test_data[3].size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_51": {
                "start": {
                    "value": "test_data[3].size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments.py": {
        "torch": {
            "save_33": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f'{PARAM_DIR}/{method.name}_{dataset.name}_params_{lr}_{wd}.pt'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "save_46": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f'{PARAM_DIR}/{method.name}_{dataset.name}_train_params_{lr}_{wd}.pt'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "save_131": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f'{PARAM_DIR}/context_mixture_em_{dataset.name}_params.pt'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "manual_seed_139": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_180": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_226": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_261": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_290": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_362": {
                "variable": {
                    "value": "fisher_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_params, num_params)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_28": {
                "tensors": {
                    "value": "[train_data[i], val_data[i], test_data[i]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_59": {
                "tensors": {
                    "value": "[train_data[i], val_data[i], test_data[i]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "nll_loss_110": {
                "variable": {
                    "value": "bin_losses[bin]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "mnl(*bin_data[:-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "bin_data[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_120": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_128": {
                "tensors": {
                    "value": "[train_data[i], val_data[i], test_data[i]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_137": {
                "tensors": {
                    "value": "[train_data[i], val_data[i], test_data[i]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_224": {
                "tensors": {
                    "value": "[train_data[i], val_data[i], test_data[i]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_288": {
                "tensors": {
                    "value": "[train_data[i], val_data[i], test_data[i]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_375": {
                "variable": {
                    "value": "gradient",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[param.grad.flatten() for param in model.parameters()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_320": {
                "tensors": {
                    "value": "[train_data[i], val_data[i], test_data[i]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_353": {
                "f": {
                    "value": "f'{PARAM_DIR}/lcl_{dataset.name}_params_{dataset.best_lr(LCL)}_0.001.pt'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "cat_356": {
                "tensors": {
                    "value": "[train_data[i], val_data[i], test_data[i]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "outer_378": {
                "input": {
                    "value": "gradient",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([param.grad.flatten() for param in model.parameters()])",
                            "Call"
                        ]
                    ]
                },
                "vec2": {
                    "value": "gradient",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([param.grad.flatten() for param in model.parameters()])",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_106": {
                "data": {
                    "value": "choices[bin_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "models.py": {
        "torch": {
            "Adam_288": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr",
                            "Method Argument"
                        ],
                        [
                            "0.0001",
                            "Method Argument"
                        ],
                        [
                            "0.0001",
                            "Method Argument"
                        ],
                        [
                            "0.0001",
                            "Method Argument"
                        ],
                        [
                            "0.0001",
                            "Method Argument"
                        ],
                        [
                            "0.005",
                            "Method Argument"
                        ]
                    ]
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_decay",
                            "Method Argument"
                        ],
                        [
                            "0.0001",
                            "Method Argument"
                        ],
                        [
                            "0.0001",
                            "Method Argument"
                        ],
                        [
                            "0.0001",
                            "Method Argument"
                        ],
                        [
                            "0.0001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_383": {
                "variable": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "variable"
                        ]
                    ]
                },
                "out": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "variable"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_384": {
                "variable": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "variable"
                        ]
                    ]
                },
                "out": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "variable"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_407": {
                "variable": {
                    "value": "model.mixture_weights.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(n, requires_grad=False).float() / n",
                            "BinOp"
                        ],
                        [
                            "torch.softmax(initialize_from.thetas.clone().detach(), 0)",
                            "Call"
                        ],
                        [
                            "responsibilities.sum(0) / batch_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_485": {
                "variable": {
                    "value": "choice_set_features",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[x_1, x_2, z, z], [x_1, x_3, z, z], [x_1, x_2, x_3, x_4], [x_2, x_3, z, z], [x_1, x_4, z, z], [x_2, x_3, x_4, z]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_494": {
                "variable": {
                    "value": "choice_set_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[2, 2, 1, 2, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_497": {
                "variable": {
                    "value": "choices",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 3, 1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_77": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn([self.num, self.dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_97": {
                "variable": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(self.num_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_127": {
                "variable": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(self.num_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_128": {
                "variable": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.num_features, self.num_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_168": {
                "variable": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.num_features, self.num_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_171": {
                "variable": {
                    "value": "self.B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.num_features, self.num_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_173": {
                "variable": {
                    "value": "self.mixture_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(self.num_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_softmax_191": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "utilities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "choice_set_features @ utility_matrices",
                            "BinOp"
                        ],
                        [
                            "(self.theta * choice_set_features).sum(-1)",
                            "Call"
                        ],
                        [
                            "((self.theta.unsqueeze(-1) + context_effects).view(batch_size, 1, -1) * choice_set_features).sum(-1)",
                            "Call"
                        ],
                        [
                            "choice_set_features @ utility_matrices",
                            "BinOp"
                        ],
                        [
                            "choice_set_features @ self.thetas.T",
                            "BinOp"
                        ],
                        [
                            "choice_set_features @ preference_matrices",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_220": {
                "variable": {
                    "value": "self.thetas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(self.num_features, self.num_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_221": {
                "variable": {
                    "value": "self.mixture_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(self.num_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_softmax_231": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "utilities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "choice_set_features @ utility_matrices",
                            "BinOp"
                        ],
                        [
                            "(self.theta * choice_set_features).sum(-1)",
                            "Call"
                        ],
                        [
                            "((self.theta.unsqueeze(-1) + context_effects).view(batch_size, 1, -1) * choice_set_features).sum(-1)",
                            "Call"
                        ],
                        [
                            "choice_set_features @ utility_matrices",
                            "BinOp"
                        ],
                        [
                            "choice_set_features @ self.thetas.T",
                            "BinOp"
                        ],
                        [
                            "choice_set_features @ preference_matrices",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_261": {
                "variable": {
                    "value": "self.B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "B_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "B_init",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_262": {
                "variable": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "C_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_init",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_num_threads_281": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_num_threads_377": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_390": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "initialize_from.thetas.clone().detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_422": {
                "variable": {
                    "value": "responsibilities",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs + torch.log(alpha)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_426": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "Q.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr",
                            "Method Argument"
                        ],
                        [
                            "0.0001",
                            "Method Argument"
                        ],
                        [
                            "0.0001",
                            "Method Argument"
                        ],
                        [
                            "0.0001",
                            "Method Argument"
                        ],
                        [
                            "0.0001",
                            "Method Argument"
                        ],
                        [
                            "0.005",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_456": {
                "variable": {
                    "value": "model.mixture_weights.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(n, requires_grad=False).float() / n",
                            "BinOp"
                        ],
                        [
                            "torch.softmax(initialize_from.thetas.clone().detach(), 0)",
                            "Call"
                        ],
                        [
                            "responsibilities.sum(0) / batch_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "nll_loss_458": {
                "variable": {
                    "value": "nll",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model(choice_set_features, choice_set_lengths)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "choices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch[-1]",
                            "Subscript"
                        ],
                        [
                            "batch[-1]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor([0, 0, 3, 1, 0, 2])",
                            "Call"
                        ],
                        [
                            "choices",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_466": {
                "variable": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[model.B.grad.flatten(), model.A.grad.flatten(), model.mixture_weights.grad.flatten()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_466": {
                "variable": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_106": {
                "input": {
                    "value": "utilities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "choice_set_features @ utility_matrices",
                            "BinOp"
                        ],
                        [
                            "(self.theta * choice_set_features).sum(-1)",
                            "Call"
                        ],
                        [
                            "((self.theta.unsqueeze(-1) + context_effects).view(batch_size, 1, -1) * choice_set_features).sum(-1)",
                            "Call"
                        ],
                        [
                            "choice_set_features @ utility_matrices",
                            "BinOp"
                        ],
                        [
                            "choice_set_features @ self.thetas.T",
                            "BinOp"
                        ],
                        [
                            "choice_set_features @ preference_matrices",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_116": {
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_145": {
                "input": {
                    "value": "utilities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "choice_set_features @ utility_matrices",
                            "BinOp"
                        ],
                        [
                            "(self.theta * choice_set_features).sum(-1)",
                            "Call"
                        ],
                        [
                            "((self.theta.unsqueeze(-1) + context_effects).view(batch_size, 1, -1) * choice_set_features).sum(-1)",
                            "Call"
                        ],
                        [
                            "choice_set_features @ utility_matrices",
                            "BinOp"
                        ],
                        [
                            "choice_set_features @ self.thetas.T",
                            "BinOp"
                        ],
                        [
                            "choice_set_features @ preference_matrices",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_249": {
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_385": {
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "variable"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argsort_59": {
                "variable": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch[self.sort_index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_77": {
                "*size": {
                    "value": "[self.num, self.dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_97": {
                "*size": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_127": {
                "*size": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_128": {
                "*size": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nll_loss_155": {
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_168": {
                "*size": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_171": {
                "*size": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_173": {
                "*size": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nll_loss_209": {
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rand_220": {
                "*size": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_221": {
                "*size": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_275": {
                "input": {
                    "value": "utilities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "choice_set_features @ utility_matrices",
                            "BinOp"
                        ],
                        [
                            "(self.theta * choice_set_features).sum(-1)",
                            "Call"
                        ],
                        [
                            "((self.theta.unsqueeze(-1) + context_effects).view(batch_size, 1, -1) * choice_set_features).sum(-1)",
                            "Call"
                        ],
                        [
                            "choice_set_features @ utility_matrices",
                            "BinOp"
                        ],
                        [
                            "choice_set_features @ self.thetas.T",
                            "BinOp"
                        ],
                        [
                            "choice_set_features @ preference_matrices",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_312": {
                "input": {
                    "value": "choice_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(*batch[:-1])",
                            "Call"
                        ],
                        [
                            "model(*batch[:-1])",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "choices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch[-1]",
                            "Subscript"
                        ],
                        [
                            "batch[-1]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor([0, 0, 3, 1, 0, 2])",
                            "Call"
                        ],
                        [
                            "choices",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "arange_395": {
                "start": {
                    "value": "max_choice_set_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "choice_set_features.size()",
                            "Call"
                        ],
                        [
                            "choice_set_features.size()",
                            "Call"
                        ],
                        [
                            "choice_set_features.size()",
                            "Call"
                        ],
                        [
                            "choice_set_features.size()",
                            "Call"
                        ],
                        [
                            "choice_set_features.size()",
                            "Call"
                        ],
                        [
                            "choice_set_features.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_397": {
                "start": {
                    "value": "len(choices)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_420": {
                "input": {
                    "value": "utilities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "choice_set_features @ utility_matrices",
                            "BinOp"
                        ],
                        [
                            "(self.theta * choice_set_features).sum(-1)",
                            "Call"
                        ],
                        [
                            "((self.theta.unsqueeze(-1) + context_effects).view(batch_size, 1, -1) * choice_set_features).sum(-1)",
                            "Call"
                        ],
                        [
                            "choice_set_features @ utility_matrices",
                            "BinOp"
                        ],
                        [
                            "choice_set_features @ self.thetas.T",
                            "BinOp"
                        ],
                        [
                            "choice_set_features @ preference_matrices",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_143": {
                "start": {
                    "value": "max_choice_set_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "choice_set_features.size()",
                            "Call"
                        ],
                        [
                            "choice_set_features.size()",
                            "Call"
                        ],
                        [
                            "choice_set_features.size()",
                            "Call"
                        ],
                        [
                            "choice_set_features.size()",
                            "Call"
                        ],
                        [
                            "choice_set_features.size()",
                            "Call"
                        ],
                        [
                            "choice_set_features.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_143": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_199": {
                "input": {
                    "value": "self.mixture_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_239": {
                "input": {
                    "value": "self.mixture_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_275": {
                "start": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "choice_set_features.size()",
                            "Call"
                        ],
                        [
                            "choice_set_features.size()",
                            "Call"
                        ],
                        [
                            "choice_set_features.size()",
                            "Call"
                        ],
                        [
                            "choice_set_features.size()",
                            "Call"
                        ],
                        [
                            "choice_set_features.size()",
                            "Call"
                        ],
                        [
                            "choice_set_features.size()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "nll_loss_347": {
                "input": {
                    "value": "choice_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(*batch[:-1])",
                            "Call"
                        ],
                        [
                            "model(*batch[:-1])",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "choices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch[-1]",
                            "Subscript"
                        ],
                        [
                            "batch[-1]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor([0, 0, 3, 1, 0, 2])",
                            "Call"
                        ],
                        [
                            "choices",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "arange_420": {
                "start": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "choice_set_features.size()",
                            "Call"
                        ],
                        [
                            "choice_set_features.size()",
                            "Call"
                        ],
                        [
                            "choice_set_features.size()",
                            "Call"
                        ],
                        [
                            "choice_set_features.size()",
                            "Call"
                        ],
                        [
                            "choice_set_features.size()",
                            "Call"
                        ],
                        [
                            "choice_set_features.size()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_422": {
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(n, requires_grad=False).float() / n",
                            "BinOp"
                        ],
                        [
                            "torch.softmax(initialize_from.thetas.clone().detach(), 0)",
                            "Call"
                        ],
                        [
                            "responsibilities.sum(0) / batch_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "arange_104": {
                "start": {
                    "value": "max_choice_set_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "choice_set_features.size()",
                            "Call"
                        ],
                        [
                            "choice_set_features.size()",
                            "Call"
                        ],
                        [
                            "choice_set_features.size()",
                            "Call"
                        ],
                        [
                            "choice_set_features.size()",
                            "Call"
                        ],
                        [
                            "choice_set_features.size()",
                            "Call"
                        ],
                        [
                            "choice_set_features.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_184": {
                "*size": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_188": {
                "start": {
                    "value": "max_choice_set_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "choice_set_features.size()",
                            "Call"
                        ],
                        [
                            "choice_set_features.size()",
                            "Call"
                        ],
                        [
                            "choice_set_features.size()",
                            "Call"
                        ],
                        [
                            "choice_set_features.size()",
                            "Call"
                        ],
                        [
                            "choice_set_features.size()",
                            "Call"
                        ],
                        [
                            "choice_set_features.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_228": {
                "start": {
                    "value": "max_choice_set_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "choice_set_features.size()",
                            "Call"
                        ],
                        [
                            "choice_set_features.size()",
                            "Call"
                        ],
                        [
                            "choice_set_features.size()",
                            "Call"
                        ],
                        [
                            "choice_set_features.size()",
                            "Call"
                        ],
                        [
                            "choice_set_features.size()",
                            "Call"
                        ],
                        [
                            "choice_set_features.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_268": {
                "*size": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_272": {
                "start": {
                    "value": "max_choice_set_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "choice_set_features.size()",
                            "Call"
                        ],
                        [
                            "choice_set_features.size()",
                            "Call"
                        ],
                        [
                            "choice_set_features.size()",
                            "Call"
                        ],
                        [
                            "choice_set_features.size()",
                            "Call"
                        ],
                        [
                            "choice_set_features.size()",
                            "Call"
                        ],
                        [
                            "choice_set_features.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_413": {
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "variable"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}