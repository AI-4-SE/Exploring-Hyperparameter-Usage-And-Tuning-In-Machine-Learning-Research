{
    "attention_model.py": {
        "tensorflow": {
            "expand_dims_181": {
                "variable": {
                    "value": "attention_images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.transpose(attention_images, [1, 2, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "image_185": {
                "variable": {
                    "value": "attention_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "attention_images",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "attention_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "final_context_state.alignment_history.stack()",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.transpose(attention_images, [1, 2, 0]), -1)",
                            "Call"
                        ],
                        [
                            "attention_images * 255",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DeviceWrapper_127": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_helper.create_rnn_cell(unit_type=hparams.unit_type, num_units=num_units, num_layers=num_layers, num_residual_layers=num_residual_layers, forget_bias=hparams.forget_bias, dropout=hparams.dropout, num_gpus=num_gpus, mode=self.mode, single_cell_fn=self.single_cell_fn)",
                            "Call"
                        ],
                        [
                            "seq2seq.AttentionWrapper(cell, attention_mechanism, attention_layer_size=num_units, alignment_history=alignment_history, attention_architecture=hparams.attention_architecture, output_layer=self.output_layer, training=self.mode != tf.contrib.learn.ModeKeys.INFER)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DeviceWrapper(cell, model_helper.get_device_str(num_layers - 1, num_gpus))",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "model_helper.get_device_str(num_layers - 1, num_gpus)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_84": {
                "variable": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "encoder_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_182": {
                "a": {
                    "value": "attention_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "final_context_state.alignment_history.stack()",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.transpose(attention_images, [1, 2, 0]), -1)",
                            "Call"
                        ],
                        [
                            "attention_images * 255",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_op_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "attention_wrapper.py": {
        "tensorflow": {
            "map_structure_86": {
                "variable": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda m: ops.convert_to_tensor(m, name='memory')",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.map_structure(lambda m: ops.convert_to_tensor(m, name='memory'), memory)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_294": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.expand_dims(query, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_305": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.expand_dims(query, 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "keys",
                    "type": "variable",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_306": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.matmul(query, keys, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "array_ops.squeeze(score, [1])",
                            "Call"
                        ],
                        [
                            "g * score",
                            "BinOp"
                        ],
                        [
                            "score + score_bias",
                            "BinOp"
                        ],
                        [
                            "_luong_score(query, self._keys, self._scale)",
                            "Call"
                        ],
                        [
                            "_bahdanau_score(processed_query, self._keys, self._normalize)",
                            "Call"
                        ],
                        [
                            "_bahdanau_score(processed_query, self._keys, self._normalize)",
                            "Call"
                        ],
                        [
                            "_luong_score(query, self._keys, self._scale)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_431": {
                "variable": {
                    "value": "processed_query",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "processed_query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.expand_dims(processed_query, 1)",
                            "Call"
                        ],
                        [
                            "self.query_layer(query) if self.query_layer else query",
                            "IfExp"
                        ],
                        [
                            "self.query_layer(query) if self.query_layer else query",
                            "IfExp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_432": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "attention_v",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.dtype",
                            "Attribute"
                        ],
                        [
                            "processed_query.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "convert_to_tensor_604": {
                "variable": {
                    "value": "p_choose_i",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "p_choose_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(p_choose_i, name='p_choose_i')",
                            "Call"
                        ],
                        [
                            "p_choose_i * math_ops.cumsum(previous_attention, axis=1)",
                            "BinOp"
                        ],
                        [
                            "math_ops.sigmoid(score)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "p_choose_i",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_605": {
                "variable": {
                    "value": "previous_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "previous_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(previous_attention, name='previous_attention')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "previous_attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_684": {
                "variable": {
                    "value": "p_choose_i",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.matmul(query, keys, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "array_ops.squeeze(score, [1])",
                            "Call"
                        ],
                        [
                            "g * score",
                            "BinOp"
                        ],
                        [
                            "score + score_bias",
                            "BinOp"
                        ],
                        [
                            "_luong_score(query, self._keys, self._scale)",
                            "Call"
                        ],
                        [
                            "_bahdanau_score(processed_query, self._keys, self._normalize)",
                            "Call"
                        ],
                        [
                            "_bahdanau_score(processed_query, self._keys, self._normalize)",
                            "Call"
                        ],
                        [
                            "_luong_score(query, self._keys, self._scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_978": {
                "variable": {
                    "value": "expanded_alignments",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alignments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention_mechanism(cell_output, previous_alignments=previous_alignments)",
                            "Call"
                        ],
                        [
                            "attention_mechanism(cell_output, previous_alignments=previous_alignments)",
                            "Call"
                        ],
                        [
                            "tf.verify_tensor_all_finite(alignments, msg='Beam-Joint Attention failed as alignments are not finite.')",
                            "Call"
                        ],
                        [
                            "self._probability_fn(score, previous_alignments)",
                            "Call"
                        ],
                        [
                            "self._probability_fn(score, previous_alignments)",
                            "Call"
                        ],
                        [
                            "self._probability_fn(score, previous_alignments)",
                            "Call"
                        ],
                        [
                            "self._probability_fn(score, previous_alignments)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_988": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "expanded_alignments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.expand_dims(alignments, 1)",
                            "Call"
                        ],
                        [
                            "array_ops.expand_dims(alignments, 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "attention_mechanism.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_989": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.matmul(expanded_alignments, attention_mechanism.values)",
                            "Call"
                        ],
                        [
                            "array_ops.squeeze(context, [1])",
                            "Call"
                        ],
                        [
                            "math_ops.matmul(expanded_alignments, attention_mechanism.values)",
                            "Call"
                        ],
                        [
                            "array_ops.squeeze(context, [1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_1011": {
                "variable": {
                    "value": "expanded_alignments",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alignments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention_mechanism(cell_output, previous_alignments=previous_alignments)",
                            "Call"
                        ],
                        [
                            "attention_mechanism(cell_output, previous_alignments=previous_alignments)",
                            "Call"
                        ],
                        [
                            "tf.verify_tensor_all_finite(alignments, msg='Beam-Joint Attention failed as alignments are not finite.')",
                            "Call"
                        ],
                        [
                            "self._probability_fn(score, previous_alignments)",
                            "Call"
                        ],
                        [
                            "self._probability_fn(score, previous_alignments)",
                            "Call"
                        ],
                        [
                            "self._probability_fn(score, previous_alignments)",
                            "Call"
                        ],
                        [
                            "self._probability_fn(score, previous_alignments)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_1021": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "expanded_alignments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.expand_dims(alignments, 1)",
                            "Call"
                        ],
                        [
                            "array_ops.expand_dims(alignments, 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "attention_mechanism.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_1022": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.matmul(expanded_alignments, attention_mechanism.values)",
                            "Call"
                        ],
                        [
                            "array_ops.squeeze(context, [1])",
                            "Call"
                        ],
                        [
                            "math_ops.matmul(expanded_alignments, attention_mechanism.values)",
                            "Call"
                        ],
                        [
                            "array_ops.squeeze(context, [1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_89": {
                "variable": {
                    "value": "memory_sequence_length",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "memory_sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(memory_sequence_length, name='memory_sequence_length')",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "memory_sequence_length",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sequence_mask_100": {
                "variable": {
                    "value": "seq_len_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "memory_sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(memory_sequence_length, name='memory_sequence_length')",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "array_ops.shape(nest.flatten(memory)[0])[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "nest.flatten(memory)[0].dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_110": {
                "variable": {
                    "value": "extra_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "rank - 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "map_structure_124": {
                "func": {
                    "value": "lambda m: _maybe_mask(m, seq_len_mask)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.map_structure(lambda m: ops.convert_to_tensor(m, name='memory'), memory)",
                            "Call"
                        ]
                    ]
                }
            },
            "sequence_mask_133": {
                "variable": {
                    "value": "score_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "memory_sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(memory_sequence_length, name='memory_sequence_length')",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "array_ops.shape(score)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_variable_310": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "attention_g",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.dtype",
                            "Attribute"
                        ],
                        [
                            "processed_query.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "initializer": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_variable_436": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "attention_g",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.dtype",
                            "Attribute"
                        ],
                        [
                            "processed_query.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "initializer": {
                    "value": "math.sqrt(1.0 / num_units)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_440": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "attention_b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.dtype",
                            "Attribute"
                        ],
                        [
                            "processed_query.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "initializer": {
                    "value": "init_ops.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_to_tensor_556": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(x, name='x')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_611": {
                "variable": {
                    "value": "shifted_1mp_choose_i",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[array_ops.ones((batch_size, 1)), 1 - p_choose_i[:, :-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convert_to_tensor_962": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(logits, name='logits')",
                            "Call"
                        ],
                        [
                            "output_layer(attention)",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_sum(array_ops.expand_dims(top_alignments.values, 2) * tf.nn.softmax(beam_joint_logits), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.verify_tensor_all_finite(logits, msg='Logits failed')",
                            "Call"
                        ],
                        [
                            "tf.log(logits + 1e-12)",
                            "Call"
                        ],
                        [
                            "tf.verify_tensor_all_finite(logits, msg='LogLogits failed')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_1420": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "all_attentions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "map_structure_96": {
                "func": {
                    "value": "_check_dims",
                    "type": "variable",
                    "possible_values": []
                },
                "*structure": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.map_structure(lambda m: ops.convert_to_tensor(m, name='memory'), memory)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_131": {
                "control_inputs": {
                    "value": "[check_ops.assert_positive(memory_sequence_length, message=message)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_136": {
                "condition": {
                    "value": "score_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.sequence_mask(memory_sequence_length, maxlen=array_ops.shape(score)[1])",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.matmul(query, keys, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "array_ops.squeeze(score, [1])",
                            "Call"
                        ],
                        [
                            "g * score",
                            "BinOp"
                        ],
                        [
                            "score + score_bias",
                            "BinOp"
                        ],
                        [
                            "_luong_score(query, self._keys, self._scale)",
                            "Call"
                        ],
                        [
                            "_bahdanau_score(processed_query, self._keys, self._normalize)",
                            "Call"
                        ],
                        [
                            "_bahdanau_score(processed_query, self._keys, self._normalize)",
                            "Call"
                        ],
                        [
                            "_luong_score(query, self._keys, self._scale)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "score_mask_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "score_mask_value * array_ops.ones_like(score)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_446": {
                "input_tensor": {
                    "value": "normed_v * math_ops.tanh(keys + processed_query + b)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_449": {
                "input_tensor": {
                    "value": "v * math_ops.tanh(keys + processed_query)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_555": {
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "exp_558": {
                "x": {
                    "value": "math_ops.cumsum(math_ops.log(clip_ops.clip_by_value(x, tiny, 1)), *args, **kwargs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "one_hot_712": {
                "indices": {
                    "value": "array_ops.zeros((batch_size,), dtype=dtypes.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "max_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._alignments_size",
                            "Attribute"
                        ],
                        [
                            "self._alignments_size",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.dtype",
                            "Attribute"
                        ],
                        [
                            "processed_query.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "get_variable_807": {
                "variable": {
                    "value": "score_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "attention_score_bias",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "processed_query.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self._score_bias_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_902": {
                "variable": {
                    "value": "score_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "attention_score_bias",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "query.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self._score_bias_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_961": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'LuongAttention'",
                            "Method Argument"
                        ],
                        [
                            "'BahdanauAttention'",
                            "Method Argument"
                        ],
                        [
                            "'BahdanauMonotonicAttention'",
                            "Method Argument"
                        ],
                        [
                            "'LuongMonotonicAttention'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "one_hot_967": {
                "indices": {
                    "value": "math_ops.argmax(logits, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.get_shape()[-1]",
                            "Subscript"
                        ],
                        [
                            "logits.get_shape()[-1].value",
                            "Attribute"
                        ],
                        [
                            "array_ops.shape(logits)[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "logits.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_1028": {
                "variable": {
                    "value": "encoder_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_mechanism.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_1031": {
                "variable": {
                    "value": "temp_k",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.shape([alignments])[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "top_k_1032": {
                "variable": {
                    "value": "top_alignments",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alignments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention_mechanism(cell_output, previous_alignments=previous_alignments)",
                            "Call"
                        ],
                        [
                            "attention_mechanism(cell_output, previous_alignments=previous_alignments)",
                            "Call"
                        ],
                        [
                            "tf.verify_tensor_all_finite(alignments, msg='Beam-Joint Attention failed as alignments are not finite.')",
                            "Call"
                        ],
                        [
                            "self._probability_fn(score, previous_alignments)",
                            "Call"
                        ],
                        [
                            "self._probability_fn(score, previous_alignments)",
                            "Call"
                        ],
                        [
                            "self._probability_fn(score, previous_alignments)",
                            "Call"
                        ],
                        [
                            "self._probability_fn(score, previous_alignments)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "temp_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(5, tf.shape([alignments])[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_1034": {
                "variable": {
                    "value": "batch_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.tile(tf.expand_dims(tf.range(encoder_shape[0]), 1), [1, temp_k])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[encoder_shape[0] * temp_k, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1035": {
                "variable": {
                    "value": "indices_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "top_alignments.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_nd_1038": {
                "variable": {
                    "value": "top_encoder_parts",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "attention_mechanism.values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.reshape(tf.concat([batch_tensor, indices_tensor], 1), [encoder_shape[0], temp_k, -1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_1040": {
                "variable": {
                    "value": "cell_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "array_ops.expand_dims(cell_output, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, temp_k, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "verify_tensor_all_finite_1043": {
                "variable": {
                    "value": "beam_joint_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "beam_joint_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention_layer(array_ops.concat([cell_output, top_encoder_parts], 2))",
                            "Call"
                        ],
                        [
                            "tf.verify_tensor_all_finite(beam_joint_attention, msg='Beam-Joint Attention failed as attention values are not finite.')",
                            "Call"
                        ]
                    ]
                },
                "msg": {
                    "value": "Beam-Joint Attention failed as attention values are not finite.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "verify_tensor_all_finite_1047": {
                "variable": {
                    "value": "alignments",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "alignments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention_mechanism(cell_output, previous_alignments=previous_alignments)",
                            "Call"
                        ],
                        [
                            "attention_mechanism(cell_output, previous_alignments=previous_alignments)",
                            "Call"
                        ],
                        [
                            "tf.verify_tensor_all_finite(alignments, msg='Beam-Joint Attention failed as alignments are not finite.')",
                            "Call"
                        ],
                        [
                            "self._probability_fn(score, previous_alignments)",
                            "Call"
                        ],
                        [
                            "self._probability_fn(score, previous_alignments)",
                            "Call"
                        ],
                        [
                            "self._probability_fn(score, previous_alignments)",
                            "Call"
                        ],
                        [
                            "self._probability_fn(score, previous_alignments)",
                            "Call"
                        ]
                    ]
                },
                "msg": {
                    "value": "Beam-Joint Attention failed as alignments are not finite.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "verify_tensor_all_finite_1048": {
                "variable": {
                    "value": "beam_joint_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "beam_joint_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_layer(beam_joint_attention)",
                            "Call"
                        ],
                        [
                            "tf.verify_tensor_all_finite(beam_joint_logits, msg='Beam-Joint Attention failed as logits are not finite.')",
                            "Call"
                        ]
                    ]
                },
                "msg": {
                    "value": "Beam-Joint Attention failed as logits are not finite.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_1050": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "array_ops.expand_dims(top_alignments.values, 2) * tf.nn.softmax(beam_joint_logits)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "verify_tensor_all_finite_1052": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(logits, name='logits')",
                            "Call"
                        ],
                        [
                            "output_layer(attention)",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_sum(array_ops.expand_dims(top_alignments.values, 2) * tf.nn.softmax(beam_joint_logits), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.verify_tensor_all_finite(logits, msg='Logits failed')",
                            "Call"
                        ],
                        [
                            "tf.log(logits + 1e-12)",
                            "Call"
                        ],
                        [
                            "tf.verify_tensor_all_finite(logits, msg='LogLogits failed')",
                            "Call"
                        ]
                    ]
                },
                "msg": {
                    "value": "Logits failed",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_1053": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits + 1e-12",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "verify_tensor_all_finite_1054": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(logits, name='logits')",
                            "Call"
                        ],
                        [
                            "output_layer(attention)",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_sum(array_ops.expand_dims(top_alignments.values, 2) * tf.nn.softmax(beam_joint_logits), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.verify_tensor_all_finite(logits, msg='Logits failed')",
                            "Call"
                        ],
                        [
                            "tf.log(logits + 1e-12)",
                            "Call"
                        ],
                        [
                            "tf.verify_tensor_all_finite(logits, msg='LogLogits failed')",
                            "Call"
                        ]
                    ]
                },
                "msg": {
                    "value": "LogLogits failed",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_1387": {
                "variable": {
                    "value": "cell_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cell_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.tile(array_ops.expand_dims(cell_output, 1), [1, temp_k, 1])",
                            "Call"
                        ],
                        [
                            "array_ops.identity(cell_output, name='checked_cell_output')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "checked_cell_output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_87": {
                "value": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "memory",
                    "type": "str",
                    "possible_values": []
                }
            },
            "rank_109": {
                "input": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_118": {
                "variable": {
                    "value": "seq_len_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "seq_len_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "array_ops.sequence_mask(memory_sequence_length, maxlen=array_ops.shape(nest.flatten(memory)[0])[1], dtype=nest.flatten(memory)[0].dtype)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(seq_len_mask, array_ops.concat((array_ops.shape(seq_len_mask), extra_ones), 0))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "array_ops.concat((array_ops.shape(seq_len_mask), extra_ones), 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_135": {
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.matmul(query, keys, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "array_ops.squeeze(score, [1])",
                            "Call"
                        ],
                        [
                            "g * score",
                            "BinOp"
                        ],
                        [
                            "score + score_bias",
                            "BinOp"
                        ],
                        [
                            "_luong_score(query, self._keys, self._scale)",
                            "Call"
                        ],
                        [
                            "_bahdanau_score(processed_query, self._keys, self._normalize)",
                            "Call"
                        ],
                        [
                            "_bahdanau_score(processed_query, self._keys, self._normalize)",
                            "Call"
                        ],
                        [
                            "_luong_score(query, self._keys, self._scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_199": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'LuongAttention'",
                            "Method Argument"
                        ],
                        [
                            "'BahdanauAttention'",
                            "Method Argument"
                        ],
                        [
                            "'BahdanauMonotonicAttention'",
                            "Method Argument"
                        ],
                        [
                            "'LuongMonotonicAttention'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_393": {
                "name_or_scope": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "default_name": {
                    "value": "luong_attention",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[query]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_429": {
                "input": {
                    "value": "keys",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rsqrt_444": {
                "x": {
                    "value": "math_ops.reduce_sum(math_ops.square(v))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_533": {
                "name_or_scope": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "default_name": {
                    "value": "bahdanau_attention",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[query]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cumsum_558": {
                "x": {
                    "value": "math_ops.log(clip_ops.clip_by_value(x, tiny, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "transpose_616": {
                "a": {
                    "value": "functional_ops.scan(lambda x, yz: array_ops.reshape(yz[0] * x + yz[1], (batch_size,)), [array_ops.transpose(shifted_1mp_choose_i), array_ops.transpose(previous_attention)], array_ops.zeros((batch_size,)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_680": {
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.matmul(query, keys, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "array_ops.squeeze(score, [1])",
                            "Call"
                        ],
                        [
                            "g * score",
                            "BinOp"
                        ],
                        [
                            "score + score_bias",
                            "BinOp"
                        ],
                        [
                            "_luong_score(query, self._keys, self._scale)",
                            "Call"
                        ],
                        [
                            "_bahdanau_score(processed_query, self._keys, self._normalize)",
                            "Call"
                        ],
                        [
                            "_bahdanau_score(processed_query, self._keys, self._normalize)",
                            "Call"
                        ],
                        [
                            "_luong_score(query, self._keys, self._scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_713": {
                "shape": {
                    "value": "(batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_803": {
                "name_or_scope": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "default_name": {
                    "value": "bahdanau_monotonic_attention",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[query]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_899": {
                "name_or_scope": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "default_name": {
                    "value": "luong_monotonic_attention",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[query]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_968": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(logits, name='logits')",
                            "Call"
                        ],
                        [
                            "output_layer(attention)",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_sum(array_ops.expand_dims(top_alignments.values, 2) * tf.nn.softmax(beam_joint_logits), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.verify_tensor_all_finite(logits, msg='Logits failed')",
                            "Call"
                        ],
                        [
                            "tf.log(logits + 1e-12)",
                            "Call"
                        ],
                        [
                            "tf.verify_tensor_all_finite(logits, msg='LogLogits failed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_992": {
                "values": {
                    "value": "[cell_output, context]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_1025": {
                "values": {
                    "value": "[cell_output, context]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_1210": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'LuongAttention'",
                            "Method Argument"
                        ],
                        [
                            "'BahdanauAttention'",
                            "Method Argument"
                        ],
                        [
                            "'BahdanauMonotonicAttention'",
                            "Method Argument"
                        ],
                        [
                            "'LuongMonotonicAttention'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "assert_equal_1232": {
                "x": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p_choose_i.shape[0].value or array_ops.shape(p_choose_i)[0]",
                            "BoolOp"
                        ]
                    ]
                },
                "y": {
                    "value": "attention_mechanism.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "message": {
                    "value": "error_message",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'When constructing AttentionWrapper %s: ' % self._base_name + 'Non-matching batch sizes between the memory (encoder output) and initial_cell_state.  Are you using the BeamSearchDecoder?  You may need to tile your initial state via the tf.contrib.seq2seq.tile_batch function with argument multiple=beam_width.'",
                            "BinOp"
                        ],
                        [
                            "'When calling zero_state of AttentionWrapper %s: ' % self._base_name + 'Non-matching batch sizes between the memory (encoder output) and the requested batch size.  Are you using the BeamSearchDecoder?  If so, make sure your encoder output has been tiled to beam_width via tf.contrib.seq2seq.tile_batch, and the batch_size= argument passed to zero_state is batch_size * beam_width.'",
                            "BinOp"
                        ],
                        [
                            "'When applying AttentionWrapper %s: ' % self.name + 'Non-matching batch sizes between the memory (encoder output) and the query (decoder output).  Are you using the BeamSearchDecoder?  You may need to tile your memory input via the tf.contrib.seq2seq.tile_batch function with argument multiple=beam_width.'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "name_scope_1300": {
                "name": {
                    "value": "type(self).__name__ + 'ZeroState'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "map_structure_1315": {
                "variable": {
                    "value": "cell_state",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda s: array_ops.identity(s, name='checked_cell_state')",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "cell_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._initial_cell_state",
                            "Attribute"
                        ],
                        [
                            "self._cell.zero_state(batch_size, dtype)",
                            "Call"
                        ],
                        [
                            "nest.map_structure(lambda s: array_ops.identity(s, name='checked_cell_state'), cell_state)",
                            "Call"
                        ],
                        [
                            "state.cell_state",
                            "Attribute"
                        ]
                    ]
                }
            },
            "control_dependencies_1385": {
                "control_inputs": {
                    "value": "self._batch_size_checks(cell_batch_size, error_message)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_106": {
                "input": {
                    "value": "memory_sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(memory_sequence_length, name='memory_sequence_length')",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_111": {
                "input": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "control_dependencies_115": {
                "control_inputs": {
                    "value": "[check_ops.assert_equal(seq_len_batch_size, m_batch_size, message=message)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assert_positive_132": {
                "x": {
                    "value": "memory_sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(memory_sequence_length, name='memory_sequence_length')",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "message": {
                    "value": "message",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'memory_sequence_length and memory tensor batch sizes do not match.'",
                            "str"
                        ],
                        [
                            "'All values in memory_sequence_length must greater than zero.'",
                            "str"
                        ]
                    ]
                }
            },
            "flatten_200": {
                "structure": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.map_structure(lambda m: ops.convert_to_tensor(m, name='memory'), memory)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_367": {
                "units": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keys.shape[2].value or array_ops.shape(keys)[2]",
                            "BoolOp"
                        ]
                    ]
                },
                "name": {
                    "value": "memory_layer",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_initializer_442": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_445": {
                "input_tensor": {
                    "value": "math_ops.square(v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_447": {
                "x": {
                    "value": "keys + processed_query + b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_449": {
                "x": {
                    "value": "keys + processed_query",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dense_505": {
                "units": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keys.shape[2].value or array_ops.shape(keys)[2]",
                            "BoolOp"
                        ]
                    ]
                },
                "name": {
                    "value": "query_layer",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dense_507": {
                "units": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keys.shape[2].value or array_ops.shape(keys)[2]",
                            "BoolOp"
                        ]
                    ]
                },
                "name": {
                    "value": "memory_layer",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_559": {
                "x": {
                    "value": "clip_ops.clip_by_value(x, tiny, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_609": {
                "input": {
                    "value": "p_choose_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(p_choose_i, name='p_choose_i')",
                            "Call"
                        ],
                        [
                            "p_choose_i * math_ops.cumsum(previous_attention, axis=1)",
                            "BinOp"
                        ],
                        [
                            "math_ops.sigmoid(score)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_612": {
                "shape": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "scan_616": {
                "fn": {
                    "value": "lambda x, yz: array_ops.reshape(yz[0] * x + yz[1], (batch_size,))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "[array_ops.transpose(shifted_1mp_choose_i), array_ops.transpose(previous_attention)]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "array_ops.zeros((batch_size,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cumsum_628": {
                "x": {
                    "value": "previous_attention / clip_ops.clip_by_value(cumprod_1mp_choose_i, 1e-10, 1.0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cumsum_634": {
                "x": {
                    "value": "previous_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(previous_attention, name='previous_attention')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_774": {
                "units": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keys.shape[2].value or array_ops.shape(keys)[2]",
                            "BoolOp"
                        ]
                    ]
                },
                "name": {
                    "value": "query_layer",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dense_776": {
                "units": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keys.shape[2].value or array_ops.shape(keys)[2]",
                            "BoolOp"
                        ]
                    ]
                },
                "name": {
                    "value": "memory_layer",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dense_870": {
                "units": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keys.shape[2].value or array_ops.shape(keys)[2]",
                            "BoolOp"
                        ]
                    ]
                },
                "name": {
                    "value": "query_layer",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dense_872": {
                "units": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keys.shape[2].value or array_ops.shape(keys)[2]",
                            "BoolOp"
                        ]
                    ]
                },
                "name": {
                    "value": "memory_layer",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_966": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(logits, name='logits')",
                            "Call"
                        ],
                        [
                            "output_layer(attention)",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_sum(array_ops.expand_dims(top_alignments.values, 2) * tf.nn.softmax(beam_joint_logits), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.verify_tensor_all_finite(logits, msg='Logits failed')",
                            "Call"
                        ],
                        [
                            "tf.log(logits + 1e-12)",
                            "Call"
                        ],
                        [
                            "tf.verify_tensor_all_finite(logits, msg='LogLogits failed')",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_1034": {
                "input": {
                    "value": "tf.expand_dims(tf.range(encoder_shape[0]), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, temp_k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1038": {
                "tensor": {
                    "value": "tf.concat([batch_tensor, indices_tensor], 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[encoder_shape[0], temp_k, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_1040": {
                "input": {
                    "value": "cell_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.tile(array_ops.expand_dims(cell_output, 1), [1, temp_k, 1])",
                            "Call"
                        ],
                        [
                            "array_ops.identity(cell_output, name='checked_cell_output')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_1042": {
                "values": {
                    "value": "[cell_output, top_encoder_parts]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_1172": {
                "values": {
                    "value": "[inputs, attention]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "map_structure_1227": {
                "variable": {
                    "value": "self._initial_cell_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda s: array_ops.identity(s, name='check_initial_cell_state')",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "initial_cell_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "TensorShape_1272": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_1313": {
                "control_inputs": {
                    "value": "self._batch_size_checks(batch_size, error_message)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_1377": {
                "input": {
                    "value": "cell_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.tile(array_ops.expand_dims(cell_output, 1), [1, temp_k, 1])",
                            "Call"
                        ],
                        [
                            "array_ops.identity(cell_output, name='checked_cell_output')",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_102": {
                "input": {
                    "value": "nest.flatten(memory)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "concat_120": {
                "values": {
                    "value": "(array_ops.shape(seq_len_mask), extra_ones)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_134": {
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.matmul(query, keys, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "array_ops.squeeze(score, [1])",
                            "Call"
                        ],
                        [
                            "g * score",
                            "BinOp"
                        ],
                        [
                            "score + score_bias",
                            "BinOp"
                        ],
                        [
                            "_luong_score(query, self._keys, self._scale)",
                            "Call"
                        ],
                        [
                            "_bahdanau_score(processed_query, self._keys, self._normalize)",
                            "Call"
                        ],
                        [
                            "_bahdanau_score(processed_query, self._keys, self._normalize)",
                            "Call"
                        ],
                        [
                            "_luong_score(query, self._keys, self._scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_208": {
                "input": {
                    "value": "self._keys",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_210": {
                "input": {
                    "value": "self._keys",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_445": {
                "x": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable_scope.get_variable('attention_v', [num_units], dtype=dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_559": {
                "t": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(x, name='x')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "tiny",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.finfo(x.dtype.as_numpy_dtype).tiny",
                            "Attribute"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_623": {
                "shape": {
                    "value": "(batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cumprod_640": {
                "x": {
                    "value": "1 - p_choose_i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "exclusive": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_1031": {
                "input": {
                    "value": "[alignments]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_1034": {
                "input": {
                    "value": "tf.range(encoder_shape[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_1038": {
                "values": {
                    "value": "[batch_tensor, indices_tensor]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_1050": {
                "input": {
                    "value": "top_alignments.values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_1050": {
                "logits": {
                    "value": "beam_joint_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_layer(beam_joint_attention)",
                            "Call"
                        ],
                        [
                            "tf.verify_tensor_all_finite(beam_joint_logits, msg='Beam-Joint Attention failed as logits are not finite.')",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_1190": {
                "units": {
                    "value": "attention_layer_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "attention_layer",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "flatten_1214": {
                "structure": {
                    "value": "initial_cell_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "control_dependencies_1225": {
                "control_inputs": {
                    "value": "self._batch_size_checks(state_batch_size, error_message)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_1321": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_103": {
                "structure": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.map_structure(lambda m: ops.convert_to_tensor(m, name='memory'), memory)",
                            "Call"
                        ]
                    ]
                }
            },
            "assert_equal_116": {
                "x": {
                    "value": "seq_len_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "memory_sequence_length.shape[0].value or array_ops.shape(memory_sequence_length)[0]",
                            "BoolOp"
                        ]
                    ]
                },
                "y": {
                    "value": "m_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m.shape[0].value or array_ops.shape(m)[0]",
                            "BoolOp"
                        ]
                    ]
                },
                "message": {
                    "value": "message",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'memory_sequence_length and memory tensor batch sizes do not match.'",
                            "str"
                        ],
                        [
                            "'All values in memory_sequence_length must greater than zero.'",
                            "str"
                        ]
                    ]
                }
            },
            "reshape_618": {
                "tensor": {
                    "value": "yz[0] * x + yz[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_620": {
                "a": {
                    "value": "shifted_1mp_choose_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.concat([array_ops.ones((batch_size, 1)), 1 - p_choose_i[:, :-1]], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_621": {
                "a": {
                    "value": "previous_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(previous_attention, name='previous_attention')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_631": {
                "t": {
                    "value": "cumprod_1mp_choose_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "safe_cumprod(1 - p_choose_i, axis=1, exclusive=True)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "shape_1217": {
                "input": {
                    "value": "final_state_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.flatten(initial_cell_state)[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "identity_1316": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "checked_cell_state",
                    "type": "str",
                    "possible_values": []
                }
            },
            "flatten_102": {
                "structure": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.map_structure(lambda m: ops.convert_to_tensor(m, name='memory'), memory)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_120": {
                "input": {
                    "value": "seq_len_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "array_ops.sequence_mask(memory_sequence_length, maxlen=array_ops.shape(nest.flatten(memory)[0])[1], dtype=nest.flatten(memory)[0].dtype)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(seq_len_mask, array_ops.concat((array_ops.shape(seq_len_mask), extra_ones), 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_1228": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "check_initial_cell_state",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TensorArray_1328": {
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.dtype",
                            "Attribute"
                        ],
                        [
                            "processed_query.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "gnmt_model.py": {
        "tensorflow": {
            "transpose_75": {
                "variable": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iterator.source",
                            "Attribute"
                        ],
                        [
                            "tf.transpose(source)",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_82": {
                "variable": {
                    "value": "encoder_emb_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iterator.source",
                            "Attribute"
                        ],
                        [
                            "tf.transpose(source)",
                            "Call"
                        ]
                    ]
                }
            },
            "dynamic_rnn_109": {
                "variable": {
                    "value": "(encoder_outputs, encoder_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "uni_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_helper.create_rnn_cell(unit_type=hparams.unit_type, num_units=hparams.num_units, num_layers=num_uni_layers, num_residual_layers=num_residual_layers, forget_bias=hparams.forget_bias, dropout=hparams.dropout, num_gpus=hparams.num_gpus, base_gpu=1, mode=self.mode, single_cell_fn=self.single_cell_fn)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "bi_encoder_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "iterator.source_sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "time_major": {
                    "value": "self.time_major",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_136": {
                "variable": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "encoder_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_77": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_op_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_231": {
                "name_or_scope": {
                    "value": "scope or 'multi_rnn_cell'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "variable_scope_234": {
                "name_or_scope": {
                    "value": "cell_0_attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_241": {
                "name_or_scope": {
                    "value": "'cell_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_250": {
                "values": {
                    "value": "[cur_state.h, new_attention_state.attention]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_253": {
                "values": {
                    "value": "[cur_state.h, attention_state.attention]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "inference.py": {
        "tensorflow": {
            "Session_133": {
                "graph": {
                    "value": "infer_model.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "utils.get_config_proto()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_192": {
                "graph": {
                    "value": "infer_model.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "utils.get_config_proto()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Rename_216": {
                "oldname": {
                    "value": "output_infer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inference_output_file",
                            "variable"
                        ],
                        [
                            "'%s_%d' % (inference_output_file, jobid)",
                            "BinOp"
                        ]
                    ]
                },
                "newname": {
                    "value": "output_infer_done",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'%s_done_%d' % (inference_output_file, jobid)",
                            "BinOp"
                        ]
                    ]
                },
                "overwrite": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GFile_45": {
                "name": {
                    "value": "output_infer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inference_output_file",
                            "variable"
                        ],
                        [
                            "'%s_%d' % (inference_output_file, jobid)",
                            "BinOp"
                        ]
                    ]
                },
                "mode": {
                    "value": "wb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Summary_61": {
                "variable": {
                    "value": "image_summ",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GFile_74": {
                "name": {
                    "value": "inference_input_file",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_223": {
                "name": {
                    "value": "final_output_infer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inference_output_file",
                            "variable"
                        ]
                    ]
                },
                "mode": {
                    "value": "wb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Remove_237": {
                "filename": {
                    "value": "worker_infer_done",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'%s_done_%d' % (inference_output_file, worker_id)",
                            "BinOp"
                        ],
                        [
                            "'%s_done_%d' % (inference_output_file, worker_id)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "GFile_63": {
                "name": {
                    "value": "image_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_infer_summary_prefix + str(decode_id) + '.png'",
                            "BinOp"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Exists_226": {
                "filename": {
                    "value": "worker_infer_done",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'%s_done_%d' % (inference_output_file, worker_id)",
                            "BinOp"
                        ],
                        [
                            "'%s_done_%d' % (inference_output_file, worker_id)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "GFile_231": {
                "name": {
                    "value": "worker_infer_done",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'%s_done_%d' % (inference_output_file, worker_id)",
                            "BinOp"
                        ],
                        [
                            "'%s_done_%d' % (inference_output_file, worker_id)",
                            "BinOp"
                        ]
                    ]
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "inference_test.py": {
        "tensorflow": {
            "main_215": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_temp_dir_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_temp_dir_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_temp_dir_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_temp_dir_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_temp_dir_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_temp_dir_201": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "tensorflow": {
            "size_88": {
                "variable": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.iterator.source_sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_98": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "trainable_variables_120": {
                "variable": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_163": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_370": {
                "variable": {
                    "value": "tgt_sos_id",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.tgt_vocab_table.lookup(tf.constant(hparams.sos))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_372": {
                "variable": {
                    "value": "tgt_eos_id",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.tgt_vocab_table.lookup(tf.constant(hparams.eos))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_511": {
                "variable": {
                    "value": "crossent",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "target_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.iterator.target_output",
                            "Attribute"
                        ],
                        [
                            "tf.transpose(target_output)",
                            "Call"
                        ],
                        [
                            "self.iterator.target_output",
                            "Attribute"
                        ],
                        [
                            "tf.transpose(target_output)",
                            "Call"
                        ],
                        [
                            "iterator.target_output",
                            "Attribute"
                        ],
                        [
                            "tf.transpose(target_output)",
                            "Call"
                        ],
                        [
                            "self.iterator.target_output",
                            "Attribute"
                        ],
                        [
                            "tf.transpose(target_output)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs.rnn_output",
                            "Attribute"
                        ],
                        [
                            "tf.no_op()",
                            "Call"
                        ],
                        [
                            "outputs.rnn_output",
                            "Attribute"
                        ]
                    ]
                }
            },
            "sequence_mask_513": {
                "variable": {
                    "value": "target_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "self.iterator.target_sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "max_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_max_time(target_output)",
                            "Call"
                        ],
                        [
                            "self.get_max_time(target_output)",
                            "Call"
                        ],
                        [
                            "self.get_max_time(target_output)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "logits.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_650": {
                "variable": {
                    "value": "(bi_outputs, bi_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "fw_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._build_encoder_cell(hparams, num_bi_layers, num_bi_residual_layers, base_gpu=base_gpu)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "bw_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._build_encoder_cell(hparams, num_bi_layers, num_bi_residual_layers, base_gpu=base_gpu + num_bi_layers)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": []
                },
                "time_major": {
                    "value": "self.time_major",
                    "type": "Attribute",
                    "possible_values": []
                },
                "swap_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_scope_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_117": {
                "variable": {
                    "value": "self.predict_count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.iterator.target_sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_125": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "hparams.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_142": {
                "variable": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.train_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                },
                "colocate_gradients_with_ops": {
                    "value": "hparams.colocate_gradients_with_ops",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_154": {
                "variable": {
                    "value": "self.train_summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[tf.summary.scalar('lr', self.learning_rate), tf.summary.scalar('train_loss', self.train_loss)] + gradient_norm_summary",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cond_187": {
                "pred": {
                    "value": "self.global_step < hparams.learning_rate_warmup_steps",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : inv_decay * self.learning_rate",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : self.learning_rate",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate_warump_cond",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cond_209": {
                "pred": {
                    "value": "self.global_step < start_decay_step",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : self.learning_rate",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.train.exponential_decay(self.learning_rate, self.global_step - start_decay_step, decay_steps, decay_factor, staircase=True)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate_decay_cond",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_max_353": {
                "variable": {
                    "value": "max_encoder_length",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "source_sequence_length",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "to_int32_354": {
                "variable": {
                    "value": "maximum_iterations",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.round(tf.to_float(max_encoder_length) * decoding_length_factor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_509": {
                "variable": {
                    "value": "target_output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "target_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.iterator.target_output",
                            "Attribute"
                        ],
                        [
                            "tf.transpose(target_output)",
                            "Call"
                        ],
                        [
                            "self.iterator.target_output",
                            "Attribute"
                        ],
                        [
                            "tf.transpose(target_output)",
                            "Call"
                        ],
                        [
                            "iterator.target_output",
                            "Attribute"
                        ],
                        [
                            "tf.transpose(target_output)",
                            "Call"
                        ],
                        [
                            "self.iterator.target_output",
                            "Attribute"
                        ],
                        [
                            "tf.transpose(target_output)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_516": {
                "variable": {
                    "value": "target_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "target_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(self.iterator.target_sequence_length, max_time, dtype=logits.dtype)",
                            "Call"
                        ],
                        [
                            "tf.transpose(target_weights)",
                            "Call"
                        ],
                        [
                            "tf.sequence_mask(self.iterator.target_sequence_length, max_time, dtype=logits.dtype)",
                            "Call"
                        ],
                        [
                            "tf.transpose(target_weights)",
                            "Call"
                        ],
                        [
                            "tf.sequence_mask(self.iterator.target_sequence_length, max_time, dtype=logits.dtype)",
                            "Call"
                        ],
                        [
                            "tf.transpose(target_weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_op_523": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_565": {
                "variable": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iterator.source",
                            "Attribute"
                        ],
                        [
                            "tf.transpose(source)",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_570": {
                "variable": {
                    "value": "encoder_emb_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iterator.source",
                            "Attribute"
                        ],
                        [
                            "tf.transpose(source)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_91": {
                "name_or_scope": {
                    "value": "scope or 'build_network'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "Dense_93": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "hparams.tgt_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "output_projection",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_133": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "to_float_185": {
                "x": {
                    "value": "warmup_steps - self.global_step",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_271": {
                "name_or_scope": {
                    "value": "scope or 'dynamic_seq2seq'",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "variable_scope_385": {
                "name_or_scope": {
                    "value": "decoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_400": {
                "variable": {
                    "value": "decoder_emb_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding_decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "target_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.iterator.target_input",
                            "Attribute"
                        ],
                        [
                            "tf.transpose(target_input)",
                            "Call"
                        ],
                        [
                            "iterator.target_input",
                            "Attribute"
                        ],
                        [
                            "tf.transpose(target_input)",
                            "Call"
                        ]
                    ]
                }
            },
            "fill_441": {
                "variable": {
                    "value": "start_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[self.batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "tgt_sos_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(self.tgt_vocab_table.lookup(tf.constant(hparams.sos)), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_518": {
                "input_tensor": {
                    "value": "crossent * target_weights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_519": {
                "x": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_567": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stop_gradient_574": {
                "variable": {
                    "value": "encoder_emb_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "encoder_emb_inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.embedding_encoder, source)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(encoder_emb_inp)",
                            "Call"
                        ]
                    ]
                }
            },
            "dynamic_rnn_585": {
                "variable": {
                    "value": "(encoder_outputs, encoder_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._build_encoder_cell(hparams, num_layers, num_residual_layers)",
                            "Call"
                        ],
                        [
                            "model_helper.create_rnn_cell(unit_type=hparams.unit_type, num_units=hparams.num_units, num_layers=num_layers, num_residual_layers=num_residual_layers, forget_bias=hparams.forget_bias, dropout=hparams.dropout, num_gpus=hparams.num_gpus, mode=self.mode, single_cell_fn=self.single_cell_fn)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "encoder_emb_inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.embedding_encoder, source)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(encoder_emb_inp)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "iterator.source_sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "time_major": {
                    "value": "self.time_major",
                    "type": "Attribute",
                    "possible_values": []
                },
                "swap_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_659": {
                "values": {
                    "value": "bi_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_92": {
                "name_or_scope": {
                    "value": "decoder/output_projection",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_105": {
                "input_tensor": {
                    "value": "self.iterator.source_sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_106": {
                "input_tensor": {
                    "value": "self.iterator.target_sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_134": {
                "name": {
                    "value": "lr",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_139": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exponential_decay_212": {
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "self.global_step - start_decay_step",
                    "type": "BinOp",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "decay_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(hparams.num_train_steps / 10)",
                            "Call"
                        ],
                        [
                            "hparams.decay_steps",
                            "Attribute"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "decay_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "hparams.decay_factor",
                            "Attribute"
                        ]
                    ]
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "round_354": {
                "x": {
                    "value": "tf.to_float(max_encoder_length) * decoding_length_factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_370": {
                "value": {
                    "value": "hparams.sos",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_372": {
                "value": {
                    "value": "hparams.eos",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_397": {
                "variable": {
                    "value": "target_input",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "target_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.iterator.target_input",
                            "Attribute"
                        ],
                        [
                            "tf.transpose(target_input)",
                            "Call"
                        ],
                        [
                            "iterator.target_input",
                            "Attribute"
                        ],
                        [
                            "tf.transpose(target_input)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_398": {
                "variable": {
                    "value": "target_output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "target_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.iterator.target_output",
                            "Attribute"
                        ],
                        [
                            "tf.transpose(target_output)",
                            "Call"
                        ],
                        [
                            "self.iterator.target_output",
                            "Attribute"
                        ],
                        [
                            "tf.transpose(target_output)",
                            "Call"
                        ],
                        [
                            "iterator.target_output",
                            "Attribute"
                        ],
                        [
                            "tf.transpose(target_output)",
                            "Call"
                        ],
                        [
                            "self.iterator.target_output",
                            "Attribute"
                        ],
                        [
                            "tf.transpose(target_output)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_404": {
                "variable": {
                    "value": "decoder_emb_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[decoder_emb_inp, tf.expand_dims(tf.cast(target_input, tf.float32), 2)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_op_476": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_486": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_279": {
                "device_name": {
                    "value": "model_helper.get_device_str(num_layers - 1, num_gpus)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sequence_mask_289": {
                "variable": {
                    "value": "target_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "self.iterator.target_sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "max_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_max_time(target_output)",
                            "Call"
                        ],
                        [
                            "self.get_max_time(target_output)",
                            "Call"
                        ],
                        [
                            "self.get_max_time(target_output)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "logits.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_434": {
                "device_name": {
                    "value": "model_helper.get_device_str(device_id, num_gpus)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_int64_113": {
                "x": {
                    "value": "self.sample_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_155": {
                "name": {
                    "value": "lr",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_156": {
                "name": {
                    "value": "train_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.train_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_286": {
                "variable": {
                    "value": "target_output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "target_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.iterator.target_output",
                            "Attribute"
                        ],
                        [
                            "tf.transpose(target_output)",
                            "Call"
                        ],
                        [
                            "self.iterator.target_output",
                            "Attribute"
                        ],
                        [
                            "tf.transpose(target_output)",
                            "Call"
                        ],
                        [
                            "iterator.target_output",
                            "Attribute"
                        ],
                        [
                            "tf.transpose(target_output)",
                            "Call"
                        ],
                        [
                            "self.iterator.target_output",
                            "Attribute"
                        ],
                        [
                            "tf.transpose(target_output)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_287": {
                "variable": {
                    "value": "target_input",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "target_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.iterator.target_input",
                            "Attribute"
                        ],
                        [
                            "tf.transpose(target_input)",
                            "Call"
                        ],
                        [
                            "iterator.target_input",
                            "Attribute"
                        ],
                        [
                            "tf.transpose(target_input)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_292": {
                "variable": {
                    "value": "target_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "target_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(self.iterator.target_sequence_length, max_time, dtype=logits.dtype)",
                            "Call"
                        ],
                        [
                            "tf.transpose(target_weights)",
                            "Call"
                        ],
                        [
                            "tf.sequence_mask(self.iterator.target_sequence_length, max_time, dtype=logits.dtype)",
                            "Call"
                        ],
                        [
                            "tf.transpose(target_weights)",
                            "Call"
                        ],
                        [
                            "tf.sequence_mask(self.iterator.target_sequence_length, max_time, dtype=logits.dtype)",
                            "Call"
                        ],
                        [
                            "tf.transpose(target_weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "sequence_mask_303": {
                "variable": {
                    "value": "target_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "self.iterator.target_sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "max_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_max_time(target_output)",
                            "Call"
                        ],
                        [
                            "self.get_max_time(target_output)",
                            "Call"
                        ],
                        [
                            "self.get_max_time(target_output)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "logits.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_355": {
                "x": {
                    "value": "max_encoder_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(source_sequence_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_301": {
                "variable": {
                    "value": "target_output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "target_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.iterator.target_output",
                            "Attribute"
                        ],
                        [
                            "tf.transpose(target_output)",
                            "Call"
                        ],
                        [
                            "self.iterator.target_output",
                            "Attribute"
                        ],
                        [
                            "tf.transpose(target_output)",
                            "Call"
                        ],
                        [
                            "iterator.target_output",
                            "Attribute"
                        ],
                        [
                            "tf.transpose(target_output)",
                            "Call"
                        ],
                        [
                            "self.iterator.target_output",
                            "Attribute"
                        ],
                        [
                            "tf.transpose(target_output)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_305": {
                "variable": {
                    "value": "target_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "target_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(self.iterator.target_sequence_length, max_time, dtype=logits.dtype)",
                            "Call"
                        ],
                        [
                            "tf.transpose(target_weights)",
                            "Call"
                        ],
                        [
                            "tf.sequence_mask(self.iterator.target_sequence_length, max_time, dtype=logits.dtype)",
                            "Call"
                        ],
                        [
                            "tf.transpose(target_weights)",
                            "Call"
                        ],
                        [
                            "tf.sequence_mask(self.iterator.target_sequence_length, max_time, dtype=logits.dtype)",
                            "Call"
                        ],
                        [
                            "tf.transpose(target_weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_404": {
                "input": {
                    "value": "tf.cast(target_input, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_404": {
                "x": {
                    "value": "target_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.iterator.target_input",
                            "Attribute"
                        ],
                        [
                            "tf.transpose(target_input)",
                            "Call"
                        ],
                        [
                            "iterator.target_input",
                            "Attribute"
                        ],
                        [
                            "tf.transpose(target_input)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model_helper.py": {
        "tensorflow": {
            "Graph_69": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_128": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_175": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_by_global_norm_396": {
                "variable": {
                    "value": "(clipped_gradients, gradient_norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "max_gradient_norm",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "latest_checkpoint_417": {
                "variable": {
                    "value": "latest_ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TextLineDataset_75": {
                "variable": {
                    "value": "src_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "src_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'%s.%s' % (hparams.train_prefix, hparams.src)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "TextLineDataset_76": {
                "variable": {
                    "value": "tgt_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "tgt_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'%s.%s' % (hparams.train_prefix, hparams.tgt)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "placeholder_77": {
                "variable": {
                    "value": "skip_count_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_133": {
                "variable": {
                    "value": "src_file_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_134": {
                "variable": {
                    "value": "tgt_file_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TextLineDataset_135": {
                "variable": {
                    "value": "src_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "src_file_placeholder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=(), dtype=tf.string)",
                            "Call"
                        ]
                    ]
                }
            },
            "TextLineDataset_136": {
                "variable": {
                    "value": "tgt_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "tgt_file_placeholder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=(), dtype=tf.string)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_185": {
                "variable": {
                    "value": "src_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_186": {
                "variable": {
                    "value": "batch_size_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fixed_size_partitioner_253": {
                "variable": {
                    "value": "partitioner",
                    "type": "variable",
                    "possible_values": []
                },
                "num_shards": {
                    "value": "num_partitions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BasicLSTMCell_288": {
                "variable": {
                    "value": "single_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                },
                "forget_bias": {
                    "value": "forget_bias",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DropoutWrapper_306": {
                "variable": {
                    "value": "single_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "single_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.BasicLSTMCell(num_units, forget_bias=forget_bias)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.GRUCell(num_units)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell=single_cell, input_keep_prob=1.0 - dropout)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.LayerNormBasicLSTMCell(num_units, forget_bias=forget_bias, layer_norm=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.ResidualWrapper(single_cell)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DeviceWrapper(single_cell, device_str)",
                            "Call"
                        ],
                        [
                            "single_cell_fn(unit_type=unit_type, num_units=num_units, forget_bias=forget_bias, dropout=dropout, mode=mode, residual_connection=i >= num_layers - num_residual_layers, device_str=get_device_str(i + base_gpu, num_gpus))",
                            "Call"
                        ]
                    ]
                },
                "input_keep_prob": {
                    "value": "1.0 - dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ResidualWrapper_313": {
                "variable": {
                    "value": "single_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "single_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.BasicLSTMCell(num_units, forget_bias=forget_bias)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.GRUCell(num_units)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell=single_cell, input_keep_prob=1.0 - dropout)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.LayerNormBasicLSTMCell(num_units, forget_bias=forget_bias, layer_norm=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.ResidualWrapper(single_cell)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DeviceWrapper(single_cell, device_str)",
                            "Call"
                        ],
                        [
                            "single_cell_fn(unit_type=unit_type, num_units=num_units, forget_bias=forget_bias, dropout=dropout, mode=mode, residual_connection=i >= num_layers - num_residual_layers, device_str=get_device_str(i + base_gpu, num_gpus))",
                            "Call"
                        ]
                    ]
                }
            },
            "DeviceWrapper_318": {
                "variable": {
                    "value": "single_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "single_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.BasicLSTMCell(num_units, forget_bias=forget_bias)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.GRUCell(num_units)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell=single_cell, input_keep_prob=1.0 - dropout)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.LayerNormBasicLSTMCell(num_units, forget_bias=forget_bias, layer_norm=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.ResidualWrapper(single_cell)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DeviceWrapper(single_cell, device_str)",
                            "Call"
                        ],
                        [
                            "single_cell_fn(unit_type=unit_type, num_units=num_units, forget_bias=forget_bias, dropout=dropout, mode=mode, residual_connection=i >= num_layers - num_residual_layers, device_str=get_device_str(i + base_gpu, num_gpus))",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device_str",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "random_uniform_initializer_28": {
                "minval": {
                    "value": "-init_weight",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "init_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "container_71": {
                "container_name": {
                    "value": "scope or 'train'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "container_130": {
                "container_name": {
                    "value": "scope or 'eval'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "container_179": {
                "container_name": {
                    "value": "scope or 'infer'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "variable_scope_255": {
                "name_or_scope": {
                    "value": "scope or 'embeddings'",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "partitioner": {
                    "value": "partitioner",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.fixed_size_partitioner(num_partitions)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_263": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding_share",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[src_vocab_size, src_embed_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRUCell_293": {
                "variable": {
                    "value": "single_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "MultiRNNCell_391": {
                "cells": {
                    "value": "cell_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "_cell_list(unit_type=unit_type, num_units=num_units, num_layers=num_layers, num_residual_layers=num_residual_layers, forget_bias=forget_bias, dropout=dropout, mode=mode, num_gpus=num_gpus, base_gpu=base_gpu, single_cell_fn=single_cell_fn)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_398": {
                "name": {
                    "value": "grad_norm",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "gradient_norm",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_400": {
                "name": {
                    "value": "clipped_gradient",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.global_norm(clipped_gradients)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tables_initializer_408": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "glorot_normal_31": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_100": {
                "device_name": {
                    "value": "model_device_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "extra_args.model_device_fn",
                            "Attribute"
                        ]
                    ]
                }
            },
            "get_variable_269": {
                "variable": {
                    "value": "embedding_encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding_encoder",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[src_vocab_size, src_embed_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_273": {
                "variable": {
                    "value": "embedding_decoder",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding_decoder",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tgt_vocab_size, tgt_embed_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "global_norm_400": {
                "t_list": {
                    "value": "clipped_gradients",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "global_variables_initializer_422": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_423": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "glorot_uniform_34": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_268": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "str",
                    "possible_values": []
                },
                "partitioner": {
                    "value": "partitioner",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.fixed_size_partitioner(num_partitions)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_272": {
                "name_or_scope": {
                    "value": "decoder",
                    "type": "str",
                    "possible_values": []
                },
                "partitioner": {
                    "value": "partitioner",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.fixed_size_partitioner(num_partitions)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model_test.py": {
        "tensorflow": {
            "ConfigProto_348": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_local_cluster_363": {
                "variable": {
                    "value": "(workers, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_ps": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "create_local_cluster_420": {
                "variable": {
                    "value": "(workers, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_ps": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "create_local_cluster_490": {
                "variable": {
                    "value": "(workers, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_ps": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "create_local_cluster_558": {
                "variable": {
                    "value": "(workers, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_ps": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "create_local_cluster_632": {
                "variable": {
                    "value": "(workers, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_ps": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "create_local_cluster_702": {
                "variable": {
                    "value": "(workers, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_ps": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "create_local_cluster_781": {
                "variable": {
                    "value": "(workers, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_ps": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "create_local_cluster_860": {
                "variable": {
                    "value": "(workers, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_ps": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "main_1012": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_308": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_309": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_324": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_343": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_378": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_382": {
                "variable": {
                    "value": "m_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_400": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_406": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_447": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_451": {
                "variable": {
                    "value": "m_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_470": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_476": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_510": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_515": {
                "variable": {
                    "value": "m_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_537": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_544": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_579": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_584": {
                "variable": {
                    "value": "m_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_611": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_618": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_654": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_659": {
                "variable": {
                    "value": "m_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_681": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_688": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_727": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_732": {
                "variable": {
                    "value": "m_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_758": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_765": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_811": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_816": {
                "variable": {
                    "value": "m_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_838": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_845": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_892": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_897": {
                "variable": {
                    "value": "m_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_915": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_920": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_342": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_379": {
                "target": {
                    "value": "worker.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "self._get_session_config()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_388": {
                "variable": {
                    "value": "last_enc_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "encoder/rnn/basic_lstm_cell/kernel",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_390": {
                "variable": {
                    "value": "last_dec_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder/basic_lstm_cell/kernel",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_401": {
                "target": {
                    "value": "worker.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "self._get_session_config()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_407": {
                "target": {
                    "value": "worker.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "self._get_session_config()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_448": {
                "target": {
                    "value": "worker.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "self._get_session_config()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_456": {
                "variable": {
                    "value": "last_enc_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_459": {
                "variable": {
                    "value": "last_dec_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder/multi_rnn_cell/cell_3/basic_lstm_cell/kernel",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_471": {
                "target": {
                    "value": "worker.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "self._get_session_config()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_477": {
                "target": {
                    "value": "worker.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "self._get_session_config()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_511": {
                "target": {
                    "value": "worker.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "self._get_session_config()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_522": {
                "variable": {
                    "value": "last_enc_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "encoder/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_524": {
                "variable": {
                    "value": "last_dec_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/kernel",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_526": {
                "variable": {
                    "value": "att_layer_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder/attention/attention_layer/kernel",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_538": {
                "target": {
                    "value": "worker.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "self._get_session_config()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_545": {
                "target": {
                    "value": "worker.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "self._get_session_config()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_580": {
                "target": {
                    "value": "worker.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "self._get_session_config()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_591": {
                "variable": {
                    "value": "last_enc_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "encoder/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_593": {
                "variable": {
                    "value": "last_dec_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/kernel",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_595": {
                "variable": {
                    "value": "att_layer_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder/attention/attention_layer/kernel",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_612": {
                "target": {
                    "value": "worker.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "self._get_session_config()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_619": {
                "target": {
                    "value": "worker.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "self._get_session_config()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_655": {
                "target": {
                    "value": "worker.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "self._get_session_config()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_666": {
                "variable": {
                    "value": "last_enc_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "encoder/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_668": {
                "variable": {
                    "value": "last_dec_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/kernel",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_670": {
                "variable": {
                    "value": "att_layer_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder/attention/attention_layer/kernel",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_682": {
                "target": {
                    "value": "worker.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "self._get_session_config()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_689": {
                "target": {
                    "value": "worker.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "self._get_session_config()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_728": {
                "target": {
                    "value": "worker.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "self._get_session_config()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_739": {
                "variable": {
                    "value": "last_enc_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "encoder/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_741": {
                "variable": {
                    "value": "last_dec_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/kernel",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_743": {
                "variable": {
                    "value": "att_layer_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder/attention/attention_layer/kernel",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_759": {
                "target": {
                    "value": "worker.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "self._get_session_config()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_766": {
                "target": {
                    "value": "worker.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "self._get_session_config()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_812": {
                "target": {
                    "value": "worker.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "self._get_session_config()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_821": {
                "variable": {
                    "value": "last_enc_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "encoder/rnn/multi_rnn_cell/cell_3/basic_lstm_cell/kernel",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_823": {
                "variable": {
                    "value": "last_dec_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder/attention/multi_rnn_cell/cell_3/basic_lstm_cell/kernel",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_825": {
                "variable": {
                    "value": "mem_layer_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder/memory_layer/kernel",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_839": {
                "target": {
                    "value": "worker.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "self._get_session_config()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_846": {
                "target": {
                    "value": "worker.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "self._get_session_config()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_893": {
                "target": {
                    "value": "worker.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "self._get_session_config()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_901": {
                "variable": {
                    "value": "last_enc_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "encoder/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_903": {
                "variable": {
                    "value": "last_dec_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder/multi_rnn_cell/cell_3/basic_lstm_cell/kernel",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_905": {
                "variable": {
                    "value": "mem_layer_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder/memory_layer/kernel",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_916": {
                "target": {
                    "value": "worker.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "self._get_session_config()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_921": {
                "target": {
                    "value": "worker.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "self._get_session_config()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_387": {
                "name_or_scope": {
                    "value": "dynamic_seq2seq",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_455": {
                "name_or_scope": {
                    "value": "dynamic_seq2seq",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_520": {
                "name_or_scope": {
                    "value": "dynamic_seq2seq",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_589": {
                "name_or_scope": {
                    "value": "dynamic_seq2seq",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_664": {
                "name_or_scope": {
                    "value": "dynamic_seq2seq",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_737": {
                "name_or_scope": {
                    "value": "dynamic_seq2seq",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_820": {
                "name_or_scope": {
                    "value": "dynamic_seq2seq",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_900": {
                "name_or_scope": {
                    "value": "dynamic_seq2seq",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "nmt.py": {
        "tensorflow": {
            "run_549": {
                "main": {
                    "value": "main",
                    "type": "variable",
                    "possible_values": []
                },
                "argv": {
                    "value": "[sys.argv[0]] + unparsed",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Exists_425": {
                "filename": {
                    "value": "hparams.out_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MakeDirs_427": {
                "dirname": {
                    "value": "hparams.out_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MakeDirs_434": {
                "dirname": {
                    "value": "best_metric_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(hparams.out_dir, 'best_' + metric)",
                            "Call"
                        ]
                    ]
                }
            },
            "Exists_502": {
                "filename": {
                    "value": "out_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flags.out_dir",
                            "Attribute"
                        ]
                    ]
                }
            },
            "MakeDirs_502": {
                "dirname": {
                    "value": "out_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flags.out_dir",
                            "Attribute"
                        ]
                    ]
                }
            },
            "latest_checkpoint_519": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "out_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flags.out_dir",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Exists_525": {
                "filename": {
                    "value": "trans_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flags.inference_output_file",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "train.py": {
        "tensorflow": {
            "GFile_188": {
                "variable": {
                    "value": "log_f",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "log_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(out_dir, 'log_%d' % time.time())",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "a",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_197": {
                "variable": {
                    "value": "train_sess",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target_session",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                },
                "config": {
                    "value": "config_proto",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_config_proto(log_device_placement=log_device_placement)",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "train_model.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_199": {
                "variable": {
                    "value": "eval_sess",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target_session",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                },
                "config": {
                    "value": "config_proto",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_config_proto(log_device_placement=log_device_placement)",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "eval_model.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_201": {
                "variable": {
                    "value": "infer_sess",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target_session",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                },
                "config": {
                    "value": "config_proto",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_config_proto(log_device_placement=log_device_placement)",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "infer_model.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FileWriter_210": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(out_dir, summary_name)",
                    "type": "Call",
                    "possible_values": []
                },
                "graph": {
                    "value": "train_model.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/common_test_utils.py": {
        "tensorflow": {
            "constant_118": {
                "variable": {
                    "value": "tgt_vocab_mapping",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[hparams.sos, hparams.eos, 'a', 'b', 'c']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_117": {
                "value": {
                    "value": "[hparams.eos, 'a', 'b', 'c', 'd']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_125": {
                "value": {
                    "value": "['a a b b c', 'a b b']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_129": {
                "value": {
                    "value": "['a b c b c', 'a b c b']",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "utils/evaluation_utils.py": {
        "tensorflow": {
            "GFile_86": {
                "name": {
                    "value": "trans_file",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_101": {
                "name": {
                    "value": "ref_file",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_107": {
                "name": {
                    "value": "summarization_file",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_118": {
                "name": {
                    "value": "label_file",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_74": {
                "name": {
                    "value": "reference_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ref_files",
                            "variable"
                        ]
                    ]
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_119": {
                "name": {
                    "value": "pred_file",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "utils/evaluation_utils_test.py": {
        "tensorflow": {
            "main_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/iterator_utils.py": {
        "tensorflow": {
            "cast_40": {
                "variable": {
                    "value": "src_eos_id",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "src_vocab_table.lookup(tf.constant(eos))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_100": {
                "variable": {
                    "value": "src_eos_id",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "src_vocab_table.lookup(tf.constant(eos))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_101": {
                "variable": {
                    "value": "tgt_sos_id",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tgt_vocab_table.lookup(tf.constant(sos))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_102": {
                "variable": {
                    "value": "tgt_eos_id",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tgt_vocab_table.lookup(tf.constant(eos))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_191": {
                "variable": {
                    "value": "bucket_id",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "src_len // bucket_width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tgt_len // bucket_width",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_40": {
                "value": {
                    "value": "eos",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_47": {
                "x": {
                    "value": "src_vocab_table.lookup(src)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_100": {
                "value": {
                    "value": "eos",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_101": {
                "value": {
                    "value": "sos",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_102": {
                "value": {
                    "value": "eos",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "logical_and_119": {
                "x": {
                    "value": "tf.size(src) > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.size(tgt) > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "to_int64_192": {
                "x": {
                    "value": "tf.minimum(num_buckets, bucket_id)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_by_window_198": {
                "key_func": {
                    "value": "key_func",
                    "type": "variable",
                    "possible_values": []
                },
                "reduce_func": {
                    "value": "reduce_func",
                    "type": "variable",
                    "possible_values": []
                },
                "window_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "string_split_41": {
                "source": {
                    "value": "[src]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reverse_49": {
                "tensor": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "size_51": {
                "input": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_139": {
                "x": {
                    "value": "src_vocab_table.lookup(src)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_140": {
                "x": {
                    "value": "tgt_vocab_table.lookup(tgt)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_145": {
                "values": {
                    "value": "([tgt_sos_id], tgt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_146": {
                "values": {
                    "value": "(tgt, [tgt_eos_id])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "size_150": {
                "input": {
                    "value": "tgt_in",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "minimum_192": {
                "x": {
                    "value": "num_buckets",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "bucket_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(src_len // bucket_width, tgt_len // bucket_width)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorShape_60": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_61": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "string_split_113": {
                "source": {
                    "value": "[tgt]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "size_119": {
                "input": {
                    "value": "tgt",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reverse_133": {
                "tensor": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_162": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_163": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_164": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_165": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_166": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "utils/iterator_utils_test.py": {
        "tensorflow": {
            "tables_initializer_58": {
                "variable": {
                    "value": "table_initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_138": {
                "variable": {
                    "value": "table_initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_189": {
                "variable": {
                    "value": "skip_count",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tables_initializer_203": {
                "variable": {
                    "value": "table_initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_295": {
                "variable": {
                    "value": "table_initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "main_323": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_33": {
                "value": {
                    "value": "['a', 'b', 'c', 'eos', 'sos']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_35": {
                "value": {
                    "value": "['f e a g', 'c c a', 'd', 'c a']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_37": {
                "value": {
                    "value": "['c c', 'a b', '', 'b c']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_111": {
                "value": {
                    "value": "['a', 'b', 'c', 'eos', 'sos']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_113": {
                "value": {
                    "value": "['c c a', 'f e a g', 'd', 'c a']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_115": {
                "value": {
                    "value": "['a b', 'c c', '', 'b c']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_176": {
                "value": {
                    "value": "['a', 'b', 'c', 'eos', 'sos']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_178": {
                "value": {
                    "value": "['c a', 'c c a', 'd', 'f e a g']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_180": {
                "value": {
                    "value": "['b c', 'a b', '', 'c c']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_278": {
                "value": {
                    "value": "['a', 'b', 'c', 'eos', 'sos']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_280": {
                "value": {
                    "value": "['c c a', 'c a', 'd', 'f e a g']",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "utils/misc_utils.py": {
        "tensorflow": {
            "Summary_132": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag=tag, simple_value=value)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ConfigProto_139": {
                "variable": {
                    "value": "config_proto",
                    "type": "variable",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "log_device_placement",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "allow_soft_placement": {
                    "value": "allow_soft_placement",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Exists_86": {
                "filename": {
                    "value": "hparams_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'hparams')",
                            "Call"
                        ],
                        [
                            "os.path.join(out_dir, 'hparams')",
                            "Call"
                        ]
                    ]
                }
            },
            "Exists_105": {
                "filename": {
                    "value": "hparams_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Print_125": {
                "input_": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s.decode('utf-8')",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[tf.shape(s), s]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "msg + ' '",
                    "type": "BinOp",
                    "possible_values": []
                },
                "summarize": {
                    "value": "summarize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GFile_107": {
                "name": {
                    "value": "hparams_path",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_117": {
                "name": {
                    "value": "hparams_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'hparams')",
                            "Call"
                        ],
                        [
                            "os.path.join(out_dir, 'hparams')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "wb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_125": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s.decode('utf-8')",
                            "Call"
                        ]
                    ]
                }
            },
            "GFile_88": {
                "name": {
                    "value": "hparams_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'hparams')",
                            "Call"
                        ],
                        [
                            "os.path.join(out_dir, 'hparams')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "utils/misc_utils_test.py": {
        "tensorflow": {
            "main_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/nmt_utils.py": {
        "tensorflow": {
            "Exists_79": {
                "filename": {
                    "value": "trans_file",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GFile_49": {
                "name": {
                    "value": "trans_file",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "wb",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "utils/vocab_utils.py": {
        "tensorflow": {
            "Exists_40": {
                "filename": {
                    "value": "vocab_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_vocab_file",
                            "variable"
                        ]
                    ]
                }
            },
            "GFile_43": {
                "name": {
                    "value": "vocab_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_vocab_file",
                            "variable"
                        ]
                    ]
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_63": {
                "name": {
                    "value": "new_vocab_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(out_dir, os.path.basename(vocab_file))",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "wb",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "utils/vocab_utils_test.py": {
        "tensorflow": {
            "main_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_temp_dir_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_temp_dir_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GFile_37": {
                "name": {
                    "value": "vocab_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(vocab_dir, 'vocab_file')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "wb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_52": {
                "name": {
                    "value": "new_vocab_file",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    }
}