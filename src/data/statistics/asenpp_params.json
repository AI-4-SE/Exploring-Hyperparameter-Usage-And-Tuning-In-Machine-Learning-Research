{
    "main.py": {
        "torch": {
            "device_23": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cfg.DEVICE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_42": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.resume",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "modules/data/build.py": {
        "torch": {
            "DataLoader_11": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BaseDataSet(cfg, 'TRAIN')",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "triplet_collate_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "TripletSampler(cfg)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.DATA.NUM_WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_19": {
                "variable": {
                    "value": "valid_query_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BaseDataSet(cfg, 'VALID')",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "image_collate_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "ImageSampler(cfg, cfg.DATA.GROUNDTRUTH.QUERY.VALID)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.DATA.NUM_WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_27": {
                "variable": {
                    "value": "valid_candidate_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BaseDataSet(cfg, 'VALID')",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "image_collate_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "ImageSampler(cfg, cfg.DATA.GROUNDTRUTH.CANDIDATE.VALID)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.DATA.NUM_WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_39": {
                "variable": {
                    "value": "test_query_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BaseDataSet(cfg, test_on)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "image_collate_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "ImageSampler(cfg, cfg.DATA.GROUNDTRUTH.QUERY[test_on])",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.DATA.NUM_WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_47": {
                "variable": {
                    "value": "test_candidate_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BaseDataSet(cfg, test_on)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "image_collate_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "ImageSampler(cfg, cfg.DATA.GROUNDTRUTH.CANDIDATE[test_on])",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.DATA.NUM_WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "modules/data/datasets/datasets.py": {
        "torch": {}
    },
    "modules/data/samplers/samplers.py": {
        "torch": {}
    },
    "modules/engine/evaluation.py": {
        "torch": {
            "stack_71": {
                "variable": {
                    "value": "gx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gt(i) for i in x]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_80": {
                "variable": {
                    "value": "lx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[lt(i, mask) for (i, mask) in zip(x, attmap)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.sqrt(torch.tensor(beta)) * nn.functional.normalize(g_feats, p=2, dim=1), torch.sqrt(torch.tensor(1 - beta)) * nn.functional.normalize(l_feats, p=2, dim=1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_77": {
                "input": {
                    "value": "g_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_85": {
                "input": {
                    "value": "torch.tensor(beta)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_85": {
                "input": {
                    "value": "g_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_86": {
                "input": {
                    "value": "torch.tensor(1 - beta)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_86": {
                "input": {
                    "value": "l_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_85": {
                "data": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.6",
                            "Method Argument"
                        ],
                        [
                            "0.6",
                            "Method Argument"
                        ],
                        [
                            "0.6",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_86": {
                "data": {
                    "value": "1 - beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "modules/engine/trainer.py": {
        "torch": {
            "cosine_similarity_81": {
                "variable": {
                    "value": "sim_x_ins",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "gx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([gt(i) for i in x], dim=0).to(device)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "lx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([lt(i, mask) for (i, mask) in zip(x, gx_attnmap)], dim=0).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cosine_similarity_82": {
                "variable": {
                    "value": "sim_p_ins",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "gp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([gt(i) for i in p], dim=0).to(device)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "lp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([lt(i, mask) for (i, mask) in zip(p, gp_attnmap)], dim=0).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cosine_similarity_83": {
                "variable": {
                    "value": "sim_n_ins",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "gn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([gt(i) for i in n], dim=0).to(device)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "ln",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([lt(i, mask) for (i, mask) in zip(n, gn_attnmap)], dim=0).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_25": {
                "variable": {
                    "value": "gx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gt(i) for i in x]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_26": {
                "variable": {
                    "value": "gp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gt(i) for i in p]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_27": {
                "variable": {
                    "value": "gn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gt(i) for i in n]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_43": {
                "variable": {
                    "value": "lx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[lt(i, mask) for (i, mask) in zip(x, gx_attnmap)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_44": {
                "variable": {
                    "value": "lp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[lt(i, mask) for (i, mask) in zip(p, gp_attnmap)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_45": {
                "variable": {
                    "value": "ln",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[lt(i, mask) for (i, mask) in zip(n, gn_attnmap)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_86": {
                "input": {
                    "value": "torch.clamp(1.0 - sim_n_ins, min=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_84": {
                "input": {
                    "value": "torch.clamp(1.0 - sim_x_ins, min=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_85": {
                "input": {
                    "value": "torch.clamp(1.0 - sim_p_ins, min=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_86": {
                "input": {
                    "value": "1.0 - sim_n_ins",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_84": {
                "input": {
                    "value": "1.0 - sim_x_ins",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_85": {
                "input": {
                    "value": "1.0 - sim_p_ins",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "modules/loss/build.py": {
        "torch": {
            "device_13": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cfg.DEVICE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MarginRankingLoss_14": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "margin": {
                    "value": "self.margin",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cosine_similarity_17": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "ref",
                    "type": "variable",
                    "possible_values": []
                },
                "x2": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cosine_similarity_18": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "ref",
                    "type": "variable",
                    "possible_values": []
                },
                "x2": {
                    "value": "neg",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "modules/model/model.py": {
        "torch": {
            "ModuleDict_10": {
                "variable": {
                    "value": "self.choices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "{'global': nn.ModuleDict({'attrnet': AttrEmbedding(cfg.DATA.NUM_ATTRIBUTES, cfg.MODEL.ATTRIBUTE.EMBED_SIZE), 'basenet': get_model(cfg.MODEL.GLOBAL.BACKBONE.NAME, pretrained=True), 'attnnet': AttnEmbedding(cfg.MODEL.ATTRIBUTE.EMBED_SIZE, cfg.MODEL.GLOBAL.BACKBONE.EMBED_SIZE, cfg.MODEL.GLOBAL.ATTENTION.SPATIAL.COMMON_EMBED_SIZE, cfg.MODEL.GLOBAL.ATTENTION.CHANNEL.REDUCTION_RATE, cfg.MODEL.EMBED_SIZE, cfg.MODEL.GLOBAL.ATTENTION.SPATIAL.ENABLE, cfg.MODEL.GLOBAL.ATTENTION.CHANNEL.ENABLE)})}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Embedding_61": {
                "variable": {
                    "value": "self.attr_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_attrs",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_107": {
                "variable": {
                    "value": "self.feature_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "img_embed_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tanh_112": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_113": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Softmax_114": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_115": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_116": {
                "variable": {
                    "value": "self.aapool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_146": {
                "variable": {
                    "value": "attmap",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attmap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.spatial_attn(x, a)",
                            "Call"
                        ],
                        [
                            "a * x",
                            "BinOp"
                        ],
                        [
                            "torch.sum(attmap, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.div(attmap, x.size(1) ** 0.5)",
                            "Call"
                        ],
                        [
                            "attmap.view(attmap.size(0), attmap.size(1), -1)",
                            "Call"
                        ],
                        [
                            "self.softmax(attmap)",
                            "Call"
                        ],
                        [
                            "attmap.view(attmap.size(0), attmap.size(1), x.size(2), x.size(3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "div_147": {
                "variable": {
                    "value": "attmap",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attmap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.spatial_attn(x, a)",
                            "Call"
                        ],
                        [
                            "a * x",
                            "BinOp"
                        ],
                        [
                            "torch.sum(attmap, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.div(attmap, x.size(1) ** 0.5)",
                            "Call"
                        ],
                        [
                            "attmap.view(attmap.size(0), attmap.size(1), -1)",
                            "Call"
                        ],
                        [
                            "self.softmax(attmap)",
                            "Call"
                        ],
                        [
                            "attmap.view(attmap.size(0), attmap.size(1), x.size(2), x.size(3))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x.size(1) ** 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_158": {
                "variable": {
                    "value": "cnt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, a)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_83": {
                "variable": {
                    "value": "self.attr_transform1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "attr_embed_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "common_embed_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_87": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "img_embed_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "common_embed_size",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_94": {
                "variable": {
                    "value": "self.attr_transform2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "attr_embed_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "attr_embed_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_98": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "img_embed_size + attr_embed_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "img_embed_size // reduction_rate",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_102": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "img_embed_size // reduction_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "img_embed_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleDict_11": {
                "modules": {
                    "value": "{'attrnet': AttrEmbedding(cfg.DATA.NUM_ATTRIBUTES, cfg.MODEL.ATTRIBUTE.EMBED_SIZE), 'basenet': get_model(cfg.MODEL.GLOBAL.BACKBONE.NAME, pretrained=True), 'attnnet': AttnEmbedding(cfg.MODEL.ATTRIBUTE.EMBED_SIZE, cfg.MODEL.GLOBAL.BACKBONE.EMBED_SIZE, cfg.MODEL.GLOBAL.ATTENTION.SPATIAL.COMMON_EMBED_SIZE, cfg.MODEL.GLOBAL.ATTENTION.CHANNEL.REDUCTION_RATE, cfg.MODEL.EMBED_SIZE, cfg.MODEL.GLOBAL.ATTENTION.SPATIAL.ENABLE, cfg.MODEL.GLOBAL.ATTENTION.CHANNEL.ENABLE)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "ModuleDict_28": {
                "modules": {
                    "value": "{'attrnet': self.choices['global']['attrnet'], 'basenet': get_model(cfg.MODEL.LOCAL.BACKBONE.NAME, pretrained=True), 'attnnet': AttnEmbedding(cfg.MODEL.ATTRIBUTE.EMBED_SIZE, cfg.MODEL.LOCAL.BACKBONE.EMBED_SIZE, cfg.MODEL.LOCAL.ATTENTION.SPATIAL.COMMON_EMBED_SIZE, cfg.MODEL.LOCAL.ATTENTION.CHANNEL.REDUCTION_RATE, cfg.MODEL.EMBED_SIZE, cfg.MODEL.LOCAL.ATTENTION.SPATIAL.ENABLE, cfg.MODEL.LOCAL.ATTENTION.CHANNEL.ENABLE)}",
                    "type": "Dict",
                    "possible_values": []
                }
            }
        }
    },
    "modules/model/resnet.py": {
        "torch": {
            "Conv2d_10": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_23": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_52": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_55": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_57": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_58": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_92": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_93": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_94": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_99": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_101": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_114": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_126": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_115": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_117": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "modules/solver/build.py": {
        "torch": {
            "StepLR_22": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(torch.optim, cfg.SOLVER.OPTIMIZER_NAME)(parameters, lr=cfg.SOLVER.BASE_LR)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "cfg.SOLVER.STEP_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "cfg.SOLVER.DECAY_RATE",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "modules/utils/checkpoint.py": {
        "torch": {
            "save_8": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(path, filename)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}