{
    "deepdrr/network_segmentation.py": {
        "torch": {
            "Conv3d_67": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nchan",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nchan",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_85": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_93": {
                "variable": {
                    "value": "x16",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, x, x, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv3d_103": {
                "variable": {
                    "value": "self.down_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inChans",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outChans",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2 * inChans",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_123": {
                "variable": {
                    "value": "self.up_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inChans",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outChans // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout3d_127": {
                "variable": {
                    "value": "self.do2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_138": {
                "variable": {
                    "value": "xcat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out, skipxdo)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv3d_148": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inChans",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outChans",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2 * inChans",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv3d_150": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "outChans",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2 * inChans",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outChans",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2 * inChans",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ELU_41": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "PReLU_43": {
                "num_parameters": {
                    "value": "nchan",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "batch_norm_58": {
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": []
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout3d_109": {
                "variable": {
                    "value": "self.do1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout3d_131": {
                "variable": {
                    "value": "self.do1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_95": {
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn1(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.relu1(torch.add(out, x16))",
                            "Call"
                        ],
                        [
                            "self.do1(down)",
                            "Call"
                        ],
                        [
                            "self.ops(out)",
                            "Call"
                        ],
                        [
                            "self.relu2(torch.add(out, down))",
                            "Call"
                        ],
                        [
                            "self.do1(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.up_conv(out)))",
                            "Call"
                        ],
                        [
                            "self.ops(xcat)",
                            "Call"
                        ],
                        [
                            "self.relu2(torch.add(out, xcat))",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.softmax(out, dim=1)",
                            "Call"
                        ],
                        [
                            "self.up_tr256(out256, out128)",
                            "Call"
                        ],
                        [
                            "self.up_tr128(out, out64)",
                            "Call"
                        ],
                        [
                            "self.up_tr64(out, out32)",
                            "Call"
                        ],
                        [
                            "self.up_tr32(out, out16)",
                            "Call"
                        ],
                        [
                            "self.out_tr(out)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x16",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat((x, x, x, x), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_116": {
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn1(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.relu1(torch.add(out, x16))",
                            "Call"
                        ],
                        [
                            "self.do1(down)",
                            "Call"
                        ],
                        [
                            "self.ops(out)",
                            "Call"
                        ],
                        [
                            "self.relu2(torch.add(out, down))",
                            "Call"
                        ],
                        [
                            "self.do1(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.up_conv(out)))",
                            "Call"
                        ],
                        [
                            "self.ops(xcat)",
                            "Call"
                        ],
                        [
                            "self.relu2(torch.add(out, xcat))",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.softmax(out, dim=1)",
                            "Call"
                        ],
                        [
                            "self.up_tr256(out256, out128)",
                            "Call"
                        ],
                        [
                            "self.up_tr128(out, out64)",
                            "Call"
                        ],
                        [
                            "self.up_tr64(out, out32)",
                            "Call"
                        ],
                        [
                            "self.up_tr32(out, out16)",
                            "Call"
                        ],
                        [
                            "self.out_tr(out)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "down",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.down_conv(x)))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_140": {
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn1(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.relu1(torch.add(out, x16))",
                            "Call"
                        ],
                        [
                            "self.do1(down)",
                            "Call"
                        ],
                        [
                            "self.ops(out)",
                            "Call"
                        ],
                        [
                            "self.relu2(torch.add(out, down))",
                            "Call"
                        ],
                        [
                            "self.do1(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.up_conv(out)))",
                            "Call"
                        ],
                        [
                            "self.ops(xcat)",
                            "Call"
                        ],
                        [
                            "self.relu2(torch.add(out, xcat))",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.softmax(out, dim=1)",
                            "Call"
                        ],
                        [
                            "self.up_tr256(out256, out128)",
                            "Call"
                        ],
                        [
                            "self.up_tr128(out, out64)",
                            "Call"
                        ],
                        [
                            "self.up_tr64(out, out32)",
                            "Call"
                        ],
                        [
                            "self.up_tr32(out, out16)",
                            "Call"
                        ],
                        [
                            "self.out_tr(out)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "xcat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat((out, skipxdo), 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "deepdrr/projector/projector.py": {
        "torch": {}
    },
    "deepdrr/segmentation.py": {
        "torch": {
            "set_device_20": {
                "device": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_25": {
                "f": {
                    "value": "self.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_80": {
                "variable": {
                    "value": "curren_block_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "presegmentation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros((4, blocksize, blocksize, blocksize), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_82": {
                "variable": {
                    "value": "curren_block_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "curren_block_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.from_numpy(presegmentation).cuda()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(curren_block_tensor, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}