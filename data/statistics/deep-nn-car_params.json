{
    "CNNTraining/Keras/PerformanceCalculator.py": {
        "sklearn": {
            "mean_squared_error_18": {
                "variable": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "data1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "data2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "CNNTraining/Keras/train.py": {
        "sklearn": {}
    },
    "CNNTraining/TF/PerformanceCalculator.py": {
        "sklearn": {
            "mean_squared_error_18": {
                "variable": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "data1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "data2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "AutonomousDriving/Autonomous.py": {
        "tensorflow": {
            "InteractiveSession_330": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_331": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "AutonomousDriving/model.py": {
        "tensorflow": {
            "placeholder_23": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 66, 200, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_24": {
                "variable": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_32": {
                "variable": {
                    "value": "h_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(x_image, W_conv1, 2) + b_conv1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_38": {
                "variable": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(h_conv1, W_conv2, 2) + b_conv2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_44": {
                "variable": {
                    "value": "h_conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(h_conv2, W_conv3, 2) + b_conv3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_50": {
                "variable": {
                    "value": "h_conv4",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(h_conv3, W_conv4, 1) + b_conv4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_56": {
                "variable": {
                    "value": "h_conv5",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(h_conv4, W_conv5, 1) + b_conv5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_57": {
                "variable": {
                    "value": "h_conv5_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_conv5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(conv2d(h_conv4, W_conv5, 1) + b_conv5)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1152]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_63": {
                "variable": {
                    "value": "h_fc2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(h_conv5_flat, W_fc2, name='matmul1') + b_fc2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_69": {
                "variable": {
                    "value": "h_fc3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(h_fc2, W_fc3) + b_fc3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_75": {
                "variable": {
                    "value": "h_fc4",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(h_fc3, W_fc4) + b_fc4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_81": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.atan(tf.matmul(h_fc4, W_fc5) + b_fc5)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_16": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_13": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_17": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_20": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, 66, 200, 3])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "atan_81": {
                "x": {
                    "value": "tf.matmul(h_fc4, W_fc5) + b_fc5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_63": {
                "a": {
                    "value": "h_conv5_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(h_conv5, [-1, 1152])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable('fc2', [1152, 100])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "matmul1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_69": {
                "a": {
                    "value": "h_fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(h_conv5_flat, W_fc2, name='matmul1') + b_fc2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable('fc3', [100, 50])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_75": {
                "a": {
                    "value": "h_fc3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(h_fc2, W_fc3) + b_fc3)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable('fc4', [50, 10])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_81": {
                "a": {
                    "value": "h_fc4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(h_fc3, W_fc4) + b_fc4)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable('fc5', [10, 1])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "CNNTraining/TF/model.py": {
        "tensorflow": {
            "placeholder_24": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 66, 200, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_25": {
                "variable": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_33": {
                "variable": {
                    "value": "h_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(x_image, W_conv1, 2) + b_conv1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_39": {
                "variable": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(h_conv1, W_conv2, 2) + b_conv2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_45": {
                "variable": {
                    "value": "h_conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(h_conv2, W_conv3, 2) + b_conv3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_51": {
                "variable": {
                    "value": "h_conv4",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(h_conv3, W_conv4, 1) + b_conv4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_57": {
                "variable": {
                    "value": "h_conv5",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(h_conv4, W_conv5, 1) + b_conv5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_58": {
                "variable": {
                    "value": "h_conv5_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_conv5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(conv2d(h_conv4, W_conv5, 1) + b_conv5)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1152]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_64": {
                "variable": {
                    "value": "h_fc2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(h_conv5_flat, W_fc2) + b_fc2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_70": {
                "variable": {
                    "value": "h_fc3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(h_fc2, W_fc3) + b_fc3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_76": {
                "variable": {
                    "value": "h_fc4",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(h_fc3, W_fc4) + b_fc4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_83": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.atan(tf.matmul(h_fc4, W_fc5) + b_fc5)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_17": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_12": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_18": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_21": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, 66, 200, 3])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "atan_83": {
                "x": {
                    "value": "tf.matmul(h_fc4, W_fc5) + b_fc5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_64": {
                "a": {
                    "value": "h_conv5_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(h_conv5, [-1, 1152])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable('fc2', [1152, 100])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_70": {
                "a": {
                    "value": "h_fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(h_conv5_flat, W_fc2) + b_fc2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable('fc3', [100, 50])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_76": {
                "a": {
                    "value": "h_fc3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(h_fc2, W_fc3) + b_fc3)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable('fc4', [50, 10])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_83": {
                "a": {
                    "value": "h_fc4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(h_fc3, W_fc4) + b_fc4)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable('fc5', [10, 1])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "CNNTraining/TF/test.py": {
        "tensorflow": {
            "InteractiveSession_29": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_30": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CNNTraining/TF/train.py": {
        "tensorflow": {
            "InteractiveSession_46": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_squared_error_47": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "model.y_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "model.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_49": {
                "variable": {
                    "value": "train_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Saver_50": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_59": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "DataCollection/Data-collection-using-mouse/DeepNNCar/DeepNNCar.py": {
        "tensorflow": {
            "InteractiveSession_191": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_192": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "DataCollection/Data-collection-using-mouse/DeepNNCar/model.py": {
        "tensorflow": {
            "placeholder_20": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 66, 200, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_21": {
                "variable": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_29": {
                "variable": {
                    "value": "h_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(x_image, W_conv1, 2) + b_conv1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_35": {
                "variable": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(h_conv1, W_conv2, 2) + b_conv2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_41": {
                "variable": {
                    "value": "h_conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(h_conv2, W_conv3, 2) + b_conv3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_47": {
                "variable": {
                    "value": "h_conv4",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(h_conv3, W_conv4, 1) + b_conv4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_53": {
                "variable": {
                    "value": "h_conv5",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(h_conv4, W_conv5, 1) + b_conv5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_54": {
                "variable": {
                    "value": "h_conv5_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_conv5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(conv2d(h_conv4, W_conv5, 1) + b_conv5)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1152]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_60": {
                "variable": {
                    "value": "h_fc2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(h_conv5_flat, W_fc2) + b_fc2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_66": {
                "variable": {
                    "value": "h_fc3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(h_fc2, W_fc3) + b_fc3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_72": {
                "variable": {
                    "value": "h_fc4",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(h_fc3, W_fc4) + b_fc4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_79": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.atan(tf.matmul(h_fc4, W_fc5) + b_fc5)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_13": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_8": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_14": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_17": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, 66, 200, 3])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "atan_79": {
                "x": {
                    "value": "tf.matmul(h_fc4, W_fc5) + b_fc5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_60": {
                "a": {
                    "value": "h_conv5_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(h_conv5, [-1, 1152])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable('fc2', [1152, 100])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_66": {
                "a": {
                    "value": "h_fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(h_conv5_flat, W_fc2) + b_fc2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable('fc3', [100, 50])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_72": {
                "a": {
                    "value": "h_fc3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(h_fc2, W_fc3) + b_fc3)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable('fc4', [50, 10])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_79": {
                "a": {
                    "value": "h_fc4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(h_fc3, W_fc4) + b_fc4)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable('fc5', [10, 1])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "DataCollection/Data-collection-using-xbox/Server/Server.py": {
        "tensorflow": {
            "InteractiveSession_206": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_207": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "DeepNNCar/DaveIIModel.py": {
        "tensorflow": {
            "convert_to_tensor_30": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "range_31": {
                "variable": {
                    "value": "x_range",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_32": {
                "variable": {
                    "value": "x_range",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(43)",
                            "Call"
                        ],
                        [
                            "tf.dtypes.cast(x_range, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_47": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "softargmax(y_true)",
                            "Call"
                        ],
                        [
                            "tf.dtypes.cast(indices, tf.int32)",
                            "Call"
                        ],
                        [
                            "softargmax(y_true)",
                            "Call"
                        ],
                        [
                            "tf.dtypes.cast(indices, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_48": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.dtypes.cast(y_pred, tf.float32)",
                            "Call"
                        ],
                        [
                            "lam - y_pred",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(y_pred)",
                            "Call"
                        ],
                        [
                            "tf.dtypes.cast(y_pred, tf.float32)",
                            "Call"
                        ],
                        [
                            "K.log(1 + K.exp(lam - y_pred))",
                            "Call"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_49": {
                "variable": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.dtypes.cast(y_true, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.dtypes.cast(y_true, tf.float32)",
                            "Call"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_51": {
                "variable": {
                    "value": "full_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[row_ind, indices]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_52": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.dtypes.cast(y_pred, tf.float32)",
                            "Call"
                        ],
                        [
                            "lam - y_pred",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(y_pred)",
                            "Call"
                        ],
                        [
                            "tf.dtypes.cast(y_pred, tf.float32)",
                            "Call"
                        ],
                        [
                            "K.log(1 + K.exp(lam - y_pred))",
                            "Call"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "full_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([row_ind, indices], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([row_ind, indices], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_54": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.dtypes.cast(y_pred, tf.float32)",
                            "Call"
                        ],
                        [
                            "lam - y_pred",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(y_pred)",
                            "Call"
                        ],
                        [
                            "tf.dtypes.cast(y_pred, tf.float32)",
                            "Call"
                        ],
                        [
                            "K.log(1 + K.exp(lam - y_pred))",
                            "Call"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_55": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "lam - d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_63": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "softargmax(y_true)",
                            "Call"
                        ],
                        [
                            "tf.dtypes.cast(indices, tf.int32)",
                            "Call"
                        ],
                        [
                            "softargmax(y_true)",
                            "Call"
                        ],
                        [
                            "tf.dtypes.cast(indices, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_64": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.dtypes.cast(y_pred, tf.float32)",
                            "Call"
                        ],
                        [
                            "lam - y_pred",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(y_pred)",
                            "Call"
                        ],
                        [
                            "tf.dtypes.cast(y_pred, tf.float32)",
                            "Call"
                        ],
                        [
                            "K.log(1 + K.exp(lam - y_pred))",
                            "Call"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_65": {
                "variable": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.dtypes.cast(y_true, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.dtypes.cast(y_true, tf.float32)",
                            "Call"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_67": {
                "variable": {
                    "value": "full_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[row_ind, indices]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_68": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.dtypes.cast(y_pred, tf.float32)",
                            "Call"
                        ],
                        [
                            "lam - y_pred",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(y_pred)",
                            "Call"
                        ],
                        [
                            "tf.dtypes.cast(y_pred, tf.float32)",
                            "Call"
                        ],
                        [
                            "K.log(1 + K.exp(lam - y_pred))",
                            "Call"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "full_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([row_ind, indices], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([row_ind, indices], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_76": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(e, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_77": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "K.shape(y_true)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_33": {
                "input_tensor": {
                    "value": "tf.nn.softmax(x * beta) * x_range",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_76": {
                "x": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.equal(K.argmax(y_true, axis=1), K.argmin(y_pred, axis=1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_33": {
                "logits": {
                    "value": "x * beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "DeepNNCar/DeepNNCar.py": {
        "tensorflow": {}
    }
}