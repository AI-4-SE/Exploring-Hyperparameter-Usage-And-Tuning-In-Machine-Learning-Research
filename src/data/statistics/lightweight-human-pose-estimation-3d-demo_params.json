{
    "models/with_mobilenet.py": {
        "torch": {
            "Sequential_11": {
                "variable": {
                    "value": "self.trunk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_dw_no_bn(out_channels, out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_27": {
                "variable": {
                    "value": "self.trunk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(num_channels, num_channels, bn=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "variable": {
                    "value": "self.heatmaps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(num_channels, 512, kernel_size=1, padding=0, bn=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "self.pafs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(num_channels, 512, kernel_size=1, padding=0, bn=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "self.trunk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(out_channels, out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "variable": {
                    "value": "self.trunk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "RefinementStageBlock(in_channels, out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_73": {
                "variable": {
                    "value": "self.heatmaps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(out_channels, out_channels, kernel_size=1, padding=0, bn=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_77": {
                "variable": {
                    "value": "self.pafs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(out_channels, out_channels, kernel_size=1, padding=0, bn=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_92": {
                "variable": {
                    "value": "self.trunk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "RefinementStageBlock(in_channels, mid_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_96": {
                "variable": {
                    "value": "self.feature_maps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(mid_channels, mid_channels, kernel_size=1, padding=0, bn=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_111": {
                "variable": {
                    "value": "self.bottleneck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(in_channels, in_channels // ratio, kernel_size=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_129": {
                "variable": {
                    "value": "self.stem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResBlock(in_channels + num_2d_heatmaps, in_channels, ratio, should_align=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_150": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(3, 32, stride=2, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_167": {
                "variable": {
                    "value": "self.refinement_stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_174": {
                "variable": {
                    "value": "self.fake_conv_heatmaps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_heatmaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "19",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_heatmaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "19",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_175": {
                "variable": {
                    "value": "self.fake_conv_heatmaps.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_heatmaps, num_heatmaps, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_176": {
                "variable": {
                    "value": "self.fake_conv_pafs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_pafs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "38",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_pafs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "38",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_177": {
                "variable": {
                    "value": "self.fake_conv_pafs.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_pafs, num_pafs, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_140": {
                "tensors": {
                    "value": "[x, feature_maps_2d]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_192": {
                "tensors": {
                    "value": "[stages_output[-2], stages_output[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_175": {
                "*size": {
                    "value": "num_heatmaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "19",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "num_heatmaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "19",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_177": {
                "*size": {
                    "value": "num_pafs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "38",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "num_pafs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "38",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_186": {
                "tensors": {
                    "value": "[backbone_features, stages_output[-2], stages_output[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "modules/conv.py": {
        "torch": {
            "Sequential_10": {
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_14": {
                "*args": {
                    "value": "nn.Conv2d(in_channels, in_channels, kernel_size, stride, padding, dilation=dilation, groups=in_channels, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "*args": {
                    "value": "nn.Conv2d(in_channels, in_channels, kernel_size, stride, padding, dilation=dilation, groups=in_channels, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_5": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_15": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_16": {
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ELU_28": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ELU_31": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_7": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_9": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "modules/inference_engine_pytorch.py": {
        "torch": {
            "load_22": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_35": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "normalized_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "InferenceEnginePyTorch._normalize(img, self.img_mean, self.img_scale)",
                            "Call"
                        ],
                        [
                            "(img.astype(np.float32) - img_mean) * img_scale",
                            "BinOp"
                        ]
                    ]
                }
            },
            "permute_35": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_35": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_17": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/convert_to_onnx.py": {
        "torch": {
            "randn_10": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "448",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_25": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/convert_to_trt.py": {
        "torch": {
            "randn_12": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_31": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_14": {
                "obj": {
                    "value": "net_trt.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_name",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}