{
    "ltr/actors/tracking.py": {
        "torch": {
            "isinf_159": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_iou + loss_target_classifier + loss_test_init_clf + loss_test_iter_clf",
                            "BinOp"
                        ],
                        [
                            "loss_bb_ce + loss_clf_ce + loss_clf_ce_init + loss_clf_ce_iter + loss_target_classifier + loss_test_init_clf + loss_test_iter_clf",
                            "BinOp"
                        ]
                    ]
                }
            },
            "isnan_159": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_iou + loss_target_classifier + loss_test_init_clf + loss_test_iter_clf",
                            "BinOp"
                        ],
                        [
                            "loss_bb_ce + loss_clf_ce + loss_clf_ce_init + loss_clf_ce_iter + loss_target_classifier + loss_test_init_clf + loss_test_iter_clf",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "ltr/admin/loading.py": {
        "torch": {
            "load_112": {
                "variable": {
                    "value": "checkpoint_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_125": {
                "variable": {
                    "value": "checkpoint_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "ltr/admin/multigpu.py": {
        "torch": {}
    },
    "ltr/admin/tensorboard.py": {
        "torch": {
            "SummaryWriter_16": {
                "variable": {
                    "value": "tb_info_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(self.directory, 'info')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SummaryWriter_13": {
                "log_dir": {
                    "value": "os.path.join(self.directory, name)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "ltr/data/bounding_box_utils.py": {
        "torch": {
            "log_17": {
                "variable": {
                    "value": "sz_rel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bb[..., 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_24": {
                "variable": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bb[..., 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_53": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(bboxes, dtype=torch.float32, device=mask.device)",
                            "Call"
                        ],
                        [
                            "bboxes.reshape(batch_shape + (4,))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_18": {
                "tensors": {
                    "value": "(c_rel, sz_rel)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_30": {
                "tensors": {
                    "value": "(tl, sz)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_79": {
                "variable": {
                    "value": "bb",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "bb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[mx.min(), my.min(), mx.max(), my.max()] if len(mx) > 0 and len(my) > 0 else [0, 0, 0, 0]",
                            "IfExp"
                        ],
                        [
                            "[mx.min(), my.min(), mx.max(), my.max()] if len(mx) > 0 and len(my) > 0 else [0, 0, 0, 0]",
                            "IfExp"
                        ],
                        [
                            "torch.tensor(bb, dtype=torch.float32, device=mask.device)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1 + 0.5 * s, s), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, s), dim=-1)",
                            "Call"
                        ],
                        [
                            "bb",
                            "Method Argument"
                        ],
                        [
                            "bb",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_63": {
                "tensors": {
                    "value": "(x1 + 0.5 * s, s)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_65": {
                "tensors": {
                    "value": "(x1, s)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_87": {
                "variable": {
                    "value": "bb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1 + 0.5 * s, s)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_89": {
                "variable": {
                    "value": "bb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, s)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "ltr/data/loader.py": {
        "torch": {
            "stack_31": {
                "tensors": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch",
                            "Method Argument"
                        ],
                        [
                            "batch",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "batch[0].new(storage)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "batch[0].new(storage)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_82": {
                "tensors": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch",
                            "Method Argument"
                        ],
                        [
                            "batch",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "batch[0].new(storage)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "batch[0].new(storage)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_43": {
                "tensors": {
                    "value": "[torch.from_numpy(b) for b in batch]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_94": {
                "tensors": {
                    "value": "[torch.from_numpy(b) for b in batch]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_43": {
                "ndarray": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_94": {
                "ndarray": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "ltr/data/processing.py": {
        "torch": {
            "stack_9": {
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_83": {
                "tensors": {
                    "value": "(jittered_center - 0.5 * jittered_size, jittered_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_100": {
                "variable": {
                    "value": "proposals",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_proposals, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_101": {
                "variable": {
                    "value": "gt_iou",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_proposals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.proposal_params['boxes_per_frame']",
                            "Subscript"
                        ],
                        [
                            "self.proposal_params['boxes_per_frame']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_198": {
                "tensors": {
                    "value": "(jittered_center - 0.5 * jittered_size, jittered_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_283": {
                "tensors": {
                    "value": "(jittered_center - 0.5 * jittered_size, jittered_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_392": {
                "tensors": {
                    "value": "(jittered_center - 0.5 * jittered_size, jittered_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_409": {
                "variable": {
                    "value": "proposals",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_proposals, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_410": {
                "variable": {
                    "value": "gt_iou",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_proposals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.proposal_params['boxes_per_frame']",
                            "Subscript"
                        ],
                        [
                            "self.proposal_params['boxes_per_frame']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_544": {
                "tensors": {
                    "value": "(jittered_center - 0.5 * jittered_size, jittered_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_79": {
                "input": {
                    "value": "torch.randn(2) * self.scale_jitter_factor[mode]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_80": {
                "data": {
                    "value": "self.center_jitter_factor[mode]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_194": {
                "input": {
                    "value": "torch.randn(2) * self.scale_jitter_factor[mode]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_195": {
                "data": {
                    "value": "self.center_jitter_factor[mode]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_279": {
                "input": {
                    "value": "torch.randn(2) * self.scale_jitter_factor[mode]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_280": {
                "data": {
                    "value": "self.center_jitter_factor[mode]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_388": {
                "input": {
                    "value": "torch.randn(2) * self.scale_jitter_factor[mode]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_389": {
                "data": {
                    "value": "self.center_jitter_factor[mode]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_540": {
                "input": {
                    "value": "torch.randn(2) * self.scale_jitter_factor[mode]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_541": {
                "data": {
                    "value": "self.center_jitter_factor[mode]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randn_79": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_81": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_194": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_196": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_279": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_281": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_388": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_390": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_540": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_542": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "ltr/data/processing_utils.py": {
        "torch": {
            "cat_87": {
                "variable": {
                    "value": "box_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(box_out_center - 0.5 * box_out_wh, box_out_wh)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_383": {
                "variable": {
                    "value": "tl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reference[:, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_384": {
                "variable": {
                    "value": "br",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reference[:, :2] + reference[:, 2:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_470": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-(sz - 1) / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "(sz + 1) / 2 + end_pad",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_470": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_471": {
                "variable": {
                    "value": "gauss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1.0 / (2 * sigma ** 2) * (k - center.reshape(-1, 1)) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tensor_495": {
                "variable": {
                    "value": "image_sz",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_496": {
                "variable": {
                    "value": "feat_sz",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randint_554": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "num_components",
                    "type": "variable",
                    "possible_values": [
                        [
                            "std.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "std.shape[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "high": {
                    "value": "(num_samples,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_578": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "num_components",
                    "type": "variable",
                    "possible_values": [
                        [
                            "std.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "std.shape[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "high": {
                    "value": "(num_samples,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_601": {
                "variable": {
                    "value": "center_std",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_602": {
                "variable": {
                    "value": "sz_std",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_603": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[center_std, center_std, sz_std, sz_std]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_50": {
                "variable": {
                    "value": "mask_crop_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_crop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask[y1 + y1_pad:y2 - y2_pad, x1 + x1_pad:x2 - x2_pad]",
                            "Subscript"
                        ],
                        [
                            "mask[y1 + y1_pad:y2 - y2_pad, x1 + x1_pad:x2 - x2_pad]",
                            "Subscript"
                        ],
                        [
                            "mask[y1 + y1_pad:y2 - y2_pad, x1 + x1_pad:x2 - x2_pad]",
                            "Subscript"
                        ]
                    ]
                },
                "pad": {
                    "value": "(x1_pad, x2_pad, y1_pad, y2_pad)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_223": {
                "variable": {
                    "value": "mask_crop_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_crop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask[y1 + y1_pad:y2 - y2_pad, x1 + x1_pad:x2 - x2_pad]",
                            "Subscript"
                        ],
                        [
                            "mask[y1 + y1_pad:y2 - y2_pad, x1 + x1_pad:x2 - x2_pad]",
                            "Subscript"
                        ],
                        [
                            "mask[y1 + y1_pad:y2 - y2_pad, x1 + x1_pad:x2 - x2_pad]",
                            "Subscript"
                        ]
                    ]
                },
                "pad": {
                    "value": "(x1_pad, x2_pad, y1_pad, y2_pad)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_272": {
                "variable": {
                    "value": "mask_crop_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_crop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask[y1 + y1_pad:y2 - y2_pad, x1 + x1_pad:x2 - x2_pad]",
                            "Subscript"
                        ],
                        [
                            "mask[y1 + y1_pad:y2 - y2_pad, x1 + x1_pad:x2 - x2_pad]",
                            "Subscript"
                        ],
                        [
                            "mask[y1 + y1_pad:y2 - y2_pad, x1 + x1_pad:x2 - x2_pad]",
                            "Subscript"
                        ]
                    ]
                },
                "pad": {
                    "value": "(x1_pad, x2_pad, y1_pad, y2_pad)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_449": {
                "variable": {
                    "value": "box_per",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "round_449": {
                "variable": {
                    "value": "box_per",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_617": {
                "variable": {
                    "value": "gt_density",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proposal_density",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_gmm_centered(std, num_samples)",
                            "Call"
                        ],
                        [
                            "torch.cat((torch.Tensor([-1]), proposal_density))",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_619": {
                "variable": {
                    "value": "std_gt",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_623": {
                "variable": {
                    "value": "proposals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mean_box, proposals)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_624": {
                "variable": {
                    "value": "proposal_density",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.Tensor([-1]), proposal_density)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_625": {
                "variable": {
                    "value": "gt_density",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.Tensor([1]), gt_density)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sqrt_431": {
                "input": {
                    "value": "box[2] * box[3]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_526": {
                "input": {
                    "value": "-0.5 * (x / std) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_558": {
                "*size": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "num_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "std.numel() // num_components",
                            "BinOp"
                        ],
                        [
                            "mean.numel()",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_582": {
                "*size": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "num_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "std.numel() // num_components",
                            "BinOp"
                        ],
                        [
                            "mean.numel()",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_59": {
                "input": {
                    "value": "mask_crop_padded[None, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(output_sz, output_sz)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_230": {
                "input": {
                    "value": "mask_crop_padded[None, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "tuple(output_sz.flip(0).long().tolist())",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_278": {
                "input": {
                    "value": "mask_crop_padded[None, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(output_sz[1], output_sz[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "rand_404": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_429": {
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_502": {},
            "Tensor_624": {},
            "Tensor_625": {},
            "Tensor_513": {}
        }
    },
    "ltr/data/sampler.py": {
        "torch": {}
    },
    "ltr/data/transforms.py": {
        "torch": {
            "tensor_163": {
                "variable": {
                    "value": "coord_all",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[y1, y1, y2, y2], [x1, x2, x2, x1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_168": {
                "variable": {
                    "value": "bbox_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tl, sz)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_168": {
                "variable": {
                    "value": "bbox_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_184": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image.transpose((2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_209": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image.transpose((2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_425": {
                "variable": {
                    "value": "t_mat_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "t_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.identity(3)",
                            "Call"
                        ],
                        [
                            "t_scale @ t_rot @ t_shear @ t_mat",
                            "BinOp"
                        ],
                        [
                            "t_mat[:2, :]",
                            "Subscript"
                        ],
                        [
                            "self._construct_t_mat(image.shape[:2], do_flip, theta, shear_values, scale_factors)",
                            "Call"
                        ],
                        [
                            "self._construct_t_mat(image_shape, do_flip, theta, shear_values, scale_factors)",
                            "Call"
                        ],
                        [
                            "self._construct_t_mat(mask.shape[:2], do_flip, theta, shear_values, scale_factors)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_427": {
                "variable": {
                    "value": "coords_xy1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(coords[1, :], coords[0, :], torch.ones_like(coords[1, :]))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mm_429": {
                "variable": {
                    "value": "coords_xy_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t_mat_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(t_mat).float()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "coords_xy1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack((coords[1, :], coords[0, :], torch.ones_like(coords[1, :])))",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_134": {
                "obj": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "inputs[var_name]",
                            "Subscript"
                        ],
                        [
                            "im[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "is_tensor_259": {
                "obj": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image[:, :, None]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(image.transpose((2, 0, 1)))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image.transpose((2, 0, 1)))",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_tensor_309": {
                "obj": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image[:, :, None]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(image.transpose((2, 0, 1)))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image.transpose((2, 0, 1)))",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_311": {
                "variable": {
                    "value": "im1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image.view(-1, 1, sz[0], sz[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.filter[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "(self.filter_size[0], 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_tensor_412": {
                "obj": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image[:, :, None]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(image.transpose((2, 0, 1)))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image.transpose((2, 0, 1)))",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_440": {
                "ndarray": {
                    "value": "mask_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv.warpAffine(mask.numpy(), t_mat, output_sz, flags=cv.INTER_NEAREST, borderMode=self.border_flag)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_166": {
                "input": {
                    "value": "coord_transf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transform_coords(coord_all, image_shape, *rand_params).flip(0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_193": {
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_219": {
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_tensor_248": {
                "obj": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image[:, :, None]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(image.transpose((2, 0, 1)))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image.transpose((2, 0, 1)))",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_tensor_276": {
                "obj": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image[:, :, None]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(image.transpose((2, 0, 1)))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image.transpose((2, 0, 1)))",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_tensor_289": {
                "obj": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_303": {
                "start": {
                    "value": "-sz",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "sz + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_304": {
                "input": {
                    "value": "-x ** 2 / (2 * s ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_312": {
                "input": {
                    "value": "im1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(image.view(-1, 1, sz[0], sz[1]), self.filter[0], padding=(self.filter_size[0], 0))",
                            "Call"
                        ],
                        [
                            "F.conv2d(image.view(-1, 1, sz[0], sz[1]), self.filter[0], padding=(self.filter_size[0], 0))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.filter[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, self.filter_size[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "arange_327": {
                "start": {
                    "value": "-sz",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "sz + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_328": {
                "input": {
                    "value": "-x ** 2 / (2 * s ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_tensor_340": {
                "obj": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image[:, :, None]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(image.transpose((2, 0, 1)))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image.transpose((2, 0, 1)))",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_342": {
                "variable": {
                    "value": "im1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image.view(-1, 1, sz[0], sz[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.filter[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "(self.filter_size[0], 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_167": {
                "input": {
                    "value": "coord_transf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transform_coords(coord_all, image_shape, *rand_params).flip(0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_343": {
                "input": {
                    "value": "im1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(image.view(-1, 1, sz[0], sz[1]), self.filter[0], padding=(self.filter_size[0], 0))",
                            "Call"
                        ],
                        [
                            "F.conv2d(image.view(-1, 1, sz[0], sz[1]), self.filter[0], padding=(self.filter_size[0], 0))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.filter[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, self.filter_size[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_like_427": {
                "input": {
                    "value": "coords[1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "ltr/dataset/base_image_dataset.py": {
        "torch": {}
    },
    "ltr/dataset/base_video_dataset.py": {
        "torch": {}
    },
    "ltr/dataset/coco.py": {
        "torch": {
            "Tensor_109": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_111": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "ltr/dataset/coco_seq.py": {
        "torch": {
            "Tensor_112": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_114": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_114": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "ltr/dataset/ecssd.py": {
        "torch": {
            "Tensor_59": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "ltr/dataset/got10k.py": {
        "torch": {
            "tensor_129": {
                "data": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pandas.read_csv(bb_anno_file, delimiter=',', header=None, dtype=np.float32, na_filter=False, low_memory=False).values",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "ltr/dataset/hku_is.py": {
        "torch": {
            "Tensor_65": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "ltr/dataset/imagenetvid.py": {
        "torch": {
            "Tensor_13": {
                "variable": {
                    "value": "anno",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_14": {
                "variable": {
                    "value": "img_sz",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_69": {
                "variable": {
                    "value": "bb_anno",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "ltr/dataset/lasot.py": {
        "torch": {
            "tensor_101": {
                "data": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pandas.read_csv(bb_anno_file, delimiter=',', header=None, dtype=np.float32, na_filter=False, low_memory=False).values",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "ltr/dataset/lvis.py": {
        "torch": {
            "Tensor_105": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_107": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "ltr/dataset/msra10k.py": {
        "torch": {
            "Tensor_62": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "ltr/dataset/sbd.py": {
        "torch": {
            "tensor_63": {
                "data": {
                    "value": "mat['GTinst'][0]['Segmentation'][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "ltr/dataset/synthetic_video_blend.py": {
        "torch": {
            "zeros_79": {
                "variable": {
                    "value": "bg_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(bg_image.shape[0], bg_image.shape[1], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "fg_mask.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "fg_mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ltr/dataset/tracking_net.py": {
        "torch": {
            "tensor_109": {
                "data": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pandas.read_csv(bb_anno_file, delimiter=',', header=None, dtype=np.float32, na_filter=False, low_memory=False).values",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "ltr/dataset/vos_base.py": {
        "torch": {
            "zeros_272": {
                "variable": {
                    "value": "obj_sizes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(f_names), len(obj_ids))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_346": {
                "variable": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lb.squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_359": {
                "variable": {
                    "value": "bbox[obj_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ltr/external/PreciseRoIPooling/pytorch/prroi_pool/functional.py": {
        "torch": {}
    },
    "ltr/external/PreciseRoIPooling/pytorch/prroi_pool/prroi_pool.py": {
        "torch": {}
    },
    "ltr/external/PreciseRoIPooling/pytorch/tests/test_prroi_pooling2d.py": {
        "torch": {
            "rand_23": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(4, 16, 24, 32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_24": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 0, 0, 14, 14], [1, 14, 14, 28, 28]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "avg_pool2d_30": {
                "variable": {
                    "value": "out_gold",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand((4, 16, 24, 32)).cuda()",
                            "Call"
                        ],
                        [
                            "torch.rand((4, 2, 24, 32)).cuda()",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_40": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(4, 2, 24, 32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 0, 0, 4, 4], [1, 14, 14, 18, 18]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_32": {
                "tensors": {
                    "value": "(out_gold[0, :, :7, :7], out_gold[1, :, 7:14, 7:14])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "ltr/models/backbone/base.py": {
        "torch": {}
    },
    "ltr/models/backbone/resnet.py": {
        "torch": {
            "Conv2d_11": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1 + (dilation_factor < l) for l in (8, 4, 2)]",
                            "ListComp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_25": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_62": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_63": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1 + (dilation_factor < l) for l in (8, 4, 2)]",
                            "ListComp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_65": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_66": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_67": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_68": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_101": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_103": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_104": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_105": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_130": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_131": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "inplanes * 8 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_24": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_29": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_156": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_168": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_157": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1 + (dilation_factor < l) for l in (8, 4, 2)]",
                            "ListComp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_159": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "ltr/models/backbone/resnet18_vggm.py": {
        "torch": {
            "Conv2d_44": {
                "variable": {
                    "value": "self.vggmconv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_48": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_49": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_50": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_56": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "AvgPool3d_14": {
                "variable": {
                    "value": "self.average",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(local_size, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(int((local_size - 1.0) / 2), 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AvgPool2d_18": {
                "variable": {
                    "value": "self.average",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "local_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "int((local_size - 1.0) / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_82": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "load_158": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_71": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_73": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "ltr/models/bbreg/atom.py": {
        "torch": {}
    },
    "ltr/models/bbreg/atom_iou_net.py": {
        "torch": {
            "Sequential_8": {
                "*args": {
                    "value": "nn.Conv2d(in_planes, out_planes, kernel_size=kernel_size, stride=stride, padding=padding, dilation=dilation, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "variable": {
                    "value": "self.iou_predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "pred_inter_dim[0] + pred_inter_dim[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "arange_113": {
                "variable": {
                    "value": "batch_index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c3_t.size()[0]",
                            "Subscript"
                        ],
                        [
                            "bb.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_113": {
                "variable": {
                    "value": "batch_index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_119": {
                "variable": {
                    "value": "proposals_xyxy",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(proposals[:, :, 0:2], proposals[:, :, 0:2] + proposals[:, :, 2:4])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_122": {
                "variable": {
                    "value": "roi2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(batch_index.reshape(batch_size, -1, 1).expand(-1, num_proposals_per_batch, -1), proposals_xyxy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_132": {
                "variable": {
                    "value": "fc34_rt_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(fc3_rt, fc4_rt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_150": {
                "variable": {
                    "value": "batch_index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c3_t.size()[0]",
                            "Subscript"
                        ],
                        [
                            "bb.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_150": {
                "variable": {
                    "value": "batch_index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_155": {
                "variable": {
                    "value": "roi1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(batch_index, bb)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_165": {
                "variable": {
                    "value": "fc34_r",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(fc3_r, roi4r)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_9": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_11": {
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_12": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "ltr/models/layers/activation.py": {
        "torch": {
            "cat_15": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, reg)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim % x.dim()",
                            "BinOp"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_10": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((x, reg), dim=dim)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim % x.dim()",
                            "BinOp"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_16": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((x, reg), dim=dim)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim % x.dim()",
                            "BinOp"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "elu_29": {
                "input": {
                    "value": "F.leaky_relu(input, 1 / self.min_val, inplace=self.inplace)",
                    "type": "Call",
                    "possible_values": []
                },
                "alpha": {
                    "value": "self.min_val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "self.inplace",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "leaky_relu_29": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "1 / self.min_val",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "self.inplace",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_37": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((x, reg), dim=dim)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sign_44": {
                "input": {
                    "value": "x.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_55": {
                "input": {
                    "value": "x * x + 4.0 * self.b * self.b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_66": {
                "input": {
                    "value": "x * x + 4.0 * self.b * self.b",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "ltr/models/layers/blocks.py": {
        "torch": {
            "Sequential_20": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_planes * input_sz * input_sz",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_14": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReflectionPad2d_11": {
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_17": {
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_19": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_27": {
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_28": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "ltr/models/layers/distance.py": {
        "torch": {
            "arange_25": {
                "variable": {
                    "value": "bin_centers",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.num_bins",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "center.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_27": {
                "variable": {
                    "value": "k0",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "output_sz[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "center.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_28": {
                "variable": {
                    "value": "k1",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "output_sz[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "center.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_33": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d0 * d0 + d1 * d1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_36": {
                "variable": {
                    "value": "bin_val",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(F.relu(1.0 - torch.abs(bin_diff[:, :-1, :, :]), inplace=True), (1.0 + bin_diff[:, -1:, :, :]).clamp(0, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_36": {
                "input": {
                    "value": "1.0 - torch.abs(bin_diff[:, :-1, :, :])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_36": {
                "input": {
                    "value": "bin_diff[:, :-1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "ltr/models/layers/filter.py": {
        "torch": {
            "conv2d_51": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat.reshape(num_images, -1, feat.shape[-2], feat.shape[-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter",
                            "Method Argument"
                        ],
                        [
                            "filter",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(filter.shape[-2] // 2, filter.shape[-1] // 2)",
                            "Tuple"
                        ]
                    ]
                },
                "groups": {
                    "value": "num_sequences",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feat.shape[1] if feat.dim() == 5 else 1",
                            "IfExp"
                        ],
                        [
                            "feat.shape[1] if feat.dim() == 5 else 1",
                            "IfExp"
                        ],
                        [
                            "feat.shape[1] if feat.dim() == 5 else 1",
                            "IfExp"
                        ],
                        [
                            "feat.shape[1] if feat.dim() == 5 else 1",
                            "IfExp"
                        ],
                        [
                            "feat.shape[1] if feat.dim() == 5 else 1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "conv_transpose2d_88": {
                "variable": {
                    "value": "filter_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input.flip((2, 3)).view(1, -1, input.shape[-2], input.shape[-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "feat.reshape(-1, feat.shape[-3], feat.shape[-2], feat.shape[-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "trans_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[sz + ksz // 2 - ksz for (sz, ksz) in zip(feat_sz, filter_ksz)]",
                            "ListComp"
                        ],
                        [
                            "[(ksz - 1) // 2 for ksz in filter_ksz]",
                            "ListComp"
                        ],
                        [
                            "[ksz // 2 for ksz in filter_ksz]",
                            "ListComp"
                        ],
                        [
                            "[ksz // 2 for ksz in filter_ksz]",
                            "ListComp"
                        ]
                    ]
                },
                "groups": {
                    "value": "num_images * num_sequences",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_117": {
                "variable": {
                    "value": "filter_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input.reshape(1, -1, input.shape[-2], input.shape[-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "feat.reshape(-1, 1, feat.shape[-2], feat.shape[-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "trans_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[sz + ksz // 2 - ksz for (sz, ksz) in zip(feat_sz, filter_ksz)]",
                            "ListComp"
                        ],
                        [
                            "[(ksz - 1) // 2 for ksz in filter_ksz]",
                            "ListComp"
                        ],
                        [
                            "[ksz // 2 for ksz in filter_ksz]",
                            "ListComp"
                        ],
                        [
                            "[ksz // 2 for ksz in filter_ksz]",
                            "ListComp"
                        ]
                    ]
                },
                "groups": {
                    "value": "num_images * num_sequences",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_137": {
                "variable": {
                    "value": "filter_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat.reshape(-1, feat.shape[-3], feat.shape[-2], feat.shape[-1]).permute(1, 0, 2, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "input.reshape(-1, 1, input.shape[-2], input.shape[-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "trans_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[sz + ksz // 2 - ksz for (sz, ksz) in zip(feat_sz, filter_ksz)]",
                            "ListComp"
                        ],
                        [
                            "[(ksz - 1) // 2 for ksz in filter_ksz]",
                            "ListComp"
                        ],
                        [
                            "[ksz // 2 for ksz in filter_ksz]",
                            "ListComp"
                        ],
                        [
                            "[ksz // 2 for ksz in filter_ksz]",
                            "ListComp"
                        ]
                    ]
                },
                "groups": {
                    "value": "num_images * num_sequences",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_161": {
                "variable": {
                    "value": "filter_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat.permute(2, 1, 0, 3, 4).reshape(feat.shape[-3], -1, feat.shape[-2], feat.shape[-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "input.permute(1, 0, 2, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "trans_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[sz + ksz // 2 - ksz for (sz, ksz) in zip(feat_sz, filter_ksz)]",
                            "ListComp"
                        ],
                        [
                            "[(ksz - 1) // 2 for ksz in filter_ksz]",
                            "ListComp"
                        ],
                        [
                            "[ksz // 2 for ksz in filter_ksz]",
                            "ListComp"
                        ],
                        [
                            "[ksz // 2 for ksz in filter_ksz]",
                            "ListComp"
                        ]
                    ]
                },
                "groups": {
                    "value": "num_sequences",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feat.shape[1] if feat.dim() == 5 else 1",
                            "IfExp"
                        ],
                        [
                            "feat.shape[1] if feat.dim() == 5 else 1",
                            "IfExp"
                        ],
                        [
                            "feat.shape[1] if feat.dim() == 5 else 1",
                            "IfExp"
                        ],
                        [
                            "feat.shape[1] if feat.dim() == 5 else 1",
                            "IfExp"
                        ],
                        [
                            "feat.shape[1] if feat.dim() == 5 else 1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "conv2d_109": {
                "variable": {
                    "value": "filter_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input.reshape(-1, num_filters, input.shape[-2], input.shape[-1]).permute(1, 0, 2, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "feat.reshape(-1, 1, feat.shape[-2], feat.shape[-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "trans_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[sz + ksz // 2 - ksz for (sz, ksz) in zip(feat_sz, filter_ksz)]",
                            "ListComp"
                        ],
                        [
                            "[(ksz - 1) // 2 for ksz in filter_ksz]",
                            "ListComp"
                        ],
                        [
                            "[ksz // 2 for ksz in filter_ksz]",
                            "ListComp"
                        ],
                        [
                            "[ksz // 2 for ksz in filter_ksz]",
                            "ListComp"
                        ]
                    ]
                },
                "groups": {
                    "value": "num_images * num_sequences",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_28": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat.reshape(num_images, -1, feat.shape[-2], feat.shape[-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "filter.view(-1, *filter.shape[-3:])",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(filter.shape[-2] // 2, filter.shape[-1] // 2)",
                            "Tuple"
                        ]
                    ]
                },
                "groups": {
                    "value": "num_sequences * groups",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_48": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "scores_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_40": {
                "variable": {
                    "value": "scores_d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat.reshape(num_images, -1, feat.shape[-2], feat.shape[-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "f_d.view(-1, *f_d.shape[-3:])",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p + d_factor - 1 for p in padding]",
                            "ListComp"
                        ]
                    ]
                },
                "groups": {
                    "value": "num_sequences * groups",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dilation": {
                    "value": "d_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation_factors.items()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ltr/models/layers/normalization.py": {
        "torch": {
            "sum_20": {
                "input": {
                    "value": "(input * input).view(input.shape[0], 1, 1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_18": {
                "input": {
                    "value": "(input * input).view(input.shape[0], 1, 1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "ltr/models/layers/transform.py": {
        "torch": {
            "is_tensor_9": {
                "obj": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sz.tolist() if torch.is_tensor(sz) else sz",
                            "IfExp"
                        ],
                        [
                            "sz",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "interpolate_10": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sz.tolist() if torch.is_tensor(sz) else sz",
                            "IfExp"
                        ],
                        [
                            "sz",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_25": {
                "tensors": {
                    "value": "[interpolate(x, output_shape) for x in input]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "ltr/models/loss/kl_regression.py": {
        "torch": {
            "log_22": {
                "input": {
                    "value": "sample_density + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_25": {
                "input": {
                    "value": "scores * (gt_density / (sample_density + self.eps))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "mc_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_48": {
                "input": {
                    "value": "sample_density[:, 1:, ...] + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_66": {
                "input": {
                    "value": "scores * gt_density",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "grid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "logsumexp_24": {
                "input": {
                    "value": "exp_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores - torch.log(sample_density + self.eps)",
                            "BinOp"
                        ],
                        [
                            "scores[:, 1:, ...] - torch.log(sample_density[:, 1:, ...] + self.eps)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "mc_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "logsumexp_50": {
                "input": {
                    "value": "exp_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores - torch.log(sample_density + self.eps)",
                            "BinOp"
                        ],
                        [
                            "scores[:, 1:, ...] - torch.log(sample_density[:, 1:, ...] + self.eps)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "mc_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "logsumexp_68": {
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores",
                            "Method Argument"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "grid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "ltr/models/loss/target_classification.py": {
        "torch": {
            "MSELoss_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_30": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.error_metric(prediction, positive_mask * label)",
                            "Call"
                        ],
                        [
                            "torch.min(loss, torch.tensor([self.clip], device=loss.device))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_25": {
                "input": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "negative_mask * F.relu(prediction) + positive_mask * prediction",
                            "BinOp"
                        ],
                        [
                            "prediction",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_30": {
                "data": {
                    "value": "[self.clip]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "loss.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ltr/models/meta/steepestdescent.py": {
        "torch": {
            "is_grad_enabled_35": {
                "variable": {
                    "value": "torch_grad_enabled",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_grad_enabled_36": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_84": {
                "mode": {
                    "value": "torch_grad_enabled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.is_grad_enabled()",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_57": {
                "outputs": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.residual_module(meta_parameter, filter_dilation_factors=self.filter_dilation_factors, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "meta_parameter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "meta_parameter.detach()",
                            "Call"
                        ],
                        [
                            "meta_parameter - step",
                            "BinOp"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "r.clone()",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_60": {
                "outputs": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorList(torch.autograd.grad(r, meta_parameter, u, create_graph=True))",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "r.clone()",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorList(torch.autograd.grad(r, meta_parameter, u, create_graph=True))",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "ltr/models/target_classifier/features.py": {
        "torch": {
            "Sequential_28": {
                "*args": {
                    "value": "*feat_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "*args": {
                    "value": "*feat_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "*args": {
                    "value": "*feat_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "MaxPool2d_18": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_dim",
                            "variable"
                        ],
                        [
                            "feature_dim",
                            "variable"
                        ],
                        [
                            "feature_dim",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_dim",
                            "variable"
                        ],
                        [
                            "feature_dim",
                            "variable"
                        ],
                        [
                            "feature_dim",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_43": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "in_channels": {
                    "value": "4 * feature_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_dim",
                            "variable"
                        ],
                        [
                            "feature_dim",
                            "variable"
                        ],
                        [
                            "feature_dim",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_64": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_66": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "ltr/models/target_classifier/initializer.py": {
        "torch": {
            "arange_32": {
                "variable": {
                    "value": "batch_index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_images_total",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bb.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_32": {
                "variable": {
                    "value": "batch_index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_43": {
                "variable": {
                    "value": "roi1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(batch_index, pool_bb)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "variable": {
                    "value": "self.filter_post_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*post_conv_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_132": {
                "variable": {
                    "value": "self.filter_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "conv_ksz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "conv_ksz // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_110": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights.reshape(num_images, -1, weights.shape[-3], weights.shape[-2], weights.shape[-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_168": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights.reshape(num_images, -1, weights.shape[-3], weights.shape[-2], weights.shape[-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_243": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights.reshape(num_images, -1, weights.shape[-3], weights.shape[-2], weights.shape[-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_71": {
                "*args": {
                    "value": "*pre_conv_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "in_channels": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "ltr/models/target_classifier/linear_filter.py": {
        "torch": {}
    },
    "ltr/models/target_classifier/optimizer.py": {
        "torch": {
            "Parameter_39": {
                "variable": {
                    "value": "self.log_step_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "math.log(init_step_length) * torch.ones(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_40": {
                "variable": {
                    "value": "self.filter_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init_filter_reg * torch.ones(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "variable": {
                    "value": "self.label_map_predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_dist_bins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_67": {
                "variable": {
                    "value": "self.target_mask_predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mask_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "variable": {
                    "value": "self.spatial_weight_predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_dist_bins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_108": {
                "variable": {
                    "value": "step_length_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.log_step_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_193": {
                "variable": {
                    "value": "self.log_step_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "math.log(init_step_length) * torch.ones(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_194": {
                "variable": {
                    "value": "self.filter_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init_filter_reg * torch.ones(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_203": {
                "variable": {
                    "value": "k0",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "output_sz[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_203": {
                "variable": {
                    "value": "k0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_204": {
                "variable": {
                    "value": "k1",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "output_sz[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_204": {
                "variable": {
                    "value": "k1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_205": {
                "variable": {
                    "value": "g0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1.0 / (2 * self.gauss_sigma ** 2) * (k0 - center[:, :, 0].reshape(*center.shape[:2], 1, 1)) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_206": {
                "variable": {
                    "value": "g1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1.0 / (2 * self.gauss_sigma ** 2) * (k1 - center[:, :, 1].reshape(*center.shape[:2], 1, 1)) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_234": {
                "variable": {
                    "value": "step_length_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.log_step_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_319": {
                "variable": {
                    "value": "self.log_step_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "math.log(init_step_length) * torch.ones(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_320": {
                "variable": {
                    "value": "self.filter_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init_filter_reg * torch.ones(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_333": {
                "variable": {
                    "value": "k0",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "output_sz[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_333": {
                "variable": {
                    "value": "k0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_334": {
                "variable": {
                    "value": "k1",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "output_sz[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_334": {
                "variable": {
                    "value": "k1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_378": {
                "variable": {
                    "value": "step_length_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.log_step_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_49": {
                "variable": {
                    "value": "init_gauss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(num_dist_bins, dtype=torch.float32).reshape(1, -1, 1, 1) * bin_displacement",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_52": {
                "variable": {
                    "value": "init_gauss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1 / 2 * (d / init_gauss_sigma) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_340": {
                "variable": {
                    "value": "one_hot0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist0_view",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist0.reshape(-1, dist0.shape[-2])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_341": {
                "variable": {
                    "value": "one_hot1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist1_view",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist1.reshape(-1, dist1.shape[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_346": {
                "variable": {
                    "value": "g0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1.0 / (2 * self.gauss_sigma ** 2) * dist0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_347": {
                "variable": {
                    "value": "g1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1.0 / (2 * self.gauss_sigma ** 2) * dist1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_47": {
                "start": {
                    "value": "num_dist_bins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_47": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "in_channels": {
                    "value": "num_dist_bins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_39": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_40": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_68": {
                "input": {
                    "value": "2.0 - d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_193": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_194": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_319": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_320": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_382": {},
            "relu_259": {
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter_layer.apply_filter(feat, weights)",
                            "Call"
                        ],
                        [
                            "filter_layer.apply_filter(feat, weights)",
                            "Call"
                        ],
                        [
                            "self.score_activation(scores, target_mask)",
                            "Call"
                        ],
                        [
                            "filter_layer.apply_filter(feat, weights)",
                            "Call"
                        ],
                        [
                            "filter_layer.apply_filter(feat, weights)",
                            "Call"
                        ],
                        [
                            "target_mask * scores + (1.0 - target_mask) * F.relu(scores)",
                            "BinOp"
                        ],
                        [
                            "filter_layer.apply_filter(feat, weights)",
                            "Call"
                        ],
                        [
                            "filter_layer.apply_filter(feat, weights)",
                            "Call"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_288": {
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter_layer.apply_filter(feat, weights)",
                            "Call"
                        ],
                        [
                            "filter_layer.apply_filter(feat, weights)",
                            "Call"
                        ],
                        [
                            "self.score_activation(scores, target_mask)",
                            "Call"
                        ],
                        [
                            "filter_layer.apply_filter(feat, weights)",
                            "Call"
                        ],
                        [
                            "filter_layer.apply_filter(feat, weights)",
                            "Call"
                        ],
                        [
                            "target_mask * scores + (1.0 - target_mask) * F.relu(scores)",
                            "BinOp"
                        ],
                        [
                            "filter_layer.apply_filter(feat, weights)",
                            "Call"
                        ],
                        [
                            "filter_layer.apply_filter(feat, weights)",
                            "Call"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_342": {
                "start": {
                    "value": "one_hot0.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_343": {
                "start": {
                    "value": "one_hot1.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_394": {
                "input": {
                    "value": "sample_weight.reshape(sample_weight.shape[0], -1) * (torch.log(scores.exp().sum(dim=(-2, -1)) + exp_reg) - (label_density * scores).sum(dim=(-2, -1)))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_420": {
                "input": {
                    "value": "sm_scores_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores_softmax * scores_grad",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "(-2, -1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_395": {
                "input": {
                    "value": "scores.exp().sum(dim=(-2, -1)) + exp_reg",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "ltr/models/target_classifier/residual_modules.py": {
        "torch": {
            "Parameter_15": {
                "variable": {
                    "value": "self.filter_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init_filter_reg * torch.ones(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.label_map_predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_dist_bins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.target_mask_predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mask_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "variable": {
                    "value": "self.spatial_weight_predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_dist_bins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_22": {
                "variable": {
                    "value": "init_gauss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(num_dist_bins, dtype=torch.float32).reshape(1, -1, 1, 1) * bin_displacement",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_25": {
                "variable": {
                    "value": "init_gauss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1 / 2 * (d / init_gauss_sigma) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_20": {
                "start": {
                    "value": "num_dist_bins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_20": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "in_channels": {
                    "value": "num_dist_bins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_15": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_39": {
                "input": {
                    "value": "2.0 - d",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "ltr/models/tracking/dimpnet.py": {
        "torch": {}
    },
    "ltr/run_training.py": {
        "torch": {}
    },
    "ltr/train_settings/bbreg/atom.py": {
        "torch": {
            "MSELoss_84": {
                "variable": {
                    "value": "objective",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_88": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "actor.net.bb_regressor.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StepLR_89": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(actor.net.bb_regressor.parameters(), lr=0.001)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "ltr/train_settings/bbreg/atom_gmm_sampl.py": {
        "torch": {
            "MSELoss_85": {
                "variable": {
                    "value": "objective",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_89": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "actor.net.bb_regressor.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StepLR_90": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(actor.net.bb_regressor.parameters(), lr=0.001)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "ltr/train_settings/bbreg/atom_paper.py": {
        "torch": {
            "MSELoss_83": {
                "variable": {
                    "value": "objective",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_87": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "actor.net.bb_regressor.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StepLR_88": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(actor.net.bb_regressor.parameters(), lr=0.001)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "ltr/train_settings/bbreg/atom_prob_ml.py": {
        "torch": {
            "Adam_90": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "actor.net.bb_regressor.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StepLR_91": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(actor.net.bb_regressor.parameters(), lr=0.001)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "ltr/train_settings/dimp/dimp18.py": {
        "torch": {
            "Adam_107": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': actor.net.classifier.filter_initializer.parameters(), 'lr': 5e-05}, {'params': actor.net.classifier.filter_optimizer.parameters(), 'lr': 0.0005}, {'params': actor.net.classifier.feature_extractor.parameters(), 'lr': 5e-05}, {'params': actor.net.bb_regressor.parameters(), 'lr': 0.001}, {'params': actor.net.feature_extractor.parameters()}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StepLR_114": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam([{'params': actor.net.classifier.filter_initializer.parameters(), 'lr': 5e-05}, {'params': actor.net.classifier.filter_optimizer.parameters(), 'lr': 0.0005}, {'params': actor.net.classifier.feature_extractor.parameters(), 'lr': 5e-05}, {'params': actor.net.bb_regressor.parameters(), 'lr': 0.001}, {'params': actor.net.feature_extractor.parameters()}], lr=0.0002)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MSELoss_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ltr/train_settings/dimp/dimp50.py": {
        "torch": {
            "Adam_108": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': actor.net.classifier.filter_initializer.parameters(), 'lr': 5e-05}, {'params': actor.net.classifier.filter_optimizer.parameters(), 'lr': 0.0005}, {'params': actor.net.classifier.feature_extractor.parameters(), 'lr': 5e-05}, {'params': actor.net.bb_regressor.parameters()}, {'params': actor.net.feature_extractor.parameters(), 'lr': 2e-05}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StepLR_115": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam([{'params': actor.net.classifier.filter_initializer.parameters(), 'lr': 5e-05}, {'params': actor.net.classifier.filter_optimizer.parameters(), 'lr': 0.0005}, {'params': actor.net.classifier.feature_extractor.parameters(), 'lr': 5e-05}, {'params': actor.net.bb_regressor.parameters()}, {'params': actor.net.feature_extractor.parameters(), 'lr': 2e-05}], lr=0.0002)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MSELoss_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ltr/train_settings/dimp/prdimp18.py": {
        "torch": {
            "Adam_110": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': actor.net.classifier.parameters(), 'lr': 0.001}, {'params': actor.net.bb_regressor.parameters(), 'lr': 0.001}, {'params': actor.net.feature_extractor.parameters()}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StepLR_115": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam([{'params': actor.net.classifier.parameters(), 'lr': 0.001}, {'params': actor.net.bb_regressor.parameters(), 'lr': 0.001}, {'params': actor.net.feature_extractor.parameters()}], lr=0.0002)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "ltr/train_settings/dimp/prdimp50.py": {
        "torch": {
            "Adam_111": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': actor.net.classifier.parameters(), 'lr': 0.001}, {'params': actor.net.bb_regressor.parameters(), 'lr': 0.001}, {'params': actor.net.feature_extractor.parameters(), 'lr': 2e-05}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StepLR_116": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam([{'params': actor.net.classifier.parameters(), 'lr': 0.001}, {'params': actor.net.bb_regressor.parameters(), 'lr': 0.001}, {'params': actor.net.feature_extractor.parameters(), 'lr': 2e-05}], lr=0.0002)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "ltr/train_settings/dimp/super_dimp.py": {
        "torch": {
            "Adam_121": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': actor.net.classifier.filter_initializer.parameters(), 'lr': 5e-05}, {'params': actor.net.classifier.filter_optimizer.parameters(), 'lr': 0.0005}, {'params': actor.net.classifier.feature_extractor.parameters(), 'lr': 5e-05}, {'params': actor.net.bb_regressor.parameters(), 'lr': 0.001}, {'params': actor.net.feature_extractor.layer3.parameters(), 'lr': 2e-05}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StepLR_128": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam([{'params': actor.net.classifier.filter_initializer.parameters(), 'lr': 5e-05}, {'params': actor.net.classifier.filter_optimizer.parameters(), 'lr': 0.0005}, {'params': actor.net.classifier.feature_extractor.parameters(), 'lr': 5e-05}, {'params': actor.net.bb_regressor.parameters(), 'lr': 0.001}, {'params': actor.net.feature_extractor.layer3.parameters(), 'lr': 2e-05}], lr=0.0002)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "ltr/trainers/base_trainer.py": {
        "torch": {
            "device_34": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() and settings.use_gpu else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "save_121": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': self.epoch, 'actor_type': actor_type, 'net_type': net_type, 'net': net.state_dict(), 'net_info': getattr(net, 'info', None), 'constructor': getattr(net, 'constructor', None), 'optimizer': self.optimizer.state_dict(), 'stats': self.stats, 'settings': self.settings}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "tmp_file_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/{}_ep{:04d}.tmp'.format(directory, net_type, self.epoch)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ltr/trainers/ltr_trainer.py": {
        "torch": {
            "set_grad_enabled_48": {
                "mode": {
                    "value": "loader.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pytracking/analysis/evaluate_vos.py": {
        "torch": {}
    },
    "pytracking/analysis/extract_results.py": {
        "torch": {
            "max_30": {
                "variable": {
                    "value": "tl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_bb[:, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_31": {
                "variable": {
                    "value": "br",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_bb[:, :2] + pred_bb[:, 2:] - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_113": {
                "variable": {
                    "value": "threshold_set_overlap",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0 + plot_bin_gap",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "plot_bin_gap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.05",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_114": {
                "variable": {
                    "value": "threshold_set_center",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "51",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_117": {
                "variable": {
                    "value": "avg_overlap_all",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(dataset), len(trackers))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_118": {
                "variable": {
                    "value": "ave_success_rate_plot_overlap",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(dataset), len(trackers), threshold_set_overlap.numel())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_120": {
                "variable": {
                    "value": "ave_success_rate_plot_center",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(dataset), len(trackers), threshold_set_center.numel())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_122": {
                "variable": {
                    "value": "ave_success_rate_plot_center_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(dataset), len(trackers), threshold_set_center.numel())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_125": {
                "variable": {
                    "value": "valid_sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isnan_48": {
                "input": {
                    "value": "anno_bb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(seq.ground_truth_rect)",
                            "Call"
                        ],
                        [
                            "anno_bb",
                            "Method Argument"
                        ],
                        [
                            "anno_bb",
                            "Method Argument"
                        ],
                        [
                            "anno_bb",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "any_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_98": {
                "input": {
                    "value": "err_overlap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "calc_iou_overlap(pred_bb, anno_bb)",
                            "Call"
                        ],
                        [
                            "calc_seq_err_robust(pred_bb, anno_bb, seq.dataset, target_visible)",
                            "Call"
                        ]
                    ]
                }
            },
            "any_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_129": {
                "variable": {
                    "value": "anno_bb",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "seq.ground_truth_rect",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isnan_45": {
                "input": {
                    "value": "pred_bb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_bb.clone()",
                            "Call"
                        ],
                        [
                            "pred_bb[:anno_bb.shape[0], :]",
                            "Subscript"
                        ],
                        [
                            "pred_bb[:anno_bb.shape[0], :]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((pred_bb, pad), dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor(load_text(str(results_path), delimiter=('\\t', ','), dtype=np.float64))",
                            "Call"
                        ],
                        [
                            "pred_bb",
                            "Method Argument"
                        ],
                        [
                            "pred_bb",
                            "Method Argument"
                        ],
                        [
                            "pred_bb",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "any_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_115": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "51",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_71": {
                "variable": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(anno_bb.shape[0] - pred_bb.shape[0], 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "pred_bb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pred_bb, pad)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_130": {
                "data": {
                    "value": "seq.target_visible",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_137": {
                "variable": {
                    "value": "pred_bb",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "load_text(str(results_path), delimiter=('\\t', ','), dtype=np.float64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isnan_56": {
                "input": {
                    "value": "anno_bb[i, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "any_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytracking/analysis/playback_results.py": {
        "torch": {
            "stack_160": {
                "variable": {
                    "value": "tracker_results",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tracker_results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(tracker_results, dim=1).tolist()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_151": {
                "variable": {
                    "value": "pred_bb",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.loadtxt(str(results_path), dtype=np.float64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_153": {
                "variable": {
                    "value": "pred_bb",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.loadtxt(str(results_path), delimiter=',', dtype=np.float64)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "pytracking/analysis/plot_results.py": {
        "torch": {
            "tensor_52": {
                "variable": {
                    "value": "ave_success_rate_plot_overlap",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "eval_data['ave_success_rate_plot_overlap']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_53": {
                "variable": {
                    "value": "ave_success_rate_plot_center",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "eval_data['ave_success_rate_plot_center']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_54": {
                "variable": {
                    "value": "ave_success_rate_plot_center_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "eval_data['ave_success_rate_plot_center_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_55": {
                "variable": {
                    "value": "avg_overlap_all",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "eval_data['avg_overlap_all']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_58": {
                "variable": {
                    "value": "merged",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(trackers)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_75": {
                "variable": {
                    "value": "ave_success_rate_plot_overlap_merged",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ave_success_rate_plot_overlap_merged",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(ave_success_rate_plot_overlap_merged, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_76": {
                "variable": {
                    "value": "ave_success_rate_plot_center_merged",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ave_success_rate_plot_center_merged",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(ave_success_rate_plot_center_merged, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_77": {
                "variable": {
                    "value": "ave_success_rate_plot_center_norm_merged",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ave_success_rate_plot_center_norm_merged",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(ave_success_rate_plot_center_norm_merged, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_78": {
                "variable": {
                    "value": "avg_overlap_all_merged",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "avg_overlap_all_merged",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(avg_overlap_all_merged, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_231": {
                "variable": {
                    "value": "valid_sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "eval_data['valid_sequence']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_325": {
                "variable": {
                    "value": "valid_sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "eval_data['valid_sequence']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_382": {
                "variable": {
                    "value": "auc_curve",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(trackers), 101)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_383": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(trackers)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_416": {
                "variable": {
                    "value": "threshold_set_overlap",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "1.01",
                    "type": "float",
                    "possible_values": []
                },
                "step": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_456": {
                "variable": {
                    "value": "valid_sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "eval_data['valid_sequence']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_66": {
                "variable": {
                    "value": "match",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "match",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[t['name'] == base_tracker['name'] and t['param'] == base_tracker['param'] for t in trackers]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(match)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_239": {
                "variable": {
                    "value": "ave_success_rate_plot_overlap",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "eval_data['ave_success_rate_plot_overlap']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_243": {
                "variable": {
                    "value": "threshold_set_overlap",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "eval_data['threshold_set_overlap']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_251": {
                "variable": {
                    "value": "ave_success_rate_plot_center",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "eval_data['ave_success_rate_plot_center']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_255": {
                "variable": {
                    "value": "threshold_set_center",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "eval_data['threshold_set_center']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_265": {
                "variable": {
                    "value": "ave_success_rate_plot_center_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "eval_data['ave_success_rate_plot_center_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_269": {
                "variable": {
                    "value": "threshold_set_center_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "eval_data['threshold_set_center_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_333": {
                "variable": {
                    "value": "threshold_set_overlap",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "eval_data['threshold_set_overlap']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_334": {
                "variable": {
                    "value": "ave_success_rate_plot_overlap",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "eval_data['ave_success_rate_plot_overlap']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_344": {
                "variable": {
                    "value": "ave_success_rate_plot_center",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "eval_data['ave_success_rate_plot_center']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_352": {
                "variable": {
                    "value": "ave_success_rate_plot_center_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "eval_data['ave_success_rate_plot_center_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_458": {
                "data": {
                    "value": "eval_data['avg_overlap_all']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_410": {
                "data": {
                    "value": "curve",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval_data['succ_curve']",
                            "Subscript"
                        ],
                        [
                            "eval_data['overall']['succ_curve']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "pytracking/evaluation/tracker.py": {
        "torch": {
            "from_numpy_543": {
                "ndarray": {
                    "value": "vot_anno_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vot.make_full_size(vot_anno, (image.shape[1], image.shape[0]))",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "vot.make_full_size(vot_anno, (image.shape[1], image.shape[0]))",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "from_numpy_637": {
                "ndarray": {
                    "value": "vot_anno_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vot.make_full_size(vot_anno, (image.shape[1], image.shape[0]))",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "vot.make_full_size(vot_anno, (image.shape[1], image.shape[0]))",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "from_numpy_733": {
                "ndarray": {
                    "value": "vot_anno_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vot.make_full_size(vot_anno, (image.shape[1], image.shape[0]))",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "vot.make_full_size(vot_anno, (image.shape[1], image.shape[0]))",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            }
        }
    },
    "pytracking/features/augmentation.py": {
        "torch": {
            "is_tensor_213": {
                "variable": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch_to_numpy(image)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "interpolate_91": {
                "variable": {
                    "value": "image_resized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch_to_numpy(image)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "[h_new, w_new]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_144": {
                "variable": {
                    "value": "im1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image.view(-1, 1, sz[0], sz[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.filter[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "(self.filter_size[0], 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_35": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch_to_numpy(image)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(pad_left, pad_right, pad_top, pad_bottom)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "arange_136": {
                "start": {
                    "value": "-sz",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "sz + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_137": {
                "input": {
                    "value": "-x ** 2 / (2 * s ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_145": {
                "input": {
                    "value": "im1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(image.view(-1, 1, sz[0], sz[1]), self.filter[0], padding=(self.filter_size[0], 0))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.filter[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, self.filter_size[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "pytracking/features/color.py": {
        "torch": {
            "mean_26": {
                "input": {
                    "value": "im / 255 - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "pytracking/features/deep.py": {
        "torch": {
            "Tensor_43": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_44": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_122": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_123": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytracking/features/extractor.py": {
        "torch": {
            "cat_41": {
                "variable": {
                    "value": "im_patches",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sample_patch(im, pos, s * image_sz, image_sz) for s in scales]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_44": {
                "variable": {
                    "value": "feature_map",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "TensorList([f.get_feature(im_patches) for f in self.features]).unroll()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_111": {
                "variable": {
                    "value": "im_patches",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(patch_iter)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "patch_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(coord_iter)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_138": {
                "variable": {
                    "value": "im_patches",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[T(im_patch) for T in transforms]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "pytracking/features/featurebase.py": {
        "torch": {
            "adaptive_avg_pool2d_60": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.extract(im)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(feat, self.output_size)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(feat, self.pool_stride, self.pool_stride)",
                            "Call"
                        ],
                        [
                            "feat / (torch.sum(feat.abs().view(feat.shape[0], 1, 1, -1) ** self.normalize_power, dim=3, keepdim=True) / (feat.shape[1] * feat.shape[2] * feat.shape[3]) + 1e-10) ** (1 / self.normalize_power)",
                            "BinOp"
                        ],
                        [
                            "feat_list",
                            "variable"
                        ]
                    ]
                },
                "output_size": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool2d_62": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.extract(im)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(feat, self.output_size)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(feat, self.pool_stride, self.pool_stride)",
                            "Call"
                        ],
                        [
                            "feat / (torch.sum(feat.abs().view(feat.shape[0], 1, 1, -1) ** self.normalize_power, dim=3, keepdim=True) / (feat.shape[1] * feat.shape[2] * feat.shape[3]) + 1e-10) ** (1 / self.normalize_power)",
                            "BinOp"
                        ],
                        [
                            "feat_list",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.pool_stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.pool_stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_100": {
                "variable": {
                    "value": "feat_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "feat_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_size": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "avg_pool2d_102": {
                "variable": {
                    "value": "feat_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "feat_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_66": {
                "input": {
                    "value": "feat.abs().view(feat.shape[0], 1, 1, -1) ** self.normalize_power",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_107": {
                "input": {
                    "value": "feat.abs().view(feat.shape[0], 1, 1, -1) ** self.normalize_power",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "pytracking/features/net_wrappers.py": {
        "torch": {
            "Tensor_49": {
                "variable": {
                    "value": "self._mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_50": {
                "variable": {
                    "value": "self._std",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pytracking/features/preprocessing.py": {
        "torch": {
            "cat_28": {
                "variable": {
                    "value": "im_patches",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[T(im_patch, is_mask=is_mask) for T in transforms]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_49": {
                "variable": {
                    "value": "im_patches",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(patch_iter)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_50": {
                "variable": {
                    "value": "patch_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(coord_iter)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_106": {
                "variable": {
                    "value": "szl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sz.round()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_7": {
                "ndarray": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "permute_7": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_7": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_90": {
                "variable": {
                    "value": "resize_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_sz.float() / output_sz.float()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_129": {
                "variable": {
                    "value": "im_patch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "im2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im[..., os[0].item()::df, os[1].item()::df]",
                            "Subscript"
                        ],
                        [
                            "im",
                            "variable"
                        ]
                    ]
                },
                "pad": {
                    "value": "(-tl[1].item(), br[1].item() - im2.shape[3], -tl[0].item(), br[0].item() - im2.shape[2])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "pad_mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mode",
                            "variable"
                        ],
                        [
                            "'replicate'",
                            "str"
                        ]
                    ]
                }
            },
            "pad_131": {
                "variable": {
                    "value": "im_patch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "im2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im[..., os[0].item()::df, os[1].item()::df]",
                            "Subscript"
                        ],
                        [
                            "im",
                            "variable"
                        ]
                    ]
                },
                "pad": {
                    "value": "(-tl[1].item(), br[1].item() - im2.shape[3], -tl[0].item(), br[0].item() - im2.shape[2])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "interpolate_141": {
                "variable": {
                    "value": "im_patch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "im_patch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_patch(im, pos, scale * image_sz, image_sz, is_mask=is_mask)",
                            "Call"
                        ],
                        [
                            "F.pad(im2, (-tl[1].item(), br[1].item() - im2.shape[3], -tl[0].item(), br[0].item() - im2.shape[2]), pad_mode)",
                            "Call"
                        ],
                        [
                            "F.pad(im2, (-tl[1].item(), br[1].item() - im2.shape[3], -tl[0].item(), br[0].item() - im2.shape[2]))",
                            "Call"
                        ],
                        [
                            "F.interpolate(im_patch, output_sz.long().tolist(), mode='bilinear')",
                            "Call"
                        ],
                        [
                            "F.interpolate(im_patch, output_sz.long().tolist(), mode='nearest')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "output_sz.long().tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_143": {
                "variable": {
                    "value": "im_patch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "im_patch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_patch(im, pos, scale * image_sz, image_sz, is_mask=is_mask)",
                            "Call"
                        ],
                        [
                            "F.pad(im2, (-tl[1].item(), br[1].item() - im2.shape[3], -tl[0].item(), br[0].item() - im2.shape[2]), pad_mode)",
                            "Call"
                        ],
                        [
                            "F.pad(im2, (-tl[1].item(), br[1].item() - im2.shape[3], -tl[0].item(), br[0].item() - im2.shape[2]))",
                            "Call"
                        ],
                        [
                            "F.interpolate(im_patch, output_sz.long().tolist(), mode='bilinear')",
                            "Call"
                        ],
                        [
                            "F.interpolate(im_patch, output_sz.long().tolist(), mode='nearest')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "output_sz.long().tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_134": {
                "tensors": {
                    "value": "(tl, br)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Tensor_106": {}
        }
    },
    "pytracking/features/util.py": {
        "torch": {
            "cat_27": {
                "tensors": {
                    "value": "[f.get_feature(im) for f in self.features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pytracking/libs/complex.py": {
        "torch": {
            "sum_97": {
                "input": {
                    "value": "a * a",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_107": {
                "input": {
                    "value": "abs_sqr(a)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_150": {
                "tensors": {
                    "value": "(a.unsqueeze(-1), b.unsqueeze(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_208": {
                "tensors": {
                    "value": "(torch.cos(a), torch.sin(a))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_187": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b.new_zeros(b.shape)",
                            "Call"
                        ],
                        [
                            "a.unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "b[..., 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_189": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b.new_zeros(b.shape)",
                            "Call"
                        ],
                        [
                            "a.unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "b[..., 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_198": {
                "input": {
                    "value": "a[..., 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a.new_zeros(a.shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_200": {
                "input": {
                    "value": "a[..., 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a.new_zeros(a.shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_208": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b.new_zeros(b.shape)",
                            "Call"
                        ],
                        [
                            "a.unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_208": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b.new_zeros(b.shape)",
                            "Call"
                        ],
                        [
                            "a.unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_168": {
                "input": {
                    "value": "a[..., 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "b[..., 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_169": {
                "input": {
                    "value": "a[..., 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "b[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_171": {
                "input": {
                    "value": "a[..., 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "b[..., 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_172": {
                "input": {
                    "value": "a[..., 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "b[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_174": {
                "input": {
                    "value": "a[..., 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "b[..., 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_175": {
                "input": {
                    "value": "a[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "b[..., 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_177": {
                "input": {
                    "value": "a[..., 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "b[..., 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_178": {
                "input": {
                    "value": "a[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "b[..., 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "pytracking/libs/dcf.py": {
        "torch": {
            "pad_30": {
                "variable": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "effective_window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hann1d(effective_sz[0].item(), True).reshape(1, 1, -1, 1) * hann1d(effective_sz[1].item(), True).reshape(1, 1, 1, -1)",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "(pad[1].item(), pad[1].item(), pad[0].item(), pad[0].item())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "arange_49": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-(sz - 1) / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "(sz + 1) / 2 + end_pad",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "irfft_139": {
                "variable": {
                    "value": "reg_window_sparse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reg_window_dft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rfft(reg_window, 2) / sz.prod()",
                            "BinOp"
                        ],
                        [
                            "complex.real(fourier.rfftshift2(reg_window_dft))",
                            "Call"
                        ],
                        [
                            "reg_window_dft[..., bottom:top, :right]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([reg_window_dft[..., 1:].flip((2, 3)), reg_window_dft], -1)",
                            "Call"
                        ]
                    ]
                },
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "signal_sizes": {
                    "value": "sz.long().tolist()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_159": {
                "variable": {
                    "value": "(max_val_row, argmax_row)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_160": {
                "variable": {
                    "value": "(max_val, argmax_col)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "max_val_row",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(a, dim=-2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_163": {
                "variable": {
                    "value": "argmax",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(argmax_row.unsqueeze(-1), argmax_col.unsqueeze(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_13": {
                "tensors": {
                    "value": "[w, w[1:sz - sz // 2].flip((0,))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_36": {
                "variable": {
                    "value": "window_shift_lr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(window[:, :, :, mid[1]:], window[:, :, :, :mid[1]])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_42": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "int(sz / 2 + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_44": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-int((sz - 1) / 2)",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "int(sz / 2 + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_50": {
                "input": {
                    "value": "-1.0 / (2 * sigma ** 2) * (k - center) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_56": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_120": {
                "variable": {
                    "value": "wrg",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-int((sz[0] - 1) / 2)",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "int(sz[0] / 2 + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_121": {
                "variable": {
                    "value": "wcg",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-int((sz[1] - 1) / 2)",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "int(sz[1] / 2 + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_123": {
                "variable": {
                    "value": "wrg",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.arange(0, int(sz[0] / 2 + 1), dtype=torch.float32), torch.arange(-int((sz[0] - 1) / 2), 0, dtype=torch.float32)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_125": {
                "variable": {
                    "value": "wcg",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.arange(0, int(sz[1] / 2 + 1), dtype=torch.float32), torch.arange(-int((sz[1] - 1) / 2), 0, dtype=torch.float32)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_151": {
                "variable": {
                    "value": "reg_window_dft",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[reg_window_dft[..., 1:].flip((2, 3)), reg_window_dft]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_37": {
                "tensors": {
                    "value": "(window_shift_lr[:, :, mid[0]:, :], window_shift_lr[:, :, :mid[0], :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_45": {
                "input": {
                    "value": "-2 * (math.pi * sigma * k.float() / sz) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rfft_134": {
                "input": {
                    "value": "reg_window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(params.reg_window_edge - params.reg_window_min) * (torch.abs(wrg / reg_scale[0]) ** params.reg_window_power + torch.abs(wcg / reg_scale[1]) ** params.reg_window_power) + params.reg_window_min",
                            "BinOp"
                        ]
                    ]
                },
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cos_12": {
                "input": {
                    "value": "2 * math.pi / (sz + 2) * torch.arange(0, sz // 2 + 1).float()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_79": {
                "*size": {
                    "value": "ky.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_80": {
                "*size": {
                    "value": "kx.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_110": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_113": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_161": {
                "start": {
                    "value": "argmax_col.numel()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_11": {
                "input": {
                    "value": "2 * math.pi / (sz + 1) * torch.arange(1, sz + 1).float()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_66": {
                "input": {
                    "value": "2 * math.pi * f",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_12": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "sz // 2 + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_130": {
                "input": {
                    "value": "wrg / reg_scale[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_131": {
                "input": {
                    "value": "wcg / reg_scale[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_11": {
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "sz + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_123": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "int(sz[0] / 2 + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_124": {
                "start": {
                    "value": "-int((sz[0] - 1) / 2)",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_125": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "int(sz[1] / 2 + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_126": {
                "start": {
                    "value": "-int((sz[1] - 1) / 2)",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_65": {
                "input": {
                    "value": "4 * math.pi * f",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pytracking/libs/fourier.py": {
        "torch": {
            "Tensor_39": {
                "variable": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_67": {
                "variable": {
                    "value": "ky",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-int((sz[0] - 1) / 2)",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "int(sz[0] / 2 + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_68": {
                "variable": {
                    "value": "kx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "int(sz[1] / 2 + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_10": {
                "tensors": {
                    "value": "(a[:, :, (h - 1) // 2:, ...], a[:, :, :h // 2, ...])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_16": {
                "tensors": {
                    "value": "(a[:, :, mid:, ...], a[:, :, :mid, ...])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "irfft_31": {
                "input": {
                    "value": "irfftshift2(a)",
                    "type": "Call",
                    "possible_values": []
                },
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "signal_sizes": {
                    "value": "signal_sizes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rfft_24": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                },
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_61": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, pad_right, pad_top, pad_bottom)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_59": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, pad_right, pad_top, pad_bottom)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "pytracking/libs/operation.py": {
        "torch": {
            "conv2d_29": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(weight.shape[2] // 2, weight.shape[3] // 2)",
                            "Tuple"
                        ],
                        [
                            "(0, 0)",
                            "Tuple"
                        ],
                        [
                            "(weight.shape[2] - 1, weight.shape[3] - 1)",
                            "Tuple"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_42": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "pytracking/libs/optimization.py": {
        "torch": {
            "ones_60": {
                "variable": {
                    "value": "self.rho",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_68": {
                "variable": {
                    "value": "self.rho",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_218": {
                "variable": {
                    "value": "self.residuals",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_219": {
                "variable": {
                    "value": "self.losses",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_279": {
                "variable": {
                    "value": "dfdx_x",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "self.dfdxt_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.p * alpha",
                            "BinOp"
                        ],
                        [
                            "x + self.p * alpha",
                            "BinOp"
                        ],
                        [
                            "(self.x + delta_x).detach()",
                            "Call"
                        ],
                        [
                            "(self.x + delta_x).detach()",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_314": {
                "variable": {
                    "value": "self.residuals",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_315": {
                "variable": {
                    "value": "self.losses",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_316": {
                "variable": {
                    "value": "self.gradient_mags",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_411": {
                "variable": {
                    "value": "dfdx_x",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "self.dfdxt_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.p * alpha",
                            "BinOp"
                        ],
                        [
                            "x + self.p * alpha",
                            "BinOp"
                        ],
                        [
                            "(self.x + delta_x).detach()",
                            "Call"
                        ],
                        [
                            "(self.x + delta_x).detach()",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_453": {
                "variable": {
                    "value": "self.losses",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_454": {
                "variable": {
                    "value": "self.gradient_mags",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_543": {
                "variable": {
                    "value": "self.residuals",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_544": {
                "variable": {
                    "value": "self.losses",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_545": {
                "variable": {
                    "value": "self.gradient_mags",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_658": {
                "variable": {
                    "value": "self.losses",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_659": {
                "variable": {
                    "value": "self.gradient_mags",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_96": {
                "variable": {
                    "value": "resvec",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_iter + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_235": {
                "variable": {
                    "value": "lossvec",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_265": {
                "variable": {
                    "value": "self.residuals",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.residuals, res)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_266": {
                "variable": {
                    "value": "self.losses",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.losses, lossvec)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_390": {
                "variable": {
                    "value": "self.losses",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.losses, loss.detach().cpu().view(-1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_407": {
                "variable": {
                    "value": "self.residuals",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.residuals, res)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_434": {
                "variable": {
                    "value": "self.losses",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.losses, loss.detach().cpu().view(-1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_435": {
                "variable": {
                    "value": "self.gradient_mags",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.gradient_mags, sum(grad.view(-1) @ grad.view(-1)).cpu().sqrt().detach().view(-1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_472": {
                "variable": {
                    "value": "lossvec",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_iter + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_473": {
                "variable": {
                    "value": "grad_mags",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_iter + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_507": {
                "variable": {
                    "value": "self.losses",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.losses, lossvec)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_508": {
                "variable": {
                    "value": "self.gradient_mags",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.gradient_mags, grad_mags)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_597": {
                "variable": {
                    "value": "self.losses",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.losses, self.f0.detach().cpu().view(-1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_612": {
                "variable": {
                    "value": "self.residuals",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.residuals, res)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_638": {
                "variable": {
                    "value": "self.losses",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.losses, loss.detach().cpu().view(-1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_639": {
                "variable": {
                    "value": "self.gradient_mags",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.gradient_mags, sum(grad.view(-1) @ grad.view(-1)).cpu().sqrt().detach().view(-1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_676": {
                "variable": {
                    "value": "lossvec",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_iter + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_677": {
                "variable": {
                    "value": "grad_mags",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_iter + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_707": {
                "variable": {
                    "value": "self.losses",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.losses, lossvec)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_708": {
                "variable": {
                    "value": "self.gradient_mags",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.gradient_mags, grad_mags)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "grad_251": {
                "outputs": {
                    "value": "self.f0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_280": {
                "outputs": {
                    "value": "self.f0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "dfdx_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.autograd.grad(self.dfdxt_g, self.g, x, retain_graph=True)",
                            "Call"
                        ],
                        [
                            "torch.autograd.grad(self.dfdxt_g, self.g, x, retain_graph=True)",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_356": {
                "variable": {
                    "value": "self.losses",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.losses, loss.detach().cpu().view(-1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "grad_395": {
                "outputs": {
                    "value": "self.f0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_412": {
                "outputs": {
                    "value": "self.f0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "dfdx_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.autograd.grad(self.dfdxt_g, self.g, x, retain_graph=True)",
                            "Call"
                        ],
                        [
                            "torch.autograd.grad(self.dfdxt_g, self.g, x, retain_graph=True)",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_575": {
                "variable": {
                    "value": "self.losses",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.losses, loss.detach().cpu().view(-1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "grad_600": {
                "outputs": {
                    "value": "self.f0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_431": {
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.problem.ip_output(self.f0, self.f0)",
                            "Call"
                        ],
                        [
                            "self.problem.ip_output(self.g, self.g)",
                            "Call"
                        ],
                        [
                            "self.problem.ip_output(f, f)",
                            "Call"
                        ],
                        [
                            "self.problem.ip_output(self.f0, self.f0)",
                            "Call"
                        ],
                        [
                            "self.problem.ip_output(self.f0, self.f0)",
                            "Call"
                        ],
                        [
                            "self.problem(self.x)",
                            "Call"
                        ],
                        [
                            "self.problem(x)",
                            "Call"
                        ],
                        [
                            "self.problem(self.x)",
                            "Call"
                        ],
                        [
                            "self.problem(self.x)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.p * alpha",
                            "BinOp"
                        ],
                        [
                            "x + self.p * alpha",
                            "BinOp"
                        ],
                        [
                            "(self.x + delta_x).detach()",
                            "Call"
                        ],
                        [
                            "(self.x + delta_x).detach()",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "grad_485": {
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.problem.ip_output(self.f0, self.f0)",
                            "Call"
                        ],
                        [
                            "self.problem.ip_output(self.g, self.g)",
                            "Call"
                        ],
                        [
                            "self.problem.ip_output(f, f)",
                            "Call"
                        ],
                        [
                            "self.problem.ip_output(self.f0, self.f0)",
                            "Call"
                        ],
                        [
                            "self.problem.ip_output(self.f0, self.f0)",
                            "Call"
                        ],
                        [
                            "self.problem(self.x)",
                            "Call"
                        ],
                        [
                            "self.problem(x)",
                            "Call"
                        ],
                        [
                            "self.problem(self.x)",
                            "Call"
                        ],
                        [
                            "self.problem(self.x)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grad_504": {
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.problem.ip_output(self.f0, self.f0)",
                            "Call"
                        ],
                        [
                            "self.problem.ip_output(self.g, self.g)",
                            "Call"
                        ],
                        [
                            "self.problem.ip_output(f, f)",
                            "Call"
                        ],
                        [
                            "self.problem.ip_output(self.f0, self.f0)",
                            "Call"
                        ],
                        [
                            "self.problem.ip_output(self.f0, self.f0)",
                            "Call"
                        ],
                        [
                            "self.problem(self.x)",
                            "Call"
                        ],
                        [
                            "self.problem(x)",
                            "Call"
                        ],
                        [
                            "self.problem(self.x)",
                            "Call"
                        ],
                        [
                            "self.problem(self.x)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grad_616": {
                "outputs": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.p * alpha",
                            "BinOp"
                        ],
                        [
                            "x + self.p * alpha",
                            "BinOp"
                        ],
                        [
                            "(self.x + delta_x).detach()",
                            "Call"
                        ],
                        [
                            "(self.x + delta_x).detach()",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_635": {
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.problem.ip_output(self.f0, self.f0)",
                            "Call"
                        ],
                        [
                            "self.problem.ip_output(self.g, self.g)",
                            "Call"
                        ],
                        [
                            "self.problem.ip_output(f, f)",
                            "Call"
                        ],
                        [
                            "self.problem.ip_output(self.f0, self.f0)",
                            "Call"
                        ],
                        [
                            "self.problem.ip_output(self.f0, self.f0)",
                            "Call"
                        ],
                        [
                            "self.problem(self.x)",
                            "Call"
                        ],
                        [
                            "self.problem(x)",
                            "Call"
                        ],
                        [
                            "self.problem(self.x)",
                            "Call"
                        ],
                        [
                            "self.problem(self.x)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.p * alpha",
                            "BinOp"
                        ],
                        [
                            "x + self.p * alpha",
                            "BinOp"
                        ],
                        [
                            "(self.x + delta_x).detach()",
                            "Call"
                        ],
                        [
                            "(self.x + delta_x).detach()",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "grad_686": {
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.problem.ip_output(self.f0, self.f0)",
                            "Call"
                        ],
                        [
                            "self.problem.ip_output(self.g, self.g)",
                            "Call"
                        ],
                        [
                            "self.problem.ip_output(f, f)",
                            "Call"
                        ],
                        [
                            "self.problem.ip_output(self.f0, self.f0)",
                            "Call"
                        ],
                        [
                            "self.problem.ip_output(self.f0, self.f0)",
                            "Call"
                        ],
                        [
                            "self.problem(self.x)",
                            "Call"
                        ],
                        [
                            "self.problem(x)",
                            "Call"
                        ],
                        [
                            "self.problem(self.x)",
                            "Call"
                        ],
                        [
                            "self.problem(self.x)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grad_704": {
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.problem.ip_output(self.f0, self.f0)",
                            "Call"
                        ],
                        [
                            "self.problem.ip_output(self.g, self.g)",
                            "Call"
                        ],
                        [
                            "self.problem.ip_output(f, f)",
                            "Call"
                        ],
                        [
                            "self.problem.ip_output(self.f0, self.f0)",
                            "Call"
                        ],
                        [
                            "self.problem.ip_output(self.f0, self.f0)",
                            "Call"
                        ],
                        [
                            "self.problem(self.x)",
                            "Call"
                        ],
                        [
                            "self.problem(x)",
                            "Call"
                        ],
                        [
                            "self.problem(self.x)",
                            "Call"
                        ],
                        [
                            "self.problem(self.x)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pytracking/libs/tensordict.py": {
        "torch": {}
    },
    "pytracking/libs/tensorlist.py": {
        "torch": {}
    },
    "pytracking/parameter/atom/atom_gmm_sampl.py": {
        "torch": {
            "ones_54": {
                "variable": {
                    "value": "params.scale_factors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pytracking/parameter/atom/atom_prob_ml.py": {
        "torch": {
            "ones_54": {
                "variable": {
                    "value": "params.scale_factors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pytracking/parameter/atom/default.py": {
        "torch": {
            "ones_54": {
                "variable": {
                    "value": "params.scale_factors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pytracking/parameter/atom/default_vot.py": {
        "torch": {
            "ones_53": {
                "variable": {
                    "value": "params.scale_factors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pytracking/parameter/atom/multiscale_no_iounet.py": {
        "torch": {
            "arange_54": {
                "start": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pytracking/parameter/eco/default.py": {
        "torch": {
            "arange_46": {
                "start": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pytracking/tracker/RLT_dimp/RLT_dimp.py": {
        "torch": {
            "prod_71": {
                "variable": {
                    "value": "search_area",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.target_sz * self.params.search_area_scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_84": {
                "variable": {
                    "value": "self.min_scale_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "10 / self.base_target_sz",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_85": {
                "variable": {
                    "value": "self.max_scale_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.image_sz / self.base_target_sz",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_438": {
                "variable": {
                    "value": "max_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s[scale_ind, ...]",
                            "Subscript"
                        ],
                        [
                            "local_s[local_scale_ind, ...]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_441": {
                "variable": {
                    "value": "self.search_area_box",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sample_coords[scale_ind, [1, 0]], sample_coords[scale_ind, [3, 2]] - sample_coords[scale_ind, [1, 0]] - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_451": {
                "variable": {
                    "value": "new_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.pos[[1, 0]] - (self.target_sz[[1, 0]] - 1) / 2, self.target_sz[[1, 0]])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_613": {
                "variable": {
                    "value": "(_, scale_ind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "max_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(score_map).item()",
                            "Call"
                        ],
                        [
                            "torch.max(score_map).item()",
                            "Call"
                        ],
                        [
                            "dcf.max2d(scores)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_628": {
                "variable": {
                    "value": "score_sz",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_638": {
                "variable": {
                    "value": "(_, scale_ind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "max_score1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dcf.max2d(scores)",
                            "Call"
                        ],
                        [
                            "max_score1[scale_ind]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_721": {
                "variable": {
                    "value": "im_patches",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.random_erasing(im_patches.squeeze(0)).unsqueeze(0) for i in range(self.params.get('num_erasing'))]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1061": {
                "variable": {
                    "value": "init_target_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "init_target_boxes.view(1, 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_1214": {
                "variable": {
                    "value": "self.pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.min(new_pos, self.image_sz - inside_offset)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_1250": {
                "variable": {
                    "value": "target_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "target_boxes.view(1, 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_1278": {
                "variable": {
                    "value": "self.feature_sz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_1280": {
                "variable": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "topk_1495": {
                "variable": {
                    "value": "(_, inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output_iou",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.optimize_boxes(iou_features, init_boxes)",
                            "Call"
                        ],
                        [
                            "output_iou[keep_ind]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "topk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(k, output_boxes.shape[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_1503": {
                "variable": {
                    "value": "new_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_target_sz.prod() / self.base_target_sz.prod()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_1617": {
                "variable": {
                    "value": "new_scale_bbr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_target_sz.prod() / self.base_target_sz.prod()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_1641": {
                "variable": {
                    "value": "pos_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-pos_dist",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "pos_dist + pos_step",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "pos_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "float"
                        ]
                    ]
                }
            },
            "arange_1642": {
                "variable": {
                    "value": "sz_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-sz_dist",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "sz_dist + sz_step",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "sz_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "float"
                        ]
                    ]
                }
            },
            "zeros_1644": {
                "variable": {
                    "value": "bbx",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "pos_scale.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_1646": {
                "variable": {
                    "value": "bby",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "pos_scale.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_1648": {
                "variable": {
                    "value": "bbw",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "sz_scale.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_1650": {
                "variable": {
                    "value": "bbh",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sz_scale.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_79": {
                "variable": {
                    "value": "self.params.scale_factors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_604": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.view(-1, 1, *scores.shape[-2:])",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.new_ones(1, 1, score_filter_ksz, score_filter_ksz)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "score_filter_ksz // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_672": {
                "variable": {
                    "value": "disp_norm1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum((target_disp1 - prev_target_vec) ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_673": {
                "variable": {
                    "value": "disp_norm2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum((target_disp2 - prev_target_vec) ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_748": {
                "variable": {
                    "value": "im_sz",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_763": {
                "variable": {
                    "value": "global_shift",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_915": {
                "variable": {
                    "value": "im_sz",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_930": {
                "variable": {
                    "value": "global_shift",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1224": {
                "tensors": {
                    "value": "[target_ul.flip((0,)), box_sz.flip((0,))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_tensor_1260": {
                "obj": {
                    "value": "self.iou_modulation[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_1275": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, F.dropout2d(x[0:1, ...].expand(num, -1, -1, -1), p=prob, training=True)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_1311": {
                "variable": {
                    "value": "self.losses",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net.classifier.get_filter(x, target_boxes, num_iter=num_iter, compute_losses=plot_loss)",
                            "Call"
                        ],
                        [
                            "losses['train']",
                            "Subscript"
                        ],
                        [
                            "self.net.classifier.filter_optimizer(self.target_filter, num_iter=num_iter, feat=samples, bb=target_boxes, sample_weight=sample_weights, compute_losses=plot_loss)",
                            "Call"
                        ],
                        [
                            "losses['train']",
                            "Subscript"
                        ],
                        [
                            "self.net.classifier.filter_optimizer(self.target_filter, num_iter=num_iter, feat=samples, bb=target_boxes, sample_weight=sample_weights, compute_losses=plot_loss)",
                            "Call"
                        ],
                        [
                            "losses['train']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Tensor_1425": {
                "variable": {
                    "value": "tensor_weight",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_1429": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(samples, train_x_more)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1475": {
                "variable": {
                    "value": "init_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[new_center - new_sz / 2, new_sz]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1476": {
                "variable": {
                    "value": "init_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[init_box.view(1, 4), init_boxes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Tensor_1532": {
                "variable": {
                    "value": "step_length",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.params.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_1560": {
                "variable": {
                    "value": "step_length",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_81": {
                "variable": {
                    "value": "self.params.scale_factors",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_252": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s[scale_ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_253": {
                "variable": {
                    "value": "sample_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_pos[scale_ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_254": {
                "variable": {
                    "value": "scores_raw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores_raw[scale_ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_255": {
                "variable": {
                    "value": "sample_scales",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_scales[scale_ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_256": {
                "variable": {
                    "value": "sample_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_coords[scale_ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_257": {
                "variable": {
                    "value": "test_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "test_x[scale_ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_578": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_695": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_708": {
                "variable": {
                    "value": "im_patches",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(im_patches, im_patches_local)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_709": {
                "variable": {
                    "value": "patch_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(patch_coords, patch_coords_local)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_711": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_722": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_727": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_734": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_738": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_807": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_1021": {
                "variable": {
                    "value": "im_patches",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(im_patches, im_patches_new)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_1046": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_1214": {
                "input": {
                    "value": "new_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_pos[scale_ind, :] + translation_vec",
                            "BinOp"
                        ],
                        [
                            "sample_pos[scale_ind, :] + translation_vec",
                            "BinOp"
                        ],
                        [
                            "sample_pos[scale_ind, :] + translation_vec",
                            "BinOp"
                        ],
                        [
                            "sample_pos[scale_ind, :] + translation_vec",
                            "BinOp"
                        ],
                        [
                            "list_new_pos[find_i]",
                            "Subscript"
                        ],
                        [
                            "sample_pos[scale_ind, :] + translation_vec",
                            "BinOp"
                        ],
                        [
                            "predicted_box[:2] + predicted_box[2:] / 2",
                            "BinOp"
                        ],
                        [
                            "(new_pos.flip((0,)) - (self.img_sample_sz - 1) / 2) * sample_scale + sample_pos",
                            "BinOp"
                        ],
                        [
                            "predicted_box[:2] + predicted_box[2:] / 2",
                            "BinOp"
                        ],
                        [
                            "(new_pos.flip((0,)) - (self.img_sample_sz - 1) / 2) * sample_scale + sample_pos",
                            "BinOp"
                        ],
                        [
                            "new_pos",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_1300": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_1374": {
                "tensors": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net.classifier.get_filter(x, target_boxes, num_iter=num_iter, compute_losses=plot_loss)",
                            "Call"
                        ],
                        [
                            "losses['train']",
                            "Subscript"
                        ],
                        [
                            "self.net.classifier.filter_optimizer(self.target_filter, num_iter=num_iter, feat=samples, bb=target_boxes, sample_weight=sample_weights, compute_losses=plot_loss)",
                            "Call"
                        ],
                        [
                            "losses['train']",
                            "Subscript"
                        ],
                        [
                            "self.net.classifier.filter_optimizer(self.target_filter, num_iter=num_iter, feat=samples, bb=target_boxes, sample_weight=sample_weights, compute_losses=plot_loss)",
                            "Call"
                        ],
                        [
                            "losses['train']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_1431": {
                "variable": {
                    "value": "target_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(target_boxes, target_box_more.cuda())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1433": {
                "variable": {
                    "value": "target_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(target_boxes, target_box_more)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1446": {
                "tensors": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net.classifier.get_filter(x, target_boxes, num_iter=num_iter, compute_losses=plot_loss)",
                            "Call"
                        ],
                        [
                            "losses['train']",
                            "Subscript"
                        ],
                        [
                            "self.net.classifier.filter_optimizer(self.target_filter, num_iter=num_iter, feat=samples, bb=target_boxes, sample_weight=sample_weights, compute_losses=plot_loss)",
                            "Call"
                        ],
                        [
                            "losses['train']",
                            "Subscript"
                        ],
                        [
                            "self.net.classifier.filter_optimizer(self.target_filter, num_iter=num_iter, feat=samples, bb=target_boxes, sample_weight=sample_weights, compute_losses=plot_loss)",
                            "Call"
                        ],
                        [
                            "losses['train']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "round_66": {
                "input": {
                    "value": "sz / stride",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_261": {
                "variable": {
                    "value": "backbone_feat_new[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "value[scale_ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_265": {
                "variable": {
                    "value": "scale_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_267": {
                "variable": {
                    "value": "scale_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_323": {
                "variable": {
                    "value": "max_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s[scale_ind, ...]",
                            "Subscript"
                        ],
                        [
                            "local_s[local_scale_ind, ...]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_672": {
                "input": {
                    "value": "(target_disp1 - prev_target_vec) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_673": {
                "input": {
                    "value": "(target_disp2 - prev_target_vec) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_1144": {
                "variable": {
                    "value": "(_, r_ind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sw[s_ind:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_1186": {
                "variable": {
                    "value": "(_, r_ind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sw[s_ind:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_1364": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1436": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_1469": {
                "tensors": {
                    "value": "[self.params.box_jitter_pos * torch.ones(2), self.params.box_jitter_sz * torch.ones(2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Tensor_1060": {},
            "Tensor_1249": {},
            "dropout2d_1275": {
                "input": {
                    "value": "x[0:1, ...].expand(num, -1, -1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_1394": {
                "variable": {
                    "value": "train_x_more_local",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "train_x_more[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_1472": {
                "*size": {
                    "value": "self.params.num_init_random_boxes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_1544": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net.bb_regressor.predict_iou(self.iou_modulation, iou_features, bb_init)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "self.net.bb_regressor.predict_iou(self.iou_modulation, iou_features, bb_init)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_like_1575": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net.bb_regressor.predict_iou(self.iou_modulation, iou_features, bb_init)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "self.net.bb_regressor.predict_iou(self.iou_modulation, iou_features, bb_init)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_419": {
                "variable": {
                    "value": "target_box_more_local",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_box_more_local",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_iounet_box(list_more_search_pos[i], self.target_sz, sample_pos_more[i], sample_scales_more[i])",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(target_box_more_local, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_1247": {},
            "arange_1313": {
                "start": {
                    "value": "self.losses.numel()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_423": {
                "variable": {
                    "value": "target_box_more",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(target_box_more, target_box_more_local)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_1376": {
                "start": {
                    "value": "self.losses.numel()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_1448": {
                "start": {
                    "value": "self.losses.numel()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_1469": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_792": {},
            "Tensor_958": {},
            "rand_781": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_948": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pytracking/tracker/atom/atom.py": {
        "torch": {
            "prod_51": {
                "variable": {
                    "value": "search_area",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.target_sz * self.params.search_area_scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_107": {
                "variable": {
                    "value": "self.min_scale_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "10 / self.base_target_sz",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_108": {
                "variable": {
                    "value": "self.max_scale_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.image_sz / self.base_target_sz",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_257": {
                "variable": {
                    "value": "max_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s[scale_ind, ...]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_295": {
                "variable": {
                    "value": "new_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.pos[[1, 0]] - (self.target_sz[[1, 0]] - 1) / 2, self.target_sz[[1, 0]])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_323": {
                "variable": {
                    "value": "(_, scale_ind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "max_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(score_map).item()",
                            "Call"
                        ],
                        [
                            "dcf.max2d(scores)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_355": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[scores[..., (sz[0] + 1) // 2:, :], scores[..., :(sz[0] + 1) // 2, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_356": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[scores[..., :, (sz[1] + 1) // 2:], scores[..., :, :(sz[1] + 1) // 2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_360": {
                "variable": {
                    "value": "(_, scale_ind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "max_score1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dcf.max2d(scores)",
                            "Call"
                        ],
                        [
                            "max_score1[scale_ind]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_659": {
                "variable": {
                    "value": "self.pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.min(new_pos, self.image_sz - inside_offset)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_684": {
                "variable": {
                    "value": "target_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "target_boxes.view(1, 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_738": {
                "variable": {
                    "value": "(_, inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output_iou",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.optimize_boxes(iou_features, init_boxes)",
                            "Call"
                        ],
                        [
                            "output_iou[keep_ind]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "topk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(k, output_boxes.shape[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_746": {
                "variable": {
                    "value": "new_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_target_sz.prod() / self.base_target_sz.prod()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_770": {
                "variable": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.optimize_boxes(iou_features, init_boxes)",
                            "Call"
                        ],
                        [
                            "output_boxes[keep_ind, :]",
                            "Subscript"
                        ],
                        [
                            "init_boxes.view(1, -1, 4).to(self.params.device)",
                            "Call"
                        ],
                        [
                            "bb_init + step",
                            "BinOp"
                        ],
                        [
                            "bbutils.rel_to_rect(output_boxes_rel, sz_norm)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_336": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[scores[..., sz[0] // 2:, :], scores[..., :sz[0] // 2, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_337": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[scores[..., :, sz[1] // 2:], scores[..., :, :sz[1] // 2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_349": {
                "variable": {
                    "value": "scores_orig",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[scores_orig[..., (sz[0] + 1) // 2:, :], scores_orig[..., :(sz[0] + 1) // 2, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_350": {
                "variable": {
                    "value": "scores_orig",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[scores_orig[..., :, (sz[1] + 1) // 2:], scores_orig[..., :, :(sz[1] + 1) // 2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_389": {
                "variable": {
                    "value": "disp_norm1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(target_disp1 ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_390": {
                "variable": {
                    "value": "disp_norm2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(target_disp2 ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_666": {
                "tensors": {
                    "value": "[target_ul.flip((0,)), box_sz.flip((0,))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_718": {
                "variable": {
                    "value": "init_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[new_center - new_sz / 2, new_sz]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_719": {
                "variable": {
                    "value": "init_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[init_box.view(1, 4), init_boxes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "round_68": {
                "variable": {
                    "value": "self.img_sample_sz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.base_target_sz * self.params.search_area_scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_448": {
                "variable": {
                    "value": "self.projection_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_464": {
                "variable": {
                    "value": "self.response_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_556": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_622": {
                "variable": {
                    "value": "(_, r_ind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sw[s_ind:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_659": {
                "input": {
                    "value": "new_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predicted_box[:2] + predicted_box[2:] / 2 - (self.iou_img_sample_sz - 1) / 2",
                            "BinOp"
                        ],
                        [
                            "new_pos.flip((0,)) * sample_scale + sample_pos",
                            "BinOp"
                        ],
                        [
                            "new_pos",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_693": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "round_66": {
                "input": {
                    "value": "torch.sqrt(torch.prod(self.base_target_sz * self.params.search_area_scale))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_66": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_389": {
                "input": {
                    "value": "target_disp1 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_390": {
                "input": {
                    "value": "target_disp2 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ELU_450": {
                "variable": {
                    "value": "self.projection_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ELU_466": {
                "variable": {
                    "value": "self.response_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_522": {
                "variable": {
                    "value": "init_samples[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[init_samples[i], F.dropout2d(init_samples[i][0:1, ...].expand(num, -1, -1, -1), p=prob, training=True)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_713": {
                "tensors": {
                    "value": "[self.params.box_jitter_pos * torch.ones(2), self.params.box_jitter_sz * torch.ones(2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_66": {
                "input": {
                    "value": "torch.prod(self.base_target_sz * self.params.search_area_scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_like_698": {
                "input": {
                    "value": "tf",
                    "type": "variable",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "tf.norm() / tf.numel()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_715": {
                "*size": {
                    "value": "self.params.num_init_random_boxes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "prod_66": {
                "input": {
                    "value": "self.base_target_sz * self.params.search_area_scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tensor_681": {},
            "ones_like_784": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.iou_predictor.predict_iou(self.target_feat, iou_features, bb_init)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "self.iou_predictor.predict_iou(self.target_feat, iou_features, bb_init)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Tensor_310": {},
            "elu_452": {
                "input": {
                    "value": "F.leaky_relu(x, 1 / act_param)",
                    "type": "Call",
                    "possible_values": []
                },
                "alpha": {
                    "value": "act_param",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "elu_468": {
                "input": {
                    "value": "F.leaky_relu(x, 1 / act_param)",
                    "type": "Call",
                    "possible_values": []
                },
                "alpha": {
                    "value": "act_param",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dropout2d_522": {
                "input": {
                    "value": "init_samples[i][0:1, ...].expand(num, -1, -1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_540": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_540": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clone_540": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_565": {},
            "ones_713": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_813": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.iou_predictor.predict_iou(self.target_feat, iou_features, bb_init)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "self.iou_predictor.predict_iou(self.target_feat, iou_features, bb_init)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "leaky_relu_452": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.generate_init_samples(im)",
                            "Call"
                        ],
                        [
                            "self.extract_sample(im, pos, scales, sz)",
                            "Call"
                        ],
                        [
                            "x * self.feature_window",
                            "BinOp"
                        ],
                        [
                            "zip(self.y, self.sigma, self.feature_sz, self.kernel_size, train_x)",
                            "Call"
                        ],
                        [
                            "zip(self.training_samples, sample_x, replace_ind)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "1 / act_param",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "leaky_relu_468": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.generate_init_samples(im)",
                            "Call"
                        ],
                        [
                            "self.extract_sample(im, pos, scales, sz)",
                            "Call"
                        ],
                        [
                            "x * self.feature_window",
                            "BinOp"
                        ],
                        [
                            "zip(self.y, self.sigma, self.feature_sz, self.kernel_size, train_x)",
                            "Call"
                        ],
                        [
                            "zip(self.training_samples, sample_x, replace_ind)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "1 / act_param",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tensor_497": {},
            "rand_490": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "svd_540": {
                "input": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "pytracking/tracker/atom/optim.py": {
        "torch": {}
    },
    "pytracking/tracker/dimp/dimp.py": {
        "torch": {
            "prod_71": {
                "variable": {
                    "value": "search_area",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.target_sz * self.params.search_area_scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_84": {
                "variable": {
                    "value": "self.min_scale_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "10 / self.base_target_sz",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_85": {
                "variable": {
                    "value": "self.max_scale_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.image_sz / self.base_target_sz",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_439": {
                "variable": {
                    "value": "max_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s[scale_ind, ...]",
                            "Subscript"
                        ],
                        [
                            "local_s[local_scale_ind, ...]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_442": {
                "variable": {
                    "value": "self.search_area_box",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sample_coords[scale_ind, [1, 0]], sample_coords[scale_ind, [3, 2]] - sample_coords[scale_ind, [1, 0]] - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_452": {
                "variable": {
                    "value": "new_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.pos[[1, 0]] - (self.target_sz[[1, 0]] - 1) / 2, self.target_sz[[1, 0]])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_614": {
                "variable": {
                    "value": "(_, scale_ind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "max_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(score_map).item()",
                            "Call"
                        ],
                        [
                            "torch.max(score_map).item()",
                            "Call"
                        ],
                        [
                            "dcf.max2d(scores)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_629": {
                "variable": {
                    "value": "score_sz",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_639": {
                "variable": {
                    "value": "(_, scale_ind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "max_score1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dcf.max2d(scores)",
                            "Call"
                        ],
                        [
                            "max_score1[scale_ind]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_722": {
                "variable": {
                    "value": "im_patches",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.random_erasing(im_patches.squeeze(0)).unsqueeze(0) for i in range(self.params.get('num_erasing'))]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1062": {
                "variable": {
                    "value": "init_target_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "init_target_boxes.view(1, 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_1215": {
                "variable": {
                    "value": "self.pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.min(new_pos, self.image_sz - inside_offset)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_1251": {
                "variable": {
                    "value": "target_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "target_boxes.view(1, 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_1279": {
                "variable": {
                    "value": "self.feature_sz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_1281": {
                "variable": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "topk_1496": {
                "variable": {
                    "value": "(_, inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output_iou",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.optimize_boxes(iou_features, init_boxes)",
                            "Call"
                        ],
                        [
                            "output_iou[keep_ind]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "topk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(k, output_boxes.shape[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_1504": {
                "variable": {
                    "value": "new_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_target_sz.prod() / self.base_target_sz.prod()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_1618": {
                "variable": {
                    "value": "new_scale_bbr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_target_sz.prod() / self.base_target_sz.prod()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_1642": {
                "variable": {
                    "value": "pos_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-pos_dist",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "pos_dist + pos_step",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "pos_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "float"
                        ]
                    ]
                }
            },
            "arange_1643": {
                "variable": {
                    "value": "sz_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-sz_dist",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "sz_dist + sz_step",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "sz_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "float"
                        ]
                    ]
                }
            },
            "zeros_1645": {
                "variable": {
                    "value": "bbx",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "pos_scale.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_1647": {
                "variable": {
                    "value": "bby",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "pos_scale.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_1649": {
                "variable": {
                    "value": "bbw",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "sz_scale.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_1651": {
                "variable": {
                    "value": "bbh",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sz_scale.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_79": {
                "variable": {
                    "value": "self.params.scale_factors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_605": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.view(-1, 1, *scores.shape[-2:])",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.new_ones(1, 1, score_filter_ksz, score_filter_ksz)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "score_filter_ksz // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_673": {
                "variable": {
                    "value": "disp_norm1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum((target_disp1 - prev_target_vec) ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_674": {
                "variable": {
                    "value": "disp_norm2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum((target_disp2 - prev_target_vec) ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_749": {
                "variable": {
                    "value": "im_sz",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_764": {
                "variable": {
                    "value": "global_shift",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_916": {
                "variable": {
                    "value": "im_sz",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_931": {
                "variable": {
                    "value": "global_shift",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1225": {
                "tensors": {
                    "value": "[target_ul.flip((0,)), box_sz.flip((0,))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_tensor_1261": {
                "obj": {
                    "value": "self.iou_modulation[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_1276": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, F.dropout2d(x[0:1, ...].expand(num, -1, -1, -1), p=prob, training=True)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_1312": {
                "variable": {
                    "value": "self.losses",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net.classifier.get_filter(x, target_boxes, num_iter=num_iter, compute_losses=plot_loss)",
                            "Call"
                        ],
                        [
                            "losses['train']",
                            "Subscript"
                        ],
                        [
                            "self.net.classifier.filter_optimizer(self.target_filter, num_iter=num_iter, feat=samples, bb=target_boxes, sample_weight=sample_weights, compute_losses=plot_loss)",
                            "Call"
                        ],
                        [
                            "losses['train']",
                            "Subscript"
                        ],
                        [
                            "self.net.classifier.filter_optimizer(self.target_filter, num_iter=num_iter, feat=samples, bb=target_boxes, sample_weight=sample_weights, compute_losses=plot_loss)",
                            "Call"
                        ],
                        [
                            "losses['train']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Tensor_1426": {
                "variable": {
                    "value": "tensor_weight",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_1430": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(samples, train_x_more)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1476": {
                "variable": {
                    "value": "init_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[new_center - new_sz / 2, new_sz]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1477": {
                "variable": {
                    "value": "init_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[init_box.view(1, 4), init_boxes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Tensor_1533": {
                "variable": {
                    "value": "step_length",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.params.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_1561": {
                "variable": {
                    "value": "step_length",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_81": {
                "variable": {
                    "value": "self.params.scale_factors",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_253": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s[scale_ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_254": {
                "variable": {
                    "value": "sample_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_pos[scale_ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_255": {
                "variable": {
                    "value": "scores_raw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores_raw[scale_ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_256": {
                "variable": {
                    "value": "sample_scales",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_scales[scale_ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_257": {
                "variable": {
                    "value": "sample_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_coords[scale_ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_258": {
                "variable": {
                    "value": "test_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "test_x[scale_ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_579": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_696": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_709": {
                "variable": {
                    "value": "im_patches",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(im_patches, im_patches_local)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_710": {
                "variable": {
                    "value": "patch_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(patch_coords, patch_coords_local)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_712": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_723": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_728": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_735": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_739": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_808": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_1022": {
                "variable": {
                    "value": "im_patches",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(im_patches, im_patches_new)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_1047": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_1215": {
                "input": {
                    "value": "new_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_pos[scale_ind, :] + translation_vec",
                            "BinOp"
                        ],
                        [
                            "sample_pos[scale_ind, :] + translation_vec",
                            "BinOp"
                        ],
                        [
                            "sample_pos[scale_ind, :] + translation_vec",
                            "BinOp"
                        ],
                        [
                            "sample_pos[scale_ind, :] + translation_vec",
                            "BinOp"
                        ],
                        [
                            "list_new_pos[find_i]",
                            "Subscript"
                        ],
                        [
                            "sample_pos[scale_ind, :] + translation_vec",
                            "BinOp"
                        ],
                        [
                            "predicted_box[:2] + predicted_box[2:] / 2",
                            "BinOp"
                        ],
                        [
                            "(new_pos.flip((0,)) - (self.img_sample_sz - 1) / 2) * sample_scale + sample_pos",
                            "BinOp"
                        ],
                        [
                            "predicted_box[:2] + predicted_box[2:] / 2",
                            "BinOp"
                        ],
                        [
                            "(new_pos.flip((0,)) - (self.img_sample_sz - 1) / 2) * sample_scale + sample_pos",
                            "BinOp"
                        ],
                        [
                            "new_pos",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_1301": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_1375": {
                "tensors": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net.classifier.get_filter(x, target_boxes, num_iter=num_iter, compute_losses=plot_loss)",
                            "Call"
                        ],
                        [
                            "losses['train']",
                            "Subscript"
                        ],
                        [
                            "self.net.classifier.filter_optimizer(self.target_filter, num_iter=num_iter, feat=samples, bb=target_boxes, sample_weight=sample_weights, compute_losses=plot_loss)",
                            "Call"
                        ],
                        [
                            "losses['train']",
                            "Subscript"
                        ],
                        [
                            "self.net.classifier.filter_optimizer(self.target_filter, num_iter=num_iter, feat=samples, bb=target_boxes, sample_weight=sample_weights, compute_losses=plot_loss)",
                            "Call"
                        ],
                        [
                            "losses['train']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_1432": {
                "variable": {
                    "value": "target_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(target_boxes, target_box_more.cuda())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1434": {
                "variable": {
                    "value": "target_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(target_boxes, target_box_more)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1447": {
                "tensors": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net.classifier.get_filter(x, target_boxes, num_iter=num_iter, compute_losses=plot_loss)",
                            "Call"
                        ],
                        [
                            "losses['train']",
                            "Subscript"
                        ],
                        [
                            "self.net.classifier.filter_optimizer(self.target_filter, num_iter=num_iter, feat=samples, bb=target_boxes, sample_weight=sample_weights, compute_losses=plot_loss)",
                            "Call"
                        ],
                        [
                            "losses['train']",
                            "Subscript"
                        ],
                        [
                            "self.net.classifier.filter_optimizer(self.target_filter, num_iter=num_iter, feat=samples, bb=target_boxes, sample_weight=sample_weights, compute_losses=plot_loss)",
                            "Call"
                        ],
                        [
                            "losses['train']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "round_66": {
                "input": {
                    "value": "sz / stride",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_262": {
                "variable": {
                    "value": "backbone_feat_new[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "value[scale_ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_266": {
                "variable": {
                    "value": "scale_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_268": {
                "variable": {
                    "value": "scale_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_324": {
                "variable": {
                    "value": "max_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s[scale_ind, ...]",
                            "Subscript"
                        ],
                        [
                            "local_s[local_scale_ind, ...]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_673": {
                "input": {
                    "value": "(target_disp1 - prev_target_vec) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_674": {
                "input": {
                    "value": "(target_disp2 - prev_target_vec) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_1145": {
                "variable": {
                    "value": "(_, r_ind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sw[s_ind:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_1187": {
                "variable": {
                    "value": "(_, r_ind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sw[s_ind:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_1365": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1437": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_1470": {
                "tensors": {
                    "value": "[self.params.box_jitter_pos * torch.ones(2), self.params.box_jitter_sz * torch.ones(2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Tensor_1061": {},
            "Tensor_1250": {},
            "dropout2d_1276": {
                "input": {
                    "value": "x[0:1, ...].expand(num, -1, -1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_1395": {
                "variable": {
                    "value": "train_x_more_local",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "train_x_more[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_1473": {
                "*size": {
                    "value": "self.params.num_init_random_boxes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_1545": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net.bb_regressor.predict_iou(self.iou_modulation, iou_features, bb_init)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "self.net.bb_regressor.predict_iou(self.iou_modulation, iou_features, bb_init)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_like_1576": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net.bb_regressor.predict_iou(self.iou_modulation, iou_features, bb_init)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "self.net.bb_regressor.predict_iou(self.iou_modulation, iou_features, bb_init)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_420": {
                "variable": {
                    "value": "target_box_more_local",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_box_more_local",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_iounet_box(list_more_search_pos[i], self.target_sz, sample_pos_more[i], sample_scales_more[i])",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(target_box_more_local, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_1248": {},
            "arange_1314": {
                "start": {
                    "value": "self.losses.numel()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_424": {
                "variable": {
                    "value": "target_box_more",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(target_box_more, target_box_more_local)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_1377": {
                "start": {
                    "value": "self.losses.numel()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_1449": {
                "start": {
                    "value": "self.losses.numel()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_1470": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_793": {},
            "Tensor_959": {},
            "rand_782": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_949": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pytracking/tracker/dimplt/dimplt.py": {
        "torch": {
            "prod_71": {
                "variable": {
                    "value": "search_area",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.target_sz * self.params.search_area_scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_84": {
                "variable": {
                    "value": "self.min_scale_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "10 / self.base_target_sz",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_85": {
                "variable": {
                    "value": "self.max_scale_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.image_sz / self.base_target_sz",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_439": {
                "variable": {
                    "value": "max_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s[scale_ind, ...]",
                            "Subscript"
                        ],
                        [
                            "local_s[local_scale_ind, ...]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_442": {
                "variable": {
                    "value": "self.search_area_box",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sample_coords[scale_ind, [1, 0]], sample_coords[scale_ind, [3, 2]] - sample_coords[scale_ind, [1, 0]] - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_452": {
                "variable": {
                    "value": "new_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.pos[[1, 0]] - (self.target_sz[[1, 0]] - 1) / 2, self.target_sz[[1, 0]])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_614": {
                "variable": {
                    "value": "(_, scale_ind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "max_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(score_map).item()",
                            "Call"
                        ],
                        [
                            "torch.max(score_map).item()",
                            "Call"
                        ],
                        [
                            "dcf.max2d(scores)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_629": {
                "variable": {
                    "value": "score_sz",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_639": {
                "variable": {
                    "value": "(_, scale_ind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "max_score1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dcf.max2d(scores)",
                            "Call"
                        ],
                        [
                            "max_score1[scale_ind]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_722": {
                "variable": {
                    "value": "im_patches",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.random_erasing(im_patches.squeeze(0)).unsqueeze(0) for i in range(self.params.get('num_erasing'))]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1062": {
                "variable": {
                    "value": "init_target_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "init_target_boxes.view(1, 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_1215": {
                "variable": {
                    "value": "self.pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.min(new_pos, self.image_sz - inside_offset)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_1251": {
                "variable": {
                    "value": "target_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "target_boxes.view(1, 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_1279": {
                "variable": {
                    "value": "self.feature_sz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_1281": {
                "variable": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "topk_1496": {
                "variable": {
                    "value": "(_, inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output_iou",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.optimize_boxes(iou_features, init_boxes)",
                            "Call"
                        ],
                        [
                            "output_iou[keep_ind]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "topk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(k, output_boxes.shape[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_1504": {
                "variable": {
                    "value": "new_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_target_sz.prod() / self.base_target_sz.prod()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_1618": {
                "variable": {
                    "value": "new_scale_bbr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_target_sz.prod() / self.base_target_sz.prod()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_1642": {
                "variable": {
                    "value": "pos_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-pos_dist",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "pos_dist + pos_step",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "pos_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "float"
                        ]
                    ]
                }
            },
            "arange_1643": {
                "variable": {
                    "value": "sz_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-sz_dist",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "sz_dist + sz_step",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "sz_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "float"
                        ]
                    ]
                }
            },
            "zeros_1645": {
                "variable": {
                    "value": "bbx",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "pos_scale.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_1647": {
                "variable": {
                    "value": "bby",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "pos_scale.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_1649": {
                "variable": {
                    "value": "bbw",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "sz_scale.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_1651": {
                "variable": {
                    "value": "bbh",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sz_scale.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_79": {
                "variable": {
                    "value": "self.params.scale_factors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_605": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.view(-1, 1, *scores.shape[-2:])",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.new_ones(1, 1, score_filter_ksz, score_filter_ksz)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "score_filter_ksz // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_673": {
                "variable": {
                    "value": "disp_norm1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum((target_disp1 - prev_target_vec) ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_674": {
                "variable": {
                    "value": "disp_norm2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum((target_disp2 - prev_target_vec) ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_749": {
                "variable": {
                    "value": "im_sz",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_764": {
                "variable": {
                    "value": "global_shift",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_916": {
                "variable": {
                    "value": "im_sz",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_931": {
                "variable": {
                    "value": "global_shift",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1225": {
                "tensors": {
                    "value": "[target_ul.flip((0,)), box_sz.flip((0,))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_tensor_1261": {
                "obj": {
                    "value": "self.iou_modulation[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_1276": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, F.dropout2d(x[0:1, ...].expand(num, -1, -1, -1), p=prob, training=True)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_1312": {
                "variable": {
                    "value": "self.losses",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net.classifier.get_filter(x, target_boxes, num_iter=num_iter, compute_losses=plot_loss)",
                            "Call"
                        ],
                        [
                            "losses['train']",
                            "Subscript"
                        ],
                        [
                            "self.net.classifier.filter_optimizer(self.target_filter, num_iter=num_iter, feat=samples, bb=target_boxes, sample_weight=sample_weights, compute_losses=plot_loss)",
                            "Call"
                        ],
                        [
                            "losses['train']",
                            "Subscript"
                        ],
                        [
                            "self.net.classifier.filter_optimizer(self.target_filter, num_iter=num_iter, feat=samples, bb=target_boxes, sample_weight=sample_weights, compute_losses=plot_loss)",
                            "Call"
                        ],
                        [
                            "losses['train']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Tensor_1426": {
                "variable": {
                    "value": "tensor_weight",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_1430": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(samples, train_x_more)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1476": {
                "variable": {
                    "value": "init_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[new_center - new_sz / 2, new_sz]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1477": {
                "variable": {
                    "value": "init_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[init_box.view(1, 4), init_boxes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Tensor_1533": {
                "variable": {
                    "value": "step_length",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.params.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_1561": {
                "variable": {
                    "value": "step_length",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_81": {
                "variable": {
                    "value": "self.params.scale_factors",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_253": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s[scale_ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_254": {
                "variable": {
                    "value": "sample_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_pos[scale_ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_255": {
                "variable": {
                    "value": "scores_raw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores_raw[scale_ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_256": {
                "variable": {
                    "value": "sample_scales",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_scales[scale_ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_257": {
                "variable": {
                    "value": "sample_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_coords[scale_ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_258": {
                "variable": {
                    "value": "test_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "test_x[scale_ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_579": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_696": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_709": {
                "variable": {
                    "value": "im_patches",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(im_patches, im_patches_local)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_710": {
                "variable": {
                    "value": "patch_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(patch_coords, patch_coords_local)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_712": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_723": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_728": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_735": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_739": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_808": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_1022": {
                "variable": {
                    "value": "im_patches",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(im_patches, im_patches_new)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_1047": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_1215": {
                "input": {
                    "value": "new_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_pos[scale_ind, :] + translation_vec",
                            "BinOp"
                        ],
                        [
                            "sample_pos[scale_ind, :] + translation_vec",
                            "BinOp"
                        ],
                        [
                            "sample_pos[scale_ind, :] + translation_vec",
                            "BinOp"
                        ],
                        [
                            "sample_pos[scale_ind, :] + translation_vec",
                            "BinOp"
                        ],
                        [
                            "list_new_pos[find_i]",
                            "Subscript"
                        ],
                        [
                            "sample_pos[scale_ind, :] + translation_vec",
                            "BinOp"
                        ],
                        [
                            "predicted_box[:2] + predicted_box[2:] / 2",
                            "BinOp"
                        ],
                        [
                            "(new_pos.flip((0,)) - (self.img_sample_sz - 1) / 2) * sample_scale + sample_pos",
                            "BinOp"
                        ],
                        [
                            "predicted_box[:2] + predicted_box[2:] / 2",
                            "BinOp"
                        ],
                        [
                            "(new_pos.flip((0,)) - (self.img_sample_sz - 1) / 2) * sample_scale + sample_pos",
                            "BinOp"
                        ],
                        [
                            "new_pos",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_1301": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_1375": {
                "tensors": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net.classifier.get_filter(x, target_boxes, num_iter=num_iter, compute_losses=plot_loss)",
                            "Call"
                        ],
                        [
                            "losses['train']",
                            "Subscript"
                        ],
                        [
                            "self.net.classifier.filter_optimizer(self.target_filter, num_iter=num_iter, feat=samples, bb=target_boxes, sample_weight=sample_weights, compute_losses=plot_loss)",
                            "Call"
                        ],
                        [
                            "losses['train']",
                            "Subscript"
                        ],
                        [
                            "self.net.classifier.filter_optimizer(self.target_filter, num_iter=num_iter, feat=samples, bb=target_boxes, sample_weight=sample_weights, compute_losses=plot_loss)",
                            "Call"
                        ],
                        [
                            "losses['train']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_1432": {
                "variable": {
                    "value": "target_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(target_boxes, target_box_more.cuda())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1434": {
                "variable": {
                    "value": "target_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(target_boxes, target_box_more)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1447": {
                "tensors": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net.classifier.get_filter(x, target_boxes, num_iter=num_iter, compute_losses=plot_loss)",
                            "Call"
                        ],
                        [
                            "losses['train']",
                            "Subscript"
                        ],
                        [
                            "self.net.classifier.filter_optimizer(self.target_filter, num_iter=num_iter, feat=samples, bb=target_boxes, sample_weight=sample_weights, compute_losses=plot_loss)",
                            "Call"
                        ],
                        [
                            "losses['train']",
                            "Subscript"
                        ],
                        [
                            "self.net.classifier.filter_optimizer(self.target_filter, num_iter=num_iter, feat=samples, bb=target_boxes, sample_weight=sample_weights, compute_losses=plot_loss)",
                            "Call"
                        ],
                        [
                            "losses['train']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "round_66": {
                "input": {
                    "value": "sz / stride",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_262": {
                "variable": {
                    "value": "backbone_feat_new[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "value[scale_ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_266": {
                "variable": {
                    "value": "scale_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_268": {
                "variable": {
                    "value": "scale_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_324": {
                "variable": {
                    "value": "max_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s[scale_ind, ...]",
                            "Subscript"
                        ],
                        [
                            "local_s[local_scale_ind, ...]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_673": {
                "input": {
                    "value": "(target_disp1 - prev_target_vec) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_674": {
                "input": {
                    "value": "(target_disp2 - prev_target_vec) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_1145": {
                "variable": {
                    "value": "(_, r_ind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sw[s_ind:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_1187": {
                "variable": {
                    "value": "(_, r_ind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sw[s_ind:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_1365": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1437": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_1470": {
                "tensors": {
                    "value": "[self.params.box_jitter_pos * torch.ones(2), self.params.box_jitter_sz * torch.ones(2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Tensor_1061": {},
            "Tensor_1250": {},
            "dropout2d_1276": {
                "input": {
                    "value": "x[0:1, ...].expand(num, -1, -1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_1395": {
                "variable": {
                    "value": "train_x_more_local",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "train_x_more[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_1473": {
                "*size": {
                    "value": "self.params.num_init_random_boxes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_1545": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net.bb_regressor.predict_iou(self.iou_modulation, iou_features, bb_init)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "self.net.bb_regressor.predict_iou(self.iou_modulation, iou_features, bb_init)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_like_1576": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net.bb_regressor.predict_iou(self.iou_modulation, iou_features, bb_init)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "self.net.bb_regressor.predict_iou(self.iou_modulation, iou_features, bb_init)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_420": {
                "variable": {
                    "value": "target_box_more_local",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_box_more_local",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_iounet_box(list_more_search_pos[i], self.target_sz, sample_pos_more[i], sample_scales_more[i])",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(target_box_more_local, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_1248": {},
            "arange_1314": {
                "start": {
                    "value": "self.losses.numel()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_424": {
                "variable": {
                    "value": "target_box_more",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(target_box_more, target_box_more_local)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_1377": {
                "start": {
                    "value": "self.losses.numel()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_1449": {
                "start": {
                    "value": "self.losses.numel()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_1470": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_793": {},
            "Tensor_959": {},
            "rand_782": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_949": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pytracking/tracker/eco/eco.py": {
        "torch": {
            "Tensor_44": {
                "variable": {
                    "value": "self.target_sz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "prod_48": {
                "variable": {
                    "value": "search_area",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.target_sz * self.params.search_area_scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tensor_102": {
                "variable": {
                    "value": "self.image_sz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_103": {
                "variable": {
                    "value": "self.min_scale_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "10 / self.base_target_sz",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_104": {
                "variable": {
                    "value": "self.max_scale_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.image_sz / self.base_target_sz",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_206": {
                "variable": {
                    "value": "max_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s[scale_ind, ...]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_238": {
                "variable": {
                    "value": "new_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.pos[[1, 0]] - (self.target_sz[[1, 0]] - 1) / 2, self.target_sz[[1, 0]])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_273": {
                "variable": {
                    "value": "(_, scale_ind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "max_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(score_map).item()",
                            "Call"
                        ],
                        [
                            "dcf.max2d(scores)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_380": {
                "variable": {
                    "value": "self.pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.min(new_pos, self.image_sz - inside_offset)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "round_59": {
                "input": {
                    "value": "torch.sqrt(torch.prod(self.base_target_sz * self.params.search_area_scale))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_59": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_307": {
                "input": {
                    "value": "x.permute(2, 3, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "permute_307": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_355": {
                "variable": {
                    "value": "(_, r_ind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(self.sample_weights, self.init_sample_weights, num_init_samples)",
                            "Call"
                        ],
                        [
                            "zip(self.sample_weights, self.previous_replace_ind, self.num_stored_samples, self.fparams)",
                            "Call"
                        ],
                        [
                            "sw / (1 - fparams.learning_rate)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "min_380": {
                "input": {
                    "value": "new_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_pos",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_59": {
                "input": {
                    "value": "torch.prod(self.base_target_sz * self.params.search_area_scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_87": {
                "input": {
                    "value": "self.base_target_sz.prod()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clone_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "round_256": {
                "variable": {
                    "value": "sample_sz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.output_sz.view(1, -1) * self.params.scale_factors.view(-1, 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_334": {
                "variable": {
                    "value": "init_samples[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[init_samples[i], F.dropout2d(init_samples[i][0:1, ...].expand(num, -1, -1, -1), p=prob, training=True)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "prod_59": {
                "input": {
                    "value": "self.base_target_sz * self.params.search_area_scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_266": {
                "variable": {
                    "value": "scores_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "scores_scales",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Tensor_124": {},
            "dropout2d_334": {
                "input": {
                    "value": "init_samples[i][0:1, ...].expand(num, -1, -1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "svd_113": {
                "input": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_259": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_263": {
                "input": {
                    "value": "fourier.sample_fs(sfe[sind:sind + 1, ...], sz)",
                    "type": "Call",
                    "possible_values": []
                },
                "pad": {
                    "value": "(math.floor(pd[1].item()), math.ceil(pd[1].item()), math.floor(pd[0].item()), math.ceil(pd[0].item()))",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "pytracking/tracker/eco/optim.py": {
        "torch": {
            "zeros_131": {
                "variable": {
                    "value": "self.residuals",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_67": {
                "variable": {
                    "value": "hfe_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hfe_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([hfe_left_padd, hfe], -2)",
                            "Call"
                        ],
                        [
                            "hfe.clone()",
                            "Call"
                        ],
                        [
                            "hfe_conv.permute(0, 1, 4, 2, 3).reshape(-1, 1, hfe_conv.shape[-3], hfe_conv.shape[-2])",
                            "Call"
                        ],
                        [
                            "F.conv2d(hfe_conv, reg_filter, padding=(reg_pad1, reg_pad2))",
                            "Call"
                        ],
                        [
                            "torch.cat([complex.conj(hfe[..., 1:reg_pad2 + 1, :].flip((2, 3))), hfe], -2)",
                            "Call"
                        ],
                        [
                            "hfe.clone()",
                            "Call"
                        ],
                        [
                            "hfe_conv.permute(0, 1, 4, 2, 3).reshape(-1, 1, hfe_conv.shape[-3], hfe_conv.shape[-2])",
                            "Call"
                        ],
                        [
                            "F.conv2d(hfe_conv, reg_filter, padding=(reg_pad1, reg_pad2))",
                            "Call"
                        ],
                        [
                            "F.conv2d(hfe_conv[..., remove_size:], reg_filter)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "reg_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(hf, self.reg_filter)",
                            "Call"
                        ],
                        [
                            "zip(a_filt_reg, b_filt_reg, a_data, self.reg_filter)",
                            "Call"
                        ],
                        [
                            "zip(hf, hf_out, self.reg_filter)",
                            "Call"
                        ],
                        [
                            "reg_filter",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(reg_pad1, reg_pad2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_163": {
                "variable": {
                    "value": "self.residuals",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.residuals, res)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "conv2d_191": {
                "variable": {
                    "value": "hfe_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hfe_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([hfe_left_padd, hfe], -2)",
                            "Call"
                        ],
                        [
                            "hfe.clone()",
                            "Call"
                        ],
                        [
                            "hfe_conv.permute(0, 1, 4, 2, 3).reshape(-1, 1, hfe_conv.shape[-3], hfe_conv.shape[-2])",
                            "Call"
                        ],
                        [
                            "F.conv2d(hfe_conv, reg_filter, padding=(reg_pad1, reg_pad2))",
                            "Call"
                        ],
                        [
                            "torch.cat([complex.conj(hfe[..., 1:reg_pad2 + 1, :].flip((2, 3))), hfe], -2)",
                            "Call"
                        ],
                        [
                            "hfe.clone()",
                            "Call"
                        ],
                        [
                            "hfe_conv.permute(0, 1, 4, 2, 3).reshape(-1, 1, hfe_conv.shape[-3], hfe_conv.shape[-2])",
                            "Call"
                        ],
                        [
                            "F.conv2d(hfe_conv, reg_filter, padding=(reg_pad1, reg_pad2))",
                            "Call"
                        ],
                        [
                            "F.conv2d(hfe_conv[..., remove_size:], reg_filter)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "reg_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(hf, self.reg_filter)",
                            "Call"
                        ],
                        [
                            "zip(a_filt_reg, b_filt_reg, a_data, self.reg_filter)",
                            "Call"
                        ],
                        [
                            "zip(hf, hf_out, self.reg_filter)",
                            "Call"
                        ],
                        [
                            "reg_filter",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(reg_pad1, reg_pad2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "conv2d_195": {
                "variable": {
                    "value": "hfe_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hfe_conv[..., remove_size:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "reg_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(hf, self.reg_filter)",
                            "Call"
                        ],
                        [
                            "zip(a_filt_reg, b_filt_reg, a_data, self.reg_filter)",
                            "Call"
                        ],
                        [
                            "zip(hf, hf_out, self.reg_filter)",
                            "Call"
                        ],
                        [
                            "reg_filter",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_59": {
                "variable": {
                    "value": "hfe_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hfe_left_padd, hfe]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_183": {
                "variable": {
                    "value": "hfe_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[complex.conj(hfe[..., 1:reg_pad2 + 1, :].flip((2, 3))), hfe]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "pytracking/utils/plotting.py": {
        "torch": {
            "from_numpy_80": {
                "variable": {
                    "value": "im_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "im_np.transpose(2, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "pytracking/utils/visdom.py": {
        "torch": {
            "arange_285": {
                "variable": {
                    "value": "data_x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "data_y.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_211": {
                "data": {
                    "value": "[255.0, 0.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    }
}