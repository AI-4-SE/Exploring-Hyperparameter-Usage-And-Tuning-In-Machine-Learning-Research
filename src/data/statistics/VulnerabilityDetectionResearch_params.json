{
    "IVDetect/main.py": {
        "sklearn": {
            "roc_curve_77": {
                "variable": {
                    "value": "(fpr, tpr, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "all_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "all_probs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "confusion_matrix_84": {
                "variable": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "all_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "all_predictions",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "classification_report_86": {
                "variable": {
                    "value": "report",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "all_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "all_predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "target_names": {
                    "value": "target_names",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "['non-vul', 'vul']",
                            "List"
                        ]
                    ]
                }
            },
            "auc_78": {
                "x": {
                    "value": "fpr",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tpr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "accuracy_score_79": {
                "y_true": {
                    "value": "all_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "all_predictions",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "precision_score_81": {
                "y_true": {
                    "value": "all_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "all_predictions",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "f1_score_82": {
                "y_true": {
                    "value": "all_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "all_predictions",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "recall_score_83": {
                "y_true": {
                    "value": "all_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "all_predictions",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_52": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MyDatset(train_files, train_path)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_53": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MyDatset(test_files, test_path)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_54": {
                "variable": {
                    "value": "valid_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MyDatset(valid_files, valid_path)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_94": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_98": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "params['lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'hidden_size': 128, 'lr': 0.0001, 'dropout_rate': 0.3, 'epochs': 100, 'num_conv_layers': 3}",
                            "Dict"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_100": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_21": {
                "variable": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "graph_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.getcwd() + '/{}'.format(self.file_dir) + '{}'.format(self.datapoint_files[index])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "manual_seed_141": {
                "seed": {
                    "value": "12345",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_105": {
                "obj": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "vul_model.Vulnerability(h_size=_params['hidden_size'], num_node_feature=5, num_classes=2, feature_representation_size=128, drop_out_rate=_params['dropout_rate'], num_conv_layers=_params['num_conv_layers'])",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.getcwd() + '/model/trained_model_{}.pt'.format(e)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "IVDetect/gen_graphs.py": {
        "torch": {
            "flatten_29": {
                "variable": {
                    "value": "all_nodes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_pdg_graph",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_47": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[new_src_nodes, new_des_nodes]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_165": {
                "variable": {
                    "value": "graph_i.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[vul]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_166": {
                "obj": {
                    "value": "graph_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Data(edge_index=new_pdg_graph)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.getcwd() + '/data/pyg_graph/data_{}.pt'.format(starting_index)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_129": {
                "ndarray": {
                    "value": "np.stack(np.zeros(128))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_131": {
                "ndarray": {
                    "value": "np.stack(fea1_j)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_137": {
                "ndarray": {
                    "value": "np.stack(fea_3[key_in_str])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_139": {
                "ndarray": {
                    "value": "np.stack([np.zeros(128)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_148": {
                "ndarray": {
                    "value": "np.stack([np.zeros(128)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_156": {
                "ndarray": {
                    "value": "np.stack([np.zeros(128)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_144": {
                "ndarray": {
                    "value": "np.stack([np.zeros(128)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_146": {
                "ndarray": {
                    "value": "np.stack(fea4_j)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_152": {
                "ndarray": {
                    "value": "np.stack([np.zeros(128)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_154": {
                "ndarray": {
                    "value": "np.stack(fea5_j)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "IVDetect/train_test_valid.py": {
        "torch": {
            "load_15": {
                "variable": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.getcwd() + '/' + graph_path + '/' + graph_file",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_50": {
                "variable": {
                    "value": "train_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.getcwd() + '/' + graph_path + '/' + train",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_54": {
                "variable": {
                    "value": "valid_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.getcwd() + '/' + graph_path + '/' + valid",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_58": {
                "variable": {
                    "value": "test_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.getcwd() + '/' + graph_path + '/' + test",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_51": {
                "obj": {
                    "value": "train_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load(os.getcwd() + '/' + graph_path + '/' + train)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.getcwd() + '/data/train_graph/data_{}.pt'.format(index)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_55": {
                "obj": {
                    "value": "valid_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load(os.getcwd() + '/' + graph_path + '/' + valid)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.getcwd() + '/data/valid_graph/data_{}.pt'.format(index)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_59": {
                "obj": {
                    "value": "test_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load(os.getcwd() + '/' + graph_path + '/' + test)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.getcwd() + '/data/test_graph/data_{}.pt'.format(index)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "IVDetect/utils/process.py": {
        "torch": {
            "tensor_344": {
                "variable": {
                    "value": "store_value[id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "value_list.get(id)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_134": {
                "data": {
                    "value": "[start_node, end_node]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "IVDetect/vul_model.py": {
        "torch": {
            "Linear_17": {
                "variable": {
                    "value": "self.ioux",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3 * self.mem_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.iouh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.mem_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3 * self.mem_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.fx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.mem_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.fh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.mem_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.mem_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_21": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_24": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(inputs, 0)",
                            "Call"
                        ],
                        [
                            "data[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_25": {
                "variable": {
                    "value": "child_h_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "child_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Var(inputs[tree.id].data.new(1, self.mem_dim).fill_(0.0))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_27": {
                "variable": {
                    "value": "(i, o, u)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "iou",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.ioux(inputs) + self.iouh(child_h_sum)",
                            "BinOp"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "iou.size(1) // 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_29": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fh(child_h) + self.fx(inputs).repeat(len(child_h), 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_30": {
                "variable": {
                    "value": "fc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(self.fh(child_h) + self.fx(inputs).repeat(len(child_h), 1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "child_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Var(inputs[tree.id].data.new(1, self.mem_dim).fill_(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_32": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tanh(c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GRU_64": {
                "variable": {
                    "value": "self.gru_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.feature_representation_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.h_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GRU_66": {
                "variable": {
                    "value": "self.gru_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.feature_representation_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.h_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GRU_68": {
                "variable": {
                    "value": "self.gru_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.feature_representation_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.h_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GRU_70": {
                "variable": {
                    "value": "self.gru_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.feature_representation_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.h_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GRU_72": {
                "variable": {
                    "value": "self.gru_combine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.h_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.h_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_73": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.drop_out_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "variable": {
                    "value": "self.connect",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.h_size * self.num_node_feature * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.h_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_82": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_100": {
                "variable": {
                    "value": "feature_vec1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_vec1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.reshape(feature_vec1, (-1, 1, self.h_size))",
                            "Call"
                        ],
                        [
                            "torch.cat((feature_vec1, feature_vec_temp), 0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1, self.h_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pack_sequence_103": {
                "variable": {
                    "value": "feature_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "feature_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "my_data[0]",
                            "Subscript"
                        ],
                        [
                            "pack_sequence(feature_2, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_105": {
                "variable": {
                    "value": "(feature_2, out_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "feature_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "my_data[0]",
                            "Subscript"
                        ],
                        [
                            "pack_sequence(feature_2, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_sequence_107": {
                "variable": {
                    "value": "feature_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "feature_3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "my_data[2]",
                            "Subscript"
                        ],
                        [
                            "pack_sequence(feature_3, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_109": {
                "variable": {
                    "value": "(feature_3, out_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "feature_3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "my_data[2]",
                            "Subscript"
                        ],
                        [
                            "pack_sequence(feature_3, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_sequence_111": {
                "variable": {
                    "value": "feature_4",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "feature_4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "my_data[3]",
                            "Subscript"
                        ],
                        [
                            "pack_sequence(feature_4, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_113": {
                "variable": {
                    "value": "(feature_4, out_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "feature_4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "my_data[3]",
                            "Subscript"
                        ],
                        [
                            "pack_sequence(feature_4, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_sequence_115": {
                "variable": {
                    "value": "feature_5",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "feature_5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "my_data[4]",
                            "Subscript"
                        ],
                        [
                            "pack_sequence(feature_5, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_117": {
                "variable": {
                    "value": "(feature_5, out_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "feature_5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "my_data[4]",
                            "Subscript"
                        ],
                        [
                            "pack_sequence(feature_5, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_119": {
                "variable": {
                    "value": "feature_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feature_vec1, feature_2[:, -1:, :], feature_3[:, -1:, :], feature_4[:, -1:, :], feature_5[:, -1:, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_124": {
                "variable": {
                    "value": "feature_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_vec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dropout(feature_vec)",
                            "Call"
                        ],
                        [
                            "torch.flatten(feature_vec, 1)",
                            "Call"
                        ],
                        [
                            "self.connect(feature_vec)",
                            "Call"
                        ],
                        [
                            "eval('self.conv_{}(feature_vec, edge_index)'.format(i))",
                            "Call"
                        ],
                        [
                            "self.relu(feature_vec)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_28": {
                "input": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tanh_28": {
                "input": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mul_31": {
                "input": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "range(self.layer_num)",
                            "Call"
                        ],
                        [
                            "range(len(feature_1))",
                            "Call"
                        ],
                        [
                            "range(self.layer_num)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_31": {
                "input": {
                    "value": "fc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mul(f, child_c)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_32": {
                "input": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mul(i, u) + torch.sum(fc, dim=0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_99": {
                "variable": {
                    "value": "feature_vec1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feature_vec1, feature_vec_temp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_132": {
                "*size": {
                    "value": "conv_output.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "conv_output.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_133": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_47": {
                "tensors": {
                    "value": "child_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Var(inputs[tree.id].data.new(1, self.mem_dim).fill_(0.0))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}