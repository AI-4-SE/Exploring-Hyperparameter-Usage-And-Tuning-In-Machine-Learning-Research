{
    "src/relational_ERM/relational_erm/data_cleaning/simulate_treatment_outcome_baseline.py": {
        "sklearn": {
            "LogisticRegression_412": {
                "variable": {
                    "value": "logreg",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "1e+16",
                    "type": "float",
                    "possible_values": []
                },
                "solver": {
                    "value": "lbfgs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LinearRegression_420": {
                "variable": {
                    "value": "linreg",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "load_variable_17": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "input_layer/vertex_index_embedding/embedding_weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "enable_eager_execution_369": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/language/bert/create_pretraining_data.py": {
        "tensorflow": {
            "Feature_167": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "int64_list": {
                    "value": "tf.train.Int64List(value=list(values))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_172": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "float_list": {
                    "value": "tf.train.FloatList(value=list(values))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_138": {
                "variable": {
                    "value": "tf_example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_163": {
                "msg": {
                    "value": "Wrote %d total instances",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "total_written",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "total_written + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "set_verbosity_411": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_420": {
                "msg": {
                    "value": "*** Reading from input files ***",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_431": {
                "msg": {
                    "value": "*** Writing to output files ***",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_443": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_422": {
                "msg": {
                    "value": "  %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_files",
                            "variable"
                        ],
                        [
                            "input_files",
                            "variable"
                        ]
                    ]
                }
            },
            "info_433": {
                "msg": {
                    "value": "  %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "output_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_files",
                            "variable"
                        ],
                        [
                            "output_files",
                            "variable"
                        ]
                    ]
                }
            },
            "TFRecordWriter_98": {
                "path": {
                    "value": "output_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_files",
                            "variable"
                        ],
                        [
                            "output_files",
                            "variable"
                        ]
                    ]
                }
            },
            "info_146": {
                "msg": {
                    "value": "*** Example ***",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_147": {
                "msg": {
                    "value": "'tokens: %s' % ' '.join([tokenization.printable_text(x) for x in instance.tokens])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Int64List_167": {
                "value": {
                    "value": "list(values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FloatList_172": {
                "value": {
                    "value": "list(values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GFile_189": {
                "name": {
                    "value": "input_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_files",
                            "variable"
                        ],
                        [
                            "input_files",
                            "variable"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Glob_418": {
                "filename": {
                    "value": "input_pattern",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.input_file.split(',')",
                            "Call"
                        ]
                    ]
                }
            },
            "Features_138": {
                "feature": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ]
                    ]
                }
            },
            "info_157": {
                "msg": {
                    "value": "'%s: %s' % (feature_name, ' '.join([str(x) for x in values]))",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/language/bert/modeling.py": {
        "tensorflow": {
            "list_variables_331": {
                "variable": {
                    "value": "init_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "init_checkpoint",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dropout_359": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "rate": {
                    "value": "1.0 - dropout_prob",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_411": {
                "variable": {
                    "value": "embedding_table",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "word_embedding_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'word_embeddings'",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[vocab_size, embedding_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_425": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(input_tensor, 1.0 - dropout_prob)",
                            "Call"
                        ],
                        [
                            "tf.matmul(one_hot_input_ids, embedding_table)",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(embedding_table, input_ids)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, input_shape[0:-1] + [input_shape[-1] * embedding_size])",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "output + position_embeddings",
                            "BinOp"
                        ],
                        [
                            "layer_norm_and_dropout(output, dropout_prob)",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(self.__dict__)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "input_shape[0:-1] + [input_shape[-1] * embedding_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_543": {
                "variable": {
                    "value": "to_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(to_mask, [batch_size, 1, to_seq_length])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_551": {
                "variable": {
                    "value": "broadcast_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, from_seq_length, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_668": {
                "variable": {
                    "value": "query_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "from_tensor_2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reshape_to_matrix(from_tensor)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "num_attention_heads * size_per_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "query_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "query",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_676": {
                "variable": {
                    "value": "key_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "to_tensor_2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reshape_to_matrix(to_tensor)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "num_attention_heads * size_per_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "key_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "key",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_684": {
                "variable": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "to_tensor_2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reshape_to_matrix(to_tensor)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "num_attention_heads * size_per_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "value_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "value",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_703": {
                "variable": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "query_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(from_tensor_2d, num_attention_heads * size_per_head, activation=query_act, name='query', kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "transpose_for_scores(query_layer, batch_size, num_attention_heads, from_seq_length, size_per_head)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "key_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(to_tensor_2d, num_attention_heads * size_per_head, activation=key_act, name='key', kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "transpose_for_scores(key_layer, batch_size, num_attention_heads, to_seq_length, size_per_head)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "multiply_704": {
                "variable": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(query_layer, key_layer, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.multiply(attention_scores, 1.0 / math.sqrt(float(size_per_head)))",
                            "Call"
                        ],
                        [
                            "attention_scores + adder",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0 / math.sqrt(float(size_per_head))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_722": {
                "variable": {
                    "value": "attention_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(query_layer, key_layer, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.multiply(attention_scores, 1.0 / math.sqrt(float(size_per_head)))",
                            "Call"
                        ],
                        [
                            "attention_scores + adder",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_729": {
                "variable": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(to_tensor_2d, num_attention_heads * size_per_head, activation=value_act, name='value', kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "tf.reshape(value_layer, [batch_size, to_seq_length, num_attention_heads, size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.transpose(value_layer, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, to_seq_length, num_attention_heads, size_per_head]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_734": {
                "variable": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(to_tensor_2d, num_attention_heads * size_per_head, activation=value_act, name='value', kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "tf.reshape(value_layer, [batch_size, to_seq_length, num_attention_heads, size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.transpose(value_layer, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_737": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "attention_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(attention_scores)",
                            "Call"
                        ],
                        [
                            "dropout(attention_probs, attention_probs_dropout_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(to_tensor_2d, num_attention_heads * size_per_head, activation=value_act, name='value', kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "tf.reshape(value_layer, [batch_size, to_seq_length, num_attention_heads, size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.transpose(value_layer, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_740": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, [batch_size * from_seq_length, num_attention_heads * size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, [batch_size, from_seq_length, num_attention_heads * size_per_head])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_928": {
                "variable": {
                    "value": "dyn_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_944": {
                "variable": {
                    "value": "output_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_378": {
                "stddev": {
                    "value": "initializer_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_409": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(input_ids, axis=[-1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_417": {
                "variable": {
                    "value": "flat_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(input_ids, axis=[-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_418": {
                "variable": {
                    "value": "one_hot_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "flat_input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_ids, [-1])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_419": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "one_hot_input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(flat_input_ids, depth=vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "embedding_table",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=word_embedding_name, shape=[vocab_size, embedding_size], initializer=create_initializer(initializer_range))",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_421": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding_table",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=word_embedding_name, shape=[vocab_size, embedding_size], initializer=create_initializer(initializer_range))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(input_ids, axis=[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_478": {
                "variable": {
                    "value": "token_type_table",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "token_type_embedding_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'token_type_embeddings'",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[token_type_vocab_size, width]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_484": {
                "variable": {
                    "value": "flat_token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(shape=[batch_size, seq_length], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_485": {
                "variable": {
                    "value": "one_hot_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "flat_token_type_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(token_type_ids, [-1])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "token_type_vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_486": {
                "variable": {
                    "value": "token_type_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "one_hot_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(flat_token_type_ids, depth=token_type_vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "token_type_table",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=token_type_embedding_name, shape=[token_type_vocab_size, width], initializer=create_initializer(initializer_range))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_487": {
                "variable": {
                    "value": "token_type_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "token_type_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(one_hot_ids, token_type_table)",
                            "Call"
                        ],
                        [
                            "tf.reshape(token_type_embeddings, [batch_size, seq_length, width])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, seq_length, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assert_less_equal_492": {
                "variable": {
                    "value": "assert_op",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape[1]",
                            "Subscript"
                        ],
                        [
                            "input_shape[1]",
                            "Subscript"
                        ],
                        [
                            "input_shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "max_position_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_633": {
                "variable": {
                    "value": "output_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, seq_length, num_attention_heads, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_636": {
                "variable": {
                    "value": "output_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "output_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_norm(input_tensor, name)",
                            "Call"
                        ],
                        [
                            "dropout(output_tensor, dropout_prob)",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_tensor, [batch_size, seq_length, num_attention_heads, width])",
                            "Call"
                        ],
                        [
                            "tf.transpose(output_tensor, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_tensor, [-1, width])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_709": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(attention_mask, axis=[1])",
                            "Call"
                        ],
                        [
                            "create_attention_mask_from_input_mask(input_ids, input_mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_744": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, [batch_size * from_seq_length, num_attention_heads * size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, [batch_size, from_seq_length, num_attention_heads * size_per_head])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size * from_seq_length, num_attention_heads * size_per_head]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_749": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, [batch_size * from_seq_length, num_attention_heads * size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, [batch_size, from_seq_length, num_attention_heads * size_per_head])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, from_seq_length, num_attention_heads * size_per_head]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_958": {
                "tensor": {
                    "value": "output_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_norm(input_tensor, name)",
                            "Call"
                        ],
                        [
                            "dropout(output_tensor, dropout_prob)",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_tensor, [batch_size, seq_length, num_attention_heads, width])",
                            "Call"
                        ],
                        [
                            "tf.transpose(output_tensor, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_tensor, [-1, width])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "orig_dims + [width]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_167": {
                "variable": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_170": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_494": {
                "variable": {
                    "value": "full_position_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "position_embedding_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'position_embeddings'",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[max_position_embeddings, width]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "slice_507": {
                "variable": {
                    "value": "position_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "full_position_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=position_embedding_name, shape=[max_position_embeddings, width], initializer=create_initializer(initializer_range))",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[seq_length, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_518": {
                "variable": {
                    "value": "position_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "position_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(full_position_embeddings, [0, 0], [seq_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(position_embeddings, position_broadcast_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "position_broadcast_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_544": {
                "tensor": {
                    "value": "to_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(to_mask, [batch_size, 1, to_seq_length]), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, 1, to_seq_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GFile_92": {
                "name": {
                    "value": "json_file",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_172": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "bert",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_228": {
                "variable": {
                    "value": "first_token_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sequence_output[:, 0:1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_229": {
                "variable": {
                    "value": "self.pooled_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "first_token_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(self.sequence_output[:, 0:1, :], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "create_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "erf_277": {
                "x": {
                    "value": "input_tensor / tf.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_493": {
                "control_inputs": {
                    "value": "[assert_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_829": {
                "name_or_scope": {
                    "value": "'layer_%d' % layer_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_869": {
                "variable": {
                    "value": "intermediate_output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "attention_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "attention_heads[0]",
                            "Subscript"
                        ],
                        [
                            "tf.concat(attention_heads, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(attention_output, hidden_size, kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "dropout(attention_output, hidden_dropout_prob)",
                            "Call"
                        ],
                        [
                            "layer_norm(attention_output + layer_input)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "intermediate_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3072",
                            "Method Argument"
                        ],
                        [
                            "3072",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "intermediate_act_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gelu",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_877": {
                "variable": {
                    "value": "layer_output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "intermediate_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(attention_output, intermediate_size, activation=intermediate_act_fn, kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_984": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_173": {
                "name_or_scope": {
                    "value": "embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_197": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_225": {
                "name_or_scope": {
                    "value": "pooler",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_714": {
                "x": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(attention_mask, axis=[1])",
                            "Call"
                        ],
                        [
                            "create_attention_mask_from_input_mask(input_ids, input_mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_832": {
                "name_or_scope": {
                    "value": "attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_855": {
                "variable": {
                    "value": "attention_output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "attention_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dense_860": {
                "variable": {
                    "value": "attention_output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "attention_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "attention_heads[0]",
                            "Subscript"
                        ],
                        [
                            "tf.concat(attention_heads, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(attention_output, hidden_size, kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "dropout(attention_output, hidden_dropout_prob)",
                            "Call"
                        ],
                        [
                            "layer_norm(attention_output + layer_input)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_868": {
                "name_or_scope": {
                    "value": "intermediate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_876": {
                "name_or_scope": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sqrt_277": {
                "x": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_834": {
                "name_or_scope": {
                    "value": "self",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_859": {
                "name_or_scope": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/language/bert/optimization.py": {
        "tensorflow": {
            "get_or_create_global_step_27": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_29": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "init_lr",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "polynomial_decay_32": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(value=init_lr, shape=[], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.train.polynomial_decay(learning_rate, global_step, num_train_steps, end_learning_rate=0.0, power=1.0, cycle=False)",
                            "Call"
                        ],
                        [
                            "(1.0 - is_warmup) * learning_rate + is_warmup * warmup_learning_rate",
                            "BinOp"
                        ]
                    ]
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "num_train_steps",
                    "type": "variable",
                    "possible_values": []
                },
                "end_learning_rate": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "power": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "cycle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "trainable_variables_70": {
                "variable": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_71": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_74": {
                "variable": {
                    "value": "(grads, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss, tvars)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "group_80": {
                "variable": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer.apply_gradients(zip(grads, tvars), global_step=global_step)",
                            "Call"
                        ],
                        [
                            "tf.group(train_op, [global_step.assign(new_global_step)])",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "[global_step.assign(new_global_step)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_43": {
                "variable": {
                    "value": "global_steps_int",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_44": {
                "variable": {
                    "value": "warmup_steps_int",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "num_warmup_steps",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_46": {
                "variable": {
                    "value": "global_steps_float",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_steps_int",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(global_step, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_47": {
                "variable": {
                    "value": "warmup_steps_float",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "warmup_steps_int",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(num_warmup_steps, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_52": {
                "variable": {
                    "value": "is_warmup",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_steps_int < warmup_steps_int",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossShardOptimizer_68": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "opt": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AdamWeightDecayOptimizer(learning_rate=learning_rate, weight_decay_rate=0.01, beta_1=0.9, beta_2=0.999, epsilon=1e-06, exclude_from_weight_decay=['LayerNorm', 'layer_norm', 'bias'])",
                            "Call"
                        ],
                        [
                            "tf.contrib.tpu.CrossShardOptimizer(optimizer)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_114": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "param_name + '/adam_m'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "param.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_120": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "param_name + '/adam_v'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "param.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_154": {
                "*inputs": {
                    "value": "*assignments",
                    "type": "Starred",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'AdamWeightDecayOptimizer'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multiply_129": {
                "x": {
                    "value": "1.0 - self.beta_1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "multiply_131": {
                "x": {
                    "value": "1.0 - self.beta_2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.square(grad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_initializer_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_132": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_134": {
                "x": {
                    "value": "next_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(self.beta_2, v) + tf.multiply(1.0 - self.beta_2, tf.square(grad))",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "src/language/bert/tokenization.py": {
        "tensorflow": {
            "GFile_74": {
                "name": {
                    "value": "vocab_file",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/language/data_cleaning/process_PeerRead_abstracts.py": {
        "tensorflow": {
            "Example_138": {
                "variable": {
                    "value": "tf_example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_168": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_148": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_150": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_158": {
                "float_list": {
                    "value": "tf.train.FloatList(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_160": {
                "float_list": {
                    "value": "tf.train.FloatList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TFRecordWriter_205": {
                "path": {
                    "value": "out_dir + '/' + out_file",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Features_138": {
                "feature": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{**tf_context_features, **abstract_features}",
                            "Dict"
                        ]
                    ]
                }
            },
            "BytesList_168": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Int64List_148": {
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Int64List_150": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FloatList_158": {
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "FloatList_160": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "src/language/dataset/dataset.py": {
        "tensorflow": {
            "parse_single_example_92": {
                "variable": {
                    "value": "tf_example",
                    "type": "variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "record",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "_name_to_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{**context_features, **abstract_features}",
                            "Dict"
                        ]
                    ]
                }
            },
            "minimum_140": {
                "variable": {
                    "value": "equation_referenced",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "data['num_ref_to_equations']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "minimum_141": {
                "variable": {
                    "value": "theorem_referenced",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "data['num_ref_to_theorems']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_146": {
                "variable": {
                    "value": "buzzy_title",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.not_equal(any_buzz, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_192": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(a, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_193": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(b, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "floormod_204": {
                "variable": {
                    "value": "reduced_split",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "many_split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['many_split']",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "num_splits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                }
            },
            "logical_not_208": {
                "variable": {
                    "value": "in_train",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.logical_or(in_dev, in_test)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_215": {
                "variable": {
                    "value": "in_dev",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "in_dev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_tf_scalar_a_in1d_b(reduced_split, dev_splits)",
                            "Call"
                        ],
                        [
                            "tf.cast(in_dev, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_216": {
                "variable": {
                    "value": "in_test",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "in_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_tf_scalar_a_in1d_b(reduced_split, test_splits)",
                            "Call"
                        ],
                        [
                            "tf.cast(in_test, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_217": {
                "variable": {
                    "value": "in_train",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "in_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_not(tf.logical_or(in_dev, in_test))",
                            "Call"
                        ],
                        [
                            "tf.cast(in_train, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "enable_eager_execution_324": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FixedLenFeature_81": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "FixedLenFeature_84": {
                "shape": {
                    "value": "[abs_seq_len]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_85": {
                "shape": {
                    "value": "[abs_seq_len]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_any_194": {
                "input_tensor": {
                    "value": "tf.equal(a, b)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_any_200": {
                "input_tensor": {
                    "value": "tf.equal(a, b)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TFRecordDataset_302": {
                "variable": {
                    "value": "input_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "to_int32_102": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_example[name]",
                            "Subscript"
                        ],
                        [
                            "tf.to_int32(t)",
                            "Call"
                        ]
                    ]
                }
            },
            "minimum_136": {
                "x": {
                    "value": "data['num_authors']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "not_equal_146": {
                "x": {
                    "value": "any_buzz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['title_contains_deep'] + data['title_contains_neural'] + data['title_contains_embedding'] + data['title_contains_gan']",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_194": {
                "x": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(a, 0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(b, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_200": {
                "x": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(a, 0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(b, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_or_208": {
                "x": {
                    "value": "in_dev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_tf_scalar_a_in1d_b(reduced_split, dev_splits)",
                            "Call"
                        ],
                        [
                            "tf.cast(in_dev, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "in_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_tf_scalar_a_in1d_b(reduced_split, test_splits)",
                            "Call"
                        ],
                        [
                            "tf.cast(in_test, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_260": {
                "x": {
                    "value": "data['in_test']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Glob_276": {
                "filename": {
                    "value": "input_pattern",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_files_or_glob.split(',')",
                            "Call"
                        ]
                    ]
                }
            },
            "parallel_interleave_313": {
                "map_func": {
                    "value": "_dataset_processing",
                    "type": "variable",
                    "possible_values": []
                },
                "sloppy": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "cycle_length": {
                    "value": "cycle_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(4, len(input_files))",
                            "Call"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "constant_283": {
                "value": {
                    "value": "input_files",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_289": {
                "value": {
                    "value": "input_files",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "src/language/dataset/sentence_masking.py": {
        "tensorflow": {
            "less_38": {
                "variable": {
                    "value": "basic_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random_uniform(token_ids.shape, minval=0, maxval=1, dtype=tf.float32, seed=seed)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "masked_lm_prob",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "logical_and_43": {
                "variable": {
                    "value": "cand_indexes",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.not_equal(token_ids, vocab['[CLS]'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.not_equal(token_ids, vocab['[SEP]'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_and_45": {
                "variable": {
                    "value": "cand_indexes",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cand_indexes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_and(tf.not_equal(token_ids, vocab['[CLS]']), tf.not_equal(token_ids, vocab['[SEP]']))",
                            "Call"
                        ],
                        [
                            "tf.logical_and(cand_indexes, tf.not_equal(token_ids, 0))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.not_equal(token_ids, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_and_46": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cand_indexes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_and(tf.not_equal(token_ids, vocab['[CLS]']), tf.not_equal(token_ids, vocab['[SEP]']))",
                            "Call"
                        ],
                        [
                            "tf.logical_and(cand_indexes, tf.not_equal(token_ids, 0))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "basic_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.less(tf.random_uniform(token_ids.shape, minval=0, maxval=1, dtype=tf.float32, seed=seed), masked_lm_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_49": {
                "variable": {
                    "value": "masked_lm_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_and(cand_indexes, basic_mask)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.scatter_nd(tf.expand_dims(masked_lm_positions, 1), tf.ones_like(masked_lm_positions), token_ids.shape), bool)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_54": {
                "variable": {
                    "value": "masked_lm_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "mlm_shape > 1",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : masked_lm_positions",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.where(cand_indexes)[0:2]",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cast_59": {
                "variable": {
                    "value": "masked_lm_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "masked_lm_positions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(mask)",
                            "Call"
                        ],
                        [
                            "tf.cond(mlm_shape > 1, lambda : masked_lm_positions, lambda : tf.where(cand_indexes)[0:2])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(masked_lm_positions)[0:max_predictions_per_seq]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(masked_lm_positions, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.pad(masked_lm_positions, add_pad, 'constant')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_60": {
                "variable": {
                    "value": "masked_lm_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "token_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "masked_lm_positions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(mask)",
                            "Call"
                        ],
                        [
                            "tf.cond(mlm_shape > 1, lambda : masked_lm_positions, lambda : tf.where(cand_indexes)[0:2])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(masked_lm_positions)[0:max_predictions_per_seq]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(masked_lm_positions, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.pad(masked_lm_positions, add_pad, 'constant')",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_62": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.scatter_nd(tf.expand_dims(masked_lm_positions, 1), tf.ones_like(masked_lm_positions), token_ids.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "where_66": {
                "variable": {
                    "value": "output_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_and(cand_indexes, basic_mask)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.scatter_nd(tf.expand_dims(masked_lm_positions, 1), tf.ones_like(masked_lm_positions), token_ids.shape), bool)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "vocab['[MASK]'] * tf.ones_like(token_ids)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "token_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_69": {
                "variable": {
                    "value": "masked_lm_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_lm_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(token_ids, masked_lm_positions)",
                            "Call"
                        ],
                        [
                            "tf.pad(masked_lm_ids, add_pad, 'constant')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_71": {
                "variable": {
                    "value": "masked_lm_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "masked_lm_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones_like(masked_lm_ids, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.pad(masked_lm_weights, add_pad, 'constant')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "add_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0, max_predictions_per_seq - tf.shape(masked_lm_positions)[0]]]",
                            "List"
                        ]
                    ]
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_72": {
                "variable": {
                    "value": "masked_lm_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "masked_lm_positions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(mask)",
                            "Call"
                        ],
                        [
                            "tf.cond(mlm_shape > 1, lambda : masked_lm_positions, lambda : tf.where(cand_indexes)[0:2])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(masked_lm_positions)[0:max_predictions_per_seq]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(masked_lm_positions, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.pad(masked_lm_positions, add_pad, 'constant')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "add_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0, max_predictions_per_seq - tf.shape(masked_lm_positions)[0]]]",
                            "List"
                        ]
                    ]
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_73": {
                "variable": {
                    "value": "masked_lm_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "masked_lm_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(token_ids, masked_lm_positions)",
                            "Call"
                        ],
                        [
                            "tf.pad(masked_lm_ids, add_pad, 'constant')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "add_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0, max_predictions_per_seq - tf.shape(masked_lm_positions)[0]]]",
                            "List"
                        ]
                    ]
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "not_equal_43": {
                "x": {
                    "value": "token_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "vocab['[CLS]']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "not_equal_44": {
                "x": {
                    "value": "token_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "vocab['[SEP]']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "not_equal_45": {
                "x": {
                    "value": "token_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_53": {
                "input": {
                    "value": "masked_lm_positions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(mask)",
                            "Call"
                        ],
                        [
                            "tf.cond(mlm_shape > 1, lambda : masked_lm_positions, lambda : tf.where(cand_indexes)[0:2])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(masked_lm_positions)[0:max_predictions_per_seq]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(masked_lm_positions, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.pad(masked_lm_positions, add_pad, 'constant')",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_58": {
                "input": {
                    "value": "masked_lm_positions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(mask)",
                            "Call"
                        ],
                        [
                            "tf.cond(mlm_shape > 1, lambda : masked_lm_positions, lambda : tf.where(cand_indexes)[0:2])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(masked_lm_positions)[0:max_predictions_per_seq]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(masked_lm_positions, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.pad(masked_lm_positions, add_pad, 'constant')",
                            "Call"
                        ]
                    ]
                }
            },
            "scatter_nd_63": {
                "indices": {
                    "value": "tf.expand_dims(masked_lm_positions, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "updates": {
                    "value": "tf.ones_like(masked_lm_positions)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "token_ids.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_63": {
                "input": {
                    "value": "masked_lm_positions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(mask)",
                            "Call"
                        ],
                        [
                            "tf.cond(mlm_shape > 1, lambda : masked_lm_positions, lambda : tf.where(cand_indexes)[0:2])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(masked_lm_positions)[0:max_predictions_per_seq]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(masked_lm_positions, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.pad(masked_lm_positions, add_pad, 'constant')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_63": {
                "input": {
                    "value": "masked_lm_positions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(mask)",
                            "Call"
                        ],
                        [
                            "tf.cond(mlm_shape > 1, lambda : masked_lm_positions, lambda : tf.where(cand_indexes)[0:2])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(masked_lm_positions)[0:max_predictions_per_seq]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(masked_lm_positions, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.pad(masked_lm_positions, add_pad, 'constant')",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_66": {
                "input": {
                    "value": "token_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "where_56": {
                "condition": {
                    "value": "cand_indexes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_and(tf.not_equal(token_ids, vocab['[CLS]']), tf.not_equal(token_ids, vocab['[SEP]']))",
                            "Call"
                        ],
                        [
                            "tf.logical_and(cand_indexes, tf.not_equal(token_ids, 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_70": {
                "input": {
                    "value": "masked_lm_positions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(mask)",
                            "Call"
                        ],
                        [
                            "tf.cond(mlm_shape > 1, lambda : masked_lm_positions, lambda : tf.where(cand_indexes)[0:2])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(masked_lm_positions)[0:max_predictions_per_seq]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(masked_lm_positions, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.pad(masked_lm_positions, add_pad, 'constant')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/language/model/bert_predictors.py": {
        "tensorflow": {
            "cast_70": {
                "variable": {
                    "value": "treatment_float",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "treatment",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features[treatment_name]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_119": {
                "variable": {
                    "value": "treatment_float",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "treatment",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features[treatment_name]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_24": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "num_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.l2_regularizer(scale=1e-06)",
                            "Call"
                        ]
                    ]
                },
                "bias_regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.l2_regularizer(scale=1e-06)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_27": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_31": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(embedding, 200, activation=tf.nn.elu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(layer, 200, activation=tf.nn.elu, kernel_regularizer=regularizer, bias_regularizer=regularizer)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "num_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.l2_regularizer(scale=1e-06)",
                            "Call"
                        ]
                    ]
                },
                "bias_regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.l2_regularizer(scale=1e-06)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_35": {
                "variable": {
                    "value": "one_hot_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0 - label_smoothing",
                    "type": "BinOp",
                    "possible_values": []
                },
                "off_value": {
                    "value": "label_smoothing",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_37": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(embedding, num_labels, activation=None, kernel_regularizer=regularizer, bias_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(layer, num_labels, activation=None, kernel_regularizer=regularizer, bias_regularizer=regularizer)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_40": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "censored_per_example_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "split * per_example_loss",
                            "BinOp"
                        ]
                    ]
                }
            },
            "add_loss_84": {
                "loss": {
                    "value": "loss_ot0",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "add_loss_85": {
                "loss": {
                    "value": "loss_ot1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "add_loss_86": {
                "loss": {
                    "value": "loss_t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "trainable_variables_283": {
                "variable": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dense_29": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(embedding, 200, activation=tf.nn.elu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(layer, 200, activation=tf.nn.elu, kernel_regularizer=regularizer, bias_regularizer=regularizer)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.l2_regularizer(scale=1e-06)",
                            "Call"
                        ]
                    ]
                },
                "bias_regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.l2_regularizer(scale=1e-06)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_34": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_42": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(embedding, num_labels, activation=None, kernel_regularizer=regularizer, bias_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(layer, num_labels, activation=None, kernel_regularizer=regularizer, bias_regularizer=regularizer)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_71": {
                "name_or_scope": {
                    "value": "dragon_net",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "custom_getter": {
                    "value": "getter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "info_142": {
                "msg": {
                    "value": "*** Features ***",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_243": {
                "variable": {
                    "value": "treatment_float",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "treatment",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features[treatment_name]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_299": {
                "msg": {
                    "value": "**** Trainable Variables ****",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TPUEstimatorSpec_322": {
                "variable": {
                    "value": "output_spec",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "label_loss",
                            "variable"
                        ],
                        [
                            "masked_lm_loss",
                            "variable"
                        ],
                        [
                            "masked_lm_loss + 0.1 * label_loss",
                            "BinOp"
                        ]
                    ]
                },
                "train_op": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimization.create_optimizer(total_loss, learning_rate, num_train_steps, num_warmup_steps, use_tpu)",
                            "Call"
                        ],
                        [
                            "optimization.create_optimizer(total_loss, learning_rate, num_train_steps, num_warmup_steps, use_tpu)",
                            "Call"
                        ]
                    ]
                },
                "scaffold_fn": {
                    "value": "scaffold_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tpu_scaffold",
                            "variable"
                        ]
                    ]
                }
            },
            "reduce_sum_38": {
                "input_tensor": {
                    "value": "one_hot_labels * log_probs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_72": {
                "name_or_scope": {
                    "value": "treatment",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_76": {
                "name_or_scope": {
                    "value": "outcome_st_treatment",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_80": {
                "name_or_scope": {
                    "value": "outcome_st_no_treatment",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_144": {
                "msg": {
                    "value": "'  name = %s, shape = %s' % (name, features[name].shape)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_collection_231": {
                "variable": {
                    "value": "global_variables",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "trainable_variables",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "dragon_net",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_233": {
                "variable": {
                    "value": "ema",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "0.998",
                    "type": "float",
                    "possible_values": []
                }
            },
            "info_304": {
                "msg": {
                    "value": "  name = %s, shape = %s%s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "var.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "var.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TPUEstimatorSpec_343": {
                "variable": {
                    "value": "output_spec",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "test_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "eval_metrics": {
                    "value": "eval_metrics",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(_treatment_outcome_eval_metric_fn, eval_feed)",
                            "Tuple"
                        ]
                    ]
                },
                "scaffold_fn": {
                    "value": "scaffold_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tpu_scaffold",
                            "variable"
                        ]
                    ]
                }
            },
            "TPUEstimatorSpec_362": {
                "variable": {
                    "value": "output_spec",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'in_test': in_test}",
                            "Dict"
                        ]
                    ]
                },
                "scaffold_fn": {
                    "value": "scaffold_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tpu_scaffold",
                            "variable"
                        ]
                    ]
                }
            },
            "init_from_checkpoint_297": {
                "ckpt_dir_or_file": {
                    "value": "init_checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "assignment_map": {
                    "value": "assignment_map",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "add_loss_216": {
                "loss": {
                    "value": "masked_lm_loss",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "add_loss_217": {
                "loss": {
                    "value": "0.1 * label_loss",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_219": {
                "name": {
                    "value": "masked_lm_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "masked_lm_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "family": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_220": {
                "name": {
                    "value": "label_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "label_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "family": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "init_from_checkpoint_292": {
                "ckpt_dir_or_file": {
                    "value": "init_checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "assignment_map": {
                    "value": "assignment_map",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Scaffold_293": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_315": {
                "control_inputs": {
                    "value": "[ema_op]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "src/language/model/bert_unsupervised.py": {
        "tensorflow": {
            "reshape_72": {
                "variable": {
                    "value": "flat_offsets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(0, batch_size, dtype=tf.int32) * seq_length",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_74": {
                "variable": {
                    "value": "flat_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "positions + flat_offsets",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_75": {
                "variable": {
                    "value": "flat_sequence_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "sequence_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size * seq_length, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_77": {
                "variable": {
                    "value": "output_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "flat_sequence_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(sequence_tensor, [batch_size * seq_length, width])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "flat_positions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(positions + flat_offsets, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_32": {
                "variable": {
                    "value": "output_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "output_bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[bert_config.vocab_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_36": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gather_indexes(input_tensor, positions)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(input_tensor, units=bert_config.hidden_size, activation=modeling.get_activation(bert_config.hidden_act), kernel_initializer=modeling.create_initializer(bert_config.initializer_range))",
                            "Call"
                        ],
                        [
                            "modeling.layer_norm(input_tensor)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "output_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bias_add_37": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(input_tensor, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "output_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('output_bias', shape=[bert_config.vocab_size], initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_38": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(input_tensor, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_40": {
                "variable": {
                    "value": "label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(label_ids, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_41": {
                "variable": {
                    "value": "label_weights_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_43": {
                "variable": {
                    "value": "one_hot_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "label_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(label_ids, [-1])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "bert_config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_52": {
                "variable": {
                    "value": "numerator",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "label_weights_flat * per_example_loss",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_56": {
                "variable": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(label_weights)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_18": {
                "name_or_scope": {
                    "value": "cls/predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_22": {
                "variable": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gather_indexes(input_tensor, positions)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(input_tensor, units=bert_config.hidden_size, activation=modeling.get_activation(bert_config.hidden_act), kernel_initializer=modeling.create_initializer(bert_config.initializer_range))",
                            "Call"
                        ],
                        [
                            "modeling.layer_norm(input_tensor)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "bert_config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "modeling.get_activation(bert_config.hidden_act)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "modeling.create_initializer(bert_config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_21": {
                "name_or_scope": {
                    "value": "transform",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_50": {
                "input_tensor": {
                    "value": "log_probs * one_hot_labels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_53": {
                "input_tensor": {
                    "value": "label_weights_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(label_weights, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "range_73": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_initializer_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_56": {
                "input": {
                    "value": "label_weights",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/language/model/logging.py": {
        "tensorflow": {
            "argmax_90": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "accuracy_92": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(predictions)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=-1, output_type=tf.int32, name='predictions')",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=-1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "precision_93": {
                "variable": {
                    "value": "precision",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(predictions)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=-1, output_type=tf.int32, name='predictions')",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=-1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "metrics_collections": {
                    "value": "labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "recall_94": {
                "variable": {
                    "value": "recall",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(predictions)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=-1, output_type=tf.int32, name='predictions')",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=-1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "metrics_collections": {
                    "value": "labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_96": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "per_example_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "weights": {
                    "value": "split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_109": {
                "variable": {
                    "value": "masked_lm_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "masked_lm_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(masked_lm_log_probs, [-1, masked_lm_log_probs.shape[-1]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, masked_lm_log_probs.shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_111": {
                "variable": {
                    "value": "masked_lm_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_lm_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(masked_lm_log_probs, [-1, masked_lm_log_probs.shape[-1]])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_113": {
                "variable": {
                    "value": "masked_lm_example_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "masked_lm_example_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(masked_lm_example_loss, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_114": {
                "variable": {
                    "value": "masked_lm_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "masked_lm_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(masked_lm_ids, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_115": {
                "variable": {
                    "value": "masked_lm_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "masked_lm_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(masked_lm_weights, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "accuracy_116": {
                "variable": {
                    "value": "masked_lm_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "masked_lm_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(masked_lm_ids, [-1])",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "masked_lm_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(masked_lm_log_probs, axis=-1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "masked_lm_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(masked_lm_weights, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_120": {
                "variable": {
                    "value": "masked_lm_mean_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "masked_lm_example_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(masked_lm_example_loss, [-1])",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "masked_lm_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(masked_lm_weights, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_21": {
                "variable": {
                    "value": "weights_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "where_22": {
                "variable": {
                    "value": "weights_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.not_equal(weights_mean, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "weights_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(weights)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.not_equal(weights_mean, 0), weights_mean, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_24": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_25": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(predictions)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=-1, output_type=tf.int32, name='predictions')",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=-1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_30": {
                "variable": {
                    "value": "random_agreement",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_labels * p_predictions + (1 - p_labels) * (1 - p_predictions)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "random_agreement",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_by_value_59": {
                "variable": {
                    "value": "random_agreement",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "random_agreement",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(p_labels * p_predictions + (1 - p_labels) * (1 - p_predictions), name='random_agreement')",
                            "Call"
                        ],
                        [
                            "batch_random_agreement(labels, predictions, weights)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(random_agreement, 0.001, 0.999)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "0.999",
                    "type": "float",
                    "possible_values": []
                }
            },
            "divide_61": {
                "variable": {
                    "value": "kappa",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "accuracy - random_agreement",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "1 - random_agreement",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "kappa",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_70": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "accuracy_73": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(predictions)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=-1, output_type=tf.int32, name='predictions')",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=-1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "metrics_collections": {
                    "value": "labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "precision_74": {
                "variable": {
                    "value": "precision",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(predictions)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=-1, output_type=tf.int32, name='predictions')",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=-1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "metrics_collections": {
                    "value": "labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "recall_75": {
                "variable": {
                    "value": "recall",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(predictions)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=-1, output_type=tf.int32, name='predictions')",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=-1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "metrics_collections": {
                    "value": "labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_78": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "per_example_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "weights": {
                    "value": "split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_20": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_54": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_69": {
                "name": {
                    "value": "'summary' + '/' + family",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_82": {
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "accuracy[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "family": {
                    "value": "family",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_83": {
                "name": {
                    "value": "precision",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "precision[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "family": {
                    "value": "family",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_84": {
                "name": {
                    "value": "recall",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "recall[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "family": {
                    "value": "family",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_85": {
                "name": {
                    "value": "kappa",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "kappa",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(accuracy - random_agreement, 1 - random_agreement, name='kappa')",
                            "Call"
                        ],
                        [
                            "batch_kappa(label_ids, predictions, weights=split, name='labels/kappa')",
                            "Call"
                        ]
                    ]
                },
                "family": {
                    "value": "family",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_86": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "family": {
                    "value": "family",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "not_equal_22": {
                "x": {
                    "value": "weights_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(weights)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.not_equal(weights_mean, 0), weights_mean, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_27": {
                "a": {
                    "value": "labels * weights / weights_mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_28": {
                "a": {
                    "value": "predictions * weights / weights_mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "accuracy_55": {
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(labels)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(predictions)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=-1, output_type=tf.int32, name='predictions')",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=-1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/language/model/run_classifier.py": {
        "tensorflow": {
            "DEFINE_string_111": {
                "name": {
                    "value": "tpu_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The Cloud TPU to use for training. This should be either the name used when creating the Cloud TPU, or a grpc://ip.address.of.tpu:8470 url.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_117": {
                "name": {
                    "value": "tpu_zone",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "[Optional] GCE zone where the Cloud TPU is located in. If not specified, we will attempt to automatically detect the GCE project from metadata.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_123": {
                "name": {
                    "value": "gcp_project",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "[Optional] Project name for the Cloud TPU-enabled project. If not specified, we will attempt to automatically detect the GCE project from metadata.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_129": {
                "name": {
                    "value": "master",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "[Optional] TensorFlow master URL.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_146": {
                "name": {
                    "value": "treatment",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "theorem_referenced",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Covariate used as treatement.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "RunConfig_181": {
                "variable": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": []
                },
                "cluster": {
                    "value": "tpu_cluster_resolver",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.contrib.cluster_resolver.TPUClusterResolver(FLAGS.tpu_name, zone=FLAGS.tpu_zone, project=FLAGS.gcp_project)",
                            "Call"
                        ]
                    ]
                },
                "master": {
                    "value": "FLAGS.master",
                    "type": "Attribute",
                    "possible_values": []
                },
                "model_dir": {
                    "value": "FLAGS.output_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "save_checkpoints_steps": {
                    "value": "FLAGS.save_checkpoints_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "keep_checkpoint_max": {
                    "value": "FLAGS.keep_checkpoints",
                    "type": "Attribute",
                    "possible_values": []
                },
                "save_summary_steps": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "tpu_config": {
                    "value": "tf.contrib.tpu.TPUConfig(iterations_per_loop=FLAGS.iterations_per_loop, num_shards=FLAGS.num_tpu_cores, per_host_input_for_training=is_per_host)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TPUEstimator_218": {
                "variable": {
                    "value": "estimator",
                    "type": "variable",
                    "possible_values": []
                },
                "use_tpu": {
                    "value": "FLAGS.use_tpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "model_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predictors.binary_treat_binary_response_model_fn_builder(bert_config=bert_config, init_checkpoint=FLAGS.init_checkpoint, learning_rate=FLAGS.learning_rate, num_train_steps=num_train_steps, num_warmup_steps=num_warmup_steps, use_tpu=FLAGS.use_tpu, use_one_hot_embeddings=FLAGS.use_tpu, label_pred=FLAGS.label_pred, unsupervised=FLAGS.unsupervised, polyak=False)",
                            "Call"
                        ],
                        [
                            "predictors.binary_treat_binary_response_model_fn_builder(bert_config=bert_config, init_checkpoint=trained_model_checkpoint, learning_rate=FLAGS.learning_rate, num_train_steps=num_train_steps, num_warmup_steps=num_warmup_steps, use_tpu=FLAGS.use_tpu, use_one_hot_embeddings=FLAGS.use_tpu, label_pred=True, unsupervised=False, polyak=False)",
                            "Call"
                        ]
                    ]
                },
                "config": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.tpu.RunConfig(cluster=tpu_cluster_resolver, master=FLAGS.master, model_dir=FLAGS.output_dir, save_checkpoints_steps=FLAGS.save_checkpoints_steps, keep_checkpoint_max=FLAGS.keep_checkpoints, save_summary_steps=10, tpu_config=tf.contrib.tpu.TPUConfig(iterations_per_loop=FLAGS.iterations_per_loop, num_shards=FLAGS.num_tpu_cores, per_host_input_for_training=is_per_host))",
                            "Call"
                        ]
                    ]
                },
                "train_batch_size": {
                    "value": "FLAGS.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eval_batch_size": {
                    "value": "FLAGS.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "predict_batch_size": {
                    "value": "FLAGS.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'outcome': 'accepted', 'treatment': FLAGS.treatment}",
                            "Dict"
                        ]
                    ]
                }
            },
            "enable_eager_execution_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_154": {
                "seed": {
                    "value": "FLAGS.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_verbosity_156": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MakeDirs_170": {
                "dirname": {
                    "value": "FLAGS.output_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TPUClusterResolver_177": {
                "variable": {
                    "value": "tpu_cluster_resolver",
                    "type": "variable",
                    "possible_values": []
                },
                "tpu": {
                    "value": "FLAGS.tpu_name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "zone": {
                    "value": "FLAGS.tpu_zone",
                    "type": "Attribute",
                    "possible_values": []
                },
                "project": {
                    "value": "FLAGS.gcp_project",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_267": {
                "variable": {
                    "value": "trained_model_checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.output_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TPUEstimator_281": {
                "variable": {
                    "value": "estimator",
                    "type": "variable",
                    "possible_values": []
                },
                "use_tpu": {
                    "value": "FLAGS.use_tpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "model_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predictors.binary_treat_binary_response_model_fn_builder(bert_config=bert_config, init_checkpoint=FLAGS.init_checkpoint, learning_rate=FLAGS.learning_rate, num_train_steps=num_train_steps, num_warmup_steps=num_warmup_steps, use_tpu=FLAGS.use_tpu, use_one_hot_embeddings=FLAGS.use_tpu, label_pred=FLAGS.label_pred, unsupervised=FLAGS.unsupervised, polyak=False)",
                            "Call"
                        ],
                        [
                            "predictors.binary_treat_binary_response_model_fn_builder(bert_config=bert_config, init_checkpoint=trained_model_checkpoint, learning_rate=FLAGS.learning_rate, num_train_steps=num_train_steps, num_warmup_steps=num_warmup_steps, use_tpu=FLAGS.use_tpu, use_one_hot_embeddings=FLAGS.use_tpu, label_pred=True, unsupervised=False, polyak=False)",
                            "Call"
                        ]
                    ]
                },
                "config": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.tpu.RunConfig(cluster=tpu_cluster_resolver, master=FLAGS.master, model_dir=FLAGS.output_dir, save_checkpoints_steps=FLAGS.save_checkpoints_steps, keep_checkpoint_max=FLAGS.keep_checkpoints, save_summary_steps=10, tpu_config=tf.contrib.tpu.TPUConfig(iterations_per_loop=FLAGS.iterations_per_loop, num_shards=FLAGS.num_tpu_cores, per_host_input_for_training=is_per_host))",
                            "Call"
                        ]
                    ]
                },
                "train_batch_size": {
                    "value": "FLAGS.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eval_batch_size": {
                    "value": "FLAGS.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "predict_batch_size": {
                    "value": "FLAGS.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'outcome': 'accepted', 'treatment': FLAGS.treatment}",
                            "Dict"
                        ]
                    ]
                }
            },
            "run_371": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_230": {
                "msg": {
                    "value": "***** Running training *****",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_231": {
                "msg": {
                    "value": "  Batch size = %d",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "FLAGS.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_232": {
                "msg": {
                    "value": "  Num steps = %d",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "num_train_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.num_train_steps",
                            "Attribute"
                        ]
                    ]
                }
            },
            "info_292": {
                "msg": {
                    "value": "***** Running evaluation *****",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_294": {
                "msg": {
                    "value": "  Batch size = %d",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "FLAGS.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_328": {
                "msg": {
                    "value": "***** Running prediction*****",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TPUConfig_190": {
                "iterations_per_loop": {
                    "value": "FLAGS.iterations_per_loop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_shards": {
                    "value": "FLAGS.num_tpu_cores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "per_host_input_for_training": {
                    "value": "is_per_host",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.tpu.InputPipelineConfig.PER_HOST_V2",
                            "Attribute"
                        ]
                    ]
                }
            },
            "name_scope_235": {
                "name": {
                    "value": "training_data",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_321": {
                "name": {
                    "value": "output_eval_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.output_dir, 'eval_results.txt')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_322": {
                "msg": {
                    "value": "***** Eval results *****",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_349": {
                "name": {
                    "value": "output_predict_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.output_dir, 'test_results.tsv')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_350": {
                "msg": {
                    "value": "***** Predict results *****",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LoggingTensorHook_251": {
                "tensors": {
                    "value": "{}",
                    "type": "Dict",
                    "possible_values": []
                },
                "every_n_iter": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "info_324": {
                "msg": {
                    "value": "  %s = %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sorted(result.keys())",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "str(result[key])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/relational_ERM/relational_erm/data_cleaning/pokec.py": {
        "tensorflow": {
            "enable_eager_execution_334": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/relational_ERM/relational_erm/data_cleaning/simulate_treatment_outcome.py": {
        "tensorflow": {
            "load_variable_15": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'../../output/unsupervised_pokec_regional_embeddings/rerm_pokec.unsupervised.lr0.005/model.ckpt-10000'",
                            "str"
                        ]
                    ]
                },
                "name": {
                    "value": "input_layer/vertex_index_embedding/embedding_weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "enable_eager_execution_356": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_364": {
                "x": {
                    "value": "treatment_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits_from_load_trained_embeddings(ckpt)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/relational_ERM/relational_erm/dataset/dataset.py": {
        "tensorflow": {
            "ConfigProto_150": {
                "variable": {
                    "value": "session_config",
                    "type": "variable",
                    "possible_values": []
                },
                "intra_op_parallelism_threads": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "inter_op_parallelism_threads": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "enable_eager_execution_152": {
                "config": {
                    "value": "session_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(intra_op_parallelism_threads=0, inter_op_parallelism_threads=4)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_137": {
                "x": {
                    "value": "tf.squeeze(features['in_test'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_137": {
                "input": {
                    "value": "features['in_test']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/relational_ERM/relational_erm/graph_ops/tensorflow.py": {
        "tensorflow": {
            "stack_15": {
                "variable": {
                    "value": "swapped_el",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[edge_list[:, 1], edge_list[:, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_16": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[edge_list, swapped_el]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scatter_nd_23": {
                "variable": {
                    "value": "adj_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([edge_list, swapped_el], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "updates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.concat([weights, weights], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.ones_like(indices[:, 0], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n_vert, n_vert]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_19": {
                "variable": {
                    "value": "updates",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.concat([weights, weights], axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_21": {
                "variable": {
                    "value": "updates",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "indices[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_30": {
                "variable": {
                    "value": "simple_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.where(tf.not_equal(adj_mat, 0))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_31": {
                "variable": {
                    "value": "simple_updates",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(simple_indices)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scatter_nd_32": {
                "variable": {
                    "value": "adj_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "simple_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.where(tf.not_equal(adj_mat, 0)), dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "simple_updates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones(tf.shape(simple_indices)[0], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n_vert, n_vert]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_19": {
                "values": {
                    "value": "[weights, weights]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_30": {
                "condition": {
                    "value": "tf.not_equal(adj_mat, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "not_equal_30": {
                "x": {
                    "value": "adj_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.scatter_nd(indices, updates, [n_vert, n_vert])",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd(simple_indices, simple_updates, [n_vert, n_vert])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_31": {
                "input": {
                    "value": "simple_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.where(tf.not_equal(adj_mat, 0)), dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/relational_ERM/relational_erm/rerm_model/helpers.py": {
        "tensorflow": {
            "get_or_create_global_step_36": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_53": {
                "variable": {
                    "value": "all_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding_variable_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'input_layer/vertex_index_embedding/embedding_weights'",
                            "str"
                        ]
                    ]
                },
                "shape": {
                    "value": "[params['num_vertices'], params['embedding_dim']]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=1 / params['embedding_dim'])",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "params.get('embedding_trainable', True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "list_variables_130": {
                "variable": {
                    "value": "init_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "init_checkpoint",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_31": {
                "learning_rate": {
                    "value": "0.025",
                    "type": "float",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_47": {
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ]
                    ]
                }
            },
            "to_float_87": {
                "variable": {
                    "value": "edge_present",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(edge_weights, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_91": {
                "variable": {
                    "value": "edge_censored",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.not_equal(edge_weights, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_93": {
                "variable": {
                    "value": "edge_pred_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "edge_present",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(edge_weights, 1))",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "edge_logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "divide_102": {
                "variable": {
                    "value": "loss_value",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(edge_pred_loss)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.shape(edge_list)[0])",
                            "Call"
                        ],
                        [
                            "1.0",
                            "float"
                        ]
                    ]
                },
                "name": {
                    "value": "skipgram_edge_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_57": {
                "stddev": {
                    "value": "1 / params['embedding_dim']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_81": {
                "name": {
                    "value": "skipgram_loss",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[edge_logits, edge_list, edge_weights]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_83": {
                "variable": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(edge_list)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_by_value_99": {
                "variable": {
                    "value": "edge_pred_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "edge_pred_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(labels=edge_present, logits=edge_logits)",
                            "Call"
                        ],
                        [
                            "edge_pred_loss * edge_censored",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(edge_pred_loss, 0, clip)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "equal_87": {
                "x": {
                    "value": "edge_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "not_equal_91": {
                "x": {
                    "value": "edge_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_102": {
                "input_tensor": {
                    "value": "edge_pred_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(labels=edge_present, logits=edge_logits)",
                            "Call"
                        ],
                        [
                            "edge_pred_loss * edge_censored",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(edge_pred_loss, 0, clip)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_83": {
                "input": {
                    "value": "edge_list",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/relational_ERM/relational_erm/rerm_model/logging.py": {
        "tensorflow": {
            "mean_95": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "per_example_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "weights": {
                    "value": "split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_121": {
                "variable": {
                    "value": "masked_lm_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "masked_lm_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(masked_lm_log_probs, [-1, masked_lm_log_probs.shape[-1]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, masked_lm_log_probs.shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_123": {
                "variable": {
                    "value": "masked_lm_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_lm_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(masked_lm_log_probs, [-1, masked_lm_log_probs.shape[-1]])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_125": {
                "variable": {
                    "value": "masked_lm_example_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "masked_lm_example_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(masked_lm_example_loss, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_126": {
                "variable": {
                    "value": "masked_lm_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "masked_lm_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(masked_lm_ids, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_127": {
                "variable": {
                    "value": "masked_lm_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "masked_lm_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(masked_lm_weights, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "accuracy_128": {
                "variable": {
                    "value": "masked_lm_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "masked_lm_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(masked_lm_ids, [-1])",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "masked_lm_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(masked_lm_log_probs, axis=-1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "masked_lm_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(masked_lm_weights, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_132": {
                "variable": {
                    "value": "masked_lm_mean_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "masked_lm_example_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(masked_lm_example_loss, [-1])",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "masked_lm_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(masked_lm_weights, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_21": {
                "variable": {
                    "value": "weights_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "where_22": {
                "variable": {
                    "value": "weights_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.not_equal(weights_mean, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "weights_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(weights)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.not_equal(weights_mean, 0), weights_mean, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_24": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_25": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(predictions)",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_30": {
                "variable": {
                    "value": "random_agreement",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_labels * p_predictions + (1 - p_labels) * (1 - p_predictions)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "random_agreement",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_by_value_59": {
                "variable": {
                    "value": "random_agreement",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "random_agreement",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(p_labels * p_predictions + (1 - p_labels) * (1 - p_predictions), name='random_agreement')",
                            "Call"
                        ],
                        [
                            "batch_random_agreement(labels, predictions, weights)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(random_agreement, 0.001, 0.999)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "0.999",
                    "type": "float",
                    "possible_values": []
                }
            },
            "divide_61": {
                "variable": {
                    "value": "kappa",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "accuracy - random_agreement",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "1 - random_agreement",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "kappa",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_86": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "per_example_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "weights": {
                    "value": "split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_99": {
                "variable": {
                    "value": "hard_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_100": {
                "variable": {
                    "value": "soft_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.nn.log_softmax(logits, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "soft_predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "accuracy_103": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "hard_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits, axis=-1, output_type=tf.int32, name='hard_predictions')",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=-1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "precision_104": {
                "variable": {
                    "value": "precision",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "hard_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits, axis=-1, output_type=tf.int32, name='hard_predictions')",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=-1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "recall_105": {
                "variable": {
                    "value": "recall",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "hard_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits, axis=-1, output_type=tf.int32, name='hard_predictions')",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=-1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_20": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_54": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_69": {
                "name": {
                    "value": "'summary' + '/' + family",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_71": {
                "variable": {
                    "value": "hard_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "hard_predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_72": {
                "variable": {
                    "value": "soft_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.nn.log_softmax(logits, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "soft_predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "accuracy_74": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(labels)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "hard_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits, axis=-1, output_type=tf.int32, name='hard_predictions')",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=-1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "metrics_collections": {
                    "value": "labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "precision_75": {
                "variable": {
                    "value": "precision",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(labels)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "hard_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits, axis=-1, output_type=tf.int32, name='hard_predictions')",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=-1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "metrics_collections": {
                    "value": "labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "recall_76": {
                "variable": {
                    "value": "recall",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(labels)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "hard_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits, axis=-1, output_type=tf.int32, name='hard_predictions')",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=-1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "metrics_collections": {
                    "value": "labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_90": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "family": {
                    "value": "family",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "not_equal_22": {
                "x": {
                    "value": "weights_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(weights)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.not_equal(weights_mean, 0), weights_mean, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_27": {
                "a": {
                    "value": "labels * weights / weights_mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_28": {
                "a": {
                    "value": "predictions * weights / weights_mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "accuracy_55": {
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(labels)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(predictions)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_80": {
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "accuracy[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "family": {
                    "value": "family",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_81": {
                "name": {
                    "value": "precision",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "precision[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "family": {
                    "value": "family",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_82": {
                "name": {
                    "value": "recall",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "recall[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "family": {
                    "value": "family",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_83": {
                "name": {
                    "value": "f1",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "f1[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "family": {
                    "value": "family",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_84": {
                "name": {
                    "value": "kappa",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "kappa",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(accuracy - random_agreement, 1 - random_agreement, name='kappa')",
                            "Call"
                        ],
                        [
                            "batch_kappa(labels, hard_predictions, weights=split, name='labels/kappa')",
                            "Call"
                        ]
                    ]
                },
                "family": {
                    "value": "family",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_100": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_72": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/relational_ERM/relational_erm/rerm_model/run_classifier.py": {
        "tensorflow": {
            "get_or_create_global_step_128": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_130": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "init_lr",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_132": {
                "variable": {
                    "value": "global_steps_int",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_133": {
                "variable": {
                    "value": "warmup_steps_int",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "num_warmup_steps",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_135": {
                "variable": {
                    "value": "global_steps_float",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_steps_int",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(global_step, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_136": {
                "variable": {
                    "value": "warmup_steps_float",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "warmup_steps_int",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(num_warmup_steps, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_141": {
                "variable": {
                    "value": "is_warmup",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_steps_int < warmup_steps_int",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_204": {
                "variable": {
                    "value": "session_config",
                    "type": "variable",
                    "possible_values": []
                },
                "intra_op_parallelism_threads": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "inter_op_parallelism_threads": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RunConfig_209": {
                "variable": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": []
                },
                "log_step_count_steps": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "model_dir": {
                    "value": "args.output_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "save_checkpoints_steps": {
                    "value": "args.save_checkpoints_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "keep_checkpoint_max": {
                    "value": "args.keep_checkpoints",
                    "type": "Attribute",
                    "possible_values": []
                },
                "save_summary_steps": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "session_config": {
                    "value": "session_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(intra_op_parallelism_threads=0, inter_op_parallelism_threads=4)",
                            "Call"
                        ]
                    ]
                }
            },
            "Estimator_238": {
                "variable": {
                    "value": "estimator",
                    "type": "variable",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "model_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "treatment_response_model_fn_builder(label_task_weight=args.label_task_weight, init_checkpoint=args.init_checkpoint, label_pred=args.label_pred, unsupervised=args.unsupervised, global_optimizer=_make_global_optimizer(args), embedding_optimizer=_make_local_optimizer(args), regularization=None, treatment_cat=treatment_cat, outcome_cat=outcome_cat, polyak_train=True)",
                            "Call"
                        ],
                        [
                            "treatment_response_model_fn_builder(label_task_weight=args.label_task_weight, init_checkpoint=trained_model_checkpoint, label_pred=True, unsupervised=False, treatment_cat=treatment_cat, outcome_cat=outcome_cat, polyak_train=False, polyak_restore=False)",
                            "Call"
                        ]
                    ]
                },
                "params": {
                    "value": "{**vertex_embedding_params, 'num_vertices': graph_data.num_vertices, 'batch_size': args.batch_size}",
                    "type": "Dict",
                    "possible_values": []
                },
                "model_dir": {
                    "value": "args.output_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.estimator.RunConfig(log_step_count_steps=10, model_dir=args.output_dir, save_checkpoints_steps=args.save_checkpoints_steps, keep_checkpoint_max=args.keep_checkpoints, save_summary_steps=10, session_config=session_config)",
                            "Call"
                        ]
                    ]
                }
            },
            "enable_eager_execution_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_verbosity_168": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_random_seed_172": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MakeDirs_202": {
                "dirname": {
                    "value": "args.output_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_281": {
                "variable": {
                    "value": "trained_model_checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "args.output_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Estimator_292": {
                "variable": {
                    "value": "estimator",
                    "type": "variable",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "model_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "treatment_response_model_fn_builder(label_task_weight=args.label_task_weight, init_checkpoint=args.init_checkpoint, label_pred=args.label_pred, unsupervised=args.unsupervised, global_optimizer=_make_global_optimizer(args), embedding_optimizer=_make_local_optimizer(args), regularization=None, treatment_cat=treatment_cat, outcome_cat=outcome_cat, polyak_train=True)",
                            "Call"
                        ],
                        [
                            "treatment_response_model_fn_builder(label_task_weight=args.label_task_weight, init_checkpoint=trained_model_checkpoint, label_pred=True, unsupervised=False, treatment_cat=treatment_cat, outcome_cat=outcome_cat, polyak_train=False, polyak_restore=False)",
                            "Call"
                        ]
                    ]
                },
                "params": {
                    "value": "{**vertex_embedding_params, 'num_vertices': graph_data.num_vertices, 'batch_size': args.batch_size}",
                    "type": "Dict",
                    "possible_values": []
                },
                "model_dir": {
                    "value": "args.output_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.estimator.RunConfig(log_step_count_steps=10, model_dir=args.output_dir, save_checkpoints_steps=args.save_checkpoints_steps, keep_checkpoint_max=args.keep_checkpoints, save_summary_steps=10, session_config=session_config)",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_153": {
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(value=init_lr, shape=[], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "(1.0 - is_warmup) * learning_rate + is_warmup * warmup_learning_rate",
                            "BinOp"
                        ],
                        [
                            "args.global_learning_rate",
                            "Attribute"
                        ],
                        [
                            "_adjust_learning_rate(learning_rate, args.batch_size)",
                            "Call"
                        ],
                        [
                            "_linear_warmup(learning_rate, args.num_warmup_steps)",
                            "Call"
                        ],
                        [
                            "args.embedding_learning_rate",
                            "Attribute"
                        ],
                        [
                            "_adjust_learning_rate(learning_rate, args.batch_size)",
                            "Call"
                        ],
                        [
                            "_linear_warmup(learning_rate, args.num_warmup_steps)",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_162": {
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(value=init_lr, shape=[], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "(1.0 - is_warmup) * learning_rate + is_warmup * warmup_learning_rate",
                            "BinOp"
                        ],
                        [
                            "args.global_learning_rate",
                            "Attribute"
                        ],
                        [
                            "_adjust_learning_rate(learning_rate, args.batch_size)",
                            "Call"
                        ],
                        [
                            "_linear_warmup(learning_rate, args.num_warmup_steps)",
                            "Call"
                        ],
                        [
                            "args.embedding_learning_rate",
                            "Attribute"
                        ],
                        [
                            "_adjust_learning_rate(learning_rate, args.batch_size)",
                            "Call"
                        ],
                        [
                            "_linear_warmup(learning_rate, args.num_warmup_steps)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_249": {
                "msg": {
                    "value": "***** Running training *****",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_250": {
                "msg": {
                    "value": "  Batch size = %d",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_251": {
                "msg": {
                    "value": "  Num steps = %d",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "num_train_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.num_train_steps",
                            "Attribute"
                        ]
                    ]
                }
            },
            "info_304": {
                "msg": {
                    "value": "***** Running evaluation *****",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_306": {
                "msg": {
                    "value": "  Batch size = %d",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_324": {
                "msg": {
                    "value": "***** Running prediction*****",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_254": {
                "name": {
                    "value": "training_data",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LoggingTensorHook_259": {
                "tensors": {
                    "value": "{'loss': 'loss'}",
                    "type": "Dict",
                    "possible_values": []
                },
                "every_n_iter": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_311": {
                "name": {
                    "value": "evaluation_data",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_317": {
                "name": {
                    "value": "output_eval_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, 'eval_results.txt')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_318": {
                "msg": {
                    "value": "***** Eval results *****",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_326": {
                "name": {
                    "value": "evaluation_data",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_332": {
                "name": {
                    "value": "output_predict_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, 'test_results.tsv')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_333": {
                "msg": {
                    "value": "***** Predict results *****",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LoggingTensorHook_265": {
                "tensors": {
                    "value": "{}",
                    "type": "Dict",
                    "possible_values": []
                },
                "every_n_iter": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "info_320": {
                "msg": {
                    "value": "  %s = %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sorted(result.keys())",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "str(result[key])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/relational_ERM/relational_erm/rerm_model/treatment_outcome_predictor.py": {
        "tensorflow": {
            "cast_18": {
                "variable": {
                    "value": "t_float",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_23": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "epsilon",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_squared_error_26": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "q_mod",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q + epsilon * h",
                            "BinOp"
                        ]
                    ]
                },
                "weights": {
                    "value": "split",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "tf.losses.Reduction.SUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_110": {
                "variable": {
                    "value": "treatment_float",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "treatment",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['treatment']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_238": {
                "variable": {
                    "value": "n_vert",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features['vertex_index']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_or_create_global_step_259": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_add_261": {
                "variable": {
                    "value": "update_global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step_update",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_34": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.l2_regularizer(scale=1e-06)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(scale=1e-06)",
                            "Call"
                        ]
                    ]
                },
                "bias_regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.l2_regularizer(scale=1e-06)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(scale=1e-06)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_37": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_41": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(embedding, 200, activation=tf.nn.elu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(layer, 200, activation=tf.nn.elu, kernel_regularizer=regularizer, bias_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(embedding, 200, activation=tf.nn.elu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(layer, 200, activation=tf.nn.elu, kernel_regularizer=regularizer, bias_regularizer=regularizer)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.l2_regularizer(scale=1e-06)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(scale=1e-06)",
                            "Call"
                        ]
                    ]
                },
                "bias_regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.l2_regularizer(scale=1e-06)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(scale=1e-06)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_45": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(embedding, 1, activation=None, kernel_regularizer=regularizer, bias_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(output)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(layer, 1, activation=None, kernel_regularizer=regularizer, bias_regularizer=regularizer)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_squared_error_46": {
                "variable": {
                    "value": "per_example_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(embedding, 1, activation=None, kernel_regularizer=regularizer, bias_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(output)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(layer, 1, activation=None, kernel_regularizer=regularizer, bias_regularizer=regularizer)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "tf.losses.Reduction.NONE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_squared_error_47": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(embedding, 1, activation=None, kernel_regularizer=regularizer, bias_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(output)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(layer, 1, activation=None, kernel_regularizer=regularizer, bias_regularizer=regularizer)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "split",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "tf.losses.Reduction.SUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_57": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "num_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.l2_regularizer(scale=1e-06)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(scale=1e-06)",
                            "Call"
                        ]
                    ]
                },
                "bias_regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.l2_regularizer(scale=1e-06)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(scale=1e-06)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_60": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_64": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(embedding, 200, activation=tf.nn.elu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(layer, 200, activation=tf.nn.elu, kernel_regularizer=regularizer, bias_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(embedding, 200, activation=tf.nn.elu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(layer, 200, activation=tf.nn.elu, kernel_regularizer=regularizer, bias_regularizer=regularizer)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "num_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.l2_regularizer(scale=1e-06)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(scale=1e-06)",
                            "Call"
                        ]
                    ]
                },
                "bias_regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.l2_regularizer(scale=1e-06)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(scale=1e-06)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_68": {
                "variable": {
                    "value": "one_hot_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0 - label_smoothing",
                    "type": "BinOp",
                    "possible_values": []
                },
                "off_value": {
                    "value": "label_smoothing",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_70": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(embedding, num_labels, activation=None, kernel_regularizer=regularizer, bias_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(layer, num_labels, activation=None, kernel_regularizer=regularizer, bias_regularizer=regularizer)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_73": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "censored_per_example_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "split * per_example_loss",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_171": {
                "variable": {
                    "value": "treatment_float",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "treatment",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['treatment']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_204": {
                "variable": {
                    "value": "pairwise_inner_prods",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(all_embeddings, tf.reshape(vertex_index, [-1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(embeddings, vertex_embedding_shape, name='vertex_embeddings_batch')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(all_embeddings, tf.reshape(vertex_index, [-1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(embeddings, vertex_embedding_shape, name='vertex_embeddings_batch')",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "all_edges_logit",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_214": {
                "variable": {
                    "value": "edge_list_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(edge_list, axis=0)",
                            "Call"
                        ],
                        [
                            "features['edge_list']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tile_218": {
                "variable": {
                    "value": "batch_index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.expand_dims(tf.range(batch_size), -1), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "tf.stack([1, num_edges, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_222": {
                "variable": {
                    "value": "edge_index",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_index, edge_list]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_nd_223": {
                "variable": {
                    "value": "edge_logit",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "pairwise_inner_prods",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(embeddings, embeddings, transpose_b=True, name='all_edges_logit')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(pairwise_inner_prods, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "edge_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([batch_index, edge_list], axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_236": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['weights']",
                            "Subscript"
                        ],
                        [
                            "tf.squeeze(weights, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "divide_250": {
                "variable": {
                    "value": "edge_pred_loss_normalized",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "edge_pred_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "skipgram_loss_fn(edge_logits, n_vert, edge_list, weights, params)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.to_float(edge_pred_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "identity_270": {
                "variable": {
                    "value": "embedding_update",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "trainable_variables_274": {
                "variable": {
                    "value": "global_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "dragon",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_284": {
                "variable": {
                    "value": "global_update",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "group_287": {
                "variable": {
                    "value": "basic_train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "embedding_update",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_optimizer_value.minimize(loss, var_list=embedding_vars, global_step=None)",
                            "Call"
                        ],
                        [
                            "tf.identity(0.0)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "global_update",
                    "type": "variable",
                    "possible_values": [
                        [
                            "global_optimizer_value.minimize(loss, var_list=global_vars, global_step=None)",
                            "Call"
                        ],
                        [
                            "tf.identity(0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_353": {
                "variable": {
                    "value": "vertex_embedding_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.shape(vertex_index), [params['embedding_dim']]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "vertex_embedding_shape",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_359": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "all_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_make_embedding_variable(params)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "tf.reshape(vertex_index, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_360": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(all_embeddings, tf.reshape(vertex_index, [-1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(embeddings, vertex_embedding_shape, name='vertex_embeddings_batch')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "vertex_embedding_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.shape(vertex_index), [params['embedding_dim']]], axis=0, name='vertex_embedding_shape')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "vertex_embeddings_batch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_regularization_loss_397": {
                "variable": {
                    "value": "reg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_463": {
                "variable": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dense_39": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(embedding, 200, activation=tf.nn.elu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(layer, 200, activation=tf.nn.elu, kernel_regularizer=regularizer, bias_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(embedding, 200, activation=tf.nn.elu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(layer, 200, activation=tf.nn.elu, kernel_regularizer=regularizer, bias_regularizer=regularizer)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.l2_regularizer(scale=1e-06)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(scale=1e-06)",
                            "Call"
                        ]
                    ]
                },
                "bias_regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.l2_regularizer(scale=1e-06)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(scale=1e-06)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_44": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_62": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(embedding, 200, activation=tf.nn.elu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(layer, 200, activation=tf.nn.elu, kernel_regularizer=regularizer, bias_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(embedding, 200, activation=tf.nn.elu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(layer, 200, activation=tf.nn.elu, kernel_regularizer=regularizer, bias_regularizer=regularizer)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.l2_regularizer(scale=1e-06)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(scale=1e-06)",
                            "Call"
                        ]
                    ]
                },
                "bias_regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.l2_regularizer(scale=1e-06)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(scale=1e-06)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_67": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_75": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(embedding, num_labels, activation=None, kernel_regularizer=regularizer, bias_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(layer, num_labels, activation=None, kernel_regularizer=regularizer, bias_regularizer=regularizer)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_111": {
                "name_or_scope": {
                    "value": "dragon_net",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "custom_getter": {
                    "value": "getter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_loss_144": {
                "loss": {
                    "value": "loss_ot0 / batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_loss_145": {
                "loss": {
                    "value": "loss_ot1 / batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_loss_146": {
                "loss": {
                    "value": "loss_t / batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_203": {
                "name": {
                    "value": "edge_list_logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_208": {
                "variable": {
                    "value": "edge_list",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(edge_list, axis=0)",
                            "Call"
                        ],
                        [
                            "features['edge_list']",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_209": {
                "variable": {
                    "value": "pairwise_inner_prods",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pairwise_inner_prods",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(embeddings, embeddings, transpose_b=True, name='all_edges_logit')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(pairwise_inner_prods, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_226": {
                "variable": {
                    "value": "edge_logit",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(pairwise_inner_prods, edge_index)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(edge_logit, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_244": {
                "name": {
                    "value": "edge_loss",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[edge_logits, edge_list, weights]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_286": {
                "control_inputs": {
                    "value": "[update_global_step]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "info_336": {
                "msg": {
                    "value": "*** Features ***",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_416": {
                "variable": {
                    "value": "treatment_float",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "treatment",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['treatment']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_483": {
                "msg": {
                    "value": "**** Trainable Variables ****",
                    "type": "str",
                    "possible_values": []
                }
            },
            "EstimatorSpec_499": {
                "variable": {
                    "value": "output_spec",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_loss",
                            "variable"
                        ],
                        [
                            "total_loss + reg_loss",
                            "BinOp"
                        ],
                        [
                            "edge_loss",
                            "variable"
                        ],
                        [
                            "edge_loss + label_task_weight * label_loss",
                            "BinOp"
                        ]
                    ]
                },
                "train_op": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "basic_train_op",
                            "variable"
                        ],
                        [
                            "_rerm_optimizer(total_loss, params, embedding_optimizer, global_optimizer)",
                            "Call"
                        ],
                        [
                            "_rerm_optimizer(total_loss, params, embedding_optimizer, global_optimizer)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_71": {
                "input_tensor": {
                    "value": "one_hot_labels * log_probs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_112": {
                "name_or_scope": {
                    "value": "treatment",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_121": {
                "name_or_scope": {
                    "value": "outcome_st_treatment",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_130": {
                "name_or_scope": {
                    "value": "outcome_st_no_treatment",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_219": {
                "input": {
                    "value": "tf.range(batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_220": {
                "values": {
                    "value": "[1, num_edges, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_249": {
                "input": {
                    "value": "edge_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_make_edge_logits(embeddings, features, edge_list, weights, params)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_250": {
                "x": {
                    "value": "edge_pred_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(edge_logits)[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "trainable_variables_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_258": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_338": {
                "msg": {
                    "value": "'  name = %s, shape = %s' % (name, features[name].shape)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_359": {
                "tensor": {
                    "value": "vertex_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['vertex_index']",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_collection_403": {
                "variable": {
                    "value": "global_variables",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "trainable_variables",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "dragon_net",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_404": {
                "variable": {
                    "value": "ema",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "0.95",
                    "type": "float",
                    "possible_values": []
                }
            },
            "init_from_checkpoint_469": {
                "ckpt_dir_or_file": {
                    "value": "init_checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "assignment_map": {
                    "value": "assignment_map",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "list_variables_473": {
                "variable": {
                    "value": "init_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "init_checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "info_488": {
                "msg": {
                    "value": "  name = %s, shape = %s%s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "var.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "var.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "EstimatorSpec_526": {
                "variable": {
                    "value": "output_spec",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "test_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "eval_metric_ops": {
                    "value": "eval_metrics",
                    "type": "variable",
                    "possible_values": [
                        [
                            "treatment_outcome_eval_metric_fn(**eval_feed)",
                            "Call"
                        ]
                    ]
                }
            },
            "EstimatorSpec_544": {
                "variable": {
                    "value": "output_spec",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'in_test': in_test[:, 0]}",
                            "Dict"
                        ]
                    ]
                }
            },
            "expand_dims_21": {
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_354": {
                "input": {
                    "value": "vertex_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['vertex_index']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "scalar_373": {
                "name": {
                    "value": "edge_loss_normalized",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "edge_loss_normalized",
                    "type": "variable",
                    "possible_values": []
                },
                "family": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "init_from_checkpoint_479": {
                "ckpt_dir_or_file": {
                    "value": "init_checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "assignment_map": {
                    "value": "restore_variables",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ema.variables_to_restore()",
                            "Call"
                        ],
                        [
                            "{k: v for (k, v) in restore_variables.items() if k in init_vars_name}",
                            "DictComp"
                        ]
                    ]
                }
            },
            "add_loss_385": {
                "loss": {
                    "value": "edge_loss",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "add_loss_386": {
                "loss": {
                    "value": "label_task_weight * label_loss",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_388": {
                "name": {
                    "value": "edge_loss_normalized",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "edge_loss_normalized",
                    "type": "variable",
                    "possible_values": []
                },
                "family": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_389": {
                "name": {
                    "value": "edge_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "edge_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "family": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_390": {
                "name": {
                    "value": "label_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "label_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "family": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_494": {
                "control_inputs": {
                    "value": "[ema_op]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "src/relational_ERM/relational_erm/sampling/adapters.py": {
        "tensorflow": {
            "concat_163": {
                "variable": {
                    "value": "edge_list",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "edge_lists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_230": {
                "variable": {
                    "value": "edge_list",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "vertex_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(graph.offsets))",
                            "Call"
                        ],
                        [
                            "tf.contrib.framework.sort(tf.unique(walk)[0], name='walk_index')",
                            "Call"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "data.get('vertex_index', None)",
                            "Call"
                        ],
                        [
                            "new_vertex_index",
                            "variable"
                        ],
                        [
                            "tf.gather(vertex_index, new_vertex_index, name='resample_vertex_index')",
                            "Call"
                        ],
                        [
                            "vertex_index[new_vertex_index]",
                            "Subscript"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "edge_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty((num_edges, 2), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "fn_tensorflow(walk)",
                            "Call"
                        ],
                        [
                            "fn_numpy(walk)",
                            "Call"
                        ],
                        [
                            "tf.concat(edge_lists, axis=0)",
                            "Call"
                        ],
                        [
                            "tensorflow_adapters.adjacency_to_edge_list(data['neighbours'], data['lengths'])",
                            "Call"
                        ],
                        [
                            "tf.gather(vertex_index, edge_list)",
                            "Call"
                        ],
                        [
                            "tf.concat([edge_list_pos, edge_list_neg], axis=0)",
                            "Call"
                        ],
                        [
                            "edge_list.astype(np.int32).reshape(shape)",
                            "Call"
                        ],
                        [
                            "data['edge_list']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "gather_263": {
                "variable": {
                    "value": "edge_list_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "vertex_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(graph.offsets))",
                            "Call"
                        ],
                        [
                            "tf.contrib.framework.sort(tf.unique(walk)[0], name='walk_index')",
                            "Call"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "data.get('vertex_index', None)",
                            "Call"
                        ],
                        [
                            "new_vertex_index",
                            "variable"
                        ],
                        [
                            "tf.gather(vertex_index, new_vertex_index, name='resample_vertex_index')",
                            "Call"
                        ],
                        [
                            "vertex_index[new_vertex_index]",
                            "Subscript"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "edge_list_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(vertex_index, edge_list_pos, name='RestoreIndexPos')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "RestoreIndexPos",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_264": {
                "variable": {
                    "value": "edge_list_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "vertex_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(graph.offsets))",
                            "Call"
                        ],
                        [
                            "tf.contrib.framework.sort(tf.unique(walk)[0], name='walk_index')",
                            "Call"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "data.get('vertex_index', None)",
                            "Call"
                        ],
                        [
                            "new_vertex_index",
                            "variable"
                        ],
                        [
                            "tf.gather(vertex_index, new_vertex_index, name='resample_vertex_index')",
                            "Call"
                        ],
                        [
                            "vertex_index[new_vertex_index]",
                            "Subscript"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "edge_list_neg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(vertex_index, edge_list_neg, name='RestoreIndexNeg')",
                            "Call"
                        ],
                        [
                            "tf.gather(edge_list_neg, neg_idx, name='SubsampleNegEdges')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "RestoreIndexNeg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_279": {
                "variable": {
                    "value": "weights_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.reshape(tf.shape(edge_list_pos)[0], [1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_280": {
                "variable": {
                    "value": "weights_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.reshape(tf.shape(edge_list_neg)[0], [1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_282": {
                "variable": {
                    "value": "edge_list",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[edge_list_pos, edge_list_neg]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_283": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[weights_pos, weights_neg]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_388": {
                "variable": {
                    "value": "subset_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "vertex_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(graph.offsets))",
                            "Call"
                        ],
                        [
                            "tf.contrib.framework.sort(tf.unique(walk)[0], name='walk_index')",
                            "Call"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "data.get('vertex_index', None)",
                            "Call"
                        ],
                        [
                            "new_vertex_index",
                            "variable"
                        ],
                        [
                            "tf.gather(vertex_index, new_vertex_index, name='resample_vertex_index')",
                            "Call"
                        ],
                        [
                            "vertex_index[new_vertex_index]",
                            "Subscript"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gather_587": {
                "variable": {
                    "value": "sample_split",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rng.binomial(1, 1 - proportion_censored, size=num_vertices).astype(np.float32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "vertex_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "gather_619": {
                "variable": {
                    "value": "sample_in_test",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "in_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rng.binomial(1, proportion_censored, size=num_vertices).astype(np.float32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "vertex_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "gather_620": {
                "variable": {
                    "value": "sample_in_dev",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "in_dev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rng.binomial(1, proportion_censored, size=num_vertices).astype(np.float32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "vertex_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "gather_621": {
                "variable": {
                    "value": "sample_in_train",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "in_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(in_test + in_dev == 0).astype(np.float32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "vertex_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_121": {
                "values": {
                    "value": "[edge_list_start, edge_list_end]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_191": {
                "variable": {
                    "value": "vertex_index",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.unique(walk)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "walk_index",
                    "type": "str",
                    "possible_values": []
                }
            },
            "to_int32_268": {
                "variable": {
                    "value": "num_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "num_neg_per_pos * num_pos",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_275": {
                "variable": {
                    "value": "edge_list_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "edge_list_neg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(vertex_index, edge_list_neg, name='RestoreIndexNeg')",
                            "Call"
                        ],
                        [
                            "tf.gather(edge_list_neg, neg_idx, name='SubsampleNegEdges')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "neg_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.reshape(num_neg, [1]), minval=0, maxval=tf.shape(edge_list_neg)[0], dtype=tf.int32, seed=seed)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "SubsampleNegEdges",
                    "type": "str",
                    "possible_values": []
                }
            },
            "py_func_321": {
                "variable": {
                    "value": "(new_edge_list, new_vertex_index, is_positive)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "func": {
                    "value": "relabel",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[edge_list, positive_vertices]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.int32, tf.int32, tf.int32]",
                    "type": "List",
                    "possible_values": []
                },
                "stateful": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_357": {
                "variable": {
                    "value": "sample_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "indices": {
                    "value": "vertex_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(graph.offsets))",
                            "Call"
                        ],
                        [
                            "tf.contrib.framework.sort(tf.unique(walk)[0], name='walk_index')",
                            "Call"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "data.get('vertex_index', None)",
                            "Call"
                        ],
                        [
                            "new_vertex_index",
                            "variable"
                        ],
                        [
                            "tf.gather(vertex_index, new_vertex_index, name='resample_vertex_index')",
                            "Call"
                        ],
                        [
                            "vertex_index[new_vertex_index]",
                            "Subscript"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "py_func_414": {
                "func": {
                    "value": "lambda : value",
                    "type": "Lambda",
                    "possible_values": []
                },
                "inp": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stateful": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gather_426": {
                "variable": {
                    "value": "sample_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "all_node_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_make_hidden_constant(classes, 'make_all_node_classes')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "vertex_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(graph.offsets))",
                            "Call"
                        ],
                        [
                            "tf.contrib.framework.sort(tf.unique(walk)[0], name='walk_index')",
                            "Call"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "data.get('vertex_index', None)",
                            "Call"
                        ],
                        [
                            "new_vertex_index",
                            "variable"
                        ],
                        [
                            "tf.gather(vertex_index, new_vertex_index, name='resample_vertex_index')",
                            "Call"
                        ],
                        [
                            "vertex_index[new_vertex_index]",
                            "Subscript"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "py_func_447": {
                "func": {
                    "value": "lambda : value",
                    "type": "Lambda",
                    "possible_values": []
                },
                "inp": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stateful": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gather_459": {
                "variable": {
                    "value": "sample_features",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "all_node_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_make_features_hidden_constant(vector_features, 'create_all_node_features')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "vertex_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(graph.offsets))",
                            "Call"
                        ],
                        [
                            "tf.contrib.framework.sort(tf.unique(walk)[0], name='walk_index')",
                            "Call"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "data.get('vertex_index', None)",
                            "Call"
                        ],
                        [
                            "new_vertex_index",
                            "variable"
                        ],
                        [
                            "tf.gather(vertex_index, new_vertex_index, name='resample_vertex_index')",
                            "Call"
                        ],
                        [
                            "vertex_index[new_vertex_index]",
                            "Subscript"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_190": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_279": {
                "tensor": {
                    "value": "tf.shape(edge_list_pos)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_280": {
                "tensor": {
                    "value": "tf.shape(edge_list_neg)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_331": {
                "variable": {
                    "value": "vertex_index",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "vertex_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(graph.offsets))",
                            "Call"
                        ],
                        [
                            "tf.contrib.framework.sort(tf.unique(walk)[0], name='walk_index')",
                            "Call"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "data.get('vertex_index', None)",
                            "Call"
                        ],
                        [
                            "new_vertex_index",
                            "variable"
                        ],
                        [
                            "tf.gather(vertex_index, new_vertex_index, name='resample_vertex_index')",
                            "Call"
                        ],
                        [
                            "vertex_index[new_vertex_index]",
                            "Subscript"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "new_vertex_index",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "resample_vertex_index",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_392": {
                "params": {
                    "value": "offsets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty_like(lengths)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "vertex_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(graph.offsets))",
                            "Call"
                        ],
                        [
                            "tf.contrib.framework.sort(tf.unique(walk)[0], name='walk_index')",
                            "Call"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "data.get('vertex_index', None)",
                            "Call"
                        ],
                        [
                            "new_vertex_index",
                            "variable"
                        ],
                        [
                            "tf.gather(vertex_index, new_vertex_index, name='resample_vertex_index')",
                            "Call"
                        ],
                        [
                            "vertex_index[new_vertex_index]",
                            "Subscript"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "data['vertex_index']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "size_514": {
                "input": {
                    "value": "data['vertex_index']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_160": {
                "values": {
                    "value": "[walk[:-i], walk[i:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_267": {
                "input": {
                    "value": "edge_list_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(vertex_index, edge_list_pos, name='RestoreIndexPos')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_271": {
                "tensor": {
                    "value": "num_neg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_int32(num_neg_per_pos * num_pos)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unique_317": {
                "x": {
                    "value": "tf.reshape(edge_list, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_513": {
                "input": {
                    "value": "data['edge_list']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unique_192": {
                "x": {
                    "value": "walk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['walk']",
                            "Subscript"
                        ],
                        [
                            "data['walk']",
                            "Subscript"
                        ],
                        [
                            "data['walk']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_279": {
                "input": {
                    "value": "edge_list_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(vertex_index, edge_list_pos, name='RestoreIndexPos')",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_280": {
                "input": {
                    "value": "edge_list_neg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(vertex_index, edge_list_neg, name='RestoreIndexNeg')",
                            "Call"
                        ],
                        [
                            "tf.gather(edge_list_neg, neg_idx, name='SubsampleNegEdges')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_317": {
                "tensor": {
                    "value": "edge_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty((num_edges, 2), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "fn_tensorflow(walk)",
                            "Call"
                        ],
                        [
                            "fn_numpy(walk)",
                            "Call"
                        ],
                        [
                            "tf.concat(edge_lists, axis=0)",
                            "Call"
                        ],
                        [
                            "tensorflow_adapters.adjacency_to_edge_list(data['neighbours'], data['lengths'])",
                            "Call"
                        ],
                        [
                            "tf.gather(vertex_index, edge_list)",
                            "Call"
                        ],
                        [
                            "tf.concat([edge_list_pos, edge_list_neg], axis=0)",
                            "Call"
                        ],
                        [
                            "edge_list.astype(np.int32).reshape(shape)",
                            "Call"
                        ],
                        [
                            "data['edge_list']",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_272": {
                "input": {
                    "value": "edge_list_neg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(vertex_index, edge_list_neg, name='RestoreIndexNeg')",
                            "Call"
                        ],
                        [
                            "tf.gather(edge_list_neg, neg_idx, name='SubsampleNegEdges')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/relational_ERM/relational_erm/sampling/factories.py": {
        "tensorflow": {
            "range_37": {
                "variable": {
                    "value": "seed_offset_dataset",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "info_64": {
                "msg": {
                    "value": "Computing unigram distribution from sample.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_76": {
                "variable": {
                    "value": "empirical_unigram",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "empirical_unigram",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_vertex]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "scatter_add_80": {
                "variable": {
                    "value": "increment_empirical",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "empirical_unigram",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('empirical_unigram', shape=[num_vertex], dtype=tf.int32, initializer=tf.zeros_initializer(), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "samples.make_one_shot_iterator().get_next()",
                            "Call"
                        ],
                        [
                            "sample['walk']",
                            "Subscript"
                        ],
                        [
                            "sample['vertex_index']",
                            "Subscript"
                        ]
                    ]
                },
                "updates": {
                    "value": "tf.ones_like(sample, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_83": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_92": {
                "msg": {
                    "value": "Done computing unigram distribution.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "range_296": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "repeat_296": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "parallel_interleave_41": {
                "map_func": {
                    "value": "lambda input: dataset_fn(seed + input)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "cycle_length": {
                    "value": "num_shards",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Graph_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "py_func_136": {
                "func": {
                    "value": "lambda : value",
                    "type": "Lambda",
                    "possible_values": []
                },
                "inp": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stateful": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_81": {
                "input": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "samples.make_one_shot_iterator().get_next()",
                            "Call"
                        ],
                        [
                            "sample['walk']",
                            "Subscript"
                        ],
                        [
                            "sample['vertex_index']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/relational_ERM/relational_erm/sampling/negative_sampling.py": {
        "tensorflow": {
            "get_variable_33": {
                "variable": {
                    "value": "empirical_vertex_distribution",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "empirical_vertex_distribution",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "accumulator_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.int32",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "prior",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ],
                        [
                            "np.ones(num_vertex, dtype=accumulator_dtype) * prior",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "use_resource": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_106": {
                "variable": {
                    "value": "neg_edges_end",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "random_vertex_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_sample_independent_vertices(edge_list, num_random_total, dtype)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "neg_edges_end_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(neg_edges_shape, 0, num_random_total, seed=seed, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_114": {
                "variable": {
                    "value": "neg_edges_end",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "neg_edges_end",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(random_vertex_ids, neg_edges_end_idx)",
                            "Call"
                        ],
                        [
                            "_sample_independent_vertices(edge_list, tf.reduce_prod(neg_edges_shape), dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(neg_edges_end, neg_edges_shape)",
                            "Call"
                        ],
                        [
                            "_make_neg_edges_end(edge_list, tf.shape(neg_edges_start), edge_list.dtype)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "neg_edges_shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unique_124": {
                "variable": {
                    "value": "(vertex_list, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(edge_list, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_135": {
                "variable": {
                    "value": "neg_edges",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[neg_edges_start, neg_edges_end]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_136": {
                "variable": {
                    "value": "neg_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.stack([tf.shape(neg_edges)[0], tf.shape(weights)[1]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_138": {
                "variable": {
                    "value": "all_edges",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[edge_list, neg_edges]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_139": {
                "variable": {
                    "value": "all_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[weights, neg_weights]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_42": {
                "variable": {
                    "value": "edge_list_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "edge_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['edge_list']",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scatter_add_43": {
                "variable": {
                    "value": "update_empirical",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "empirical_vertex_distribution",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='empirical_vertex_distribution', dtype=accumulator_dtype, initializer=prior, trainable=False, use_resource=True)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "edge_list_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(edge_list, [-1])",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "tf.ones_like(edge_list_flat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multinomial_91": {
                "logits": {
                    "value": "tf.expand_dims(unigram_logits, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "output_dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tile_127": {
                "variable": {
                    "value": "neg_edges_start",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_list[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[num_samples_per_vertex]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_129": {
                "variable": {
                    "value": "neg_edges_start",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vertex_list",
                    "type": "variable",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[num_samples_per_vertex]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_132": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.stack([tf.shape(edge_list)[0], 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_41": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_91": {
                "input": {
                    "value": "unigram_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertex_distribution_logit(edge_list)",
                            "Call"
                        ],
                        [
                            "vertex_distribution_logit",
                            "variable"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_prod_113": {
                "input_tensor": {
                    "value": "neg_edges_shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_124": {
                "tensor": {
                    "value": "edge_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['edge_list']",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_134": {
                "input": {
                    "value": "neg_edges_start",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(edge_list[:, 0], [num_samples_per_vertex])",
                            "Call"
                        ],
                        [
                            "tf.tile(vertex_list, [num_samples_per_vertex])",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_136": {
                "values": {
                    "value": "[tf.shape(neg_edges)[0], tf.shape(weights)[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_like_46": {
                "input": {
                    "value": "edge_list_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(edge_list, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_48": {
                "control_inputs": {
                    "value": "[update_empirical]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_83": {
                "tensor": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_132": {
                "values": {
                    "value": "[tf.shape(edge_list)[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_49": {
                "x": {
                    "value": "tf.to_float(empirical_vertex_distribution)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_49": {
                "x": {
                    "value": "empirical_vertex_distribution",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='empirical_vertex_distribution', dtype=accumulator_dtype, initializer=prior, trainable=False, use_resource=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_136": {
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones(tf.stack([tf.shape(edge_list)[0], 1]))",
                            "Call"
                        ],
                        [
                            "data.get('weights', None)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_132": {
                "input": {
                    "value": "edge_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['edge_list']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "src/relational_ERM/relational_erm/tensorflow_ops/adapter_ops.py": {
        "tensorflow": {
            "load_op_library_15": {
                "variable": {
                    "value": "_loaded_library",
                    "type": "variable",
                    "possible_values": []
                },
                "library_filename": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(directory, library_filename)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/relational_ERM/relational_erm/tensorflow_ops/array_ops.py": {
        "tensorflow": {
            "load_op_library_15": {
                "variable": {
                    "value": "_loaded_library",
                    "type": "variable",
                    "possible_values": []
                },
                "library_filename": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(directory, library_filename)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/relational_ERM/relational_erm/tensorflow_ops/dataset_ops.py": {
        "tensorflow": {
            "load_op_library_19": {
                "variable": {
                    "value": "_loaded_library",
                    "type": "variable",
                    "possible_values": []
                },
                "library_filename": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(directory, library_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_seed_41": {
                "variable": {
                    "value": "(self.seed, self.seed2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "op_seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_seed_88": {
                "variable": {
                    "value": "(self.seed, self.seed2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "op_seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_seed_151": {
                "variable": {
                    "value": "(self.seed, self.seed2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "op_seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_seed_198": {
                "variable": {
                    "value": "(self.seed, self.seed2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "op_seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_tensor_93": {
                "x": {
                    "value": "neighbours",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_94": {
                "variable": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "n / tf.to_float(tf.size(neighbours))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_96": {
                "variable": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "n / len(neighbours)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "TensorShape_66": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_121": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_122": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_123": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_124": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_177": {
                "dims": {
                    "value": "[num_samples, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_224": {
                "dims": {
                    "value": "[walk_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_94": {
                "x": {
                    "value": "tf.size(neighbours)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "size_94": {
                "input": {
                    "value": "neighbours",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/relational_ERM/setup.py": {
        "tensorflow": {
            "get_include_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_lib_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_lib_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_compile_flags_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}