{
    "src/models/test.py": {
        "sklearn": {
            "precision_recall_fscore_support_57": {
                "variable": {
                    "value": "(test_prec, test_recall, test_f1, test_support)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_targets",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(y_targets)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(y_targets)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_preds",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "precision_recall_fscore_support_199": {
                "variable": {
                    "value": "(test_prec, test_recall, test_f1, test_support)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_targets",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(y_targets)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(y_targets)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_preds",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "average": {
                    "value": "binary",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "roc_auc_score_206": {
                "variable": {
                    "value": "test_auc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_targets",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(y_targets)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(y_targets)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_raw_preds",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(y_raw_preds)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(y_raw_preds)",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_67": {
                "variable": {
                    "value": "auc_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_targets[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_score": {
                    "value": "y_raw_preds[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "SummaryWriter_26": {
                "variable": {
                    "value": "logger",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "log_path",
                    "type": "JoinedStr",
                    "possible_values": [
                        [
                            "f'{ROOT_DIR}/runs/{experiment_name}'",
                            "JoinedStr"
                        ],
                        [
                            "f'{ROOT_DIR}/runs/{experiment_name}'",
                            "JoinedStr"
                        ],
                        [
                            "f'{ROOT_DIR}/runs/{experiment_name}'",
                            "JoinedStr"
                        ]
                    ]
                }
            },
            "tensor_61": {
                "variable": {
                    "value": "y_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y_targets",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(y_targets)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(y_targets)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_62": {
                "variable": {
                    "value": "y_raw_preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y_raw_preds",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(y_raw_preds)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(y_raw_preds)",
                            "Call"
                        ]
                    ]
                }
            },
            "SummaryWriter_99": {
                "variable": {
                    "value": "logger",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "log_path",
                    "type": "JoinedStr",
                    "possible_values": [
                        [
                            "f'{ROOT_DIR}/runs/{experiment_name}'",
                            "JoinedStr"
                        ],
                        [
                            "f'{ROOT_DIR}/runs/{experiment_name}'",
                            "JoinedStr"
                        ],
                        [
                            "f'{ROOT_DIR}/runs/{experiment_name}'",
                            "JoinedStr"
                        ]
                    ]
                }
            },
            "SummaryWriter_166": {
                "variable": {
                    "value": "logger",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "log_path",
                    "type": "JoinedStr",
                    "possible_values": [
                        [
                            "f'{ROOT_DIR}/runs/{experiment_name}'",
                            "JoinedStr"
                        ],
                        [
                            "f'{ROOT_DIR}/runs/{experiment_name}'",
                            "JoinedStr"
                        ],
                        [
                            "f'{ROOT_DIR}/runs/{experiment_name}'",
                            "JoinedStr"
                        ]
                    ]
                }
            },
            "tensor_203": {
                "variable": {
                    "value": "y_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y_targets",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(y_targets)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(y_targets)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_204": {
                "variable": {
                    "value": "y_raw_preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y_raw_preds",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(y_raw_preds)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(y_raw_preds)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_43": {
                "variable": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(y_pred)",
                            "Call"
                        ],
                        [
                            "model(x).reshape(-1, 6, 4)",
                            "Call"
                        ],
                        [
                            "torch.nn.Softmax(dim=2)(y_pred)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "y_pred * test_loader.dataset.std + test_loader.dataset.mean",
                            "BinOp"
                        ],
                        [
                            "model(x).squeeze()",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(y_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_185": {
                "variable": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(y_pred)",
                            "Call"
                        ],
                        [
                            "model(x).reshape(-1, 6, 4)",
                            "Call"
                        ],
                        [
                            "torch.nn.Softmax(dim=2)(y_pred)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "y_pred * test_loader.dataset.std + test_loader.dataset.mean",
                            "BinOp"
                        ],
                        [
                            "model(x).squeeze()",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(y_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_51": {
                "input": {
                    "value": "y_pred == y_target",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_193": {
                "input": {
                    "value": "y_pred == y_target",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_46": {
                "condition": {
                    "value": "y_pred > 0.5",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_47": {
                "condition": {
                    "value": "y_pred <= 0.5",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_188": {
                "condition": {
                    "value": "y_pred > 0.5",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_189": {
                "condition": {
                    "value": "y_pred <= 0.5",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "Softmax_119": {
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/train.py": {
        "sklearn": {
            "precision_recall_fscore_support_96": {
                "variable": {
                    "value": "(epoch_prec, epoch_recall, epoch_f1, epoch_support)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_target_list",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(y_target_list)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(y_target_list)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred_list",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "precision_recall_fscore_support_347": {
                "variable": {
                    "value": "(epoch_prec, epoch_recall, epoch_f1, epoch_support)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_target_list",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(y_target_list)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(y_target_list)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred_list",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "average": {
                    "value": "binary",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "roc_auc_score_353": {
                "variable": {
                    "value": "epoch_auc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_target_list",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(y_target_list)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(y_target_list)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_raw_pred_list",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(y_raw_pred_list)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(y_raw_pred_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_106": {
                "y_true": {
                    "value": "y_target_list[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_score": {
                    "value": "y_raw_pred_list[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "SummaryWriter_31": {
                "variable": {
                    "value": "logger",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "log_path",
                    "type": "JoinedStr",
                    "possible_values": [
                        [
                            "f'{ROOT_DIR}/runs/{experiment_name}'",
                            "JoinedStr"
                        ],
                        [
                            "f'{ROOT_DIR}/runs/{experiment_name}'",
                            "JoinedStr"
                        ],
                        [
                            "f'{ROOT_DIR}/runs/{experiment_name}'",
                            "JoinedStr"
                        ]
                    ]
                }
            },
            "SummaryWriter_159": {
                "variable": {
                    "value": "logger",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "log_path",
                    "type": "JoinedStr",
                    "possible_values": [
                        [
                            "f'{ROOT_DIR}/runs/{experiment_name}'",
                            "JoinedStr"
                        ],
                        [
                            "f'{ROOT_DIR}/runs/{experiment_name}'",
                            "JoinedStr"
                        ],
                        [
                            "f'{ROOT_DIR}/runs/{experiment_name}'",
                            "JoinedStr"
                        ]
                    ]
                }
            },
            "SummaryWriter_268": {
                "variable": {
                    "value": "logger",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "log_path",
                    "type": "JoinedStr",
                    "possible_values": [
                        [
                            "f'{ROOT_DIR}/runs/{experiment_name}'",
                            "JoinedStr"
                        ],
                        [
                            "f'{ROOT_DIR}/runs/{experiment_name}'",
                            "JoinedStr"
                        ],
                        [
                            "f'{ROOT_DIR}/runs/{experiment_name}'",
                            "JoinedStr"
                        ]
                    ]
                }
            },
            "tensor_100": {
                "variable": {
                    "value": "y_target_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y_target_list",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(y_target_list)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(y_target_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_101": {
                "variable": {
                    "value": "y_raw_pred_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y_raw_pred_list",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(y_raw_pred_list)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(y_raw_pred_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_350": {
                "variable": {
                    "value": "y_target_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y_target_list",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(y_target_list)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(y_target_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_351": {
                "variable": {
                    "value": "y_raw_pred_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y_raw_pred_list",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(y_raw_pred_list)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(y_raw_pred_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_258": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_293": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_target",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_300": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "criterion(y_pred, y_target)",
                            "Call"
                        ],
                        [
                            "criterion(y_pred, y_target)",
                            "Call"
                        ],
                        [
                            "alpha * loss_scce + (1 - alpha) * loss_mae",
                            "BinOp"
                        ],
                        [
                            "criterion(y_pred, y_target)",
                            "Call"
                        ],
                        [
                            "alpha * loss_scce + (1 - alpha) * loss_mae",
                            "BinOp"
                        ],
                        [
                            "criterion(y_pred, y_target)",
                            "Call"
                        ],
                        [
                            "criterion(y_pred, y_target)",
                            "Call"
                        ],
                        [
                            "weights * loss",
                            "BinOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "criterion(y_pred, y_target)",
                            "Call"
                        ],
                        [
                            "weights * loss",
                            "BinOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_81": {
                "variable": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(y_pred)",
                            "Call"
                        ],
                        [
                            "model(x).reshape(-1, 6, 4)",
                            "Call"
                        ],
                        [
                            "torch.nn.Softmax(dim=2)(y_pred)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x).reshape(-1, 6, 4)",
                            "Call"
                        ],
                        [
                            "torch.nn.Softmax(dim=2)(y_pred)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x).squeeze()",
                            "Call"
                        ],
                        [
                            "model(x).squeeze()",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(y_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_121": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f'{log_path}/model.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "no_grad_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_230": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f'{log_path}/model.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "no_grad_315": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_321": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_target",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_328": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "criterion(y_pred, y_target)",
                            "Call"
                        ],
                        [
                            "criterion(y_pred, y_target)",
                            "Call"
                        ],
                        [
                            "alpha * loss_scce + (1 - alpha) * loss_mae",
                            "BinOp"
                        ],
                        [
                            "criterion(y_pred, y_target)",
                            "Call"
                        ],
                        [
                            "alpha * loss_scce + (1 - alpha) * loss_mae",
                            "BinOp"
                        ],
                        [
                            "criterion(y_pred, y_target)",
                            "Call"
                        ],
                        [
                            "criterion(y_pred, y_target)",
                            "Call"
                        ],
                        [
                            "weights * loss",
                            "BinOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "criterion(y_pred, y_target)",
                            "Call"
                        ],
                        [
                            "weights * loss",
                            "BinOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_332": {
                "variable": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(y_pred)",
                            "Call"
                        ],
                        [
                            "model(x).reshape(-1, 6, 4)",
                            "Call"
                        ],
                        [
                            "torch.nn.Softmax(dim=2)(y_pred)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x).reshape(-1, 6, 4)",
                            "Call"
                        ],
                        [
                            "torch.nn.Softmax(dim=2)(y_pred)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x).squeeze()",
                            "Call"
                        ],
                        [
                            "model(x).squeeze()",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(y_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_364": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f'{log_path}/model.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "sum_89": {
                "input": {
                    "value": "y_pred == y_target",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_340": {
                "input": {
                    "value": "y_pred == y_target",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_84": {
                "condition": {
                    "value": "y_pred > 0.5",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_85": {
                "condition": {
                    "value": "y_pred <= 0.5",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "Softmax_185": {
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_335": {
                "condition": {
                    "value": "y_pred > 0.5",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_336": {
                "condition": {
                    "value": "y_pred <= 0.5",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "Softmax_211": {
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/visualization/confusion_matrix.py": {
        "sklearn": {
            "multilabel_confusion_matrix_24": {
                "variable": {
                    "value": "cm_array",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConfusionMatrixDisplay_32": {
                "variable": {
                    "value": "disp",
                    "type": "Variable",
                    "possible_values": []
                },
                "confusion_matrix": {
                    "value": "cm",
                    "type": "Variable",
                    "possible_values": []
                },
                "display_labels": {
                    "value": "['Negative', 'Positive']",
                    "type": "List",
                    "possible_values": []
                }
            }
        },
        "torch": {}
    },
    "main.py": {
        "torch": {
            "Linear_39": {
                "variable": {
                    "value": "model.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "len(train_loader.dataset.PRED_LABEL)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_115": {
                "variable": {
                    "value": "train_config[criterion]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_120": {
                "variable": {
                    "value": "model.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_32": {
                "variable": {
                    "value": "train_config[criterion]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pos_weight": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "train_loader.dataset.get_weights()",
                            "Call"
                        ]
                    ]
                }
            },
            "BCEWithLogitsLoss_34": {
                "variable": {
                    "value": "train_config[criterion]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_77": {
                "variable": {
                    "value": "model_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_model_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "train_chexpert(model, train_loader, val_loader, **train_config)",
                            "Call"
                        ],
                        [
                            "train_brixia(model, train_loader, val_loader, **train_config)",
                            "Call"
                        ],
                        [
                            "train_combined(model, train_loader, val_loader, **train_config)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_81": {
                "variable": {
                    "value": "model.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_out",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "model_dict['classifier.weight'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "model.state_dict()['classifier.weight'].shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_88": {
                "variable": {
                    "value": "model.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_targets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "6 * 4",
                            "BinOp"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "load_48": {
                "f": {
                    "value": "pretrained_model_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "train_chexpert(model, train_loader, val_loader, **train_config)",
                            "Call"
                        ],
                        [
                            "train_brixia(model, train_loader, val_loader, **train_config)",
                            "Call"
                        ],
                        [
                            "train_combined(model, train_loader, val_loader, **train_config)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_93": {
                "f": {
                    "value": "pretrained_model_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "train_chexpert(model, train_loader, val_loader, **train_config)",
                            "Call"
                        ],
                        [
                            "train_brixia(model, train_loader, val_loader, **train_config)",
                            "Call"
                        ],
                        [
                            "train_combined(model, train_loader, val_loader, **train_config)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_129": {
                "f": {
                    "value": "pretrained_model_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "train_chexpert(model, train_loader, val_loader, **train_config)",
                            "Call"
                        ],
                        [
                            "train_brixia(model, train_loader, val_loader, **train_config)",
                            "Call"
                        ],
                        [
                            "train_combined(model, train_loader, val_loader, **train_config)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MSELoss_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_43": {
                "f": {
                    "value": "pretrained_model_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "train_chexpert(model, train_loader, val_loader, **train_config)",
                            "Call"
                        ],
                        [
                            "train_brixia(model, train_loader, val_loader, **train_config)",
                            "Call"
                        ],
                        [
                            "train_combined(model, train_loader, val_loader, **train_config)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_124": {
                "f": {
                    "value": "pretrained_model_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "train_chexpert(model, train_loader, val_loader, **train_config)",
                            "Call"
                        ],
                        [
                            "train_brixia(model, train_loader, val_loader, **train_config)",
                            "Call"
                        ],
                        [
                            "train_combined(model, train_loader, val_loader, **train_config)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "netdissect/LBFGS.py": {
        "torch": {
            "mul_332": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "vec",
                            "Name"
                        ]
                    ]
                },
                "other": {
                    "value": "H_diag",
                    "type": "Call",
                    "possible_values": [
                        [
                            "state.get('H_diag')",
                            "Call"
                        ],
                        [
                            "state.get('H_diag')",
                            "Call"
                        ],
                        [
                            "ys / y.dot(y)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_252": {
                "tensors": {
                    "value": "views",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "isnan_17": {
                "input": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "any_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isinf_17": {
                "input": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_available_595": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_596": {
                "variable": {
                    "value": "F_prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nan",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "group['dtype']",
                            "Subscript"
                        ],
                        [
                            "torch.float",
                            "MethodArgument"
                        ],
                        [
                            "torch.float",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_598": {
                "variable": {
                    "value": "F_prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nan",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "group['dtype']",
                            "Subscript"
                        ],
                        [
                            "torch.float",
                            "MethodArgument"
                        ],
                        [
                            "torch.float",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_available_798": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_799": {
                "variable": {
                    "value": "F_b",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nan",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "group['dtype']",
                            "Subscript"
                        ],
                        [
                            "torch.float",
                            "MethodArgument"
                        ],
                        [
                            "torch.float",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_800": {
                "variable": {
                    "value": "g_b",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nan",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "group['dtype']",
                            "Subscript"
                        ],
                        [
                            "torch.float",
                            "MethodArgument"
                        ],
                        [
                            "torch.float",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_802": {
                "variable": {
                    "value": "F_b",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nan",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "group['dtype']",
                            "Subscript"
                        ],
                        [
                            "torch.float",
                            "MethodArgument"
                        ],
                        [
                            "torch.float",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_803": {
                "variable": {
                    "value": "g_b",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nan",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "group['dtype']",
                            "Subscript"
                        ],
                        [
                            "torch.float",
                            "MethodArgument"
                        ],
                        [
                            "torch.float",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_available_863": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_864": {
                "variable": {
                    "value": "g_b",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nan",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "group['dtype']",
                            "Subscript"
                        ],
                        [
                            "torch.float",
                            "MethodArgument"
                        ],
                        [
                            "torch.float",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_866": {
                "variable": {
                    "value": "g_b",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nan",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "group['dtype']",
                            "Subscript"
                        ],
                        [
                            "torch.float",
                            "MethodArgument"
                        ],
                        [
                            "torch.float",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "netdissect/__main__.py": {
        "torch": {
            "is_available_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/broden.py": {
        "torch": {
            "zeros_224": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*(seg.shape[0], num_labels) + seg.shape[2:]",
                    "type": "Starred",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.uint8",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "seg.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_264": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "bds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BrodenDataset('datasets/broden', resolution=384, transform=transforms.Compose([transforms.Resize(224), transforms.ToTensor()]), transform_segment=transforms.Compose([ScaleSegmentation(224, 224)]), include_bincount=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "24",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/customnet.py": {
        "torch": {
            "mean_169": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.view(x.size(0), x.size(1), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_47": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_48": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1 if halfsize else 2",
                    "type": "IfExp",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_55": {
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_92": {
                "in_channels": {
                    "value": "channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "11",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_94": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_95": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1 if halfsize else 2",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Conv2d_96": {
                "in_channels": {
                    "value": "channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_98": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_99": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_100": {
                "in_channels": {
                    "value": "channels[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_102": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_103": {
                "in_channels": {
                    "value": "channels[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_105": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_106": {
                "in_channels": {
                    "value": "channels[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[5]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_108": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_109": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_112": {
                "in_features": {
                    "value": "channels[5] * 6 * 6",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "channels[6]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_113": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_115": {
                "in_features": {
                    "value": "channels[6]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "channels[7]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_116": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_117": {
                "in_features": {
                    "value": "channels[7]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "netdissect/encoder_loss.py": {
        "torch": {
            "cosine_similarity_9": {
                "x1": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x2": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1e-12",
                            "MethodArgument"
                        ],
                        [
                            "1e-12",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cosine_similarity_5": {
                "x1": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x2": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1e-12",
                            "MethodArgument"
                        ],
                        [
                            "1e-12",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "netdissect/encoder_net.py": {
        "torch": {}
    },
    "netdissect/evalablate.py": {
        "torch": {
            "TensorDataset_113": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "raw_sample",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_125": {
                "variable": {
                    "value": "segloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(raw_sample)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "device.type == 'cuda'",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "zeros_185": {
                "variable": {
                    "value": "total_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "repeats + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_203": {
                "variable": {
                    "value": "inter_chan",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "repeats",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(ordering)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "location_count",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(interventions_needed)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "feature_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.feature_shape[layer][1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_209": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(inter_z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_214": {
                "variable": {
                    "value": "imask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(ibz),) + feature_shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "ibz.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_192": {
                "input": {
                    "value": "mask.float()[:, None, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_size": {
                    "value": "feature_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.feature_shape[layer][2:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "adaptive_avg_pool2d_222": {
                "input": {
                    "value": "mask.float()[:, None, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_size": {
                    "value": "feature_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.feature_shape[layer][2:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_215": {
                "start": {
                    "value": "len(ibz)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_225": {
                "start": {
                    "value": "len(ibz)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/frechet_distance.py": {
        "torch": {}
    },
    "netdissect/fsd.py": {
        "torch": {
            "DataLoader_76": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "parallelfolder.ParallelImageFolders([directory], transform=transforms.Compose([transforms.Resize(256), transforms.CenterCrop(256), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "FixedRandomSubsetSampler(dataset, end=size, seed=seed)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_83": {
                "variable": {
                    "value": "batch_result",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "loader.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "NUM_OBJECTS",
                    "type": "Name",
                    "possible_values": [
                        [
                            "336",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_101": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "parallelfolder.ParallelImageFolders([directory], transform=transforms.Compose([transforms.Resize(256), transforms.CenterCrop(256), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "FixedRandomSubsetSampler(dataset, end=size)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_107": {
                "variable": {
                    "value": "batch_result",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "loader.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "NUM_OBJECTS",
                    "type": "Name",
                    "possible_values": [
                        [
                            "336",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_126": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "zds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "zdataset.z_dataset_for_model(model, size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_130": {
                "variable": {
                    "value": "batch_result",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "loader.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "NUM_OBJECTS",
                    "type": "Name",
                    "possible_values": [
                        [
                            "336",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/fullablate.py": {
        "torch": {
            "TensorDataset_127": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "raw_sample",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_139": {
                "variable": {
                    "value": "segloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(raw_sample)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "device.type == 'cuda'",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "zeros_198": {
                "variable": {
                    "value": "total_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "repeats + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_201": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_207": {
                "variable": {
                    "value": "ablation",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "feature_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.feature_shape[layer][1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_208": {
                "variable": {
                    "value": "ablation[ordering[:num_units]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "values[:num_units]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/imgviz.py": {
        "torch": {
            "full_328": {
                "variable": {
                    "value": "strip",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(row.shape[1], row.shape[0] * (row.shape[2] + gap) - gap, row.shape[3])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "bg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "255",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "row.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_340": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "out",
                            "Name"
                        ],
                        [
                            "activations",
                            "Name"
                        ],
                        [
                            "activations[unit]",
                            "Subscript"
                        ],
                        [
                            "upsampler(a[None, None, ...], mode=mode)[0, 0].cpu()",
                            "Call"
                        ],
                        [
                            "activations",
                            "Name"
                        ],
                        [
                            "activations[unit]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_313": {
                "tensors": {
                    "value": "results",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_140": {
                "data": {
                    "value": "border_color",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[255.0, 255.0, 0]",
                            "List"
                        ],
                        [
                            "torch.tensor(border_color, dtype=border.dtype, device=border.device)[:, None, None]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "border.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "border.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_170": {
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_213": {
                "input": {
                    "value": "renormalizer(imagedata).float()[None, ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "self.size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_143": {
                "data": {
                    "value": "inside_color",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(inside_color, dtype=border.dtype, device=border.device)[:, None, None]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "border.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "border.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_181": {
                "data": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "aborder.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/invert.py": {
        "torch": {
            "Adam_156": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "inv.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MultiStepLR_157": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "LBFGS.FullBatchLBFGS(parameters)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(inv.parameters(), lr=lr)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "lr_milestones",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "l1_loss_29": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "current_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "G(z)",
                            "Call"
                        ]
                    ]
                }
            },
            "enable_grad_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_201": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_31": {
                "input": {
                    "value": "target_f",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F(target_x)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "F(current_x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mse_loss_192": {
                "input": {
                    "value": "true_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "estimated_z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inv(observed_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_196": {
                "input": {
                    "value": "observed_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "gen(true_z)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "reconstructed_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "gen(fixed_z)",
                            "Call"
                        ]
                    ]
                }
            },
            "cosine_similarity_274": {
                "x1": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x2": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1e-12",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_208": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/make_z_dataset.py": {
        "torch": {
            "DataLoader_29": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "setting.load_dataset(args.dataset, full=True)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_grad_enabled_32": {
                "mode": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "l1_loss_61": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "current_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "G(z)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_25": {
                "f": {
                    "value": "filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'results/church/invert_hybrid_bottom_b5/snapshots/epoch_1000.pth.tar'",
                            "Constant"
                        ],
                        [
                            "target_filename_from_source(dataset.images[index + i][0])",
                            "Call"
                        ]
                    ]
                }
            },
            "enable_grad_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_63": {
                "input": {
                    "value": "target_f",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F(target_x)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "F(current_x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/modelconfig.py": {
        "torch": {
            "zeros_133": {
                "variable": {
                    "value": "dry_run",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "Tuple",
                    "possible_values": [
                        [
                            "(1, 3) + tuple(imgsize)",
                            "BinOp"
                        ],
                        [
                            "(1, first_layer.in_channels, 1, 1)",
                            "Tuple"
                        ],
                        [
                            "(1, first_layer.in_features)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "load_49": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pthfile",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/nethook.py": {
        "torch": {
            "from_numpy_297": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "numpy.array(v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_391": {
                "*args": {
                    "value": "included_children",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/oldalexnet.py": {
        "torch": {
            "load_15": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weight_file",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "AvgPool3d_76": {
                "variable": {
                    "value": "self.average",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(local_size, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "(int((local_size - 1.0) / 2), 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AvgPool2d_80": {
                "variable": {
                    "value": "self.average",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "local_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "int((local_size - 1.0) / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "w[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "w[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "11",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups[0]",
                    "type": "List",
                    "possible_values": [
                        [
                            "[1, 2, 1, 2, 2]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 1, 1]",
                            "List"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_37": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_38": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "in_channels": {
                    "value": "w[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "w[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups[1]",
                    "type": "List",
                    "possible_values": [
                        [
                            "[1, 2, 1, 2, 2]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 1, 1]",
                            "List"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_43": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "in_channels": {
                    "value": "w[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "w[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups[2]",
                    "type": "List",
                    "possible_values": [
                        [
                            "[1, 2, 1, 2, 2]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 1, 1]",
                            "List"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_47": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "in_channels": {
                    "value": "w[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "w[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups[3]",
                    "type": "List",
                    "possible_values": [
                        [
                            "[1, 2, 1, 2, 2]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 1, 1]",
                            "List"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_50": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "in_channels": {
                    "value": "w[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "w[5]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups[4]",
                    "type": "List",
                    "possible_values": [
                        [
                            "[1, 2, 1, 2, 2]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 1, 1]",
                            "List"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_53": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_54": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "in_features": {
                    "value": "w[5] * 6 * 6",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "w[6]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_57": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_59": {
                "in_features": {
                    "value": "w[6]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "w[7]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_60": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_62": {
                "in_features": {
                    "value": "w[7]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "w[8]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/oldresnet152.py": {
        "torch": {
            "load_10": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weight_file",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_43": {
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_45": {
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "*args": {
                    "value": "nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.Conv2d(64, 64, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(64), nn.ReLU(), nn.Conv2d(64, 64, (3, 3), (1, 1), (1, 1), 1, 1, bias=False), nn.BatchNorm2d(64), nn.ReLU(), nn.Conv2d(64, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(256)), nn.Sequential(nn.Conv2d(64, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(256))), LambdaReduce(lambda x, y: x + y), nn.ReLU())",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "*args": {
                    "value": "nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.Conv2d(256, 128, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (2, 2), (1, 1), 1, 1, bias=False), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 512, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(512)), nn.Sequential(nn.Conv2d(256, 512, (1, 1), (2, 2), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(512))), LambdaReduce(lambda x, y: x + y), nn.ReLU())",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_243": {
                "*args": {
                    "value": "nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.Conv2d(512, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (2, 2), (1, 1), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 1024, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(1024)), nn.Sequential(nn.Conv2d(512, 1024, (1, 1), (2, 2), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(1024))), LambdaReduce(lambda x, y: x + y), nn.ReLU())",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_860": {
                "*args": {
                    "value": "nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.Conv2d(1024, 512, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(512), nn.ReLU(), nn.Conv2d(512, 512, (3, 3), (2, 2), (1, 1), 1, 1, bias=False), nn.BatchNorm2d(512), nn.ReLU(), nn.Conv2d(512, 2048, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(2048)), nn.Sequential(nn.Conv2d(1024, 2048, (1, 1), (2, 2), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(2048))), LambdaReduce(lambda x, y: x + y), nn.ReLU())",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_916": {
                "kernel_size": {
                    "value": "(7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_918": {
                "*args": {
                    "value": "Lambda(lambda x: x.view(1, -1) if 1 == len(x.size()) else x)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.Conv2d(64, 64, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(64), nn.ReLU(), nn.Conv2d(64, 64, (3, 3), (1, 1), (1, 1), 1, 1, bias=False), nn.BatchNorm2d(64), nn.ReLU(), nn.Conv2d(64, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(256)), nn.Sequential(nn.Conv2d(64, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(256)))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_67": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.Conv2d(256, 64, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(64), nn.ReLU(), nn.Conv2d(64, 64, (3, 3), (1, 1), (1, 1), 1, 1, bias=False), nn.BatchNorm2d(64), nn.ReLU(), nn.Conv2d(64, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(256)), Lambda(lambda x: x))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.Conv2d(256, 64, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(64), nn.ReLU(), nn.Conv2d(64, 64, (3, 3), (1, 1), (1, 1), 1, 1, bias=False), nn.BatchNorm2d(64), nn.ReLU(), nn.Conv2d(64, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(256)), Lambda(lambda x: x))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_103": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.Conv2d(256, 128, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (2, 2), (1, 1), 1, 1, bias=False), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 512, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(512)), nn.Sequential(nn.Conv2d(256, 512, (1, 1), (2, 2), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(512)))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_123": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.Conv2d(512, 128, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1), 1, 1, bias=False), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 512, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(512)), Lambda(lambda x: x))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_140": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.Conv2d(512, 128, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1), 1, 1, bias=False), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 512, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(512)), Lambda(lambda x: x))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_157": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.Conv2d(512, 128, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1), 1, 1, bias=False), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 512, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(512)), Lambda(lambda x: x))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_174": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.Conv2d(512, 128, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1), 1, 1, bias=False), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 512, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(512)), Lambda(lambda x: x))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_191": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.Conv2d(512, 128, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1), 1, 1, bias=False), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 512, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(512)), Lambda(lambda x: x))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_208": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.Conv2d(512, 128, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1), 1, 1, bias=False), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 512, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(512)), Lambda(lambda x: x))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_225": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.Conv2d(512, 128, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1), 1, 1, bias=False), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 512, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(512)), Lambda(lambda x: x))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_244": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.Conv2d(512, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (2, 2), (1, 1), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 1024, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(1024)), nn.Sequential(nn.Conv2d(512, 1024, (1, 1), (2, 2), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(1024)))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_264": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 1024, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(1024)), Lambda(lambda x: x))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_281": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 1024, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(1024)), Lambda(lambda x: x))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_298": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 1024, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(1024)), Lambda(lambda x: x))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_315": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 1024, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(1024)), Lambda(lambda x: x))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_332": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 1024, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(1024)), Lambda(lambda x: x))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_349": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 1024, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(1024)), Lambda(lambda x: x))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_366": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 1024, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(1024)), Lambda(lambda x: x))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_383": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 1024, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(1024)), Lambda(lambda x: x))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_400": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 1024, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(1024)), Lambda(lambda x: x))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_417": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 1024, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(1024)), Lambda(lambda x: x))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_434": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 1024, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(1024)), Lambda(lambda x: x))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_451": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 1024, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(1024)), Lambda(lambda x: x))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_468": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 1024, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(1024)), Lambda(lambda x: x))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_485": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 1024, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(1024)), Lambda(lambda x: x))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_502": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 1024, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(1024)), Lambda(lambda x: x))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_519": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 1024, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(1024)), Lambda(lambda x: x))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_536": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 1024, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(1024)), Lambda(lambda x: x))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_553": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 1024, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(1024)), Lambda(lambda x: x))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_570": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 1024, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(1024)), Lambda(lambda x: x))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_587": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 1024, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(1024)), Lambda(lambda x: x))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_604": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 1024, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(1024)), Lambda(lambda x: x))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_621": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 1024, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(1024)), Lambda(lambda x: x))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_638": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 1024, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(1024)), Lambda(lambda x: x))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_655": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 1024, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(1024)), Lambda(lambda x: x))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_672": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 1024, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(1024)), Lambda(lambda x: x))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_689": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 1024, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(1024)), Lambda(lambda x: x))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_706": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 1024, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(1024)), Lambda(lambda x: x))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_723": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 1024, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(1024)), Lambda(lambda x: x))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_740": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 1024, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(1024)), Lambda(lambda x: x))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_757": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 1024, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(1024)), Lambda(lambda x: x))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_774": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 1024, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(1024)), Lambda(lambda x: x))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_791": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 1024, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(1024)), Lambda(lambda x: x))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_808": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 1024, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(1024)), Lambda(lambda x: x))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_825": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 1024, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(1024)), Lambda(lambda x: x))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_842": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1), 1, 1, bias=False), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 1024, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(1024)), Lambda(lambda x: x))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_861": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.Conv2d(1024, 512, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(512), nn.ReLU(), nn.Conv2d(512, 512, (3, 3), (2, 2), (1, 1), 1, 1, bias=False), nn.BatchNorm2d(512), nn.ReLU(), nn.Conv2d(512, 2048, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(2048)), nn.Sequential(nn.Conv2d(1024, 2048, (1, 1), (2, 2), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(2048)))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_881": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.Conv2d(2048, 512, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(512), nn.ReLU(), nn.Conv2d(512, 512, (3, 3), (1, 1), (1, 1), 1, 1, bias=False), nn.BatchNorm2d(512), nn.ReLU(), nn.Conv2d(512, 2048, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(2048)), Lambda(lambda x: x))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_898": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.Conv2d(2048, 512, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(512), nn.ReLU(), nn.Conv2d(512, 512, (3, 3), (1, 1), (1, 1), 1, 1, bias=False), nn.BatchNorm2d(512), nn.ReLU(), nn.Conv2d(512, 2048, (1, 1), (1, 1), (0, 0), 1, 1, bias=False), nn.BatchNorm2d(2048)), Lambda(lambda x: x))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_919": {
                "in_features": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "365",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_155": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_206": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_223": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_240": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_279": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_296": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_313": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_330": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_347": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_364": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_381": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_398": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_415": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_432": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_449": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_466": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_483": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_500": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_517": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_534": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_551": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_568": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_585": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_602": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_619": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_636": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_653": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_670": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_687": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_704": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_721": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_738": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_755": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_772": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_789": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_806": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_823": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_840": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_857": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_879": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_896": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_913": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "*args": {
                    "value": "nn.Conv2d(64, 64, (1, 1), (1, 1), (0, 0), 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "*args": {
                    "value": "nn.Conv2d(64, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "*args": {
                    "value": "nn.Conv2d(256, 64, (1, 1), (1, 1), (0, 0), 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_86": {
                "*args": {
                    "value": "nn.Conv2d(256, 64, (1, 1), (1, 1), (0, 0), 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_105": {
                "*args": {
                    "value": "nn.Conv2d(256, 128, (1, 1), (1, 1), (0, 0), 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_115": {
                "*args": {
                    "value": "nn.Conv2d(256, 512, (1, 1), (2, 2), (0, 0), 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_125": {
                "*args": {
                    "value": "nn.Conv2d(512, 128, (1, 1), (1, 1), (0, 0), 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_142": {
                "*args": {
                    "value": "nn.Conv2d(512, 128, (1, 1), (1, 1), (0, 0), 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_159": {
                "*args": {
                    "value": "nn.Conv2d(512, 128, (1, 1), (1, 1), (0, 0), 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_176": {
                "*args": {
                    "value": "nn.Conv2d(512, 128, (1, 1), (1, 1), (0, 0), 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_193": {
                "*args": {
                    "value": "nn.Conv2d(512, 128, (1, 1), (1, 1), (0, 0), 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_210": {
                "*args": {
                    "value": "nn.Conv2d(512, 128, (1, 1), (1, 1), (0, 0), 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_227": {
                "*args": {
                    "value": "nn.Conv2d(512, 128, (1, 1), (1, 1), (0, 0), 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_246": {
                "*args": {
                    "value": "nn.Conv2d(512, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_256": {
                "*args": {
                    "value": "nn.Conv2d(512, 1024, (1, 1), (2, 2), (0, 0), 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_266": {
                "*args": {
                    "value": "nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_283": {
                "*args": {
                    "value": "nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_300": {
                "*args": {
                    "value": "nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_317": {
                "*args": {
                    "value": "nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_334": {
                "*args": {
                    "value": "nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_351": {
                "*args": {
                    "value": "nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_368": {
                "*args": {
                    "value": "nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_385": {
                "*args": {
                    "value": "nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_402": {
                "*args": {
                    "value": "nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_419": {
                "*args": {
                    "value": "nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_436": {
                "*args": {
                    "value": "nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_453": {
                "*args": {
                    "value": "nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_470": {
                "*args": {
                    "value": "nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_487": {
                "*args": {
                    "value": "nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_504": {
                "*args": {
                    "value": "nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_521": {
                "*args": {
                    "value": "nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_538": {
                "*args": {
                    "value": "nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_555": {
                "*args": {
                    "value": "nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_572": {
                "*args": {
                    "value": "nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_589": {
                "*args": {
                    "value": "nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_606": {
                "*args": {
                    "value": "nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_623": {
                "*args": {
                    "value": "nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_640": {
                "*args": {
                    "value": "nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_657": {
                "*args": {
                    "value": "nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_674": {
                "*args": {
                    "value": "nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_691": {
                "*args": {
                    "value": "nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_708": {
                "*args": {
                    "value": "nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_725": {
                "*args": {
                    "value": "nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_742": {
                "*args": {
                    "value": "nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_759": {
                "*args": {
                    "value": "nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_776": {
                "*args": {
                    "value": "nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_793": {
                "*args": {
                    "value": "nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_810": {
                "*args": {
                    "value": "nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_827": {
                "*args": {
                    "value": "nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_844": {
                "*args": {
                    "value": "nn.Conv2d(1024, 256, (1, 1), (1, 1), (0, 0), 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_863": {
                "*args": {
                    "value": "nn.Conv2d(1024, 512, (1, 1), (1, 1), (0, 0), 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_873": {
                "*args": {
                    "value": "nn.Conv2d(1024, 2048, (1, 1), (2, 2), (0, 0), 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_883": {
                "*args": {
                    "value": "nn.Conv2d(2048, 512, (1, 1), (1, 1), (0, 0), 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_900": {
                "*args": {
                    "value": "nn.Conv2d(2048, 512, (1, 1), (1, 1), (0, 0), 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_51": {
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_54": {
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_57": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_61": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_71": {
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_74": {
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_77": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_87": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_88": {
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_91": {
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_94": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_106": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_107": {
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_109": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_110": {
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_112": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_113": {
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_116": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_117": {
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_126": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_127": {
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_129": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_130": {
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_132": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_133": {
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_143": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_144": {
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_146": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_147": {
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_149": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_150": {
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_160": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_161": {
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_163": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_164": {
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_166": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_167": {
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_177": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_178": {
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_180": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_181": {
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_183": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_184": {
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_194": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_195": {
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_197": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_198": {
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_200": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_201": {
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_211": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_212": {
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_213": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_214": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_215": {
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_216": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_217": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_218": {
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_228": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_229": {
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_230": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_231": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_232": {
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_233": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_234": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_235": {
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_247": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_248": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_249": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_250": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_251": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_252": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_253": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_254": {
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_257": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_258": {
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_267": {
                "in_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_268": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_269": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_270": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_271": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_272": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_273": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_274": {
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_284": {
                "in_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_285": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_286": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_287": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_288": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_289": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_290": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_291": {
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_301": {
                "in_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_302": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_303": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_304": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_305": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_306": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_307": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_308": {
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_318": {
                "in_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_319": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_320": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_321": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_322": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_323": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_324": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_325": {
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_335": {
                "in_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_336": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_337": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_338": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_339": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_340": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_341": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_342": {
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_352": {
                "in_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_353": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_354": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_355": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_356": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_357": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_358": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_359": {
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_369": {
                "in_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_370": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_371": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_372": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_373": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_374": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_375": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_376": {
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_386": {
                "in_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_387": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_388": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_389": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_390": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_391": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_392": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_393": {
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_403": {
                "in_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_404": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_405": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_406": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_407": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_408": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_409": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_410": {
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_420": {
                "in_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_421": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_422": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_423": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_424": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_425": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_426": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_427": {
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_437": {
                "in_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_438": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_439": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_440": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_441": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_442": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_443": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_444": {
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_454": {
                "in_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_455": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_456": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_457": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_458": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_459": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_460": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_461": {
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_471": {
                "in_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_472": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_473": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_474": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_475": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_476": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_477": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_478": {
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_488": {
                "in_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_489": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_490": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_491": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_492": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_493": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_494": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_495": {
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_505": {
                "in_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_506": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_507": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_508": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_509": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_510": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_511": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_512": {
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_522": {
                "in_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_523": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_524": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_525": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_526": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_527": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_528": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_529": {
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_539": {
                "in_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_540": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_541": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_542": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_543": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_544": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_545": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_546": {
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_556": {
                "in_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_557": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_558": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_559": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_560": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_561": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_562": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_563": {
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_573": {
                "in_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_574": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_575": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_576": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_577": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_578": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_579": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_580": {
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_590": {
                "in_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_591": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_592": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_593": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_594": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_595": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_596": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_597": {
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_607": {
                "in_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_608": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_609": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_610": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_611": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_612": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_613": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_614": {
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_624": {
                "in_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_625": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_626": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_627": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_628": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_629": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_630": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_631": {
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_641": {
                "in_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_642": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_643": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_644": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_645": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_646": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_647": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_648": {
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_658": {
                "in_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_659": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_660": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_661": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_662": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_663": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_664": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_665": {
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_675": {
                "in_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_676": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_677": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_678": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_679": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_680": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_681": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_682": {
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_692": {
                "in_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_693": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_694": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_695": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_696": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_697": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_698": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_699": {
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_709": {
                "in_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_710": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_711": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_712": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_713": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_714": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_715": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_716": {
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_726": {
                "in_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_727": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_728": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_729": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_730": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_731": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_732": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_733": {
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_743": {
                "in_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_744": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_745": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_746": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_747": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_748": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_749": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_750": {
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_760": {
                "in_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_761": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_762": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_763": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_764": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_765": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_766": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_767": {
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_777": {
                "in_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_778": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_779": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_780": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_781": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_782": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_783": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_784": {
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_794": {
                "in_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_795": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_796": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_797": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_798": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_799": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_800": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_801": {
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_811": {
                "in_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_812": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_813": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_814": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_815": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_816": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_817": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_818": {
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_828": {
                "in_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_829": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_830": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_831": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_832": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_833": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_834": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_835": {
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_845": {
                "in_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_846": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_847": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_848": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_849": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_850": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_851": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_852": {
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_864": {
                "in_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_865": {
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_866": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_867": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_868": {
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_869": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_870": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_871": {
                "num_features": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_874": {
                "in_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_875": {
                "num_features": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_884": {
                "in_channels": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_885": {
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_886": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_887": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_888": {
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_889": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_890": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_891": {
                "num_features": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_901": {
                "in_channels": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_902": {
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_903": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_904": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_905": {
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_906": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_907": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_908": {
                "num_features": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/oldvgg16.py": {
        "torch": {
            "Sequential_5": {
                "variable": {
                    "value": "model.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "collections.OrderedDict(zip(['conv1_1', 'relu1_1', 'conv1_2', 'relu1_2', 'pool1', 'conv2_1', 'relu2_1', 'conv2_2', 'relu2_2', 'pool2', 'conv3_1', 'relu3_1', 'conv3_2', 'relu3_2', 'conv3_3', 'relu3_3', 'pool3', 'conv4_1', 'relu4_1', 'conv4_2', 'relu4_2', 'conv4_3', 'relu4_3', 'pool4', 'conv5_1', 'relu5_1', 'conv5_2', 'relu5_2', 'conv5_3', 'relu5_3', 'pool5'], model.features))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "variable": {
                    "value": "model.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "collections.OrderedDict(zip(['fc6', 'relu6', 'drop6', 'fc7', 'relu7', 'drop7', 'fc8a'], model.classifier))",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_34": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weight_file",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_36": {
                "ndarray": {
                    "value": "numpy.array(v)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/optimize_residuals.py": {
        "torch": {
            "Adam_130": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters.values()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.lr",
                            "Attribute"
                        ]
                    ]
                }
            },
            "MultiStepLR_131": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.optim.Adam(parameters.values(), lr=learning_rate)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "lr_milestones",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[800, 1200, 1800]",
                            "List"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "l1_loss_140": {
                "variable": {
                    "value": "loss_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true_p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "loaded_image.cuda()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "current_p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F(current_r)",
                            "Call"
                        ]
                    ]
                }
            },
            "l1_loss_141": {
                "variable": {
                    "value": "loss_v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true_v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "VF(true_p)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "current_v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "VF(current_p)",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_147": {
                "variable": {
                    "value": "loss_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "init_r",
                    "type": "Name",
                    "possible_values": [
                        [
                            "E(true_p)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "current_r",
                    "type": "Name",
                    "possible_values": [
                        [
                            "H()",
                            "Call"
                        ]
                    ]
                }
            },
            "save_212": {
                "obj": {
                    "value": "kwargs",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(dirname, filename)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_83": {
                "f": {
                    "value": "os.path.join('results', args.model, 'invert_hybrid_cse/snapshots/epoch_1000.pth.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/optimize_z_lbfgs.py": {
        "torch": {
            "set_grad_enabled_82": {
                "mode": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "l1_loss_107": {
                "variable": {
                    "value": "all_loss[x]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "target_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "loaded_x.clone().cuda()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "current_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "G(current_z)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_159": {
                "obj": {
                    "value": "kwargs",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(dirname, filename)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "enable_grad_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_74": {
                "f": {
                    "value": "os.path.join('results', args.model, 'invert_hybrid_cse/snapshots/epoch_1000.pth.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mse_loss_109": {
                "input": {
                    "value": "target_f",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F(loaded_x.cuda())",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "F(current_x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/parallelfolder.py": {
        "torch": {}
    },
    "netdissect/proggan.py": {
        "torch": {
            "interpolate_110": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.view(x.shape[0], x.shape[1], 1, 1)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "x * self.scale + self.b.view(1, -1, 1, 1).expand(x_size[0], self.size, x_size[2], x_size[3])",
                            "BinOp"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.relu(self.wscale(x))",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.relu(self.wscale(x))",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.wscale(x)",
                            "Call"
                        ],
                        [
                            "self.clamp(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_117": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_130": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_134": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_147": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_151": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_164": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_19": {
                "f": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_224": {
                "ndarray": {
                    "value": "data.eval()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_106": {
                "input": {
                    "value": "torch.mean(x ** 2, dim=1, keepdim=True) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_117": {
                "*size": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Hardtanh_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_106": {
                "input": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/renormalize.py": {
        "torch": {
            "from_numpy_106": {
                "variable": {
                    "value": "self.mul",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "numpy.array(oldscale) / numpy.array(newscale)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_108": {
                "variable": {
                    "value": "self.add",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "(numpy.array(oldoffset) - numpy.array(newoffset)) / numpy.array(newscale)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/runningstats.py": {
        "torch": {
            "bernoulli_1158": {
                "variable": {
                    "value": "bits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.zeros(vec.shape[0], dtype=torch.uint8, device=vec.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_available_1181": {
                "variable": {
                    "value": "test_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_1213": {
                "variable": {
                    "value": "minerr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(qc.minmax().cpu()[:, 0] - torch.arange(qc.depth, dtype=torch.float) * amount)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_1215": {
                "variable": {
                    "value": "maxerr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(qc.minmax().cpu()[:, -1] + 1 - (torch.arange(qc.depth, dtype=torch.float) + 1) * amount)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_1218": {
                "variable": {
                    "value": "interr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(qc.integrate(lambda x: x * x).cpu() - actual_sum) / actual_sum",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_1221": {
                "variable": {
                    "value": "medianerr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(qc.median() - alldata.median(0)[0]) / alldata.median(0)[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_1224": {
                "variable": {
                    "value": "meanerr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(qc.mean() - alldata.mean(0)) / alldata.mean(0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_1227": {
                "variable": {
                    "value": "varerr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(qc.variance() - alldata.var(0)) / alldata.var(0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_119": {
                "variable": {
                    "value": "self.top_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dic['top_data']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_120": {
                "variable": {
                    "value": "self.top_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dic['top_index']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_241": {
                "variable": {
                    "value": "self._grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dic['grid']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_297": {
                "variable": {
                    "value": "self.extremes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.depth",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_429": {
                "variable": {
                    "value": "self.extremes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dic['extremes']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_504": {
                "variable": {
                    "value": "summary",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.depth",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data.shape[0]",
                            "Subscript"
                        ],
                        [
                            "sum(self.firstfree)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_539": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.depth",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "quantiles.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_584": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "numpy.arange(float(amount))",
                            "Call"
                        ],
                        [
                            "data / 2",
                            "BinOp"
                        ],
                        [
                            "self.data[index][:, 0:self.firstfree[index]]",
                            "Subscript"
                        ],
                        [
                            "data.sort()[0]",
                            "Subscript"
                        ],
                        [
                            "self.data[index][:, :amount]",
                            "Subscript"
                        ],
                        [
                            "data.sort()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_660": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(len(conditions), self.first_rq.depth, len(quantiles))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.first_rq.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.first_rq.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_671": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(len(conditions), values.shape[0], values.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.first_rq.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_791": {
                "variable": {
                    "value": "self._mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dic['mean']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_792": {
                "variable": {
                    "value": "self.v_cmom2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dic['cmom2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_951": {
                "variable": {
                    "value": "self.cmom2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dic['cmom2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_1037": {
                "variable": {
                    "value": "self._mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dic['mean']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_1038": {
                "variable": {
                    "value": "self.cmom2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dic['cmom2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_1087": {
                "variable": {
                    "value": "self.mom2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dic['mom2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_1143": {
                "variable": {
                    "value": "self._bincount",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dic['bincount']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "device_1190": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_45": {
                "variable": {
                    "value": "self.top_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "feature_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(numpy.prod(self.data_shape))",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "data.new()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_208": {
                "variable": {
                    "value": "self._grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.data_shape",
                            "Attribute"
                        ],
                        [
                            "(shape,)",
                            "Tuple"
                        ],
                        [
                            "shape + (self.k,) + data.shape",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "data.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "t_352": {
                "variable": {
                    "value": "self.data[0][:, ff:ff + copycount]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "incoming[index:index + copycount, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sort_515": {
                "variable": {
                    "value": "(summary, order)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "summary",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros(self.depth, size, dtype=self.dtype, device=self.device)",
                            "Call"
                        ],
                        [
                            "torch.cat([self.extremes[:, :1], summary, self.extremes[:, 1:]], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_517": {
                "variable": {
                    "value": "summary",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.extremes[:, :1], summary, self.extremes[:, 1:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_520": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros(weights.shape[0], 1), weights, torch.zeros(weights.shape[0], 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_527": {
                "variable": {
                    "value": "quantiles",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "quantiles",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "torch.tensor(quantiles)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_546": {
                "variable": {
                    "value": "result[d]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "numpy.interp(nq, ncw[d], nsm[d])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_555": {
                "variable": {
                    "value": "term",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fun(self.data[level][:, :ff]) * 2.0 ** level",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_583": {
                "input": {
                    "value": "weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.FloatTensor(size)",
                            "Call"
                        ],
                        [
                            "weights[order.view(-1).cpu()].view(order.shape)",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.zeros(weights.shape[0], 1), weights, torch.zeros(weights.shape[0], 1)], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_590": {
                "variable": {
                    "value": "normed",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "numpy.interp(ndata[d], nsm[d], ncw[d])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "data.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1158": {
                "*size": {
                    "value": "vec.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "vec.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_1210": {
                "input": {
                    "value": "torch.abs(ro - gt) / amount",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_1213": {
                "input": {
                    "value": "qc.minmax().cpu()[:, 0] - torch.arange(qc.depth, dtype=torch.float) * amount",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_1215": {
                "input": {
                    "value": "qc.minmax().cpu()[:, -1] + 1 - (torch.arange(qc.depth, dtype=torch.float) + 1) * amount",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_122": {
                "ndarray": {
                    "value": "dic['linear_index']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_295": {
                "*size": {
                    "value": "self.depth",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.resolution",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_386": {
                "input": {
                    "value": "torch.stack([self.extremes[:, 0], minr])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_388": {
                "input": {
                    "value": "torch.stack([self.extremes[:, -1], maxr])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "full_530": {
                "size": {
                    "value": "(self.depth,) + qshape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "torch.nan",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cumsum_532": {
                "input": {
                    "value": "weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.FloatTensor(size)",
                            "Call"
                        ],
                        [
                            "weights[order.view(-1).cpu()].view(order.shape)",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.zeros(weights.shape[0], 1), weights, torch.zeros(weights.shape[0], 1)], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_538": {
                "input": {
                    "value": "weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.FloatTensor(size)",
                            "Call"
                        ],
                        [
                            "weights[order.view(-1).cpu()].view(order.shape)",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.zeros(weights.shape[0], 1), weights, torch.zeros(weights.shape[0], 1)], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linspace_571": {
                "start": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "count",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cumsum_582": {
                "input": {
                    "value": "weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.FloatTensor(size)",
                            "Call"
                        ],
                        [
                            "weights[order.view(-1).cpu()].view(order.shape)",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.zeros(weights.shape[0], 1), weights, torch.zeros(weights.shape[0], 1)], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "isnan_927": {
                "input": {
                    "value": "cor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "rstdev[0][:, None] * covariance * rstdev[1][None, :]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_948": {
                "ndarray": {
                    "value": "dic[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_949": {
                "ndarray": {
                    "value": "dic[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linspace_1208": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "amount",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.test_size",
                            "Attribute"
                        ],
                        [
                            "self.firstfree[index]",
                            "Subscript"
                        ]
                    ]
                },
                "steps": {
                    "value": "quantiles + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_1218": {
                "input": {
                    "value": "qc.integrate(lambda x: x * x).cpu() - actual_sum",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_382": {
                "input": {
                    "value": "incoming",
                    "type": "Name",
                    "possible_values": [
                        [
                            "incoming[index:]",
                            "Subscript"
                        ],
                        [
                            "sample_portion(incoming, self.samplerate)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_383": {
                "input": {
                    "value": "incoming",
                    "type": "Name",
                    "possible_values": [
                        [
                            "incoming[index:]",
                            "Subscript"
                        ],
                        [
                            "sample_portion(incoming, self.samplerate)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_387": {
                "tensors": {
                    "value": "[self.extremes[:, 0], minr]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_389": {
                "tensors": {
                    "value": "[self.extremes[:, -1], maxr]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "from_numpy_426": {
                "ndarray": {
                    "value": "buf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "numpy.zeros((d.shape[1], s), dtype=d.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_457": {
                "*size": {
                    "value": "self.depth",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "cap",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._next_capacity()",
                            "Call"
                        ],
                        [
                            "int(math.ceil(self.resolution * 0.67 ** len(self.data)))",
                            "Call"
                        ],
                        [
                            "-8 * (-cap // 8)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_1209": {
                "start": {
                    "value": "qc.depth",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_1210": {
                "input": {
                    "value": "ro - gt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_48": {
                "start": {
                    "value": "feature_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(numpy.prod(self.data_shape))",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.top_index.new()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_521": {
                "*size": {
                    "value": "weights.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_522": {
                "*size": {
                    "value": "weights.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_1214": {
                "start": {
                    "value": "qc.depth",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_1221": {
                "input": {
                    "value": "qc.median() - alldata.median(0)[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_1225": {
                "input": {
                    "value": "qc.mean() - alldata.mean(0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_1228": {
                "input": {
                    "value": "qc.variance() - alldata.var(0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_1216": {
                "start": {
                    "value": "qc.depth",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_1230": {
                "*size": {
                    "value": "x.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/samplegan.py": {
        "torch": {
            "arange_57": {
                "variable": {
                    "value": "indexes",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "args.size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_36": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pthfile",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_71": {
                "variable": {
                    "value": "z_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TensorDataset(z_sample)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorDataset_71": {
                "*tensors": {
                    "value": "z_sample",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/sampler.py": {
        "torch": {}
    },
    "netdissect/segdata.py": {
        "torch": {
            "zeros_60": {
                "variable": {
                    "value": "segout",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(self.categories)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "segin.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_63": {
                "ndarray": {
                    "value": "segin[:, :, field.index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/segmenter.py": {
        "torch": {
            "bincount_645": {
                "variable": {
                    "value": "bc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_101": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(tensor_images.shape[0], 1, tensor_images.shape[2] // downsample, tensor_images.shape[3] // downsample)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor_images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_107": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(tensor_images.shape[0], 1, tensor_images.shape[2] // downsample, tensor_images.shape[3] // downsample)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor_images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flip_218": {
                "variable": {
                    "value": "tensor_images",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor_images",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(tensor_images + 1) / 2 * 255",
                            "BinOp"
                        ],
                        [
                            "torch.flip(tensor_images, (1,))",
                            "Call"
                        ],
                        [
                            "tensor_images - torch.tensor([102.9801, 115.9465, 122.7717]).to(dtype=tensor_images.dtype, device=tensor_images.device)[None, :, None, None]",
                            "BinOp"
                        ],
                        [
                            "torch.flip(tensor_images, (1,))",
                            "Call"
                        ],
                        [
                            "((tensor_images + 1) / 2).sub_(self.imagemean[None, :, None, None].to(tensor_images.device)).div_(self.imagestd[None, :, None, None].to(tensor_images.device))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_262": {
                "variable": {
                    "value": "segs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(tensor_images)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "3 + piece_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "seg_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor_images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_265": {
                "variable": {
                    "value": "(_, segs[:, 0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred['object']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_267": {
                "variable": {
                    "value": "(_, segs[:, 1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred['material']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_383": {
                "variable": {
                    "value": "self.imagemean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "segmodel.meta.imageformat.mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_384": {
                "variable": {
                    "value": "self.imagestd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "segmodel.meta.imageformat.stdev",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_448": {
                "variable": {
                    "value": "segs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(tensor_images)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "len(self.category_rules)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "pred.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "pred.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_485": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(tensor_images)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_underlying_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "seg_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "seg_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_550": {
                "variable": {
                    "value": "labeled",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "labeled",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.from_numpy(labeled).to(segmentation_batch.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_71": {
                "tensors": {
                    "value": "segresult",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_90": {
                "*size": {
                    "value": "(tensor_images.shape[0], 1, tensor_images.shape[2] // downsample, tensor_images.shape[3] // downsample)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor_images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_445": {
                "variable": {
                    "value": "(_, segs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred[:, catindex]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "flip_475": {
                "variable": {
                    "value": "tensor_images",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor_images",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(tensor_images + 1) / 2 * 255",
                            "BinOp"
                        ],
                        [
                            "torch.flip(tensor_images, (1,))",
                            "Call"
                        ],
                        [
                            "tensor_images - torch.tensor([102.9801, 115.9465, 122.7717]).to(dtype=tensor_images.dtype, device=tensor_images.device)[None, :, None, None]",
                            "BinOp"
                        ],
                        [
                            "torch.flip(tensor_images, (1,))",
                            "Call"
                        ],
                        [
                            "((tensor_images + 1) / 2).sub_(self.imagemean[None, :, None, None].to(tensor_images.device)).div_(self.imagestd[None, :, None, None].to(tensor_images.device))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_like_495": {
                "variable": {
                    "value": "softmax_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.segmodel(dict(img_data=resized), segSize=seg_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "NLLLoss_604": {
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_219": {
                "data": {
                    "value": "[102.9801, 115.9465, 122.7717]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_225": {
                "*size": {
                    "value": "len(tensor_images)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "len(self.segmodel.labeldata[category])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "seg_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "seg_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_229": {
                "*size": {
                    "value": "len(tensor_images)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "len(partindex)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "seg_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "seg_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_323": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "torch.zeros((tensor_images.shape[0], 1, tensor_images.shape[2] // downsample, tensor_images.shape[3] // downsample), dtype=torch.uint8, device=tensor_images.device)",
                            "Call"
                        ],
                        [
                            "segs[:, 0] == object_index",
                            "Compare"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "pred['object'].max(dim=1)[1] == classnum",
                            "Compare"
                        ],
                        [
                            "mask2",
                            "Name"
                        ],
                        [
                            "torch.max(mask, mask2)",
                            "Call"
                        ],
                        [
                            "segs[:, 3:] <= self.num_object_classes",
                            "Compare"
                        ],
                        [
                            "(seg == classnum).max(1)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_414": {
                "data": {
                    "value": "[self.labelmap.get(segmodel.meta.labels[ind].name, 0) for ind in catindex]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "softmax_497": {
                "variable": {
                    "value": "softmax_pred[:, catindex]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_pred[:, catindex]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_174": {
                "data": {
                    "value": "numeric_part_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_237": {
                "output_size": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sizes",
                            "Name"
                        ],
                        [
                            "sizes",
                            "Name"
                        ]
                    ]
                }
            },
            "max_275": {
                "input": {
                    "value": "part_pred[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_492": {
                "output_size": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sizes",
                            "Name"
                        ],
                        [
                            "sizes",
                            "Name"
                        ]
                    ]
                }
            },
            "from_numpy_641": {
                "ndarray": {
                    "value": "numpy.asarray(testim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_641": {
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/segmodel/mobilenet.py": {
        "torch": {
            "Sequential_31": {
                "*args": {
                    "value": "nn.Conv2d(inp, oup, 3, stride, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "*args": {
                    "value": "nn.Conv2d(inp, oup, 1, 1, 0, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_121": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.features",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_124": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(0.2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_173": {
                "f": {
                    "value": "cached_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, filename)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oup",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU6_34": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "in_channels": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oup",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU6_42": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(hidden_dim, hidden_dim, 3, stride, 1, groups=hidden_dim, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inp, hidden_dim, 1, 1, 0, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_125": {
                "p": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_126": {
                "in_features": {
                    "value": "self.last_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_class",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_58": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU6_60": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "in_channels": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU6_70": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU6_74": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/segmodel/models.py": {
        "torch": {
            "max_16": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.decoder(self.encoder(feed_dict['img_data'], return_feature_maps=True), segSize=segSize)",
                            "Call"
                        ],
                        [
                            "self.decoder(self.encoder(feed_dict['img_data'], return_feature_maps=True))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_18": {
                "variable": {
                    "value": "acc_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid * (preds == label).long()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_19": {
                "variable": {
                    "value": "pixel_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(label >= 0).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_55": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "has_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_60": {
                "*args": {
                    "value": "conv3x3(in_planes, out_planes, stride)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_337": {
                "variable": {
                    "value": "self.conv_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fc_dim // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_class",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_338": {
                "variable": {
                    "value": "self.conv_last_deepsup",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fc_dim // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_class",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_357": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_358": {
                "variable": {
                    "value": "_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.cbr_deepsup(conv4)",
                            "Call"
                        ],
                        [
                            "self.conv_last_deepsup(_)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(_, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr_deepsup(conv4)",
                            "Call"
                        ],
                        [
                            "self.dropout_deepsup(_)",
                            "Call"
                        ],
                        [
                            "self.conv_last_deepsup(_)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(_, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_372": {
                "variable": {
                    "value": "self.conv_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fc_dim // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_class",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_404": {
                "variable": {
                    "value": "self.ppm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.ppm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_406": {
                "variable": {
                    "value": "self.conv_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(fc_dim + len(pool_scales) * 512, 512, kernel_size=3, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_425": {
                "variable": {
                    "value": "ppm_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ppm_out",
                    "type": "List",
                    "possible_values": [
                        [
                            "[conv5]",
                            "List"
                        ],
                        [
                            "torch.cat(ppm_out, 1)",
                            "Call"
                        ],
                        [
                            "[conv5]",
                            "List"
                        ],
                        [
                            "torch.cat(ppm_out, 1)",
                            "Call"
                        ],
                        [
                            "[conv5]",
                            "List"
                        ],
                        [
                            "torch.cat(ppm_out, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_453": {
                "variable": {
                    "value": "self.ppm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.ppm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_456": {
                "variable": {
                    "value": "self.conv_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(fc_dim + len(pool_scales) * 512, 512, kernel_size=3, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_464": {
                "variable": {
                    "value": "self.conv_last_deepsup",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fc_dim // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_class",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout2d_465": {
                "variable": {
                    "value": "self.dropout_deepsup",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_477": {
                "variable": {
                    "value": "ppm_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ppm_out",
                    "type": "List",
                    "possible_values": [
                        [
                            "[conv5]",
                            "List"
                        ],
                        [
                            "torch.cat(ppm_out, 1)",
                            "Call"
                        ],
                        [
                            "[conv5]",
                            "List"
                        ],
                        [
                            "torch.cat(ppm_out, 1)",
                            "Call"
                        ],
                        [
                            "[conv5]",
                            "List"
                        ],
                        [
                            "torch.cat(ppm_out, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_493": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_494": {
                "variable": {
                    "value": "_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.cbr_deepsup(conv4)",
                            "Call"
                        ],
                        [
                            "self.conv_last_deepsup(_)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(_, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr_deepsup(conv4)",
                            "Call"
                        ],
                        [
                            "self.dropout_deepsup(_)",
                            "Call"
                        ],
                        [
                            "self.conv_last_deepsup(_)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(_, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_518": {
                "variable": {
                    "value": "self.ppm_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.ppm_pooling",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_519": {
                "variable": {
                    "value": "self.ppm_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.ppm_conv",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_530": {
                "variable": {
                    "value": "self.fpn_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.fpn_in",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_537": {
                "variable": {
                    "value": "self.fpn_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.fpn_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_539": {
                "variable": {
                    "value": "self.conv_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3x3_bn_relu(len(fpn_inplanes) * fpn_dim, fpn_dim, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_554": {
                "variable": {
                    "value": "ppm_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ppm_out",
                    "type": "List",
                    "possible_values": [
                        [
                            "[conv5]",
                            "List"
                        ],
                        [
                            "torch.cat(ppm_out, 1)",
                            "Call"
                        ],
                        [
                            "[conv5]",
                            "List"
                        ],
                        [
                            "torch.cat(ppm_out, 1)",
                            "Call"
                        ],
                        [
                            "[conv5]",
                            "List"
                        ],
                        [
                            "torch.cat(ppm_out, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_576": {
                "variable": {
                    "value": "fusion_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "fusion_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[fpn_feature_list[0]]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_585": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_63": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_347": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "segSize",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_349": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_380": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "segSize",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_382": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_384": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_430": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "segSize",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_432": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_434": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_482": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "segSize",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_484": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_562": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.ppm_last_conv(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(f, size=conv_x.size()[2:], mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "conv_x + f",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "conv_x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_580": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "segSize",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_582": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_407": {
                "in_channels": {
                    "value": "fc_dim + len(pool_scales) * 512",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_410": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout2d_411": {
                "p": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_412": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_class",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_457": {
                "in_channels": {
                    "value": "fc_dim + len(pool_scales) * 512",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_460": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout2d_461": {
                "p": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_462": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_class",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_541": {
                "in_channels": {
                    "value": "fpn_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_class",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_121": {
                "f": {
                    "value": "weights",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_167": {
                "f": {
                    "value": "weights",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Sequential_398": {
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d(scale)",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_421": {
                "input": {
                    "value": "pool_scale(conv5)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(input_size[2], input_size[3])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_447": {
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d(scale)",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_473": {
                "input": {
                    "value": "pool_scale(conv5)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(input_size[2], input_size[3])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_512": {
                "output_size": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pool_scales",
                            "Name"
                        ],
                        [
                            "pool_scales",
                            "Name"
                        ],
                        [
                            "pool_scales",
                            "Name"
                        ]
                    ]
                }
            },
            "Sequential_513": {
                "*args": {
                    "value": "nn.Conv2d(fc_dim, 512, kernel_size=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_525": {
                "*args": {
                    "value": "nn.Conv2d(fpn_inplane, fpn_dim, kernel_size=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_534": {
                "*args": {
                    "value": "conv3x3_bn_relu(fpn_dim, fpn_dim, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_572": {
                "input": {
                    "value": "fpn_feature_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "output_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "fpn_feature_list[0].size()[2:]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_399": {
                "output_size": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pool_scales",
                            "Name"
                        ],
                        [
                            "pool_scales",
                            "Name"
                        ],
                        [
                            "pool_scales",
                            "Name"
                        ]
                    ]
                }
            },
            "Conv2d_400": {
                "in_channels": {
                    "value": "fc_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "4096",
                            "MethodArgument"
                        ],
                        [
                            "4096",
                            "MethodArgument"
                        ],
                        [
                            "4096",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_402": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_448": {
                "output_size": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pool_scales",
                            "Name"
                        ],
                        [
                            "pool_scales",
                            "Name"
                        ],
                        [
                            "pool_scales",
                            "Name"
                        ]
                    ]
                }
            },
            "Conv2d_449": {
                "in_channels": {
                    "value": "fc_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "4096",
                            "MethodArgument"
                        ],
                        [
                            "4096",
                            "MethodArgument"
                        ],
                        [
                            "4096",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_451": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_514": {
                "in_channels": {
                    "value": "fc_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "4096",
                            "MethodArgument"
                        ],
                        [
                            "4096",
                            "MethodArgument"
                        ],
                        [
                            "4096",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_516": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_526": {
                "in_channels": {
                    "value": "fpn_inplane",
                    "type": "Name",
                    "possible_values": [
                        [
                            "fpn_inplanes[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "fpn_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_528": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_550": {
                "input": {
                    "value": "pool_scale(conv5)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(input_size[2], input_size[3])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/segmodel/resnet.py": {
        "torch": {
            "Conv2d_29": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_77": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_111": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_114": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_117": {
                "variable": {
                    "value": "self.relu3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_118": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_124": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_125": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_235": {
                "f": {
                    "value": "cached_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, filename)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_138": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_150": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_139": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/segmodel/resnext.py": {
        "torch": {
            "Conv2d_28": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_44": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_78": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_81": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_84": {
                "variable": {
                    "value": "self.relu3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_85": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_91": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_92": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_183": {
                "f": {
                    "value": "cached_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, filename)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_105": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_106": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/segviz.py": {
        "torch": {
            "bincount_13": {
                "variable": {
                    "value": "bc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bincount_22": {
                "variable": {
                    "value": "bc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/setting.py": {
        "torch": {
            "Sequential_30": {
                "variable": {
                    "value": "model.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "collections.OrderedDict(zip(['conv1_1', 'relu1_1', 'conv1_2', 'relu1_2', 'pool1', 'conv2_1', 'relu2_1', 'conv2_2', 'relu2_2', 'pool2', 'conv3_1', 'relu3_1', 'conv3_2', 'relu3_2', 'conv3_3', 'relu3_3', 'pool3', 'conv4_1', 'relu4_1', 'conv4_2', 'relu4_2', 'conv4_3', 'relu4_3', 'pool4', 'conv5_1', 'relu5_1', 'conv5_2', 'relu5_2', 'conv5_3', 'relu5_3', 'pool5'], model.features))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "variable": {
                    "value": "model.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "collections.OrderedDict(zip(['fc6', 'relu6', 'drop6', 'fc7', 'relu7', 'drop7', 'fc8a'], model.classifier))",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_238": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/statedict.py": {
        "torch": {
            "from_numpy_58": {
                "variable": {
                    "value": "val",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "val",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.data[key]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(val)",
                            "Call"
                        ],
                        [
                            "example_type(val)",
                            "Call"
                        ],
                        [
                            "val.to(dtype=example.dtype, device=example.device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "netdissect/tally.py": {
        "torch": {
            "bincount_424": {
                "variable": {
                    "value": "counts",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "strided.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "minlength": {
                    "value": "num_labels * len(data)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_448": {
                "variable": {
                    "value": "gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "conditions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(segcounts[1:].nonzero() + 1)[:, 0]",
                            "Subscript"
                        ],
                        [
                            "max(condmv.keys()) + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_449": {
                "variable": {
                    "value": "isect",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "conditions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(segcounts[1:].nonzero() + 1)[:, 0]",
                            "Subscript"
                        ],
                        [
                            "max(condmv.keys()) + 1",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "condmv.conditional(0).mean().shape[0]",
                            "Subscript"
                        ],
                        [
                            "condq.conditional(0).depth",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_505": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(units, max(condq.keys()) + 1) + cutoff.shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_314": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "result",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "defaultdict(list)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "tensor_502": {
                "variable": {
                    "value": "cutoff",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "cutoff",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "torch.tensor(cutoff)",
                            "Call"
                        ],
                        [
                            "0.95",
                            "MethodArgument"
                        ],
                        [
                            "0.95",
                            "MethodArgument"
                        ],
                        [
                            "0.95",
                            "MethodArgument"
                        ],
                        [
                            "0.95",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_521": {
                "variable": {
                    "value": "arr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[isect, pred - isect, truth - isect, 1 - union]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorDataset_571": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "dataset",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_579": {
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.utils.data.TensorDataset(dataset)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "FixedSubsetSampler(list(range(sample_size)))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "50",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_99": {
                "variable": {
                    "value": "index_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "first_index",
                    "type": "Name",
                    "possible_values": [
                        [
                            "i * loader.batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "end": {
                    "value": "first_index + len(batch[0])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_253": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_278": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_305": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_331": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_358": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_379": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_400": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_553": {
                "input": {
                    "value": "iqr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mutual_information(arr) / joint_entropy(arr)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_309": {
                "ndarray": {
                    "value": "cached_state['data']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_341": {
                "tensors": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_335": {
                "ndarray": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_422": {
                "start": {
                    "value": "len(data)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "data.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isnan_537": {
                "input": {
                    "value": "term",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "joint * (joint / ind).log()",
                            "BinOp"
                        ],
                        [
                            "joint * joint.log()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "isnan_547": {
                "input": {
                    "value": "term",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "joint * (joint / ind).log()",
                            "BinOp"
                        ],
                        [
                            "joint * joint.log()",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "netdissect/tool/allunitsample.py": {
        "torch": {
            "unique_112": {
                "variable": {
                    "value": "all_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "indices.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_43": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pthfile",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_91": {
                "variable": {
                    "value": "z_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TensorDataset(z_universe)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_124": {
                "variable": {
                    "value": "z_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TensorDataset(z_sample)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorDataset_91": {
                "*tensors": {
                    "value": "z_universe",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorDataset_124": {
                "*tensors": {
                    "value": "z_sample",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/tool/ganseg.py": {
        "torch": {
            "DataLoader_62": {
                "variable": {
                    "value": "z_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "z_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z_dataset_for_model(model, size=args.size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/tool/makesample.py": {
        "torch": {
            "load_46": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pthfile",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_75": {
                "variable": {
                    "value": "indexes",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "args.size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_92": {
                "variable": {
                    "value": "model.ablation[args.layer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "dims",
                    "type": "Call",
                    "possible_values": [
                        [
                            "max(2, max(args.ablate_units) + 1)",
                            "Call"
                        ],
                        [
                            "max(2, max(ablated_units) + 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_111": {
                "variable": {
                    "value": "z_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TensorDataset(z_universe)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_124": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(scores, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_135": {
                "variable": {
                    "value": "z_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TensorDataset(z_sample)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_141": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "dims",
                    "type": "Call",
                    "possible_values": [
                        [
                            "max(2, max(args.ablate_units) + 1)",
                            "Call"
                        ],
                        [
                            "max(2, max(ablated_units) + 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorDataset_111": {
                "*tensors": {
                    "value": "z_universe",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorDataset_135": {
                "*tensors": {
                    "value": "z_sample",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/train_hybrid_bottom.py": {
        "torch": {
            "Adam_132": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "target_params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "encoder.parameters()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.lr",
                            "Attribute"
                        ]
                    ]
                }
            },
            "MultiStepLR_133": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.optim.Adam(target_params, lr=learning_rate)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "lr_milestones",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[500]",
                            "List"
                        ]
                    ]
                },
                "gamma": {
                    "value": "lr_gamma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.2",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_271": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "z_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "zdataset.z_dataset_for_model(z_generator, size=10000, seed=g_epoch + global_seed)",
                            "Call"
                        ],
                        [
                            "zdataset.z_dataset_for_model(z_generator, size=1000, seed=global_seed)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_53": {
                "seed": {
                    "value": "global_seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "renderer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_185": {
                "obj": {
                    "value": "kwargs",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(dirname, filename)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_255": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "z_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "zdataset.z_dataset_for_model(z_generator, size=10000, seed=g_epoch + global_seed)",
                            "Call"
                        ],
                        [
                            "zdataset.z_dataset_for_model(z_generator, size=1000, seed=global_seed)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mse_loss_236": {
                "variable": {
                    "value": "losses[rx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "true_r[layer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "recovered_r[layer]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_97": {
                "f": {
                    "value": "layer_filename",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join('results', args.model, 'invert_layer_%d_cse/snapshots/epoch_100.pth.tar' % args.bottom)",
                            "Call"
                        ],
                        [
                            "os.path.join('results', args.model, 'invert_over5_resnet/snapshots/epoch_100.pth.tar')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_84": {
                "f": {
                    "value": "prev_filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join('results', args.model, 'invert_hybrid_bottom_b%d/snapshots/epoch_1000.pth.tar' % (args.bottom - 1))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "netdissect/train_hybrid_inv.py": {
        "torch": {
            "Adam_110": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "target_params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "encoder.parameters()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.lr",
                            "Attribute"
                        ]
                    ]
                }
            },
            "MultiStepLR_111": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.optim.Adam(target_params, lr=learning_rate)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "lr_milestones",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[50, 150, 350]",
                            "List"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mse_loss_241": {
                "variable": {
                    "value": "loss_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true_p",
                    "type": "Call",
                    "possible_values": [
                        [
                            "generator(true_z)",
                            "Call"
                        ],
                        [
                            "generator(true_z)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "recovered_p",
                    "type": "Call",
                    "possible_values": [
                        [
                            "generator(recovered_z)",
                            "Call"
                        ],
                        [
                            "generator(recovered_z)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_282": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "z_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "zdataset.z_dataset_for_model(z_generator, size=10000, seed=g_epoch + global_seed)",
                            "Call"
                        ],
                        [
                            "zdataset.z_dataset_for_model(z_generator, size=1000, seed=global_seed)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_50": {
                "seed": {
                    "value": "global_seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "save_162": {
                "obj": {
                    "value": "kwargs",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(dirname, filename)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_266": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "z_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "zdataset.z_dataset_for_model(z_generator, size=10000, seed=g_epoch + global_seed)",
                            "Call"
                        ],
                        [
                            "zdataset.z_dataset_for_model(z_generator, size=1000, seed=global_seed)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mse_loss_221": {
                "variable": {
                    "value": "losses[rx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "true_r[layer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "recovered_r[layer]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_66": {
                "f": {
                    "value": "resnet_filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join('results', args.model, 'invert_over5_resnet/snapshots/epoch_100.pth.tar')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_255": {
                "input": {
                    "value": "true_p",
                    "type": "Call",
                    "possible_values": [
                        [
                            "generator(true_z)",
                            "Call"
                        ],
                        [
                            "generator(true_z)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "recovered_p",
                    "type": "Call",
                    "possible_values": [
                        [
                            "generator(recovered_z)",
                            "Call"
                        ],
                        [
                            "generator(recovered_z)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_62": {
                "f": {
                    "value": "layer_filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join('results', args.model, 'invert_layer_%d_cse/snapshots/epoch_100.pth.tar' % layernum)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "netdissect/train_multilayer_inv.py": {
        "torch": {
            "Adam_51": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.lr",
                            "Attribute"
                        ]
                    ]
                }
            },
            "mse_loss_122": {
                "variable": {
                    "value": "encoder_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "encoded_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "reencoded_batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "encoder(decoder(encoded_batch))",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_148": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "z_dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "zdataset.z_dataset_for_model(z_generator, size=batch_size * 50, seed=epoch + global_seed)",
                            "Call"
                        ],
                        [
                            "zdataset.z_dataset_for_model(z_generator, size=1000, seed=global_seed - 1)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_23": {
                "seed": {
                    "value": "global_seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "save_100": {
                "obj": {
                    "value": "kwargs",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(dirname, filename)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_134": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "z_dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "zdataset.z_dataset_for_model(z_generator, size=batch_size * 50, seed=epoch + global_seed)",
                            "Call"
                        ],
                        [
                            "zdataset.z_dataset_for_model(z_generator, size=1000, seed=global_seed - 1)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/train_onelayer_inv.py": {
        "torch": {
            "Adam_74": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.lr",
                            "Attribute"
                        ]
                    ]
                }
            },
            "MultiStepLR_75": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.optim.Adam(encoder.parameters(), lr=learning_rate)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "lr_milestones",
                    "type": "List",
                    "possible_values": [
                        [
                            "[20, 60]",
                            "List"
                        ],
                        [
                            "[60, 80]",
                            "List"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_208": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "z_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "zdataset.z_dataset_for_model(z_generator, size=10000, seed=g_epoch + global_seed)",
                            "Call"
                        ],
                        [
                            "zdataset.z_dataset_for_model(z_generator, size=1000, seed=global_seed)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_30": {
                "seed": {
                    "value": "global_seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "save_132": {
                "obj": {
                    "value": "kwargs",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(dirname, filename)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_192": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "z_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "zdataset.z_dataset_for_model(z_generator, size=10000, seed=g_epoch + global_seed)",
                            "Call"
                        ],
                        [
                            "zdataset.z_dataset_for_model(z_generator, size=1000, seed=global_seed)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_181": {
                "input": {
                    "value": "true_image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "r_decoder(true_r)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "recovered_image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "r_decoder(recovered_r)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "netdissect/upsample.py": {
        "torch": {
            "grid_sample_36": {
                "input": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "batch_grid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "grid",
                            "Name"
                        ],
                        [
                            "grid.expand((data.shape[0],) + grid.shape[1:])",
                            "Call"
                        ],
                        [
                            "batch_grid.to(data.device)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "mode",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'bilinear'",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "padding_mode",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'zeros'",
                            "MethodArgument"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grid_sample_39": {
                "input": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "batch_grid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "grid",
                            "Name"
                        ],
                        [
                            "grid.expand((data.shape[0],) + grid.shape[1:])",
                            "Call"
                        ],
                        [
                            "batch_grid.to(data.device)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "mode",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'bilinear'",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "padding_mode",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'zeros'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_144": {
                "tensors": {
                    "value": "(tx[None, :].expand(target_shape), ty[:, None].expand(target_shape))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_140": {
                "start": {
                    "value": "ts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "getattr(source, 'transforms', None)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "torch.float",
                            "MethodArgument"
                        ],
                        [
                            "torch.float",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "netdissect/upsegmodel/models.py": {
        "torch": {
            "max_18": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.decoder(self.encoder(feed_dict['img'], return_feature_maps=True), output_switch=output_switch, seg_size=seg_size)",
                            "Call"
                        ],
                        [
                            "self.decoder(self.encoder(feed_dict['img'], return_feature_maps=True), output_switch=output_switch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_20": {
                "variable": {
                    "value": "acc_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid * (preds == label).long()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_21": {
                "variable": {
                    "value": "pixel_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(label != ignore_index).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_28": {
                "variable": {
                    "value": "(_, pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_part",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_30": {
                "variable": {
                    "value": "acc_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "acc_sum.view(acc_sum.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_31": {
                "variable": {
                    "value": "acc_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "acc_sum * valid",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_32": {
                "variable": {
                    "value": "pixel_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_object.view(mask_object.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_33": {
                "variable": {
                    "value": "pixel_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pixel_sum * valid",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "nll_loss_39": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_part",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "gt_seg_part * mask_object.long()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_41": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss.view(loss.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_42": {
                "variable": {
                    "value": "nr_pixel",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_object.view(mask_object.shape[0], -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleDict_53": {
                "variable": {
                    "value": "self.crit_dict",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "NLLLoss_60": {
                "variable": {
                    "value": "self.crit_dict[object]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "NLLLoss_61": {
                "variable": {
                    "value": "self.crit_dict[material]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "NLLLoss_62": {
                "variable": {
                    "value": "self.crit_dict[scene]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_138": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "has_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_143": {
                "*args": {
                    "value": "conv3x3(in_planes, out_planes, stride)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_273": {
                "variable": {
                    "value": "self.ppm_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.ppm_pooling",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_274": {
                "variable": {
                    "value": "self.ppm_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.ppm_conv",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_285": {
                "variable": {
                    "value": "self.fpn_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.fpn_in",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_292": {
                "variable": {
                    "value": "self.fpn_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.fpn_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_301": {
                "variable": {
                    "value": "self.scene_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3x3_bn_relu(fpn_dim, fpn_dim, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_308": {
                "variable": {
                    "value": "self.object_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3x3_bn_relu(fpn_dim, fpn_dim, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_314": {
                "variable": {
                    "value": "self.part_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3x3_bn_relu(fpn_dim, fpn_dim, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_320": {
                "variable": {
                    "value": "self.material_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3x3_bn_relu(fpn_dim, fpn_dim, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_335": {
                "variable": {
                    "value": "roi",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "roi",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(roi, dim=0).type_as(conv5)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_342": {
                "variable": {
                    "value": "ppm_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ppm_out",
                    "type": "List",
                    "possible_values": [
                        [
                            "[conv5]",
                            "List"
                        ],
                        [
                            "[conv5]",
                            "List"
                        ],
                        [
                            "torch.cat(ppm_out, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_146": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_385": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "output_dict['scene']",
                            "Subscript"
                        ],
                        [
                            "x.squeeze(3).squeeze(2)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "output_dict[k]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(x, size=seg_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "output_dict['part']",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(x, size=seg_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "output_dict[k]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "x.squeeze(3).squeeze(2)",
                            "Call"
                        ],
                        [
                            "output_dict['part'][:, head:head + n_part]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_fusion(fusion_out)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_397": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "output_dict['scene']",
                            "Subscript"
                        ],
                        [
                            "x.squeeze(3).squeeze(2)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "output_dict[k]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(x, size=seg_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "output_dict['part']",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(x, size=seg_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "output_dict[k]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "x.squeeze(3).squeeze(2)",
                            "Call"
                        ],
                        [
                            "output_dict['part'][:, head:head + n_part]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_fusion(fusion_out)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "seg_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_44": {
                "input": {
                    "value": "sum_pixel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(nr_pixel * valid).sum()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_303": {
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_304": {
                "in_channels": {
                    "value": "fpn_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.nr_scene_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_310": {
                "in_channels": {
                    "value": "fpn_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.nr_object_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_316": {
                "in_channels": {
                    "value": "fpn_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.nr_part_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_322": {
                "in_channels": {
                    "value": "fpn_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.nr_material_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_354": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.ppm_last_conv(ppm_out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(f, size=conv_x.size()[2:], mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "conv_x + f",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "conv_x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_373": {
                "variable": {
                    "value": "fusion_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "fusion_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[fpn_feature_list[0]]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_391": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "output_dict['scene']",
                            "Subscript"
                        ],
                        [
                            "x.squeeze(3).squeeze(2)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "output_dict[k]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(x, size=seg_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "output_dict['part']",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(x, size=seg_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "output_dict[k]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "x.squeeze(3).squeeze(2)",
                            "Call"
                        ],
                        [
                            "output_dict['part'][:, head:head + n_part]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_fusion(fusion_out)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "seg_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_392": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "output_dict['scene']",
                            "Subscript"
                        ],
                        [
                            "x.squeeze(3).squeeze(2)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "output_dict[k]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(x, size=seg_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "output_dict['part']",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(x, size=seg_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "output_dict[k]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "x.squeeze(3).squeeze(2)",
                            "Call"
                        ],
                        [
                            "output_dict['part'][:, head:head + n_part]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_fusion(fusion_out)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_401": {
                "variable": {
                    "value": "_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, head:head + n_part]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "seg_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_402": {
                "variable": {
                    "value": "_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.interpolate(x[:, head:head + n_part], size=seg_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.softmax(_x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_413": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "output_dict['scene']",
                            "Subscript"
                        ],
                        [
                            "x.squeeze(3).squeeze(2)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "output_dict[k]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(x, size=seg_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "output_dict['part']",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(x, size=seg_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "output_dict[k]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "x.squeeze(3).squeeze(2)",
                            "Call"
                        ],
                        [
                            "output_dict['part'][:, head:head + n_part]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_fusion(fusion_out)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_184": {
                "f": {
                    "value": "weights",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_209": {
                "f": {
                    "value": "weights",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Sequential_268": {
                "*args": {
                    "value": "nn.Conv2d(fc_dim, 512, kernel_size=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_280": {
                "*args": {
                    "value": "nn.Conv2d(fpn_inplane, fpn_dim, kernel_size=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_289": {
                "*args": {
                    "value": "conv3x3_bn_relu(fpn_dim, fpn_dim, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_422": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "output_dict['scene']",
                            "Subscript"
                        ],
                        [
                            "x.squeeze(3).squeeze(2)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "output_dict[k]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(x, size=seg_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "output_dict['part']",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(x, size=seg_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "output_dict[k]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "x.squeeze(3).squeeze(2)",
                            "Call"
                        ],
                        [
                            "output_dict['part'][:, head:head + n_part]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_fusion(fusion_out)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_269": {
                "in_channels": {
                    "value": "fc_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "4096",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_271": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_281": {
                "in_channels": {
                    "value": "fpn_inplane",
                    "type": "Name",
                    "possible_values": [
                        [
                            "fpn_inplanes[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "fpn_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_283": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_338": {
                "input": {
                    "value": "pool_scale(conv5, roi.detach())",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(input_size[2], input_size[3])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_369": {
                "input": {
                    "value": "fpn_feature_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "output_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "fpn_feature_list[0].size()[2:]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/upsegmodel/prroi_pool/build.py": {
        "torch": {
            "is_available_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/upsegmodel/prroi_pool/functional.py": {
        "torch": {}
    },
    "netdissect/upsegmodel/prroi_pool/prroi_pool.py": {
        "torch": {}
    },
    "netdissect/upsegmodel/prroi_pool/test_prroi_pooling2d.py": {
        "torch": {
            "rand_23": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(4, 16, 24, 32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_24": {
                "variable": {
                    "value": "rois",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 0, 0, 14, 14], [1, 14, 14, 28, 28]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "avg_pool2d_30": {
                "variable": {
                    "value": "out_gold",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.rand((4, 16, 24, 32)).cuda()",
                            "Call"
                        ],
                        [
                            "torch.rand((4, 2, 24, 32)).cuda()",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_40": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(4, 2, 24, 32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "variable": {
                    "value": "rois",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 0, 0, 4, 4], [1, 14, 14, 18, 18]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_32": {
                "tensors": {
                    "value": "(out_gold[0, :, :7, :7], out_gold[1, :, 7:14, 7:14])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/upsegmodel/resnet.py": {
        "torch": {
            "Conv2d_28": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_76": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_110": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_113": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_116": {
                "variable": {
                    "value": "self.relu3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_117": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_123": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_124": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_235": {
                "f": {
                    "value": "cached_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, filename)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_137": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_149": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_138": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/upsegmodel/resnext.py": {
        "torch": {
            "Conv2d_28": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_44": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_78": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_81": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_84": {
                "variable": {
                    "value": "self.relu3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_85": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_91": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_92": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_183": {
                "f": {
                    "value": "cached_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, filename)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_105": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_106": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/zdataset.py": {
        "torch": {
            "from_numpy_41": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rng.standard_normal(size * depth).reshape(size, depth)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_58": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rng.randint(num_classes, size=size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_89": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "z_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "z_dataset_for_model(z_generator, size=epoch_size, seed=g_epoch + 1)",
                            "Call"
                        ],
                        [
                            "z_dataset_for_model(z_generator, size=test_size, seed=1)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "as_tensor_6": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.as_tensor(indices, dtype=torch.int64, device='cpu')",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorDataset_11": {
                "*tensors": {
                    "value": "zs",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_73": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "z_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "z_dataset_for_model(z_generator, size=epoch_size, seed=g_epoch + 1)",
                            "Call"
                        ],
                        [
                            "z_dataset_for_model(z_generator, size=test_size, seed=1)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/data/dataloader.py": {
        "torch": {
            "DataLoader_100": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "image_data['train']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "train_config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "train_config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "train_config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "train_config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "config['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_106": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "image_data['val']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "train_config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "train_config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "train_config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "train_config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "config['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_113": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "image_data['test']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "train_config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "train_config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "train_config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "train_config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "config['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_157": {
                "variable": {
                    "value": "nih_train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "image_data['train']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "train_config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "train_config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "train_config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "train_config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "config['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_163": {
                "variable": {
                    "value": "nih_val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "image_data['val']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "train_config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "train_config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "train_config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "train_config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "config['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_170": {
                "variable": {
                    "value": "nih_test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "image_data['test']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "train_config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "train_config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "train_config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "train_config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "config['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_214": {
                "variable": {
                    "value": "nih_train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "image_data['train']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "train_config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "train_config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "train_config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "train_config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "config['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_220": {
                "variable": {
                    "value": "nih_val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "image_data['val']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "train_config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "train_config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "train_config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "train_config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "config['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_227": {
                "variable": {
                    "value": "nih_test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "image_data['test']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "train_config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "train_config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "train_config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "train_config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "config['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_273": {
                "variable": {
                    "value": "nih_train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "image_data['train']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "train_config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "train_config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "train_config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "train_config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "config['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_279": {
                "variable": {
                    "value": "nih_val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "image_data['val']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "train_config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "train_config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "train_config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "train_config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "config['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_286": {
                "variable": {
                    "value": "nih_test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "image_data['test']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "train_config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "train_config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "train_config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "train_config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "config['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_308": {
                "variable": {
                    "value": "seg_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "image_data",
                    "type": "Dict",
                    "possible_values": [
                        [
                            "{'train': CheXPert(path_to_data=path_to_data, fold='train', transform=data_transforms['train'], orientation=orientation), 'val': CheXPert(path_to_data=path_to_data, fold='valid', transform=data_transforms['val'], orientation=orientation), 'test': CheXPert(path_to_data=path_to_data, fold='test', transform=data_transforms['val'], orientation=orientation)}",
                            "Dict"
                        ],
                        [
                            "{'train': BrixIA(path_to_data=path_to_data, fold='train', mode=mode, transform=data_transforms['train']), 'val': BrixIA(path_to_data=path_to_data, fold='valid', mode=mode, transform=data_transforms['val']), 'test': BrixIA(path_to_data=path_to_data, fold='test', mode=mode, transform=data_transforms['val'])}",
                            "Dict"
                        ],
                        [
                            "{'train': CombinedData(path_to_nih=path_to_data[0], path_to_chexpert=path_to_data[1], path_to_brixia=path_to_data[2], fold='train', transform=data_transforms['train']), 'val': CombinedData(path_to_nih=path_to_data[0], path_to_chexpert=path_to_data[1], path_to_brixia=path_to_data[2], fold='valid', transform=data_transforms['val']), 'test': CombinedData(path_to_nih=path_to_data[0], path_to_chexpert=path_to_data[1], path_to_brixia=path_to_data[2], fold='test', transform=data_transforms['val'])}",
                            "Dict"
                        ],
                        [
                            "{'train': Nih_cropped(path_to_data=path_to_data, fold='train', transform=data_transforms['train']), 'val': Nih_cropped(path_to_data=path_to_data, fold='valid', transform=data_transforms['val']), 'test': Nih_cropped(path_to_data=path_to_data, fold='test', transform=data_transforms['val'])}",
                            "Dict"
                        ],
                        [
                            "{'train': NIH_full(path_to_data=path_to_data, fold='train', transform=data_transforms['train']), 'val': NIH_full(path_to_data=path_to_data, fold='valid', transform=data_transforms['val']), 'test': NIH_full(path_to_data=path_to_data, fold='test', transform=data_transforms['val'])}",
                            "Dict"
                        ],
                        [
                            "{'train': NIH_segmented(path_to_data=path_to_data, fold='train', transform=data_transforms['train'], output_label_size=input_size), 'val': NIH_segmented(path_to_data=path_to_data, fold='valid', transform=data_transforms['val'], output_label_size=input_size), 'test': NIH_segmented(path_to_data=path_to_data, fold='test', transform=data_transforms['val'], output_label_size=input_size)}",
                            "Dict"
                        ],
                        [
                            "CovidSeg(path_to_data, transform=data_transforms, output_label_size=input_size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "train_config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "train_config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "train_config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "train_config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "config['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "src/features/dataset_brixia.py": {
        "torch": {
            "tensor_88": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "(label - self.mean) / self.std",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/features/dataset_chexpert.py": {
        "torch": {
            "from_numpy_84": {
                "ndarray": {
                    "value": "weights.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/features/dataset_combined.py": {
        "torch": {
            "sum_46": {
                "input": {
                    "value": "label",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sample[1]",
                            "Subscript"
                        ],
                        [
                            "self._get_label(idx, label)",
                            "Call"
                        ],
                        [
                            "np.argmax(label, axis=1)",
                            "Call"
                        ],
                        [
                            "np.sum(label, axis=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/features/dataset_nih.py": {
        "torch": {
            "empty_182": {
                "variable": {
                    "value": "image_bbox",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "np.array(image).size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_183": {
                "variable": {
                    "value": "image_cropped",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "np.array(image).size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_199": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label.astype(int)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_68": {
                "ndarray": {
                    "value": "weights.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_158": {
                "ndarray": {
                    "value": "weights.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/features/dataset_seg.py": {
        "torch": {}
    },
    "src/models/loss.py": {
        "torch": {
            "argmax_14": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_15": {
                "variable": {
                    "value": "global_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.argmax(y_target, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.argmax(y_target, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_16": {
                "variable": {
                    "value": "global_score_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.argmax(y_pred, dim=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_33": {
                "variable": {
                    "value": "log",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred + sys.float_info.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_51": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_52": {
                "variable": {
                    "value": "score_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_69": {
                "variable": {
                    "value": "mse_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights * (y_pred - y_target) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_83": {
                "variable": {
                    "value": "mse_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(y_pred - y_target) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_97": {
                "variable": {
                    "value": "mae_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(y_pred - y_target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_34": {
                "input": {
                    "value": "torch.mul(log, y_target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_54": {
                "input": {
                    "value": "torch.abs(score - score_pred)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_97": {
                "input": {
                    "value": "y_pred - y_target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_34": {
                "input": {
                    "value": "log",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.log(y_pred + sys.float_info.epsilon)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "y_target",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "abs_54": {
                "input": {
                    "value": "score - score_pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_16": {
                "input": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/visualization/netdissect_results.py": {
        "torch": {
            "where_394": {
                "condition": {
                    "value": "pred[0] == max(pred[0])",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    }
}