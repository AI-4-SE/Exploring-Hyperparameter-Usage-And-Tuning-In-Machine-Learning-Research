{
    "LearnGC/n_weight_CNN.py": {
        "torch": {
            "device_28": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:3 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv3d_43": {
                "variable": {
                    "value": "self.conv1",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv3d_44": {
                "variable": {
                    "value": "self.conv2",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv3d_45": {
                "variable": {
                    "value": "self.conv3",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv3d_46": {
                "variable": {
                    "value": "self.conv4",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv3d_47": {
                "variable": {
                    "value": "self.conv5",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv3d_48": {
                "variable": {
                    "value": "self.conv6",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv3d_49": {
                "variable": {
                    "value": "self.conv7",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "MaxPool3d_50": {
                "variable": {
                    "value": "self.maxpool",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Linear_51": {
                "variable": {
                    "value": "self.L1",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.inputsize",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "variable": {
                    "value": "self.L2",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.L3",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "possible_values": []
                }
            },
            "Sigmoid_55": {
                "variable": {
                    "value": "self.sigmoid",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Sigmoid_91": {
                "variable": {
                    "value": "self.sigmoid",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_92": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Linear_94": {
                "variable": {
                    "value": "self.L1",
                    "possible_values": []
                },
                "in_features": {
                    "value": "65",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "variable": {
                    "value": "self.L2",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32",
                    "possible_values": []
                }
            },
            "Linear_96": {
                "variable": {
                    "value": "self.L3",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "exp_102": {
                "variable": {
                    "value": "dist",
                    "possible_values": []
                },
                "input": {
                    "value": "-dist",
                    "possible_values": []
                }
            },
            "cat_103": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out, dist)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "save_206": {
                "obj": {
                    "value": "net.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(savedir, strNetSaveName)",
                    "possible_values": []
                }
            },
            "SGD_250": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "WEIGHT_DECAY",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                }
            },
            "MSELoss_251": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "DataLoader_254": {
                "variable": {
                    "value": "train_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "traindataset",
                    "possible_values": [
                        [
                            "PatchPair_Similarity(TRAIN_DIR_PATH, PatchSize)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "BatchSize",
                    "possible_values": [
                        [
                            "200",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "WORKERSNUM",
                    "possible_values": [
                        [
                            "120",
                            "Constant"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "load_267": {
                "variable": {
                    "value": "state_dict",
                    "possible_values": []
                },
                "f": {
                    "value": "net_param",
                    "possible_values": [
                        [
                            "TRAIN_SAVE_DIR + 'net_with' + StrPatchSize + '_009_001.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "is_available_28": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "from_numpy_176": {
                "ndarray": {
                    "value": "similarity",
                    "possible_values": [
                        [
                            "np.array([self.similarity[item]], np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_321": {
                "variable": {
                    "value": "numpypatch1",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "numpypatch1",
                    "possible_values": [
                        [
                            "np.array(patchimage1[i * T_batchsize:min((i + 1) * T_batchsize, NNode), :], np.float32)",
                            "Call"
                        ],
                        [
                            "np.reshape(numpypatch1, (t_batchsize, 1, PatchSize[2], PatchSize[1], PatchSize[0]))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(numpypatch1)",
                            "Call"
                        ],
                        [
                            "np.array([self.numpypatch1[item]], np.float32)",
                            "Call"
                        ],
                        [
                            "np.reshape(numpypatch1, (1, self.PatchSize[2], self.PatchSize[1], self.PatchSize[0]))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_325": {
                "variable": {
                    "value": "numpypatch2",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "numpypatch2",
                    "possible_values": [
                        [
                            "np.array(patchimage2[i * T_batchsize:min((i + 1) * T_batchsize, NNode), :], np.float32)",
                            "Call"
                        ],
                        [
                            "np.reshape(numpypatch2, (t_batchsize, 1, PatchSize[2], PatchSize[1], PatchSize[0]))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(numpypatch2)",
                            "Call"
                        ],
                        [
                            "np.array([self.numpypatch2[item]], np.float32)",
                            "Call"
                        ],
                        [
                            "np.reshape(numpypatch2, (1, self.PatchSize[2], self.PatchSize[1], self.PatchSize[0]))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_330": {
                "variable": {
                    "value": "distance",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "distance",
                    "possible_values": [
                        [
                            "float(linedistance.split()[2])",
                            "Call"
                        ],
                        [
                            "np.array(n_distance[i * T_batchsize:min((i + 1) * T_batchsize, NNode)], np.float32)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(distance, 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(distance)",
                            "Call"
                        ],
                        [
                            "np.array([self.distance[item]], np.float32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "LearnGC/t_weight_CNN_MS.py": {
        "torch": {
            "device_19": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv3d_33": {
                "variable": {
                    "value": "self.conv1",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv3d_34": {
                "variable": {
                    "value": "self.conv2",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv3d_35": {
                "variable": {
                    "value": "self.conv3",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv3d_36": {
                "variable": {
                    "value": "self.conv4",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv3d_37": {
                "variable": {
                    "value": "self.conv5",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv3d_38": {
                "variable": {
                    "value": "self.conv6",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv3d_39": {
                "variable": {
                    "value": "self.conv7",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "MaxPool3d_40": {
                "variable": {
                    "value": "self.maxpool",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "variable": {
                    "value": "self.L1",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.inputsize",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "possible_values": []
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "self.L2",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self.L3",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "possible_values": []
                }
            },
            "Sigmoid_45": {
                "variable": {
                    "value": "self.sigmoid",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Sigmoid_84": {
                "variable": {
                    "value": "self.sigmoid",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_85": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Linear_87": {
                "variable": {
                    "value": "self.L1",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * 3",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "possible_values": []
                }
            },
            "Linear_88": {
                "variable": {
                    "value": "self.L2",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32",
                    "possible_values": []
                }
            },
            "Linear_89": {
                "variable": {
                    "value": "self.L3",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feature1, feature2, feature3)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "save_204": {
                "obj": {
                    "value": "net.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(savedir, strNetSaveName)",
                    "possible_values": []
                }
            },
            "SGD_247": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "possible_values": [
                        [
                            "0.01",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "WEIGHT_DECAY",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                }
            },
            "MSELoss_248": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "DataLoader_251": {
                "variable": {
                    "value": "train_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "traindataset",
                    "possible_values": [
                        [
                            "PatchScarProb(TRAIN_DIR_PATH, PatchSize)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "BatchSize",
                    "possible_values": [
                        [
                            "50",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "WORKERSNUM",
                    "possible_values": [
                        [
                            "120",
                            "Constant"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "load_255": {
                "variable": {
                    "value": "state_dict",
                    "possible_values": []
                },
                "f": {
                    "value": "net_param",
                    "possible_values": [
                        [
                            "TRAIN_SAVE_DIR + 'net_with' + StrPatchSize + '_014_001.pkl'",
                            "BinOp"
                        ],
                        [
                            "TRAIN_SAVE_DIR + 'net_with' + StrPatchSize + '_014_001.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_271": {
                "variable": {
                    "value": "state_dict",
                    "possible_values": []
                },
                "f": {
                    "value": "net_param",
                    "possible_values": [
                        [
                            "TRAIN_SAVE_DIR + 'net_with' + StrPatchSize + '_014_001.pkl'",
                            "BinOp"
                        ],
                        [
                            "TRAIN_SAVE_DIR + 'net_with' + StrPatchSize + '_014_001.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataParallel_280": {
                "variable": {
                    "value": "test_net",
                    "possible_values": []
                },
                "module": {
                    "value": "test_net",
                    "possible_values": [
                        [
                            "MultiScaleNet(PatchSize)",
                            "Call"
                        ],
                        [
                            "test_net.to(device)",
                            "Call"
                        ],
                        [
                            "DataParallel(test_net)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_19": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "from_numpy_175": {
                "ndarray": {
                    "value": "prob",
                    "possible_values": [
                        [
                            "np.array([self.prob[nodeid]], np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_328": {
                "variable": {
                    "value": "numpypatch1",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "numpypatch1",
                    "possible_values": [
                        [
                            "np.array(numpyimage1[i * T_batchsize:min((i + 1) * T_batchsize, NNode), :], np.float32)",
                            "Call"
                        ],
                        [
                            "np.reshape(numpypatch1, (t_batchsize, 1, PatchSize[2], PatchSize[1], PatchSize[0]))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(numpypatch1)",
                            "Call"
                        ],
                        [
                            "np.array([self.numpypatch1[nodeid]], np.float32)",
                            "Call"
                        ],
                        [
                            "np.reshape(numpypatch1, (1, self.PatchSize[2], self.PatchSize[1], self.PatchSize[0]))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_332": {
                "variable": {
                    "value": "numpypatch2",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "numpypatch2",
                    "possible_values": [
                        [
                            "np.array(numpyimage2[i * T_batchsize:min((i + 1) * T_batchsize, NNode), :], np.float32)",
                            "Call"
                        ],
                        [
                            "np.reshape(numpypatch2, (t_batchsize, 1, PatchSize[2], PatchSize[1], PatchSize[0]))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(numpypatch2)",
                            "Call"
                        ],
                        [
                            "np.array([self.numpypatch2[nodeid]], np.float32)",
                            "Call"
                        ],
                        [
                            "np.reshape(numpypatch2, (1, self.PatchSize[2], self.PatchSize[1], self.PatchSize[0]))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_336": {
                "variable": {
                    "value": "numpypatch3",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "numpypatch3",
                    "possible_values": [
                        [
                            "np.array(numpyimage3[i * T_batchsize:min((i + 1) * T_batchsize, NNode), :], np.float32)",
                            "Call"
                        ],
                        [
                            "np.reshape(numpypatch3, (t_batchsize, 1, PatchSize[2], PatchSize[1], PatchSize[0]))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(numpypatch3)",
                            "Call"
                        ],
                        [
                            "np.array([self.numpypatch3[nodeid]], np.float32)",
                            "Call"
                        ],
                        [
                            "np.reshape(numpypatch3, (1, self.PatchSize[2], self.PatchSize[1], self.PatchSize[0]))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "LearnGC/t_weight_myo_CNN_MS.py": {
        "torch": {
            "device_19": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv3d_33": {
                "variable": {
                    "value": "self.conv1",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv3d_34": {
                "variable": {
                    "value": "self.conv2",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv3d_35": {
                "variable": {
                    "value": "self.conv3",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv3d_36": {
                "variable": {
                    "value": "self.conv4",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv3d_37": {
                "variable": {
                    "value": "self.conv5",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv3d_38": {
                "variable": {
                    "value": "self.conv6",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv3d_39": {
                "variable": {
                    "value": "self.conv7",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "MaxPool3d_40": {
                "variable": {
                    "value": "self.maxpool",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "variable": {
                    "value": "self.L1",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.inputsize",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "possible_values": []
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "self.L2",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self.L3",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "possible_values": []
                }
            },
            "Sigmoid_45": {
                "variable": {
                    "value": "self.sigmoid",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Sigmoid_84": {
                "variable": {
                    "value": "self.sigmoid",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_85": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Linear_87": {
                "variable": {
                    "value": "self.L1",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * 3",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "possible_values": []
                }
            },
            "Linear_88": {
                "variable": {
                    "value": "self.L2",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32",
                    "possible_values": []
                }
            },
            "Linear_89": {
                "variable": {
                    "value": "self.L3",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feature1, feature2, feature3)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "save_206": {
                "obj": {
                    "value": "net.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(savedir, strNetSaveName)",
                    "possible_values": []
                }
            },
            "SGD_247": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "possible_values": [
                        [
                            "0.01",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "WEIGHT_DECAY",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                }
            },
            "MSELoss_248": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "DataLoader_251": {
                "variable": {
                    "value": "train_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "traindataset",
                    "possible_values": [
                        [
                            "PatchScarProb(TRAIN_DIR_PATH, PatchSize)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "BatchSize",
                    "possible_values": [
                        [
                            "200",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "WORKERSNUM",
                    "possible_values": [
                        [
                            "120",
                            "Constant"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "load_263": {
                "variable": {
                    "value": "state_dict",
                    "possible_values": []
                },
                "f": {
                    "value": "net_param",
                    "possible_values": [
                        [
                            "TRAIN_SAVE_DIR + 'net_with' + StrPatchSize + '_014_001.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "is_available_19": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "from_numpy_176": {
                "ndarray": {
                    "value": "prob",
                    "possible_values": [
                        [
                            "np.array([self.prob[nodeid]], np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_319": {
                "variable": {
                    "value": "numpypatch1",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "numpypatch1",
                    "possible_values": [
                        [
                            "np.array(numpyimage1[i * T_batchsize:min((i + 1) * T_batchsize, NNode), :], np.float32)",
                            "Call"
                        ],
                        [
                            "np.reshape(numpypatch1, (t_batchsize, 1, PatchSize[2], PatchSize[1], PatchSize[0]))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(numpypatch1)",
                            "Call"
                        ],
                        [
                            "np.array([self.numpypatch1[nodeid]], np.float32)",
                            "Call"
                        ],
                        [
                            "np.reshape(numpypatch1, (1, self.PatchSize[2], self.PatchSize[1], self.PatchSize[0]))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_323": {
                "variable": {
                    "value": "numpypatch2",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "numpypatch2",
                    "possible_values": [
                        [
                            "np.array(numpyimage2[i * T_batchsize:min((i + 1) * T_batchsize, NNode), :], np.float32)",
                            "Call"
                        ],
                        [
                            "np.reshape(numpypatch2, (t_batchsize, 1, PatchSize[2], PatchSize[1], PatchSize[0]))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(numpypatch2)",
                            "Call"
                        ],
                        [
                            "np.array([self.numpypatch2[nodeid]], np.float32)",
                            "Call"
                        ],
                        [
                            "np.reshape(numpypatch2, (1, self.PatchSize[2], self.PatchSize[1], self.PatchSize[0]))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_327": {
                "variable": {
                    "value": "numpypatch3",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "numpypatch3",
                    "possible_values": [
                        [
                            "np.array(numpyimage3[i * T_batchsize:min((i + 1) * T_batchsize, NNode), :], np.float32)",
                            "Call"
                        ],
                        [
                            "np.reshape(numpypatch3, (t_batchsize, 1, PatchSize[2], PatchSize[1], PatchSize[0]))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(numpypatch3)",
                            "Call"
                        ],
                        [
                            "np.array([self.numpypatch3[nodeid]], np.float32)",
                            "Call"
                        ],
                        [
                            "np.reshape(numpypatch3, (1, self.PatchSize[2], self.PatchSize[1], self.PatchSize[0]))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "python script AtrialJSQnet/function.py": {
        "torch": {
            "device_11": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "BCELoss_15": {
                "variable": {
                    "value": "lossfunc1",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "mean_17": {
                "variable": {
                    "value": "loss_sdf_la",
                    "possible_values": []
                },
                "input": {
                    "value": "(out_LA - 0.5) * LAdist",
                    "possible_values": []
                }
            },
            "MSELoss_19": {
                "variable": {
                    "value": "lossfunc2",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "cat_20": {
                "variable": {
                    "value": "gt_scar_probmap",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prob_normal, prob_scar)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "MSELoss_23": {
                "variable": {
                    "value": "lossfunc3",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "possible_values": []
                }
            },
            "MSELoss_75": {
                "variable": {
                    "value": "lossfunc2",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "BCELoss_82": {
                "variable": {
                    "value": "lossfunc",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "BCELoss_92": {
                "variable": {
                    "value": "lossfunc",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "from_numpy_97": {
                "variable": {
                    "value": "gt_dis",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gt_dis",
                    "possible_values": [
                        [
                            "compute_sdf(label.cpu().numpy(), output.shape)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(gt_dis).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_98": {
                "variable": {
                    "value": "loss_sdf_lei",
                    "possible_values": []
                },
                "input": {
                    "value": "(output - 0.5) * gt_dis",
                    "possible_values": []
                }
            },
            "sum_144": {
                "variable": {
                    "value": "intersect",
                    "possible_values": []
                },
                "input": {
                    "value": "net_output * gt_sdm",
                    "possible_values": []
                }
            },
            "sum_145": {
                "variable": {
                    "value": "pd_sum",
                    "possible_values": []
                },
                "input": {
                    "value": "net_output ** 2",
                    "possible_values": []
                }
            },
            "sum_146": {
                "variable": {
                    "value": "gt_sum",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_sdm ** 2",
                    "possible_values": []
                }
            },
            "load_194": {
                "variable": {
                    "value": "state_dict",
                    "possible_values": []
                },
                "f": {
                    "value": "net_param",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "load_208": {
                "variable": {
                    "value": "state_dict",
                    "possible_values": []
                },
                "f": {
                    "value": "net_param",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "load_213": {
                "variable": {
                    "value": "state_dict",
                    "possible_values": []
                },
                "f": {
                    "value": "net_param",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "is_available_11": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "sum_30": {
                "input": {
                    "value": "mask_gd",
                    "possible_values": [
                        [
                            "((prob_normal > 0.45) * (prob_normal < 0.5)).float() + ((prob_scar > 0.45) * (prob_scar < 0.5)).float()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_31": {
                "input": {
                    "value": "mask_pred",
                    "possible_values": [
                        [
                            "((out_LA > 0.1) * (out_LA < 0.8)).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_150": {
                "input": {
                    "value": "net_output - gt_sdm",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "numel_150": {
                "input": {
                    "value": "net_output",
                    "possible_values": []
                }
            },
            "cat_161": {
                "tensors": {
                    "value": "[1 - torch.clamp(torch.abs(A - i), 0, 1) for i in class_labels]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_162": {
                "tensors": {
                    "value": "[1 - torch.clamp(torch.abs(B - i), 0, 1) for i in class_labels]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sqrt_76": {
                "input": {
                    "value": "q",
                    "possible_values": []
                }
            },
            "mean_85": {
                "input": {
                    "value": "1 - Dice[:, 0]",
                    "possible_values": []
                }
            },
            "sum_188": {
                "input": {
                    "value": "A * B",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "clamp_161": {
                "input": {
                    "value": "torch.abs(A - i)",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "clamp_162": {
                "input": {
                    "value": "torch.abs(B - i)",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "abs_161": {
                "input": {
                    "value": "A - i",
                    "possible_values": []
                }
            },
            "abs_162": {
                "input": {
                    "value": "B - i",
                    "possible_values": []
                }
            }
        }
    },
    "python script AtrialJSQnet/loaddata.py": {
        "torch": {
            "device_15": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "from_numpy_253": {
                "variable": {
                    "value": "tensorimage",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([numpyimage[sliceid]])",
                    "possible_values": []
                }
            },
            "unsqueeze_253": {
                "variable": {
                    "value": "tensorimage",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "is_available_15": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "python script AtrialJSQnet/main.py": {
        "torch": {
            "device_37": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "from_numpy_78": {
                "variable": {
                    "value": "tensorimage",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "numpyimage",
                    "possible_values": [
                        [
                            "np.array([self.numpyimage[item]])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_79": {
                "variable": {
                    "value": "tensorlabel_LA",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "numpylabel_LA.astype(np.float32)",
                    "possible_values": []
                }
            },
            "from_numpy_80": {
                "variable": {
                    "value": "tensorlabel_LAdist",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "numpylabel_LAdist.astype(np.float32)",
                    "possible_values": []
                }
            },
            "from_numpy_82": {
                "variable": {
                    "value": "tensorprob_normal",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "numpyprob_normal.astype(np.float32)",
                    "possible_values": []
                }
            },
            "from_numpy_83": {
                "variable": {
                    "value": "tensorprob_scar",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "numpyprob_scar.astype(np.float32)",
                    "possible_values": []
                }
            },
            "save_139": {
                "obj": {
                    "value": "net.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(savedir, strNetSaveName)",
                    "possible_values": []
                }
            },
            "DataLoader_169": {
                "variable": {
                    "value": "data_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "TrainingDataset(TRAIN_DIR_PATH)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "BatchSize",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "WORKERSNUM",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Adam_173": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "possible_values": []
                }
            },
            "is_available_37": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "python script AtrialJSQnet/network.py": {
        "torch": {
            "Sequential_10": {
                "variable": {
                    "value": "self.conv",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(in_ch, out_ch, kernel_size=3, padding=1)",
                    "possible_values": []
                }
            },
            "MaxPool3d_27": {
                "variable": {
                    "value": "self.pool1",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "MaxPool3d_29": {
                "variable": {
                    "value": "self.pool2",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "MaxPool3d_31": {
                "variable": {
                    "value": "self.pool3",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "MaxPool3d_33": {
                "variable": {
                    "value": "self.pool4",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_61": {
                "variable": {
                    "value": "self.up6",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_63": {
                "variable": {
                    "value": "self.up7",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_65": {
                "variable": {
                    "value": "self.up8",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_67": {
                "variable": {
                    "value": "self.up9",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Conv3d_69": {
                "variable": {
                    "value": "self.conv10",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_74": {
                "variable": {
                    "value": "merge6",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[up_6, c4]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "merge7",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[up_7, c3]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_80": {
                "variable": {
                    "value": "merge8",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[up_8, c2]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_83": {
                "variable": {
                    "value": "merge9",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[up_9, c1]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_94": {
                "variable": {
                    "value": "self.up6",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_96": {
                "variable": {
                    "value": "self.up7",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_98": {
                "variable": {
                    "value": "self.up8",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_100": {
                "variable": {
                    "value": "self.up9",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Conv3d_102": {
                "variable": {
                    "value": "self.conv10",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "MaxPool3d_139": {
                "variable": {
                    "value": "self.pool1",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "MaxPool3d_141": {
                "variable": {
                    "value": "self.pool2",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "MaxPool3d_143": {
                "variable": {
                    "value": "self.pool3",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "MaxPool3d_145": {
                "variable": {
                    "value": "self.pool4",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_147": {
                "variable": {
                    "value": "self.up6",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_149": {
                "variable": {
                    "value": "self.up7",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_151": {
                "variable": {
                    "value": "self.up8",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_153": {
                "variable": {
                    "value": "self.up9",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Conv3d_155": {
                "variable": {
                    "value": "self.conv10",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_168": {
                "variable": {
                    "value": "merge6",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[up_6, c4]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_171": {
                "variable": {
                    "value": "merge7",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[up_7, c3]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_174": {
                "variable": {
                    "value": "merge8",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[up_8, c2]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_177": {
                "variable": {
                    "value": "merge9",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[up_9, c1]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv3d_11": {
                "in_channels": {
                    "value": "in_ch",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "BatchNorm3d_12": {
                "num_features": {
                    "value": "out_ch",
                    "possible_values": []
                }
            },
            "ReLU_13": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv3d_14": {
                "in_channels": {
                    "value": "out_ch",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "BatchNorm3d_15": {
                "num_features": {
                    "value": "out_ch",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Sigmoid_129": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Sigmoid_130": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Sigmoid_180": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "python script AtrialJSQnet/visualization.py": {
        "torch": {}
    }
}