{
    "code/dataset/CD2014.py": {
        "torch": {
            "from_numpy_143": {
                "variable": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img1[:, :, ::-1]",
                            "Subscript"
                        ],
                        [
                            "img1.astype(np.float64)",
                            "Call"
                        ],
                        [
                            "img1 - cfg.T0_MEAN_VALUE",
                            "BinOp"
                        ],
                        [
                            "img1.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img1).float()",
                            "Call"
                        ],
                        [
                            "Image.open(img1_path)",
                            "Call"
                        ],
                        [
                            "self.transform_med(img1)",
                            "Call"
                        ],
                        [
                            "np.array(img1, dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "self.data_transform(img1, img2, label)",
                            "Call"
                        ],
                        [
                            "img1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_148": {
                "variable": {
                    "value": "img2",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img2[:, :, ::-1]",
                            "Subscript"
                        ],
                        [
                            "img2.astype(np.float64)",
                            "Call"
                        ],
                        [
                            "img2 - cfg.T1_MEAN_VALUE",
                            "BinOp"
                        ],
                        [
                            "img2.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img2).float()",
                            "Call"
                        ],
                        [
                            "Image.open(img2_path)",
                            "Call"
                        ],
                        [
                            "self.transform_med(img2)",
                            "Call"
                        ],
                        [
                            "np.array(img2, dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "self.data_transform(img1, img2, label)",
                            "Call"
                        ],
                        [
                            "img2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_150": {
                "variable": {
                    "value": "lbl",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lbl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(lbl).long()",
                            "Call"
                        ],
                        [
                            "lbl",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "code/dataset/CMU.py": {
        "torch": {
            "from_numpy_129": {
                "variable": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img1[:, :, ::-1]",
                            "Subscript"
                        ],
                        [
                            "img1.astype(np.float64)",
                            "Call"
                        ],
                        [
                            "img1 - cfg.T0_MEAN_VALUE",
                            "BinOp"
                        ],
                        [
                            "img1.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img1).float()",
                            "Call"
                        ],
                        [
                            "Image.open(img1_path)",
                            "Call"
                        ],
                        [
                            "self.transform_med(img1)",
                            "Call"
                        ],
                        [
                            "np.array(img1, dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "self.data_transform(img1, img2, label)",
                            "Call"
                        ],
                        [
                            "img1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_134": {
                "variable": {
                    "value": "img2",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img2[:, :, ::-1]",
                            "Subscript"
                        ],
                        [
                            "img2.astype(np.float64)",
                            "Call"
                        ],
                        [
                            "img2 - cfg.T1_MEAN_VALUE",
                            "BinOp"
                        ],
                        [
                            "img2.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img2).float()",
                            "Call"
                        ],
                        [
                            "Image.open(img2_path)",
                            "Call"
                        ],
                        [
                            "self.transform_med(img2)",
                            "Call"
                        ],
                        [
                            "np.array(img2, dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "self.data_transform(img1, img2, label)",
                            "Call"
                        ],
                        [
                            "img2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_135": {
                "variable": {
                    "value": "lbl",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lbl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(lbl).long()",
                            "Call"
                        ],
                        [
                            "lbl",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "code/dataset/GSV.py": {
        "torch": {
            "from_numpy_119": {
                "variable": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img1[:, :, ::-1]",
                            "Subscript"
                        ],
                        [
                            "img1.astype(np.float64)",
                            "Call"
                        ],
                        [
                            "img1 - cfg.T0_MEAN_VALUE",
                            "BinOp"
                        ],
                        [
                            "img1.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img1).float()",
                            "Call"
                        ],
                        [
                            "Image.open(img1_path)",
                            "Call"
                        ],
                        [
                            "self.transform_med(img1)",
                            "Call"
                        ],
                        [
                            "np.array(img1, dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "self.data_transform(img1, img2, label)",
                            "Call"
                        ],
                        [
                            "img1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_124": {
                "variable": {
                    "value": "img2",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img2[:, :, ::-1]",
                            "Subscript"
                        ],
                        [
                            "img2.astype(np.float64)",
                            "Call"
                        ],
                        [
                            "img2 - cfg.T1_MEAN_VALUE",
                            "BinOp"
                        ],
                        [
                            "img2.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img2).float()",
                            "Call"
                        ],
                        [
                            "Image.open(img2_path)",
                            "Call"
                        ],
                        [
                            "self.transform_med(img2)",
                            "Call"
                        ],
                        [
                            "np.array(img2, dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "self.data_transform(img1, img2, label)",
                            "Call"
                        ],
                        [
                            "img2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_125": {
                "variable": {
                    "value": "lbl",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lbl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(lbl).long()",
                            "Call"
                        ],
                        [
                            "lbl",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "code/dataset/TSUNAMI.py": {
        "torch": {
            "from_numpy_119": {
                "variable": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img1[:, :, ::-1]",
                            "Subscript"
                        ],
                        [
                            "img1.astype(np.float64)",
                            "Call"
                        ],
                        [
                            "img1 - (128.793, 108.267, 98.685)",
                            "BinOp"
                        ],
                        [
                            "img1.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img1).float()",
                            "Call"
                        ],
                        [
                            "Image.open(img1_path)",
                            "Call"
                        ],
                        [
                            "self.transform_med(img1)",
                            "Call"
                        ],
                        [
                            "np.array(img1, dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "self.data_transform(img1, img2, label)",
                            "Call"
                        ],
                        [
                            "img1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_124": {
                "variable": {
                    "value": "img2",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img2[:, :, ::-1]",
                            "Subscript"
                        ],
                        [
                            "img2.astype(np.float64)",
                            "Call"
                        ],
                        [
                            "img2 - (166.814, 136.916, 122.396)",
                            "BinOp"
                        ],
                        [
                            "img2.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img2).float()",
                            "Call"
                        ],
                        [
                            "Image.open(img2_path)",
                            "Call"
                        ],
                        [
                            "self.transform_med(img2)",
                            "Call"
                        ],
                        [
                            "np.array(img2, dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "self.data_transform(img1, img2, label)",
                            "Call"
                        ],
                        [
                            "img2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_125": {
                "variable": {
                    "value": "lbl",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lbl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(lbl).long()",
                            "Call"
                        ],
                        [
                            "lbl",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "code/layer/function.py": {
        "torch": {
            "bmm_18": {
                "variable": {
                    "value": "feature_mul",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_B.view(b, c, h * w).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "feature_B",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "feature_A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_A.transpose(2, 3).contiguous().view(b, c, h * w)",
                            "Call"
                        ],
                        [
                            "feature_A",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "code/layer/loss.py": {
        "torch": {
            "pairwise_distance_16": {
                "variable": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "out_vec_t0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_vec_t0",
                            "Method Argument"
                        ],
                        [
                            "out_vec_t0",
                            "Method Argument"
                        ],
                        [
                            "out_vec_t0",
                            "Method Argument"
                        ],
                        [
                            "out_vec_t0",
                            "Method Argument"
                        ]
                    ]
                },
                "x2": {
                    "value": "out_vec_t1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_vec_t1",
                            "Method Argument"
                        ],
                        [
                            "out_vec_t1",
                            "Method Argument"
                        ],
                        [
                            "out_vec_t1",
                            "Method Argument"
                        ],
                        [
                            "out_vec_t1",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_17": {
                "variable": {
                    "value": "similar_pair",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distance - self.threshold",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_18": {
                "variable": {
                    "value": "dissimilar_pair",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.margin - distance",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_20": {
                "variable": {
                    "value": "constractive_thresh_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1 - label) * torch.pow(similar_pair, 2) + label * torch.pow(dissimilar_pair, 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_48": {
                "variable": {
                    "value": "constractive_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1 - label) * torch.pow(distance, 2) + label * torch.pow(torch.clamp(self.margin - distance, min=0.0), 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_66": {
                "variable": {
                    "value": "out_t0_rz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_t0.view(c, h * w)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_67": {
                "variable": {
                    "value": "out_t1_rz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_t1.view(c, h * w)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_68": {
                "variable": {
                    "value": "gt_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(ground_truth.data.cpu().numpy(), np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_93": {
                "input": {
                    "value": "constrainted_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.select_param()",
                            "Call"
                        ],
                        [
                            "self.select_param()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_94": {
                "variable": {
                    "value": "matrix_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matrix_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(torch.squeeze(constrainted_matrix, dim=2), dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_95": {
                "variable": {
                    "value": "matrixs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matrix_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.t(matrix_)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "matrix_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(torch.squeeze(constrainted_matrix, dim=2), dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "trace_96": {
                "variable": {
                    "value": "trace_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mm(matrixs, torch.inverse(matrixs))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logdet_97": {
                "variable": {
                    "value": "log_det",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matrixs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(matrix_t, matrix_)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_119": {
                "input": {
                    "value": "constrainted_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.select_param()",
                            "Call"
                        ],
                        [
                            "self.select_param()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_120": {
                "variable": {
                    "value": "matrxi_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matrxi_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(torch.squeeze(constrainted_matrix, dim=2), dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_122": {
                "variable": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matrxi_contrainted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.mm(matrxi_t, matrxi_) - self.identity_matrix).view(self.dim ** 2)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_122": {
                "variable": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "range_129": {
                "variable": {
                    "value": "self.t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "step": {
                    "value": "self.step",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_148": {
                "variable": {
                    "value": "bh_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hist1 * hist2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_148": {
                "variable": {
                    "value": "bh_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "kl_div_157": {
                "variable": {
                    "value": "kl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hist1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hist1",
                            "Method Argument"
                        ],
                        [
                            "hist1",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "hist2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hist2",
                            "Method Argument"
                        ],
                        [
                            "hist2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "range_165": {
                "variable": {
                    "value": "self.t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "step": {
                    "value": "self.step",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_183": {
                "variable": {
                    "value": "out_t0_rz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat_t0.view(c, h * w)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_184": {
                "variable": {
                    "value": "out_t1_rz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat_t1.view(c, h * w)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_192": {
                "variable": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.various_distance(out_t0_rz, out_t1_rz)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pairwise_distance_35": {
                "variable": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "out_vec_t0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_vec_t0",
                            "Method Argument"
                        ],
                        [
                            "out_vec_t0",
                            "Method Argument"
                        ],
                        [
                            "out_vec_t0",
                            "Method Argument"
                        ],
                        [
                            "out_vec_t0",
                            "Method Argument"
                        ]
                    ]
                },
                "x2": {
                    "value": "out_vec_t1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_vec_t1",
                            "Method Argument"
                        ],
                        [
                            "out_vec_t1",
                            "Method Argument"
                        ],
                        [
                            "out_vec_t1",
                            "Method Argument"
                        ],
                        [
                            "out_vec_t1",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pairwise_distance_37": {
                "variable": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "out_vec_t0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_vec_t0",
                            "Method Argument"
                        ],
                        [
                            "out_vec_t0",
                            "Method Argument"
                        ],
                        [
                            "out_vec_t0",
                            "Method Argument"
                        ],
                        [
                            "out_vec_t0",
                            "Method Argument"
                        ]
                    ]
                },
                "x2": {
                    "value": "out_vec_t1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_vec_t1",
                            "Method Argument"
                        ],
                        [
                            "out_vec_t1",
                            "Method Argument"
                        ],
                        [
                            "out_vec_t1",
                            "Method Argument"
                        ],
                        [
                            "out_vec_t1",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cosine_similarity_39": {
                "variable": {
                    "value": "similarity",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "out_vec_t0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_vec_t0",
                            "Method Argument"
                        ],
                        [
                            "out_vec_t0",
                            "Method Argument"
                        ],
                        [
                            "out_vec_t0",
                            "Method Argument"
                        ],
                        [
                            "out_vec_t0",
                            "Method Argument"
                        ]
                    ]
                },
                "x2": {
                    "value": "out_vec_t1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_vec_t1",
                            "Method Argument"
                        ],
                        [
                            "out_vec_t1",
                            "Method Argument"
                        ],
                        [
                            "out_vec_t1",
                            "Method Argument"
                        ],
                        [
                            "out_vec_t1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pairwise_distance_171": {
                "variable": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "out_vec_t0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_vec_t0",
                            "Method Argument"
                        ],
                        [
                            "out_vec_t0",
                            "Method Argument"
                        ],
                        [
                            "out_vec_t0",
                            "Method Argument"
                        ],
                        [
                            "out_vec_t0",
                            "Method Argument"
                        ]
                    ]
                },
                "x2": {
                    "value": "out_vec_t1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_vec_t1",
                            "Method Argument"
                        ],
                        [
                            "out_vec_t1",
                            "Method Argument"
                        ],
                        [
                            "out_vec_t1",
                            "Method Argument"
                        ],
                        [
                            "out_vec_t1",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cosine_similarity_173": {
                "variable": {
                    "value": "similarity",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "out_vec_t0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_vec_t0",
                            "Method Argument"
                        ],
                        [
                            "out_vec_t0",
                            "Method Argument"
                        ],
                        [
                            "out_vec_t0",
                            "Method Argument"
                        ],
                        [
                            "out_vec_t0",
                            "Method Argument"
                        ]
                    ]
                },
                "x2": {
                    "value": "out_vec_t1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_vec_t1",
                            "Method Argument"
                        ],
                        [
                            "out_vec_t1",
                            "Method Argument"
                        ],
                        [
                            "out_vec_t1",
                            "Method Argument"
                        ],
                        [
                            "out_vec_t1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mm_96": {
                "input": {
                    "value": "matrixs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(matrix_t, matrix_)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.inverse(matrixs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_190": {
                "ndarray": {
                    "value": "neg_inds_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.squeeze(np.where(gt_np != 0), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_195": {
                "ndarray": {
                    "value": "neg_dist_ls.data.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "inverse_96": {
                "input": {
                    "value": "matrixs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(matrix_t, matrix_)",
                            "Call"
                        ]
                    ]
                }
            },
            "histc_196": {
                "input": {
                    "value": "pos_dist_ls_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(pos_dist_ls.data.cpu().numpy())",
                            "Call"
                        ]
                    ]
                },
                "bins": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "histc_197": {
                "input": {
                    "value": "neg_dist_ls_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(neg_dist_ls.data.cpu().numpy())",
                            "Call"
                        ]
                    ]
                },
                "bins": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_21": {
                "input": {
                    "value": "dissimilar_pair",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(self.margin - distance, min=0.0)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_48": {
                "input": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pairwise_distance(out_vec_t0, out_vec_t1, p=2)",
                            "Call"
                        ],
                        [
                            "F.pairwise_distance(out_vec_t0, out_vec_t1, p=2)",
                            "Call"
                        ],
                        [
                            "F.pairwise_distance(out_vec_t0, out_vec_t1, p=1)",
                            "Call"
                        ],
                        [
                            "1 - 2 * similarity / np.pi",
                            "BinOp"
                        ],
                        [
                            "self.various_distance(out_vec_t0, out_vec_t1)",
                            "Call"
                        ],
                        [
                            "F.pairwise_distance(out_vec_t0, out_vec_t1, p=2)",
                            "Call"
                        ],
                        [
                            "1 - 2 * similarity / np.pi",
                            "BinOp"
                        ],
                        [
                            "torch.squeeze(self.various_distance(out_t0_rz, out_t1_rz), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_49": {
                "input": {
                    "value": "torch.clamp(self.margin - distance, min=0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_69": {
                "input": {
                    "value": "gt_tensor.view(1, h * w)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_81": {
                "ndarray": {
                    "value": "np.identity(self.dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_107": {
                "ndarray": {
                    "value": "np.identity(self.dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_121": {
                "input": {
                    "value": "matrxi_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.t(matrxi_)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "matrxi_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(torch.squeeze(constrainted_matrix, dim=2), dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_49": {
                "input": {
                    "value": "self.margin - distance",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "code/model/deeplab_msc_coco.py": {
        "torch": {
            "Sequential_18": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=3, out_channels=64, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=64, out_channels=128, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=128, out_channels=256, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=256, out_channels=512, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=512, out_channels=512, kernel_size=3, dilation=2, stride=1, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "self.fc6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=512, out_channels=1024, kernel_size=3, dilation=12, padding=12)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_65": {
                "variable": {
                    "value": "self.fc7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=1024, out_channels=1024, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_89": {
                "variable": {
                    "value": "self.scale_attention_branch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=1024 * 3, out_channels=512, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_96": {
                "variable": {
                    "value": "self.fc8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "class_number",
                    "type": "variable",
                    "possible_values": [
                        [
                            "21",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_101": {
                "variable": {
                    "value": "self.interp1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(int(input_size * 0.75) + 1, int(input_size * 0.75) + 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Upsample_102": {
                "variable": {
                    "value": "self.interp2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(int(input_size * 0.5) + 1, int(input_size * 0.5) + 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Upsample_103": {
                "variable": {
                    "value": "self.interp3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(outS(input_size), outS(input_size))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_115": {
                "variable": {
                    "value": "out_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_118": {
                "variable": {
                    "value": "scale_att_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.scale_attention_branch(out_cat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_125": {
                "variable": {
                    "value": "score_att_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc8(fc7_x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "scale_att_mask[:, 0, :, :].expand_as(score_x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_126": {
                "variable": {
                    "value": "score_att_x_075",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score_x75",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.interp3(self.fc8(fc7_x75))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "scale_att_mask[:, 1, :, :].expand_as(score_x75)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_127": {
                "variable": {
                    "value": "score_att_x_050",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score_x50",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.interp3(self.fc8(fc7_x50))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "scale_att_mask[:, 2, :, :].expand_as(score_x50)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_22": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_23": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_30": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_38": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_39": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_47": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_48": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_52": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_54": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_56": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_57": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_58": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_67": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_91": {
                "in_channels": {
                    "value": "1024 * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_92": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_94": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "code/model/siameseNet/deeplab_v2.py": {
        "torch": {
            "Sequential_30": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=3, out_channels=64, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=64, out_channels=128, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=128, out_channels=256, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=256, out_channels=512, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=512, out_channels=512, kernel_size=3, dilation=2, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_73": {
                "variable": {
                    "value": "self.fc6_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=512, out_channels=1024, kernel_size=3, dilation=6, padding=6)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "variable": {
                    "value": "self.fc7_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=1024, out_channels=1024, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "variable": {
                    "value": "self.fc6_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=512, out_channels=1024, kernel_size=3, dilation=12, padding=12)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_89": {
                "variable": {
                    "value": "self.fc7_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=1024, out_channels=1024, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_95": {
                "variable": {
                    "value": "self.fc6_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=512, out_channels=1024, kernel_size=3, dilation=18, padding=18)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_100": {
                "variable": {
                    "value": "self.fc7_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=1024, out_channels=1024, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_106": {
                "variable": {
                    "value": "self.fc6_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=512, out_channels=1024, kernel_size=3, dilation=24, padding=24)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_111": {
                "variable": {
                    "value": "self.fc7_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=1024, out_channels=1024, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_116": {
                "variable": {
                    "value": "self.embedding_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax2d_153": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_35": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_42": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_46": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_48": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_50": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_51": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_55": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_57": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_59": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_60": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_64": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_66": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_68": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_75": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_76": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_80": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_81": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_85": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_86": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_87": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_91": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_92": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_96": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "18",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "18",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_97": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_98": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_101": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_102": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_103": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_107": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "24",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "24",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_108": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_109": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_112": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_113": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_114": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "code/model/siameseNet/fcn32s_tiny.py": {
        "torch": {
            "Sequential_13": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=3, out_channels=64, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_20": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=64, out_channels=128, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_27": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=128, out_channels=256, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=256, out_channels=512, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=512, out_channels=512, kernel_size=3, dilation=2, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "variable": {
                    "value": "self.embedding_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_132": {
                "ndarray": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((in_channels, out_channels, kernel_size, kernel_size), dtype=np.float64)",
                            "Call"
                        ]
                    ]
                }
            },
            "Softmax2d_56": {
                "variable": {
                    "value": "self.fc8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_18": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_22": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_25": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_34": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_38": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_43": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_47": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_49": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_51": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_52": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "code/model/vgg1024.py": {
        "torch": {
            "Sequential_13": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(512, 1024, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "21",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "variable": {
                    "value": "conv2d",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "v",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_37": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_39": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_43": {
                "num_features": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg",
                            "variable"
                        ]
                    ]
                }
            },
            "ReLU_43": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "code/train.py": {
        "torch": {}
    },
    "code/utils/transforms.py": {
        "torch": {
            "from_numpy_55": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pic.transpose((2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_66": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(pic, np.int32, copy=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_tensor_108": {
                "obj": {
                    "value": "pic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pic.mul(255).byte()",
                            "Call"
                        ],
                        [
                            "pic",
                            "Method Argument"
                        ],
                        [
                            "pic",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_62": {
                "ndarray": {
                    "value": "nppic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([pic.channels, pic.height, pic.width], dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_68": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(pic, np.int16, copy=False)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "code/utils/tsne_visual.py": {
        "torch": {}
    },
    "code/utils/utils.py": {
        "torch": {
            "load_17": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_file",
                            "Method Argument"
                        ],
                        [
                            "model_file",
                            "Method Argument"
                        ],
                        [
                            "model_file",
                            "Method Argument"
                        ],
                        [
                            "model_file",
                            "Method Argument"
                        ],
                        [
                            "model_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_25": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_file",
                            "Method Argument"
                        ],
                        [
                            "model_file",
                            "Method Argument"
                        ],
                        [
                            "model_file",
                            "Method Argument"
                        ],
                        [
                            "model_file",
                            "Method Argument"
                        ],
                        [
                            "model_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_33": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_file",
                            "Method Argument"
                        ],
                        [
                            "model_file",
                            "Method Argument"
                        ],
                        [
                            "model_file",
                            "Method Argument"
                        ],
                        [
                            "model_file",
                            "Method Argument"
                        ],
                        [
                            "model_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_41": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_file",
                            "Method Argument"
                        ],
                        [
                            "model_file",
                            "Method Argument"
                        ],
                        [
                            "model_file",
                            "Method Argument"
                        ],
                        [
                            "model_file",
                            "Method Argument"
                        ],
                        [
                            "model_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_49": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_file",
                            "Method Argument"
                        ],
                        [
                            "model_file",
                            "Method Argument"
                        ],
                        [
                            "model_file",
                            "Method Argument"
                        ],
                        [
                            "model_file",
                            "Method Argument"
                        ],
                        [
                            "model_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Upsample_223": {
                "variable": {
                    "value": "interp",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(size[0], size[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_229": {
                "ndarray": {
                    "value": "np.squeeze(label_resized, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_226": {
                "ndarray": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.expand_dims(label, axis=0)",
                            "Call"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}