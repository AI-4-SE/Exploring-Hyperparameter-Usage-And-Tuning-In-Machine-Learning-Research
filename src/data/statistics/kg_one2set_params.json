{
    "inference/beam.py": {
        "torch": {
            "zeros_52": {
                "variable": {
                    "value": "self.eos_counters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_82": {
                "tensors": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "min_237": {
                "input": {
                    "value": "beam.attn[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_237": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "inference/evaluate.py": {
        "torch": {
            "no_grad_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "input_tgt",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y_t_init, target[:, :, :-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_82": {
                "variable": {
                    "value": "input_tgt",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y_t_init, trg[:, :-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_51": {
                "variable": {
                    "value": "decoder_dists",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "decoder_dists",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(decoder_dists, -2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "inference/penalties.py": {
        "torch": {
            "max_50": {
                "variable": {
                    "value": "penalty",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cov",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_50": {
                "variable": {
                    "value": "penalty",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_43": {
                "input": {
                    "value": "cov",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_43": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "inference/sequence_generator.py": {
        "torch": {
            "log_160": {
                "variable": {
                    "value": "log_decoder_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "decoder_dist + EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_127": {
                "data": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_152": {
                "variable": {
                    "value": "decoder_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[decoder_inputs, decoder_input]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_141": {
                "tensors": {
                    "value": "[b.get_current_tokens() for b in beam_list]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "t_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "inference/set_generator.py": {
        "torch": {
            "cat_51": {
                "tensors": {
                    "value": "attn_dict_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_51": {
                "input": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "src.size(0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "max_kp_num * max_kp_len",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_52": {
                "tensors": {
                    "value": "decoder_score_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_52": {
                "input": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "src.size(0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "max_kp_num * max_kp_len",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "predict.py": {
        "torch": {
            "is_available_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_24": {
                "variable": {
                    "value": "opt.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:%d' % opt.gpuid",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_26": {
                "variable": {
                    "value": "opt.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_63": {
                "obj": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "build_interactive_predict_dataset(tokenized_src, opt, mode=mode, include_original=True)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "open(opt.exp_path + '/test_%s.pt' % mode, 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_35": {
                "f": {
                    "value": "opt.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "preprocess.py": {
        "torch": {
            "save_59": {
                "obj": {
                    "value": "vocab",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'word2idx': word2idx, 'idx2word': idx2word, 'counter': token_freq_counter}",
                            "Dict"
                        ],
                        [
                            "build_vocab(tokenized_train_pairs)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "open(opt.save_data_dir + '/vocab.pt', 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_65": {
                "obj": {
                    "value": "train_one2one",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "io.build_dataset(tokenized_train_pairs, opt, mode='one2one')",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "open(opt.save_data_dir + '/train.one2one.pt', 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_71": {
                "obj": {
                    "value": "valid_one2one",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "io.build_dataset(tokenized_valid_pairs, opt, mode='one2one')",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "open(opt.save_data_dir + '/valid.one2one.pt', 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_79": {
                "obj": {
                    "value": "train_one2many",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "io.build_dataset(tokenized_train_pairs, opt, mode='one2many')",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "open(opt.save_data_dir + '/train.one2many.pt', 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_85": {
                "obj": {
                    "value": "valid_one2many",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "io.build_dataset(tokenized_valid_pairs, opt, mode='one2many')",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "open(opt.save_data_dir + '/valid.one2many.pt', 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "pykp/decoder/transformer.py": {
        "torch": {
            "LayerNorm_32": {
                "variable": {
                    "value": "self.self_attn_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_35": {
                "variable": {
                    "value": "self.encoder_attn_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.ffn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.d_model, self.dim_ff)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LayerNorm_43": {
                "variable": {
                    "value": "self.final_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_64": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.ffn(x)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "F.dropout(embed, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.reshape(batch_size, max_kp_num * kp_len, -1)",
                            "Call"
                        ],
                        [
                            "F.dropout(embed, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.output_fc(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_75": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.ffn(x)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "F.dropout(embed, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.reshape(batch_size, max_kp_num * kp_len, -1)",
                            "Call"
                        ],
                        [
                            "F.dropout(embed, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.output_fc(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_111": {
                "variable": {
                    "value": "self.input_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embed.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_112": {
                "variable": {
                    "value": "self.layer_stacks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[TransformerSeq2SeqDecoderLayer(d_model, n_head, dim_ff, dropout, layer_idx, fix_kp_num_len, max_kp_num) for layer_idx in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LayerNorm_116": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_119": {
                "variable": {
                    "value": "self.output_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embed.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_120": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embed.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "arange_153": {
                "variable": {
                    "value": "control_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.max_kp_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_153": {
                "variable": {
                    "value": "control_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_228": {
                "variable": {
                    "value": "vocab_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.output_layer(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_271": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_kp_num * max_kp_len",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "max_kp_num * max_kp_len",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tril_272": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones(max_kp_num * max_kp_len, max_kp_num * max_kp_len)",
                            "Call"
                        ],
                        [
                            "torch.tril(mask).bool()",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_124": {
                "variable": {
                    "value": "self.p_gen_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embed.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_130": {
                "variable": {
                    "value": "self.control_code",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "max_kp_num",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ],
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "self.embed.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_176": {
                "variable": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "decode_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "state.decode_length // self.max_kp_num",
                            "BinOp"
                        ]
                    ]
                },
                "end": {
                    "value": "decode_length + kp_len",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_176": {
                "variable": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_181": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.input_fc(word_embed) + position_embed + control_embed.reshape(batch_size, max_kp_num, 1, -1)",
                            "BinOp"
                        ],
                        [
                            "self.input_fc(word_embed) + position_embed",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_212": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.input_fc(word_embed) + position_embed + control_embed.reshape(batch_size, max_kp_num, 1, -1)",
                            "BinOp"
                        ],
                        [
                            "self.input_fc(word_embed) + position_embed",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tril_267": {
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tokens.new_ones(tokens.size(1), tokens.size(1))",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_37": {
                "in_features": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim_ff",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_39": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_40": {
                "in_features": {
                    "value": "self.dim_ff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_41": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_239": {
                "variable": {
                    "value": "vocab_dist_",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(vocab_dist_, extra_zeros)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_205": {
                "start": {
                    "value": "state.decode_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "end": {
                    "value": "state.decode_length + tokens.size(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pykp/encoder/transformer.py": {
        "torch": {
            "LayerNorm_28": {
                "variable": {
                    "value": "self.attn_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_29": {
                "variable": {
                    "value": "self.ffn_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_31": {
                "variable": {
                    "value": "self.ffn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.d_model, self.dim_ff)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_50": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.ffn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.ffn(x)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.embed(src) * self.embed_scale",
                            "BinOp"
                        ],
                        [
                            "x + self.pos_embed(position)",
                            "BinOp"
                        ],
                        [
                            "self.input_fc(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "layer(x, src_mask)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_83": {
                "variable": {
                    "value": "self.input_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embed.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_84": {
                "variable": {
                    "value": "self.layer_stacks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[TransformerSeq2SeqEncoderLayer(d_model, n_head, dim_ff, dropout) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LayerNorm_86": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_112": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.ffn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.ffn(x)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.embed(src) * self.embed_scale",
                            "BinOp"
                        ],
                        [
                            "x + self.pos_embed(position)",
                            "BinOp"
                        ],
                        [
                            "self.input_fc(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "layer(x, src_mask)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_108": {
                "variable": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_src_len + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_108": {
                "variable": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim_ff",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_33": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_34": {
                "in_features": {
                    "value": "self.dim_ff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_35": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "pykp/model.py": {
        "torch": {
            "Embedding_15": {
                "variable": {
                    "value": "embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "opt.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "opt.word_vec_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "opt.vocab['word2idx'][io.PAD_WORD]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "pykp/modules/multi_head_attn.py": {
        "torch": {
            "Linear_23": {
                "variable": {
                    "value": "self.q_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.k_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.v_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "einsum_93": {
                "variable": {
                    "value": "attn_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bqnh,bknh->bqkn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.q_proj(query)",
                            "Call"
                        ],
                        [
                            "q * self.scaling",
                            "BinOp"
                        ],
                        [
                            "q.reshape(batch_size, q_len, self.n_head, self.head_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_103": {
                "variable": {
                    "value": "attn_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.einsum('bqnh,bknh->bqkn', q, k)",
                            "Call"
                        ],
                        [
                            "attn_weights.masked_fill(_key_mask, -float('inf'))",
                            "Call"
                        ],
                        [
                            "attn_weights.masked_fill(_attn_mask, -float('inf'))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_weights, dim=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn_weights, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_104": {
                "variable": {
                    "value": "attn_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.einsum('bqnh,bknh->bqkn', q, k)",
                            "Call"
                        ],
                        [
                            "attn_weights.masked_fill(_key_mask, -float('inf'))",
                            "Call"
                        ],
                        [
                            "attn_weights.masked_fill(_attn_mask, -float('inf'))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_weights, dim=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn_weights, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_106": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bqkn,bknh->bqnh",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attn_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.einsum('bqnh,bknh->bqkn', q, k)",
                            "Call"
                        ],
                        [
                            "attn_weights.masked_fill(_key_mask, -float('inf'))",
                            "Call"
                        ],
                        [
                            "attn_weights.masked_fill(_attn_mask, -float('inf'))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_weights, dim=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn_weights, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_71": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prev_k, k.unsqueeze(-2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_71": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prev_v, v.unsqueeze(-2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_72": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_74": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prev_k, k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_75": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prev_v, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pykp/modules/position_embed.py": {
        "torch": {}
    },
    "pykp/utils/io.py": {
        "torch": {
            "ne_75": {
                "variable": {
                    "value": "input_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "padded_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.word2idx[PAD_WORD] * np.ones((len(input_list), max_seq_len))",
                            "BinOp"
                        ],
                        [
                            "torch.LongTensor(padded_batch)",
                            "Call"
                        ],
                        [
                            "torch.LongTensor(input_list)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.word2idx[PAD_WORD]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ne_84": {
                "variable": {
                    "value": "input_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "padded_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.word2idx[PAD_WORD] * np.ones((len(input_list), max_seq_len))",
                            "BinOp"
                        ],
                        [
                            "torch.LongTensor(padded_batch)",
                            "Call"
                        ],
                        [
                            "torch.LongTensor(input_list)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.word2idx[PAD_WORD]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "pykp/utils/label_assign.py": {
        "torch": {
            "rand_50": {
                "variable": {
                    "value": "decoder_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 3, 2, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_50": {
                "variable": {
                    "value": "decoder_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randint_51": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "(1, 3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_52": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "(1, 3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_53": {
                "variable": {
                    "value": "trg_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "(1, 3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "manual_seed_48": {
                "seed": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_15": {
                "start": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "pykp/utils/masked_loss.py": {
        "torch": {
            "log_16": {
                "variable": {
                    "value": "log_dist_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "class_dist_flat + EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_17": {
                "input": {
                    "value": "log_dist_flat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.log(class_dist_flat + EPS)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "target_flat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target.reshape(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pykp/utils/seq2seq_state.py": {
        "torch": {}
    },
    "train.py": {
        "torch": {
            "Adam_56": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.998)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-09",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_31": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "open(os.path.join(opt.model_path, 'initial.config'), 'rb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_40": {
                "variable": {
                    "value": "opt.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:%d' % opt.gpuid",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_42": {
                "variable": {
                    "value": "opt.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_35": {
                "obj": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "process_opt(opt)",
                            "Call"
                        ],
                        [
                            "common_process_opt(opt)",
                            "Call"
                        ],
                        [
                            "torch.load(open(os.path.join(opt.model_path, 'initial.config'), 'rb'))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "open(os.path.join(opt.model_path, 'initial.config'), 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_71": {
                "f": {
                    "value": "opt.train_from",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train_ml.py": {
        "torch": {
            "cat_185": {
                "variable": {
                    "value": "input_tgt",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y_t_init, target[:, :, :-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_194": {
                "variable": {
                    "value": "input_tgt",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y_t_init, trg[:, :-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__243": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "opt.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_160": {
                "variable": {
                    "value": "decoder_dists",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "decoder_dists",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(decoder_dists, -2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_85": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "open(check_pt_model_path, 'wb')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/data_loader.py": {
        "torch": {
            "load_12": {
                "variable": {
                    "value": "vocab",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.vocab + '/vocab.pt'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "wb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_30": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "keyphrase_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "KeyphraseDataset.build(examples=data, opt=opt, load_train=load_train)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collect_fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "keyphrase_dataset.collate_fn_one2one",
                            "Attribute"
                        ],
                        [
                            "keyphrase_dataset.collate_fn_fixed_tgt",
                            "Attribute"
                        ],
                        [
                            "keyphrase_dataset.collate_fn_one2seq",
                            "Attribute"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "opt.batch_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_47": {
                "variable": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "data_path % 'train'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "wb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_52": {
                "variable": {
                    "value": "valid_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "data_path % 'valid'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "wb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_57": {
                "variable": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "data_path % 'test'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "wb",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "utils/functions.py": {
        "torch": {
            "manual_seed_17": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_20": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_21": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    }
}