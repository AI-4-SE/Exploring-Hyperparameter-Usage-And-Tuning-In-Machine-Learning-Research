{
    "examples/ImageRecon/GEOmetrics/utils.py": {
        "sklearn": {},
        "torch": {
            "mm_65": {
                "variable": {
                    "value": "positions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "positions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "positions * 0.57",
                            "BinOp"
                        ],
                        [
                            "positions - cam_pos",
                            "BinOp"
                        ],
                        [
                            "torch.mm(positions, cam_mat.permute(1, 0))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "cam_mat.permute(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_179": {
                "variable": {
                    "value": "normal_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(vertex_norms * vertex_neighbors, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_239": {
                "variable": {
                    "value": "p1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "verts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "meshes['update'][index].vertices",
                            "Attribute"
                        ],
                        [
                            "verts_and_features[:, :3]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "faces[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_240": {
                "variable": {
                    "value": "p2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "verts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "meshes['update'][index].vertices",
                            "Attribute"
                        ],
                        [
                            "verts_and_features[:, :3]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "faces[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_241": {
                "variable": {
                    "value": "p3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "verts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "meshes['update'][index].vertices",
                            "Attribute"
                        ],
                        [
                            "verts_and_features[:, :3]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "faces[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cross_246": {
                "variable": {
                    "value": "face_normals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "e1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p2 - p1",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "e2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p3 - p1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "norm_247": {
                "variable": {
                    "value": "qn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "face_normals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(e1, e2)",
                            "Call"
                        ],
                        [
                            "face_normals.div(qn.expand_as(face_normals))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_249": {
                "variable": {
                    "value": "main_face_normals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "face_normals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(e1, e2)",
                            "Call"
                        ],
                        [
                            "face_normals.div(qn.expand_as(face_normals))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "face_list[:, 0, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_253": {
                "variable": {
                    "value": "face_1_normals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "face_normals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(e1, e2)",
                            "Call"
                        ],
                        [
                            "face_normals.div(qn.expand_as(face_normals))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "face_list[:, 0, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_254": {
                "variable": {
                    "value": "curvature_proxi_rad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "main_face_normals * face_1_normals",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_254": {
                "variable": {
                    "value": "curvature_proxi_rad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1.0 + eps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1.0 - eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "acos_254": {
                "variable": {
                    "value": "curvature_proxi_rad",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "index_select_257": {
                "variable": {
                    "value": "face_2_normals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "face_normals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(e1, e2)",
                            "Call"
                        ],
                        [
                            "face_normals.div(qn.expand_as(face_normals))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "face_list[:, 1, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_258": {
                "variable": {
                    "value": "curvature_proxi_rad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "main_face_normals * face_2_normals",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_258": {
                "variable": {
                    "value": "curvature_proxi_rad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1.0 + eps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1.0 - eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "acos_258": {
                "variable": {
                    "value": "curvature_proxi_rad",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "index_select_261": {
                "variable": {
                    "value": "face_3_normals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "face_normals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(e1, e2)",
                            "Call"
                        ],
                        [
                            "face_normals.div(qn.expand_as(face_normals))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "face_list[:, 2, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_262": {
                "variable": {
                    "value": "curvature_proxi_rad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "main_face_normals * face_3_normals",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_262": {
                "variable": {
                    "value": "curvature_proxi_rad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1.0 + eps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1.0 - eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "acos_262": {
                "variable": {
                    "value": "curvature_proxi_rad",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_266": {
                "variable": {
                    "value": "curvature_proxi_full",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(curvature_proxi_1, curvature_proxi_2, curvature_proxi_3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_267": {
                "variable": {
                    "value": "curvature_proxi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "curvature_proxi_full",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((curvature_proxi_1, curvature_proxi_2, curvature_proxi_3), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_307": {
                "variable": {
                    "value": "mx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r_mat_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(r_inv.shape[0]).to(mx.device) * r_inv",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "mx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(r_mat_inv, mx)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_327": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(A * C * G + H * D * A + G * E * B + B * F * H).permute(1, 0)",
                            "Call"
                        ],
                        [
                            "features.permute(1, 0)",
                            "Call"
                        ],
                        [
                            "torch.cat((features, new_features), dim=1).permute(1, 0)",
                            "Call"
                        ],
                        [
                            "verts_and_features[:, 3:]",
                            "Subscript"
                        ]
                    ]
                },
                "mat2": {
                    "value": "split_mx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_328": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(features, new_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_328": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_374": {
                "variable": {
                    "value": "splitting_face_list_values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "face_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((len(mesh.faces), 3, 3))",
                            "Call"
                        ],
                        [
                            "meshes['face_lists'][index]",
                            "Subscript"
                        ],
                        [
                            "meshes['face_lists'][index].clone()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "split_faces",
                    "type": "variable",
                    "possible_values": [
                        [
                            "faces_verts[splitting_faces_indecies]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_377": {
                "variable": {
                    "value": "counter",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "face_list.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_380": {
                "variable": {
                    "value": "unsplitting_face_list_values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "face_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((len(mesh.faces), 3, 3))",
                            "Call"
                        ],
                        [
                            "meshes['face_lists'][index]",
                            "Subscript"
                        ],
                        [
                            "meshes['face_lists'][index].clone()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.LongTensor(unsplitting_faces_list_indecies).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_391": {
                "variable": {
                    "value": "splitting_new_faces_indecies",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(new_faces_indecies_1, new_faces_indecies_2, new_faces_indecies_3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_392": {
                "variable": {
                    "value": "unsplitting_new_faces_indecies",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(unsplitting_faces_indecies.view(-1, 1), unsplitting_faces_indecies.view(-1, 1), unsplitting_faces_indecies.view(-1, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_395": {
                "variable": {
                    "value": "new_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(faces_verts.shape[0], 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_411": {
                "variable": {
                    "value": "new_unsplitting_face_list_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(unsplitting_connecting_face_1, unsplitting_connecting_side_1, unsplitting_face_number)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_412": {
                "variable": {
                    "value": "new_unsplitting_face_list_2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(unsplitting_connecting_face_2, unsplitting_connecting_side_2, unsplitting_face_number)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_413": {
                "variable": {
                    "value": "new_unsplitting_face_list_3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(unsplitting_connecting_face_3, unsplitting_connecting_side_3, unsplitting_face_number)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_414": {
                "variable": {
                    "value": "new_unsplitting_face_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(new_unsplitting_face_list_1, new_unsplitting_face_list_2, new_unsplitting_face_list_3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_424": {
                "variable": {
                    "value": "splitting_connecting_side_1_2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "splitting_face_list_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "splitting_face_list_values.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_425": {
                "variable": {
                    "value": "splitting_connecting_side_1_3",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "splitting_face_list_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "splitting_face_list_values.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_428": {
                "variable": {
                    "value": "new_splitting_face_list_1_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(splitting_connecting_face_1_1, splitting_connecting_side_1_1, splitting_face_number_1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_429": {
                "variable": {
                    "value": "new_splitting_face_list_1_2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(splitting_connecting_face_1_2, splitting_connecting_side_1_2, splitting_face_number_1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_430": {
                "variable": {
                    "value": "new_splitting_face_list_1_3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(splitting_connecting_face_1_3, splitting_connecting_side_1_3, splitting_face_number_1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_431": {
                "variable": {
                    "value": "new_splitting_face_list_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(new_splitting_face_list_1_1, new_splitting_face_list_1_2, new_splitting_face_list_1_3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_438": {
                "variable": {
                    "value": "splitting_connecting_side_2_1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "splitting_face_list_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "splitting_face_list_values.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_440": {
                "variable": {
                    "value": "splitting_connecting_side_2_3",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "splitting_face_list_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "splitting_face_list_values.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_443": {
                "variable": {
                    "value": "new_splitting_face_list_2_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(splitting_connecting_face_2_1, splitting_connecting_side_2_1, splitting_face_number_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_444": {
                "variable": {
                    "value": "new_splitting_face_list_2_2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(splitting_connecting_face_2_2, splitting_connecting_side_2_2, splitting_face_number_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_445": {
                "variable": {
                    "value": "new_splitting_face_list_2_3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(splitting_connecting_face_2_3, splitting_connecting_side_2_3, splitting_face_number_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_446": {
                "variable": {
                    "value": "new_splitting_face_list_2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(new_splitting_face_list_2_1, new_splitting_face_list_2_2, new_splitting_face_list_2_3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_459": {
                "variable": {
                    "value": "new_splitting_face_list_3_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(splitting_connecting_face_3_1, splitting_connecting_side_3_1, splitting_face_number_3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_460": {
                "variable": {
                    "value": "new_splitting_face_list_3_2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(splitting_connecting_face_3_2, splitting_connecting_side_3_2, splitting_face_number_3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_461": {
                "variable": {
                    "value": "new_splitting_face_list_3_3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(splitting_connecting_face_3_3, splitting_connecting_side_3_3, splitting_face_number_3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_462": {
                "variable": {
                    "value": "new_splitting_face_list_3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(new_splitting_face_list_3_1, new_splitting_face_list_3_2, new_splitting_face_list_3_3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_466": {
                "variable": {
                    "value": "new_splitting_face_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(new_unsplitting_face_list, new_splitting_face_list_1, new_splitting_face_list_2, new_splitting_face_list_3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_477": {
                "variable": {
                    "value": "verts_and_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(meshes['update'][index].vertices, features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_483": {
                "variable": {
                    "value": "verts_and_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(verts_and_features, v1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_492": {
                "variable": {
                    "value": "new_face_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_f, y_f, v1_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_493": {
                "variable": {
                    "value": "new_face_2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(v1_inds, y_f, z_f)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_494": {
                "variable": {
                    "value": "new_face_3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_f, v1_inds, z_f)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_496": {
                "variable": {
                    "value": "face_archive",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(faces_verts, new_face_1, new_face_2, new_face_3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "clamp_77": {
                "variable": {
                    "value": "cur_xs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "positions_xs * focal_length + dim / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "dim - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_78": {
                "variable": {
                    "value": "cur_ys",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "positions_ys * focal_length + dim / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "dim - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_110": {
                "variable": {
                    "value": "data_meta[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "data_meta[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_133": {
                "variable": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "block",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block[index]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "x1s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pooling_indices['x1s'][i_block]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "index_select_134": {
                "variable": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(block, 1, x1s).view(block.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(C, 1, y1s)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "y1s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y1s + torch.arange(positions.shape[0]).float().to(device) * dim",
                            "BinOp"
                        ],
                        [
                            "pooling_indices['y1s'][i_block]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "index_select_135": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "block",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block[index]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "x1s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pooling_indices['x1s'][i_block]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "index_select_136": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(block, 1, x1s).view(block.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(D, 1, y2s)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "y2s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y2s + torch.arange(positions.shape[0]).float().to(device) * dim",
                            "BinOp"
                        ],
                        [
                            "pooling_indices['y2s'][i_block]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "index_select_137": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "block",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block[index]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "x2s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pooling_indices['x2s'][i_block]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "index_select_138": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(block, 1, x2s).view(block.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(E, 1, y1s)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "y1s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y1s + torch.arange(positions.shape[0]).float().to(device) * dim",
                            "BinOp"
                        ],
                        [
                            "pooling_indices['y1s'][i_block]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "index_select_139": {
                "variable": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "block",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block[index]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "x2s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pooling_indices['x2s'][i_block]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "index_select_140": {
                "variable": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(block, 1, x2s).view(block.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(F, 1, y2s)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "y2s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y2s + torch.arange(positions.shape[0]).float().to(device) * dim",
                            "BinOp"
                        ],
                        [
                            "pooling_indices['y2s'][i_block]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_42": {
                "variable": {
                    "value": "new_info",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_info",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple((d[k] for d in data))",
                            "Call"
                        ],
                        [
                            "torch.stack(new_info, 0)",
                            "Call"
                        ],
                        [
                            "tuple((d[k] for d in data))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_146": {
                "variable": {
                    "value": "full_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(full_features, features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_179": {
                "input": {
                    "value": "vertex_norms * vertex_neighbors",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_306": {
                "n": {
                    "value": "r_inv.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_358": {
                "input": {
                    "value": "(meshes['init'][1].vertices - meshes['update'][1].vertices) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_358": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_359": {
                "input": {
                    "value": "(meshes['init'][2].vertices - meshes['update'][2].vertices) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_359": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_388": {
                "start": {
                    "value": "splitting_face_list_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "splitting_face_list_values.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_454": {
                "*size": {
                    "value": "splitting_face_list_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "splitting_face_list_values.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_455": {
                "*size": {
                    "value": "splitting_face_list_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "splitting_face_list_values.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "floor_90": {
                "input": {
                    "value": "cur_ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(ys, 0, dim - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ceil_90": {
                "input": {
                    "value": "cur_ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(ys, 0, dim - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_97": {
                "start": {
                    "value": "positions.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_98": {
                "start": {
                    "value": "positions.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_487": {
                "start": {
                    "value": "split_faces.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "examples/ImageRecon/Pixel2Mesh/utils.py": {
        "sklearn": {},
        "torch": {
            "mm_42": {
                "variable": {
                    "value": "positions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "positions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "positions * 0.57",
                            "BinOp"
                        ],
                        [
                            "positions - cam_pos",
                            "BinOp"
                        ],
                        [
                            "torch.mm(positions, cam_mat.permute(1, 0))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "cam_mat.permute(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_156": {
                "variable": {
                    "value": "normal_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(vertex_norms * vertex_neighbors, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_199": {
                "variable": {
                    "value": "mx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r_mat_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(r_inv.shape[0]).to(mx.device) * r_inv",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "mx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(r_mat_inv, mx)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_258": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(A * C * G + H * D * A + G * E * B + B * F * H).permute(1, 0)",
                            "Call"
                        ],
                        [
                            "features.permute(1, 0)",
                            "Call"
                        ],
                        [
                            "torch.cat((features, new_features), dim=1).permute(1, 0)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "split_mx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(columns).to(face.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_259": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(features, new_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_259": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_55": {
                "variable": {
                    "value": "cur_xs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "positions_xs * focal_length + dim / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "dim - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_56": {
                "variable": {
                    "value": "cur_ys",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "positions_ys * focal_length + dim / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "dim - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_86": {
                "variable": {
                    "value": "data_meta[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "data_meta[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_109": {
                "variable": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "block",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "x1s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pooling_indices['x1s'][i_block]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "index_select_110": {
                "variable": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(block, 1, x1s).view(block.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(C, 1, y1s)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "y1s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y1s + torch.arange(positions.shape[0]).float().to(positions.device) * dim",
                            "BinOp"
                        ],
                        [
                            "pooling_indices['y1s'][i_block]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "index_select_111": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "block",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "x1s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pooling_indices['x1s'][i_block]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "index_select_112": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(block, 1, x1s).view(block.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(D, 1, y2s)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "y2s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y2s + torch.arange(positions.shape[0]).float().to(positions.device) * dim",
                            "BinOp"
                        ],
                        [
                            "pooling_indices['y2s'][i_block]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "index_select_113": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "block",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "x2s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pooling_indices['x2s'][i_block]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "index_select_114": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(block, 1, x2s).view(block.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(E, 1, y1s)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "y1s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y1s + torch.arange(positions.shape[0]).float().to(positions.device) * dim",
                            "BinOp"
                        ],
                        [
                            "pooling_indices['y1s'][i_block]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "index_select_115": {
                "variable": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "block",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "x2s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pooling_indices['x2s'][i_block]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "index_select_116": {
                "variable": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(block, 1, x2s).view(block.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(F, 1, y2s)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "y2s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y2s + torch.arange(positions.shape[0]).float().to(positions.device) * dim",
                            "BinOp"
                        ],
                        [
                            "pooling_indices['y2s'][i_block]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_122": {
                "variable": {
                    "value": "full_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(full_features, features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_156": {
                "input": {
                    "value": "vertex_norms * vertex_neighbors",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_198": {
                "n": {
                    "value": "r_inv.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_280": {
                "input": {
                    "value": "(meshes['init'][1].vertices - meshes['update'][1].vertices) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_280": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_281": {
                "input": {
                    "value": "(meshes['init'][2].vertices - meshes['update'][2].vertices) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_281": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "floor_66": {
                "input": {
                    "value": "cur_ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(ys, 0, dim - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ceil_66": {
                "input": {
                    "value": "cur_ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(ys, 0, dim - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_279": {
                "input": {
                    "value": "(meshes['init'][0].vertices - meshes['update'][0].vertices) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_279": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_73": {
                "start": {
                    "value": "positions.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_74": {
                "start": {
                    "value": "positions.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "examples/Classification/pointcloud_classification.py": {
        "torch": {
            "DataLoader_16": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kal.datasets.ModelNet10('/path/to/ModelNet10', categories=['bed', 'bathtub'], split='train', rep='pointcloud', transform=normpc, device=device)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_21": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kal.datasets.ModelNet10('/path/to/ModelNet10', categories=['bed', 'bathtub'], split='test', rep='pointcloud', transform=normpc, device=device)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_23": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_24": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_47": {
                "variable": {
                    "value": "pred_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(batch[0])",
                            "Call"
                        ],
                        [
                            "model(batch[0])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_48": {
                "input": {
                    "value": "(pred_label == batch[1].view(-1)).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_68": {
                "variable": {
                    "value": "pred_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(batch[0])",
                            "Call"
                        ],
                        [
                            "model(batch[0])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_69": {
                "input": {
                    "value": "(pred_label == batch[1].view(-1)).float()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "examples/Classification/pointcloud_classification_engine.py": {
        "torch": {
            "DataLoader_10": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ModelNet10('/path/to/ModelNet10', categories=['chair', 'sofa'], split='train', rep='pointcloud', transform=norm, device='cuda:0')",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_13": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ModelNet10('/path/to/ModelNet10', categories=['chair', 'sofa'], split='test', rep='pointcloud', transform=norm, device='cuda:0')",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/GANs/3D-IWGAN/architectures.py": {
        "torch": {
            "Linear_31": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256 * 2 * 2 * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "variable": {
                    "value": "self.post_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.BatchNorm3d(256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.ConvTranspose3d(256, 256, kernel_size=4, stride=2, padding=(1, 1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.ConvTranspose3d(256, 128, kernel_size=4, stride=2, padding=(1, 1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.ConvTranspose3d(128, 64, kernel_size=4, stride=2, padding=(1, 1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.ConvTranspose3d(64, 1, kernel_size=4, stride=2, padding=(1, 1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_68": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :32, :32, :32]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv3d(1, 32, kernel_size=4, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_83": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv3d(32, 64, kernel_size=4, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_87": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv3d(64, 128, kernel_size=4, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_91": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv3d(128, 256, kernel_size=2, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "variable": {
                    "value": "self.layer5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_33": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose3d_38": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_39": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose3d_43": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_44": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose3d_48": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_49": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose3d_53": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_80": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_81": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv3d_84": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_85": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv3d_88": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_89": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv3d_92": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_93": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "examples/GANs/3D-IWGAN/eval.py": {
        "torch": {
            "normal_49": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(args.batchsize, 200)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "torch.ones(args.batchsize, 200)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_27": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_28": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_46": {
                "f": {
                    "value": "'log/{0}/gen.pth'.format(args.expid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_49": {
                "*size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_49": {
                "*size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/GANs/3D-IWGAN/train.py": {
        "torch": {
            "DataLoader_57": {
                "variable": {
                    "value": "dataloader_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kal.datasets.ModelNet(root='../../datasets/', categories=args.categories, single_view=True, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_70": {
                "variable": {
                    "value": "optim_g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "gen.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_71": {
                "variable": {
                    "value": "optim_d",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "dis.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_111": {
                "variable": {
                    "value": "real_voxels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data['data'].shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normal_115": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(data['data'].shape[0], 200)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "torch.ones(data['data'].shape[0], 200)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_118": {
                "variable": {
                    "value": "d_on_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dis(fake_voxels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_119": {
                "variable": {
                    "value": "d_on_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dis(real_voxels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_157": {
                "obj": {
                    "value": "gen.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'gen.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_158": {
                "obj": {
                    "value": "dis.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'dis.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_159": {
                "obj": {
                    "value": "optim_g.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'g_optim.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_160": {
                "obj": {
                    "value": "optim_d.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'd_optim.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_115": {
                "*size": {
                    "value": "data['data'].shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_115": {
                "*size": {
                    "value": "data['data'].shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/GANs/3D-IWGAN/utils.py": {
        "torch": {
            "manual_seed_22": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_23": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_28": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "real_data.shape[0]",
                            "Subscript"
                        ],
                        [
                            "real_images.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_55": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "real_data.shape[0]",
                            "Subscript"
                        ],
                        [
                            "real_images.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_43": {
                "outputs": {
                    "value": "disc_interpolates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netD(interpolates)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "interpolates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alpha * real_data.detach() + (1 - alpha) * fake_data.detach()",
                            "BinOp"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones(disc_interpolates.size()).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_74": {
                "outputs": {
                    "value": "prob_interpolated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netD(interpolated)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "interpolated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eta * real_images + (1 - eta) * fake_images",
                            "BinOp"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones(prob_interpolated.size()).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_44": {
                "*size": {
                    "value": "disc_interpolates.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_75": {
                "*size": {
                    "value": "prob_interpolated.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "examples/GANs/3DGAN/architectures.py": {
        "torch": {
            "Sequential_32": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.ConvTranspose3d(200, 512, 4, 2, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.ConvTranspose3d(512, 256, 4, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.ConvTranspose3d(256, 128, 4, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.ConvTranspose3d(128, 1, 4, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_74": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv3d(1, 64, 4, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv3d(64, 128, 4, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv3d(128, 256, 4, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_89": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv3d(256, 512, 4, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_94": {
                "variable": {
                    "value": "self.layer5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv3d(512, 1, 2, 2, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_33": {
                "in_channels": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_34": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose3d_38": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_39": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose3d_43": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_44": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose3d_48": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_75": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_76": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_80": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_81": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_85": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_86": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_90": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_91": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_95": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/GANs/3DGAN/eval.py": {
        "torch": {
            "normal_45": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(args.batchsize, 200)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "torch.ones(args.batchsize, 200) * 0.33",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_42": {
                "f": {
                    "value": "'log/{0}/gen.pth'.format(args.expid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_45": {
                "*size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_45": {
                "*size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/GANs/3DGAN/train.py": {
        "torch": {
            "DataLoader_53": {
                "variable": {
                    "value": "dataloader_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kal.datasets.ModelNet(root='../../datasets/', categories=args.categories, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_63": {
                "variable": {
                    "value": "optim_g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "gen.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0025",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_64": {
                "variable": {
                    "value": "optim_d",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "dis.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "5e-05",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_104": {
                "variable": {
                    "value": "real_voxels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data['data'].shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normal_109": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(data['data'].shape[0], 200)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "torch.ones(data['data'].shape[0], 200) * 0.33",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "normal_128": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(data['data'].shape[0], 200)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "torch.ones(data['data'].shape[0], 200) * 0.33",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_162": {
                "obj": {
                    "value": "gen.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'gen.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_163": {
                "obj": {
                    "value": "dis.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'dis.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_164": {
                "obj": {
                    "value": "optim_g.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'g_optim.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_165": {
                "obj": {
                    "value": "optim_d.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'd_optim.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_115": {
                "input": {
                    "value": "torch.log(d_on_real) + torch.log(1.0 - d_on_fake)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_131": {
                "input": {
                    "value": "torch.log(d_on_fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_131": {
                "input": {
                    "value": "d_on_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dis(fake_voxels)",
                            "Call"
                        ],
                        [
                            "dis(fake_voxels)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_109": {
                "*size": {
                    "value": "data['data'].shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_115": {
                "input": {
                    "value": "1.0 - d_on_fake",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_128": {
                "*size": {
                    "value": "data['data'].shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_109": {
                "*size": {
                    "value": "data['data'].shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_128": {
                "*size": {
                    "value": "data['data'].shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/ImageRecon/Dib/architectures.py": {
        "torch": {
            "Linear_39": {
                "variable": {
                    "value": "self.linear3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self.linear6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "VERTS * 6",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "self.encoder1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*all_blocks",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_51": {
                "variable": {
                    "value": "self.encoder2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*all_blocks",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*all_blocks",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "in_channels": {
                    "value": "indim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outdim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ker",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_77": {
                "num_features": {
                    "value": "outdim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_84": {
                "in_features": {
                    "value": "indim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "outdim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_85": {
                "num_features": {
                    "value": "outdim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/ImageRecon/Dib/eval.py": {
        "torch": {
            "DataLoader_49": {
                "variable": {
                    "value": "dataloader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kal.dataloader.ShapeNet.Combination([points_set_valid, images_set_valid, meshes_set_valid], root='../../datasets/')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_65": {
                "f": {
                    "value": "'log/{0}/best.pth'.format(args.expid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/ImageRecon/Dib/train.py": {
        "torch": {
            "DataLoader_63": {
                "variable": {
                    "value": "dataloader_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kal.dataloader.ShapeNet.Combination([sdf_set, images_set, point_set], root='../../kaolin/datasets/')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_70": {
                "variable": {
                    "value": "dataloader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "images_set_valid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kal.dataloader.ShapeNet.Images(root='../../datasets/', categories=args.categories, download=True, train=False, split=0.7, views=1, transform=preprocess)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_91": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_238": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'recent.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_239": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'recent_optim.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_204": {
                "variable": {
                    "value": "full_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(image_pred, alpha_pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "save_247": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'best.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_248": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'best_optim.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "examples/ImageRecon/Dib/utils.py": {
        "torch": {
            "matmul_32": {
                "variable": {
                    "value": "new_lap",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mesh.adj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "mesh.vertices",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_71": {
                "variable": {
                    "value": "nei_count",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mesh.compute_adjacency_matrix_full()",
                            "Call"
                        ],
                        [
                            "adj - eye",
                            "BinOp"
                        ],
                        [
                            "adj / nei_count",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_42": {
                "variable": {
                    "value": "cos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm1 * norm2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_43": {
                "input": {
                    "value": "(cos - 1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_53": {
                "variable": {
                    "value": "new_info",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_info",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple((d[k] for d in data))",
                            "Call"
                        ],
                        [
                            "torch.stack(new_info, 0)",
                            "Call"
                        ],
                        [
                            "tuple((d[k] for d in data))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_33": {
                "input": {
                    "value": "(new_lap - mesh.vertices) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "examples/ImageRecon/GEOmetrics/architectures.py": {
        "torch": {
            "Sequential_32": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(4, 16, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(16, 16, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(16, 32, kernel_size=3, padding=1, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(32, 32, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "self.layer5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(32, 32, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "variable": {
                    "value": "self.layer6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(32, 64, kernel_size=3, padding=1, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "variable": {
                    "value": "self.layer7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64, 64, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_67": {
                "variable": {
                    "value": "self.layer8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64, 64, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "self.layer9",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64, 128, kernel_size=3, padding=1, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_77": {
                "variable": {
                    "value": "self.layer10",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(128, 128, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_82": {
                "variable": {
                    "value": "self.layer11",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(128, 128, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_87": {
                "variable": {
                    "value": "self.layer12",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(128, 256, kernel_size=3, padding=1, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_92": {
                "variable": {
                    "value": "self.layer13",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(256, 256, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_98": {
                "variable": {
                    "value": "self.layer14",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(256, 256, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_103": {
                "variable": {
                    "value": "self.layer15",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(256, 512, kernel_size=3, padding=1, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_108": {
                "variable": {
                    "value": "self.layer16",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(512, 512, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_113": {
                "variable": {
                    "value": "self.layer17",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(512, 512, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "variable": {
                    "value": "self.layer18",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(512, 512, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_169": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc1(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_170": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc2(x, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_174": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc3(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_175": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc4(x, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_179": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc5(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_180": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc6(x, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_185": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc7(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_186": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc8(x, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_191": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc9(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_192": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc10(x, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_197": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc11(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_198": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc12(x, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_203": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc13(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_228": {
                "variable": {
                    "value": "self.weight1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_features, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_248": {
                "variable": {
                    "value": "support",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.weight1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_259": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(side_1, side_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_298": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(temp, features[:, res.shape[1]:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "elu_303": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h1(positions, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_304": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h21(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_305": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h22(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_306": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h23(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_307": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h24(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_308": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h3(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_309": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h4(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_310": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h41(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_311": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h5(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_312": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h6(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_313": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h7(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_314": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h8(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_315": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h81(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_316": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h9(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_317": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h10(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_318": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h11(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_321": {
                "variable": {
                    "value": "latent",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.reduce(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_329": {
                "variable": {
                    "value": "self.fully",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(latent_length, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_333": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.ConvTranspose3d(64, 64, 4, stride=2, padding=(1, 1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_357": {
                "variable": {
                    "value": "voxels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "decode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fully(latent).view(-1, 64, 2, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.model(decode).reshape(-1, 32, 32, 32)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_230": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_252": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.ones((support.shape[0], 1)).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_254": {
                "variable": {
                    "value": "side_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "normalized_support",
                    "type": "variable",
                    "possible_values": [
                        [
                            "support[:, :side_len] / norm",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_256": {
                "variable": {
                    "value": "side_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "support[:, :side_len]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_34": {
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_44": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_49": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_50": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_54": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_55": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_59": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_60": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_64": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_65": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_69": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_70": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_74": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_75": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_78": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_79": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_80": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_83": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_84": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_85": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_88": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_89": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_90": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_94": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_95": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_99": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_100": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_101": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_104": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_105": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_106": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_109": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_110": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_111": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_114": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_115": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_116": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_118": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_119": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_120": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_322": {
                "input": {
                    "value": "latent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.elu(self.reduce(features, adj))",
                            "Call"
                        ],
                        [
                            "torch.max(latent, dim=0)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_330": {
                "in_features": {
                    "value": "latent_length",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_334": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_335": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_336": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_338": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_339": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_340": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_342": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_343": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_344": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_346": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_347": {
                "num_features": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_348": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_350": {
                "in_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_252": {
                "*size": {
                    "value": "(support.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "examples/ImageRecon/GEOmetrics/eval.py": {
        "torch": {}
    },
    "examples/ImageRecon/GEOmetrics/eval_auto_encoder.py": {
        "torch": {
            "load_51": {
                "f": {
                    "value": "'log/{}/auto_best_encoder.pth'.format(args.expid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_52": {
                "f": {
                    "value": "'log/{}/auto_best_decoder.pth'.format(args.expid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/ImageRecon/GEOmetrics/train.py": {
        "torch": {
            "DataLoader_75": {
                "variable": {
                    "value": "dataloader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nvl.dataloader.ShapeNet.Combination([points_set_valid, images_set_valid], root='../../datasets/')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_99": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "parameters + list(mesh_updates[i].parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_63": {
                "variable": {
                    "value": "dataloader_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nvl.dataloader.ShapeNet.Combination([points_set, images_set, mesh_set], root='../../datasets/')",
                            "Call"
                        ],
                        [
                            "nvl.dataloader.ShapeNet.Combination([points_set, images_set], root='../../datasets/')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_91": {
                "f": {
                    "value": "'log/{}/auto_best_encoder.pth'.format(args.expid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_333": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'recent_optim.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_165": {
                "variable": {
                    "value": "full_vert_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(meshes['init'][0].vertices, projected_image_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_176": {
                "variable": {
                    "value": "full_vert_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(meshes['init'][1].vertices, projected_image_features, future_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_185": {
                "variable": {
                    "value": "full_vert_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(meshes['init'][2].vertices, projected_image_features, future_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_238": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_330": {
                "obj": {
                    "value": "e.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'encoder_{}.pth'.format(i))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_332": {
                "obj": {
                    "value": "m.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'mesh_update_{}.pth'.format(i))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_345": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'best_optim.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_266": {
                "variable": {
                    "value": "full_vert_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(meshes['init'][0].vertices, projected_image_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_277": {
                "variable": {
                    "value": "full_vert_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(meshes['init'][1].vertices, projected_image_features, future_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_286": {
                "variable": {
                    "value": "full_vert_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(meshes['init'][2].vertices, projected_image_features, future_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_342": {
                "obj": {
                    "value": "e.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'best_encoder_{}.pth'.format(i))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_344": {
                "obj": {
                    "value": "m.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'best_mesh_update_{}.pth'.format(i))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_199": {
                "input": {
                    "value": "torch.abs(predicted_latent - gt_latent)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_199": {
                "input": {
                    "value": "predicted_latent - gt_latent",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "examples/ImageRecon/GEOmetrics/train_auto_encoder.py": {
        "torch": {
            "Adam_82": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(encoder.parameters()) + list(decoder.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_84": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_140": {
                "variable": {
                    "value": "tgt_voxels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tgt_voxels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(tgt_voxels)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(tgt_voxels)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_141": {
                "variable": {
                    "value": "latent_encodings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "latent_encodings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(latent_encodings)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(latent_encodings)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_229": {
                "obj": {
                    "value": "encoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'auto_encoder.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_230": {
                "obj": {
                    "value": "decoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'auto_decoder.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_231": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'recent_optim.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_189": {
                "variable": {
                    "value": "tgt_voxels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tgt_voxels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(tgt_voxels)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(tgt_voxels)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_190": {
                "variable": {
                    "value": "latent_encodings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "latent_encodings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(latent_encodings)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(latent_encodings)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_240": {
                "obj": {
                    "value": "encoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'auto_best_encoder.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_241": {
                "obj": {
                    "value": "decoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'auto_best_decoder.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_242": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'best_optim.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "examples/ImageRecon/Image_Mesh_Recon_Direct/architectures.py": {
        "torch": {
            "Linear_39": {
                "variable": {
                    "value": "self.linear3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self.linear6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "VERTS * 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "self.encoder1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*all_blocks",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_51": {
                "variable": {
                    "value": "self.encoder2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*all_blocks",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*all_blocks",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "in_channels": {
                    "value": "indim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outdim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ker",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_77": {
                "num_features": {
                    "value": "outdim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_84": {
                "in_features": {
                    "value": "indim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "outdim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_85": {
                "num_features": {
                    "value": "outdim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/ImageRecon/Image_Mesh_Recon_Direct/eval.py": {
        "torch": {
            "DataLoader_48": {
                "variable": {
                    "value": "dataloader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kal.dataloader.ShapeNet.Combination([points_set_valid, images_set_valid], root='../../datasets/')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_59": {
                "f": {
                    "value": "'log/{0}/best.pth'.format(args.expid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/ImageRecon/Image_Mesh_Recon_Direct/train.py": {
        "torch": {
            "DataLoader_58": {
                "variable": {
                    "value": "dataloader_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kal.dataloader.ShapeNet.Combination([points_set, images_set], root='../../datasets/')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_69": {
                "variable": {
                    "value": "dataloader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kal.dataloader.ShapeNet.Combination([points_set_valid, images_set_valid], root='../../datasets/')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_88": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_216": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'recent.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_217": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'recent_optim.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_225": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'best.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_226": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'best_optim.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "examples/ImageRecon/Image_Mesh_Recon_Direct/utils.py": {
        "torch": {
            "sum_32": {
                "input": {
                    "value": "deltas ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/ImageRecon/OccNet/architectures.py": {
        "torch": {
            "Normal_132": {
                "variable": {
                    "value": "p0_z",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros(z_dim, device=device)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.ones(z_dim, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "self.features.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_85": {
                "variable": {
                    "value": "self.fc_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_97": {
                "variable": {
                    "value": "self.fc_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_153": {
                "variable": {
                    "value": "self.conv_gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "c_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "f_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_154": {
                "variable": {
                    "value": "self.conv_beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "c_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "f_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_225": {
                "variable": {
                    "value": "self.fc_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "size_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "size_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size_in",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_226": {
                "variable": {
                    "value": "self.fc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "size_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size_in",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "size_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size_in",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_227": {
                "variable": {
                    "value": "self.actvn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_293": {
                "variable": {
                    "value": "kl",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Bernoulli_317": {
                "variable": {
                    "value": "p_r",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder(p, z, c, **kwargs)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_329": {
                "variable": {
                    "value": "mean_z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.size(0)",
                            "Call"
                        ],
                        [
                            "p.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_330": {
                "variable": {
                    "value": "logstd_z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.size(0)",
                            "Call"
                        ],
                        [
                            "p.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Normal_332": {
                "variable": {
                    "value": "q_z",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mean_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(batch_size, 0).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "torch.exp(logstd_z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "c_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_83": {
                "variable": {
                    "value": "self.fc_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_133": {
                "*size": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_134": {
                "*size": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_156": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "f_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_232": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "size_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "size_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size_in",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InstanceNorm1d_158": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "f_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_332": {
                "input": {
                    "value": "logstd_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(batch_size, 0).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_102": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "normalize_imagenet(x)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "examples/ImageRecon/OccNet/eval.py": {
        "torch": {
            "DataLoader_55": {
                "variable": {
                    "value": "dataloader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kal.dataloader.ShapeNet.Combination([sdf_set, images_set, data_set_mesh, points_set_valid], root='../../datasets/')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_62": {
                "f": {
                    "value": "'log/{}/best_encoder.pth'.format(args.expid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_64": {
                "f": {
                    "value": "'log/{}/best_decoder.pth'.format(args.expid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_85": {
                "*size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/ImageRecon/OccNet/train.py": {
        "torch": {
            "DataLoader_59": {
                "variable": {
                    "value": "dataloader_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kal.dataloader.ShapeNet.Combination([sdf_set, images_set], root='../../datasets/')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_69": {
                "variable": {
                    "value": "dataloader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kal.dataloader.ShapeNet.Combination([sdf_set, images_set], root='../../datasets/')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_79": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(model.encoder.parameters()) + list(model.decoder.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_141": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_occ",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.decode(points, torch.zeros(args.batch_size, 0), encoding).logits",
                            "Attribute"
                        ],
                        [
                            "model.decode(points, torch.zeros(args.batch_size, 0), encoding).logits",
                            "Attribute"
                        ]
                    ]
                },
                "target": {
                    "value": "gt_occ",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['occ_values'].to(args.device)",
                            "Call"
                        ],
                        [
                            "data['occ_values'].to(args.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_141": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_220": {
                "obj": {
                    "value": "model.encoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'encoder.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_221": {
                "obj": {
                    "value": "model.decoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'decoder.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_222": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'recent_optim.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_230": {
                "obj": {
                    "value": "model.encoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'best_encoder.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_231": {
                "obj": {
                    "value": "model.decoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'best_decoder.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_232": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'best_optim.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_136": {
                "*size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_181": {
                "*size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/ImageRecon/OccNet/utils.py": {
        "torch": {
            "zeros_49": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_41": {
                "*size": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_42": {
                "*size": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_69": {
                "variable": {
                    "value": "new_info",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_info",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple((d[k] for d in data))",
                            "Call"
                        ],
                        [
                            "torch.stack(new_info, 0)",
                            "Call"
                        ],
                        [
                            "tuple((d[k] for d in data))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/ImageRecon/Pixel2Mesh/architectures.py": {
        "torch": {
            "Conv2d_35": {
                "variable": {
                    "value": "self.layer0_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "variable": {
                    "value": "self.layer0_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "variable": {
                    "value": "self.layer1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "variable": {
                    "value": "self.layer1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "variable": {
                    "value": "self.layer1_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "variable": {
                    "value": "self.layer2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "variable": {
                    "value": "self.layer2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "variable": {
                    "value": "self.layer2_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "variable": {
                    "value": "self.layer3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "variable": {
                    "value": "self.layer3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "variable": {
                    "value": "self.layer3_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "variable": {
                    "value": "self.layer4_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "variable": {
                    "value": "self.layer4_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "variable": {
                    "value": "self.layer4_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "variable": {
                    "value": "self.layer5_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "variable": {
                    "value": "self.layer5_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "variable": {
                    "value": "self.layer5_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "variable": {
                    "value": "self.layer5_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_61": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer0_1(img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_62": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer0_2(img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_64": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer1_1(img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_65": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer1_2(img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_66": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer1_3(img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_68": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer2_1(img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_69": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer2_2(img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_70": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer2_3(img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_71": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.layer0_1(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer0_2(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer1_1(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer1_2(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer1_3(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer2_1(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer2_2(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer2_3(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer3_1(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer3_2(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer3_3(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer4_1(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer4_2(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer4_3(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer5_1(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer5_2(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer5_3(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer5_4(img))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_73": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer3_1(img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_74": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer3_2(img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_75": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer3_3(img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_76": {
                "variable": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.layer0_1(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer0_2(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer1_1(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer1_2(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer1_3(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer2_1(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer2_2(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer2_3(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer3_1(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer3_2(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer3_3(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer4_1(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer4_2(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer4_3(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer5_1(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer5_2(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer5_3(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer5_4(img))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_78": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer4_1(img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_79": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer4_2(img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_80": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer4_3(img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_81": {
                "variable": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.layer0_1(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer0_2(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer1_1(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer1_2(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer1_3(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer2_1(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer2_2(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer2_3(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer3_1(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer3_2(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer3_3(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer4_1(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer4_2(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer4_3(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer5_1(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer5_2(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer5_3(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer5_4(img))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_83": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer5_1(img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_84": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer5_2(img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_85": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer5_3(img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_86": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer5_4(img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_87": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.layer0_1(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer0_2(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer1_1(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer1_2(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer1_3(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer2_1(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer2_2(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer2_3(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer3_1(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer3_2(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer3_3(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer4_1(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer4_2(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer4_3(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer5_1(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer5_2(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer5_3(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer5_4(img))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_116": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc1(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_117": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc2(x, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_121": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc3(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_122": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc4(x, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_126": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc5(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_127": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc6(x, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_132": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc7(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_133": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc8(x, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_138": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc9(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_139": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc10(x, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_144": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc11(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_145": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc12(x, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_150": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc13(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_166": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_features, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_167": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_179": {
                "variable": {
                    "value": "support",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.weight.unsqueeze(0).expand(input.shape[0], -1, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_181": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj.unsqueeze(0).expand(input.shape[0], -1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "support",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(input, self.weight.unsqueeze(0).expand(input.shape[0], -1, -1))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/ImageRecon/Pixel2Mesh/eval.py": {
        "torch": {
            "load_59": {
                "f": {
                    "value": "'log/{0}/best_encoder.pth'.format(args.expid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_88": {
                "variable": {
                    "value": "full_vert_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(meshes['init'][0].vertices, projected_image_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_98": {
                "variable": {
                    "value": "full_vert_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(meshes['init'][1].vertices, projected_image_features, future_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_107": {
                "variable": {
                    "value": "full_vert_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(meshes['init'][2].vertices, projected_image_features, future_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_61": {
                "f": {
                    "value": "'log/{}/best_mesh_update_{}.pth'.format(args.expid, i)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "examples/ImageRecon/Pixel2Mesh/train.py": {
        "torch": {
            "DataLoader_60": {
                "variable": {
                    "value": "dataloader_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kal.dataloader.ShapeNet.Combination([points_set, images_set], root='../../datasets/')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_70": {
                "variable": {
                    "value": "dataloader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kal.dataloader.ShapeNet.Combination([points_set_valid, images_set_valid], root='../../datasets/')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_89": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(encoder.parameters())",
                            "Call"
                        ],
                        [
                            "parameters + list(mesh_updates[i].parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_154": {
                "variable": {
                    "value": "full_vert_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(meshes['init'][0].vertices, projected_image_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_164": {
                "variable": {
                    "value": "full_vert_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(meshes['init'][1].vertices, projected_image_features, future_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_173": {
                "variable": {
                    "value": "full_vert_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(meshes['init'][2].vertices, projected_image_features, future_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_296": {
                "obj": {
                    "value": "encoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'encoder.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_299": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'recent_optim.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_210": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_234": {
                "variable": {
                    "value": "full_vert_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(meshes['init'][0].vertices, projected_image_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_244": {
                "variable": {
                    "value": "full_vert_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(meshes['init'][1].vertices, projected_image_features, future_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_253": {
                "variable": {
                    "value": "full_vert_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(meshes['init'][2].vertices, projected_image_features, future_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_298": {
                "obj": {
                    "value": "m.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'mesh_update_{}.pth'.format(i))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_307": {
                "obj": {
                    "value": "encoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'best_encoder.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_310": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'best_optim.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_309": {
                "obj": {
                    "value": "m.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'best_mesh_update_{}.pth'.format(i))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "examples/SuperResolution/ODM-ModelNet/architectures.py": {
        "torch": {
            "Sequential_32": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(6, 128, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_36": {
                "variable": {
                    "value": "self.inner_convs_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv2d(128, 128, kernel_size=3, padding=1) for i in range(16)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_37": {
                "variable": {
                    "value": "self.inner_bns_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.BatchNorm2d(128) for i in range(16)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_38": {
                "variable": {
                    "value": "self.inner_convs_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv2d(128, 128, kernel_size=3, padding=1) for i in range(16)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_39": {
                "variable": {
                    "value": "self.inner_bns_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.BatchNorm2d(128) for i in range(16)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(128, 128, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_51": {
                "variable": {
                    "value": "self.sub_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "sub_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[nn.Conv2d(128, 128, kernel_size=3, padding=1), nn.PixelShuffle(2)]",
                            "List"
                        ]
                    ]
                }
            },
            "Sequential_53": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(32, 6, kernel_size=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_78": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "x + recall",
                            "BinOp"
                        ],
                        [
                            "self.sub_list[2 * i](x)",
                            "Call"
                        ],
                        [
                            "self.sub_list[2 * i + 1](x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_65": {
                "variable": {
                    "value": "recall",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recall",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inner_convs_1[i](x.clone())",
                            "Call"
                        ],
                        [
                            "self.inner_bns_1[i](recall)",
                            "Call"
                        ],
                        [
                            "F.relu(recall)",
                            "Call"
                        ],
                        [
                            "self.inner_convs_2[i](recall)",
                            "Call"
                        ],
                        [
                            "self.inner_bns_2[i](recall)",
                            "Call"
                        ],
                        [
                            "recall + temp",
                            "BinOp"
                        ],
                        [
                            "self.layer2(recall)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_34": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_43": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PixelShuffle_46": {
                "upscale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_37": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PixelShuffle_50": {
                "upscale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/SuperResolution/ODM-ModelNet/dataloaders.py": {
        "torch": {}
    },
    "examples/SuperResolution/ODM-ModelNet/eval_Direct.py": {
        "torch": {
            "DataLoader_42": {
                "variable": {
                    "value": "dataloader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ModelNet_ODMS(root='../../datasets/', categories=args.categories, download=True, train=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_49": {
                "f": {
                    "value": "'log/{0}/best.pth'.format(args.expid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_66": {
                "variable": {
                    "value": "inp_odms",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inp_odms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(inp_odms)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_78": {
                "variable": {
                    "value": "pred_voxels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred_voxels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pred_voxels)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/SuperResolution/ODM-ModelNet/eval_MVD.py": {
        "torch": {
            "DataLoader_45": {
                "variable": {
                    "value": "dataloader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ModelNet_ODMS(root='../../datasets/', categories=['chair'], download=True, train=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_54": {
                "f": {
                    "value": "'log/{0}/resbest.pth'.format(args.expid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_55": {
                "f": {
                    "value": "'log/{0}/occbest.pth'.format(args.expid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_74": {
                "variable": {
                    "value": "inp_odms",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inp_odms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(inp_odms)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_104": {
                "variable": {
                    "value": "pred_voxels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred_voxels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pred_voxels)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/SuperResolution/ODM-ModelNet/train_Direct.py": {
        "torch": {
            "DataLoader_58": {
                "variable": {
                    "value": "dataloader_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ModelNet_ODMS(root='../../datasets/', categories=args.categories, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_63": {
                "variable": {
                    "value": "dataloader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ModelNet_ODMS(root='../../datasets/', categories=args.categories, download=True, train=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MSELoss_72": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_74": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_123": {
                "variable": {
                    "value": "inp_odms",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inp_odms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(inp_odms)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(inp_odms)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_221": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'recent.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_222": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'recent_optim.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_165": {
                "variable": {
                    "value": "inp_odms",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inp_odms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(inp_odms)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(inp_odms)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_182": {
                "variable": {
                    "value": "pred_voxels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred_voxels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pred_voxels)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_230": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'best.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_231": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'best_optim.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "examples/SuperResolution/ODM-ModelNet/train_MVD.py": {
        "torch": {
            "DataLoader_57": {
                "variable": {
                    "value": "dataloader_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ModelNet_ODMS(root='../../datasets/', categories=args.categories, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_62": {
                "variable": {
                    "value": "dataloader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ModelNet_ODMS(root='../../datasets/', categories=args.categories, download=True, train=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MSELoss_71": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_73": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_256": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_257": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_122": {
                "variable": {
                    "value": "inp_odms",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inp_odms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(inp_odms)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(inp_odms)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(inp_odms)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(inp_odms)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_230": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, odm_type + 'recent.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_231": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, odm_type + 'recent_optim.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_291": {
                "variable": {
                    "value": "inp_odms",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inp_odms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(inp_odms)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(inp_odms)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(inp_odms)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(inp_odms)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_398": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, odm_type + 'recent.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_399": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, odm_type + 'recent_optim.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_170": {
                "variable": {
                    "value": "inp_odms",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inp_odms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(inp_odms)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(inp_odms)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(inp_odms)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(inp_odms)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_191": {
                "variable": {
                    "value": "pred_voxels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred_voxels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pred_voxels)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pred_voxels)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_239": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, odm_type + 'best.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_240": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, odm_type + 'best_optim.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_321": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_338": {
                "variable": {
                    "value": "inp_odms",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inp_odms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(inp_odms)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(inp_odms)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(inp_odms)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(inp_odms)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_361": {
                "variable": {
                    "value": "pred_voxels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred_voxels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pred_voxels)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pred_voxels)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_407": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, odm_type + 'best.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_408": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, odm_type + 'best_optim.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "examples/SuperResolution/ODM-ModelNet/utils.py": {
        "torch": {
            "cat_24": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(inp, dim=0)",
                            "Call"
                        ],
                        [
                            "inp.clone()",
                            "Call"
                        ],
                        [
                            "scaling(inp)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_31": {
                "variable": {
                    "value": "NN_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "NN_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(NN_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "Upsample_46": {
                "variable": {
                    "value": "scaling",
                    "type": "variable",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "examples/SuperResolution/ODM-ShapeNet/architectures.py": {
        "torch": {
            "Sequential_15": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(6, 128, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_19": {
                "variable": {
                    "value": "self.inner_convs_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv2d(128, 128, kernel_size=3, padding=1) for i in range(16)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_20": {
                "variable": {
                    "value": "self.inner_bns_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.BatchNorm2d(128) for i in range(16)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_21": {
                "variable": {
                    "value": "self.inner_convs_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv2d(128, 128, kernel_size=3, padding=1) for i in range(16)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_22": {
                "variable": {
                    "value": "self.inner_bns_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.BatchNorm2d(128) for i in range(16)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_24": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(128, 128, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_34": {
                "variable": {
                    "value": "self.sub_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "sub_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[nn.Conv2d(128, 128, kernel_size=3, padding=1), nn.PixelShuffle(2)]",
                            "List"
                        ]
                    ]
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(32, 6, kernel_size=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_61": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "x + recall",
                            "BinOp"
                        ],
                        [
                            "self.sub_list[2 * i](x)",
                            "Call"
                        ],
                        [
                            "self.sub_list[2 * i + 1](x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_48": {
                "variable": {
                    "value": "recall",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recall",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inner_convs_1[i](x.clone())",
                            "Call"
                        ],
                        [
                            "self.inner_bns_1[i](recall)",
                            "Call"
                        ],
                        [
                            "F.relu(recall)",
                            "Call"
                        ],
                        [
                            "self.inner_convs_2[i](recall)",
                            "Call"
                        ],
                        [
                            "self.inner_bns_2[i](recall)",
                            "Call"
                        ],
                        [
                            "recall + temp",
                            "BinOp"
                        ],
                        [
                            "self.layer2(recall)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PixelShuffle_29": {
                "upscale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PixelShuffle_33": {
                "upscale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/SuperResolution/ODM-ShapeNet/dataloaders.py": {
        "torch": {}
    },
    "examples/SuperResolution/ODM-ShapeNet/eval_Direct.py": {
        "torch": {
            "DataLoader_28": {
                "variable": {
                    "value": "dataloader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ShapeNet_ODMS(root='../../datasets/', categories=args.categories, download=True, train=False, high=128, low=32, split=0.97, voxels=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_36": {
                "f": {
                    "value": "'log/{0}/best.pth'.format(args.expid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "pred_voxels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred_voxels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pred_voxels)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/SuperResolution/ODM-ShapeNet/eval_MVD.py": {
        "torch": {
            "DataLoader_27": {
                "variable": {
                    "value": "dataloader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ShapeNet_ODMS(root='../..//datasets', categories=args.categories, download=True, train=False, high=128, low=32, split=0.97, voxels=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_37": {
                "f": {
                    "value": "'log/{0}/resbest.pth'.format(args.expid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_38": {
                "f": {
                    "value": "'log/{0}/occbest.pth'.format(args.expid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "pred_voxels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred_voxels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pred_voxels)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/SuperResolution/ODM-ShapeNet/train_Direct.py": {
        "torch": {
            "DataLoader_44": {
                "variable": {
                    "value": "dataloader_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ShapeNet_ODMS(root='../../datasets/', categories=args.categories, download=True, high=128, low=32, split=0.97, voxels=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_49": {
                "variable": {
                    "value": "dataloader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ShapeNet_ODMS(root='../../datasets/', categories=args.categories, download=True, train=False, high=128, low=32, split=0.97, voxels=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MSELoss_58": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_60": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_197": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'recent.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_198": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'recent_optim.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_161": {
                "variable": {
                    "value": "pred_voxels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred_voxels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pred_voxels)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_206": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'best.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_207": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'best_optim.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "examples/SuperResolution/ODM-ShapeNet/train_MVD.py": {
        "torch": {
            "DataLoader_44": {
                "variable": {
                    "value": "dataloader_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ShapeNet_ODMS(root='../../datasets/', categories=args.categories, download=True, high=128, low=32, split=0.97, voxels=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_49": {
                "variable": {
                    "value": "dataloader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ShapeNet_ODMS(root='../../datasets/', categories=args.categories, download=True, train=False, high=128, low=32, split=0.97, voxels=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MSELoss_58": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_60": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_237": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_238": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_211": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, odm_type + 'recent.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_212": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, odm_type + 'recent_optim.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_372": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, odm_type + 'recent.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_373": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, odm_type + 'recent_optim.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_173": {
                "variable": {
                    "value": "pred_voxels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred_voxels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pred_voxels)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pred_voxels)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_220": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, odm_type + 'best.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_221": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, odm_type + 'best_optim.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_296": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_334": {
                "variable": {
                    "value": "pred_voxels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred_voxels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pred_voxels)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pred_voxels)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_381": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, odm_type + 'best.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_382": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, odm_type + 'best_optim.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "examples/SuperResolution/ODM-ShapeNet/utils.py": {
        "torch": {
            "cat_10": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(inp, dim=0)",
                            "Call"
                        ],
                        [
                            "inp.clone()",
                            "Call"
                        ],
                        [
                            "scaling(inp)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_14": {
                "variable": {
                    "value": "scaling",
                    "type": "variable",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_18": {
                "variable": {
                    "value": "NN_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "NN_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(NN_pred).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_18": {
                "variable": {
                    "value": "NN_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_33": {
                "variable": {
                    "value": "scaling",
                    "type": "variable",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "examples/SuperResolution/voxel-ModelNet/architectures.py": {
        "torch": {
            "Conv3d_17": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_18": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_19": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_20": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_21": {
                "variable": {
                    "value": "self.deconv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_22": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_23": {
                "variable": {
                    "value": "self.deconv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_24": {
                "variable": {
                    "value": "self.deconv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_34": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_35": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_37": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.deconv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_38": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv4(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv3d_55": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_56": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_57": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_58": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_59": {
                "variable": {
                    "value": "self.deconv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_60": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_61": {
                "variable": {
                    "value": "self.deconv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_62": {
                "variable": {
                    "value": "self.deconv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogSoftmax_65": {
                "variable": {
                    "value": "self.log_softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_72": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_73": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_75": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.deconv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_76": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv4(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_40": {
                "input": {
                    "value": "self.deconv5(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_78": {
                "input": {
                    "value": "self.log_softmax(self.deconv5(x))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "examples/SuperResolution/voxel-ModelNet/dataloaders.py": {
        "torch": {
            "from_numpy_46": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load(filepath_input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_46": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_47": {
                "variable": {
                    "value": "tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load(filepath_target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_47": {
                "variable": {
                    "value": "tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_86": {
                "variable": {
                    "value": "inp_",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load(filepath_input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_86": {
                "variable": {
                    "value": "inp_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_87": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "inp_.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inp_.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "inp_.shape[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_91": {
                "variable": {
                    "value": "tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load(filepath_target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_93": {
                "variable": {
                    "value": "tgt_",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load(filepath_target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_93": {
                "variable": {
                    "value": "tgt_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/SuperResolution/voxel-ModelNet/eval_MSE.py": {
        "torch": {
            "DataLoader_23": {
                "variable": {
                    "value": "dataloader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kal.dataloader.ModelNet(root='../../datasets/', categories=args.categories, download=True, train=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_30": {
                "f": {
                    "value": "'log/{0}/best.pth'.format(args.expid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/SuperResolution/voxel-ModelNet/eval_NLLL.py": {
        "torch": {
            "DataLoader_23": {
                "variable": {
                    "value": "dataloader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kal.dataloader.ModelNet(root='../../datasets/', categories=args.categories, download=True, train=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_30": {
                "f": {
                    "value": "'log/{0}/best.pth'.format(args.expid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/SuperResolution/voxel-ModelNet/train_MSE.py": {
        "torch": {
            "DataLoader_41": {
                "variable": {
                    "value": "dataloader_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kal.dataloader.ModelNet(root='../../datasets/', categories=args.categories, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_45": {
                "variable": {
                    "value": "dataloader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kal.dataloader.ModelNet(root='../../datasets/', categories=args.categories, download=True, train=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MSELoss_53": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_55": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_181": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'recent.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_182": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'recent_optim.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_190": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'best.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_191": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'best_optim.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "examples/SuperResolution/voxel-ModelNet/train_NLLL.py": {
        "torch": {
            "DataLoader_41": {
                "variable": {
                    "value": "dataloader_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kal.dataloader.ModelNet(root='../../datasets/', categories=args.categories, download=True, train=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_46": {
                "variable": {
                    "value": "dataloader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kal.dataloader.ModelNet(root='../../datasets/', categories=args.categories, download=True, train=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_54": {
                "variable": {
                    "value": "class_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray([0.0586, 0.9414])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "NLLLoss_55": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "class_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.asarray([0.0586, 0.9414])).float().to(args.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_58": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_185": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'recent.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_186": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'recent_optim.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_194": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'best.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_195": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'best_optim.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "examples/SuperResolution/voxel-ModelNet/utils.py": {
        "torch": {
            "cat_11": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(inp, dim=0)",
                            "Call"
                        ],
                        [
                            "inp.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "inp[:, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_21": {
                "variable": {
                    "value": "NN_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "NN_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(NN_pred)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/SuperResolution/voxel-ShapeNet/architectures.py": {
        "torch": {
            "Sequential_15": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(1, 16, 3, stride=2, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_23": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose3d(32, 16, 3, stride=2, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(1, 16, 3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose3d(32, 16, 3, stride=2, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LogSoftmax_77": {
                "variable": {
                    "value": "self.log_softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_87": {
                "input": {
                    "value": "self.log_softmax(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv3d_16": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_17": {
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_19": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_20": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose3d_24": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_25": {
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose3d_27": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_28": {
                "num_features": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose3d_30": {
                "in_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_31": {
                "num_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose3d_33": {
                "in_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_44": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)[:, :, :128, :128, :128]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Conv3d_54": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_55": {
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_57": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_58": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose3d_62": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_63": {
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose3d_65": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_66": {
                "num_features": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose3d_68": {
                "in_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_69": {
                "num_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose3d_71": {
                "in_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/SuperResolution/voxel-ShapeNet/eval_MSE.py": {
        "torch": {
            "DataLoader_25": {
                "variable": {
                    "value": "dataloader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kal.dataloader.ShapeNet.Voxels(root='../../datasets/', categories=args.categories, download=True, train=False, resolutions=[128, 32], split=0.97)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_31": {
                "f": {
                    "value": "'log/{0}/best.pth'.format(args.expid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/SuperResolution/voxel-ShapeNet/eval_NLLL.py": {
        "torch": {
            "DataLoader_25": {
                "variable": {
                    "value": "dataloader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kal.dataloader.ShapeNet.Voxels(root='../../datasets/', categories=args.categories, download=True, train=False, resolutions=[128, 32], split=0.97)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_31": {
                "f": {
                    "value": "'log/{0}/best.pth'.format(args.expid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/SuperResolution/voxel-ShapeNet/train_MSE.py": {
        "torch": {
            "DataLoader_41": {
                "variable": {
                    "value": "dataloader_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kal.dataloader.ShapeNet.Voxels(root='../../datasets/', categories=args.categories, download=True, train=True, resolutions=[128, 32], split=0.97)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_46": {
                "variable": {
                    "value": "dataloader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kal.dataloader.ShapeNet.Voxels(root='../../datasets/', categories=args.categories, download=True, train=False, resolutions=[128, 32], split=0.97)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MSELoss_56": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_58": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_184": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'recent.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_185": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'recent_optim.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_193": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'best.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_194": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'best_optim.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "examples/SuperResolution/voxel-ShapeNet/train_NLLL.py": {
        "torch": {
            "DataLoader_41": {
                "variable": {
                    "value": "dataloader_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kal.dataloader.ShapeNet.Voxels(root='../../datasets/', categories=args.categories, download=True, train=True, resolutions=[128, 32], split=0.97)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_46": {
                "variable": {
                    "value": "dataloader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kal.dataloader.ShapeNet.Voxels(root='../../datasets/', categories=args.categories, download=True, train=False, resolutions=[128, 32], split=0.97)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_56": {
                "variable": {
                    "value": "class_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray([0.0283, 1 - 0.0283])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "NLLLoss_57": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "class_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.asarray([0.0283, 1 - 0.0283])).float().to(args.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_59": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_188": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'recent.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_189": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'recent_optim.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_197": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'best.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_198": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, 'best_optim.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "examples/SuperResolution/voxel-ShapeNet/utils.py": {
        "torch": {
            "stack_9": {
                "variable": {
                    "value": "NN_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "NN_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(NN_pred)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/renderers/DIB-R/graphics/cuda/build.py": {
        "torch": {}
    },
    "examples/renderers/DIB-R/graphics/fshader/frag_phongtex.py": {
        "torch": {
            "sum_42": {
                "variable": {
                    "value": "cosTheta_bxhxwx1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "imnormal1_bxhxwx3 * lightdirect1_bx1x1x3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "clamp_43": {
                "variable": {
                    "value": "cosTheta_bxhxwx1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cosTheta_bxhxwx1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(imnormal1_bxhxwx3 * lightdirect1_bx1x1x3, dim=3, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.clamp(cosTheta_bxhxwx1, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_47": {
                "variable": {
                    "value": "cosAlpha_bxhxwx1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reflect * eyedirect1_bxhxwx3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "clamp_48": {
                "variable": {
                    "value": "cosAlpha_bxhxwx1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cosAlpha_bxhxwx1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(reflect * eyedirect1_bxhxwx3, dim=3, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.clamp(cosAlpha_bxhxwx1, 1e-05, 1)",
                            "Call"
                        ],
                        [
                            "torch.pow(cosAlpha_bxhxwx1, shininess_bx1.view(-1, 1, 1, 1))",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_49": {
                "variable": {
                    "value": "cosAlpha_bxhxwx1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cosAlpha_bxhxwx1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(reflect * eyedirect1_bxhxwx3, dim=3, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.clamp(cosAlpha_bxhxwx1, 1e-05, 1)",
                            "Call"
                        ],
                        [
                            "torch.pow(cosAlpha_bxhxwx1, shininess_bx1.view(-1, 1, 1, 1))",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "shininess_bx1.view(-1, 1, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_64": {
                "input": {
                    "value": "color",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(MatAmbColor_bx1x1x3 + MatDifColor_bxhxwx3) * texcolor_bxhxwx3 + MatSpeColor_bxhxwx3",
                            "BinOp"
                        ],
                        [
                            "color * improb_bxhxwx1",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/renderers/DIB-R/graphics/fshader/frag_shtex.py": {
        "torch": {
            "cat_53": {
                "variable": {
                    "value": "bands",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(band0, band10, band11, band12, band20, band21, band22, band23, band24)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_56": {
                "variable": {
                    "value": "coef",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bands * lightparam_bx9.view(-1, 1, 1, 9)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "clamp_64": {
                "input": {
                    "value": "color",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coef * texcolor_bxhxwx3 * improb_bxhxwx1",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_43": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imnormal1_bxhxwx3[:, :, :, 0:1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "examples/renderers/DIB-R/graphics/fshader/frag_tex.py": {
        "torch": {
            "clamp_41": {
                "input": {
                    "value": "color",
                    "type": "variable",
                    "possible_values": [
                        [
                            "texcolor_bxhxwx3 * improb_bxhxwx1",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/renderers/DIB-R/graphics/fshader/interpolation.py": {
        "torch": {
            "remainder_37": {
                "variable": {
                    "value": "imtexcoord_bxhxwx2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "imtexcoord_bxhxwx2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.remainder(imtexcoord_bxhxwx2, 1.0)",
                            "Call"
                        ],
                        [
                            "imtexcoord_bxhxwx2 * 2 - 1",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "grid_sample_42": {
                "variable": {
                    "value": "texcolor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "texture_bx3xthxtw",
                    "type": "variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "imtexcoord_bxhxwx2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.remainder(imtexcoord_bxhxwx2, 1.0)",
                            "Call"
                        ],
                        [
                            "imtexcoord_bxhxwx2 * 2 - 1",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "examples/renderers/DIB-R/graphics/rasterize/rasterize.py": {
        "torch": {
            "cat_81": {
                "variable": {
                    "value": "tfpointsbbox_bxfx4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tfpoints_min, tfpoints_max)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_86": {
                "variable": {
                    "value": "tfpointsbbox2_bxfx4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tfpoints_min, tfpoints_max)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_94": {
                "variable": {
                    "value": "tfimidxs_bxhxwx1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bnum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfpoints3d_bxfx9.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.height",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_97": {
                "variable": {
                    "value": "tfimweis_bxhxwx3",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bnum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfpoints3d_bxfx9.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.height",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_98": {
                "variable": {
                    "value": "tfims_bxhxwxd",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bnum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfpoints3d_bxfx9.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.height",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "dnum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tffeatures_bxfx3d.shape[2] // 3",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_99": {
                "variable": {
                    "value": "tfimprob_bxhxwx1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bnum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfpoints3d_bxfx9.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.height",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_102": {
                "variable": {
                    "value": "tfprobface",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bnum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfpoints3d_bxfx9.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.height",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "knum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.knum",
                            "Attribute"
                        ],
                        [
                            "30",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_103": {
                "variable": {
                    "value": "tfprobcase",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bnum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfpoints3d_bxfx9.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.height",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "knum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.knum",
                            "Attribute"
                        ],
                        [
                            "30",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_104": {
                "variable": {
                    "value": "tfprobdis",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bnum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfpoints3d_bxfx9.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.height",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "knum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.knum",
                            "Attribute"
                        ],
                        [
                            "30",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_105": {
                "variable": {
                    "value": "tfprobdep",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bnum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfpoints3d_bxfx9.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.height",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "knum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.knum",
                            "Attribute"
                        ],
                        [
                            "30",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_106": {
                "variable": {
                    "value": "tfprobacc",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bnum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfpoints3d_bxfx9.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.height",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "knum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.knum",
                            "Attribute"
                        ],
                        [
                            "30",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_140": {
                "variable": {
                    "value": "debug_im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bnum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfpoints3d_bxfx9.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.height",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_169": {
                "variable": {
                    "value": "dldp2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tfpoints2dmul_bxfx6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multiplier * tfpoints2d_bxfx6",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_170": {
                "variable": {
                    "value": "dldp2_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tfpoints2dmul_bxfx6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multiplier * tfpoints2d_bxfx6",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_171": {
                "variable": {
                    "value": "dldc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tfcolors_bxfx3d",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "min_79": {
                "input": {
                    "value": "tfpoints2d_bxfx3x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfpoints2dmul_bxfx6.view(bnum, fnum, 3, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_80": {
                "input": {
                    "value": "tfpoints2d_bxfx3x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfpoints2dmul_bxfx6.view(bnum, fnum, 3, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_96": {
                "*size": {
                    "value": "bnum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfpoints3d_bxfx9.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.height",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/renderers/DIB-R/graphics/render/base.py": {
        "torch": {
            "stack_95": {
                "variable": {
                    "value": "camera_view_mtx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "camera_view_mtx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(camera_view_mtx).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_96": {
                "variable": {
                    "value": "camera_view_shift",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "camera_view_shift",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(camera_view_shift).cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/renderers/DIB-R/graphics/render/phongrender.py": {
        "torch": {
            "from_numpy_48": {
                "variable": {
                    "value": "self.pfmtx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pfmtx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_92": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c0[:, :, :1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_93": {
                "variable": {
                    "value": "uv_bxfx3x3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c0, mask, c1, mask, c2, mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_100": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(normal_bxfx3x3, eyedirect_bxfx3x3, uv_bxfx3x3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_74": {
                "variable": {
                    "value": "normal_bxpx3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pfmtx.repeat(normal_bxfx3.shape[0], 1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "normal_bxfx3",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "normal_bxfx9",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(n0, n1, n2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/renderers/DIB-R/graphics/render/shrender.py": {
        "torch": {
            "ones_like_90": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c0[:, :, :1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_91": {
                "variable": {
                    "value": "uv_bxfx3x3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c0, mask, c1, mask, c2, mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(normal_bxfx3x3, uv_bxfx3x3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_73": {
                "variable": {
                    "value": "normal_bxpx3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pfmtx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "normal_bxfx3",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "normal_bxfx9",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(n0, n1, n2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/renderers/DIB-R/graphics/render/texrender.py": {
        "torch": {
            "ones_like_69": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c0[:, :, :1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_70": {
                "variable": {
                    "value": "uv_bxfx9",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c0, mask, c1, mask, c2, mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/renderers/DIB-R/graphics/render/vcrender.py": {
        "torch": {
            "ones_like_69": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c0[:, :, :1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_70": {
                "variable": {
                    "value": "color_bxfx12",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c0, mask, c1, mask, c2, mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/renderers/DIB-R/graphics/test/test_phong.py": {
        "torch": {
            "from_numpy_68": {
                "variable": {
                    "value": "tfp_px3",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p - pmiddle",
                            "BinOp"
                        ],
                        [
                            "p * coef",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_71": {
                "variable": {
                    "value": "tff_fx3",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_73": {
                "variable": {
                    "value": "tfuv_tx2",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "uv",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_75": {
                "variable": {
                    "value": "tfft_fx3",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ft",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_77": {
                "variable": {
                    "value": "tftex_thxtwx3",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.ascontiguousarray(texturenp)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_80": {
                "variable": {
                    "value": "tfcamviewmtx",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "camviewmtx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_81": {
                "variable": {
                    "value": "tfcamshift",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "camviewshift",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-np.dot(camviewmtx.transpose(), camviewshift)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "from_numpy_82": {
                "variable": {
                    "value": "tfcamproj",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "camprojmtx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "perspectiveprojectionnp(camfovy, 1.0 * 1.0 / 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_85": {
                "variable": {
                    "value": "tfp_1xpx3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tfp_px3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(p)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_86": {
                "variable": {
                    "value": "tfuv_1xtx2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tfuv_tx2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(uv)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_87": {
                "variable": {
                    "value": "tftex_1xthxtwx3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tftex_thxtwx3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.ascontiguousarray(texturenp))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_89": {
                "variable": {
                    "value": "tfcamviewmtx_1x3x3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tfcamviewmtx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(camviewmtx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_108": {
                "variable": {
                    "value": "tfmat",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "material",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[0.1, 0.1, 0.1], [1.0, 1.0, 1.0], [0.4, 0.4, 0.4]], dtype=np.float32).reshape(-1, 3, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_109": {
                "variable": {
                    "value": "tfshi",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "shininess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([100], dtype=np.float32).reshape(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_113": {
                "variable": {
                    "value": "tflight",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lightdirect",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * np.random.rand(bs, 3).astype(np.float32) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_127": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tfim_bxhxwx3",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "examples/renderers/DIB-R/graphics/test/test_sh.py": {
        "torch": {
            "from_numpy_76": {
                "variable": {
                    "value": "tfp_px3",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p - pmiddle",
                            "BinOp"
                        ],
                        [
                            "p * coef",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_79": {
                "variable": {
                    "value": "tff_fx3",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_81": {
                "variable": {
                    "value": "tfuv_tx2",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "uv",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_83": {
                "variable": {
                    "value": "tfft_fx3",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ft",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_85": {
                "variable": {
                    "value": "tftex_thxtwx3",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.ascontiguousarray(texturenp)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_88": {
                "variable": {
                    "value": "tfcamviewmtx",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "camviewmtx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_89": {
                "variable": {
                    "value": "tfcamshift",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "camviewshift",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-np.dot(camviewmtx.transpose(), camviewshift)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "from_numpy_90": {
                "variable": {
                    "value": "tfcamproj",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "camprojmtx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "perspectiveprojectionnp(camfovy, 1.0 * 1.0 / 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_93": {
                "variable": {
                    "value": "tfp_1xpx3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tfp_px3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(p)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_94": {
                "variable": {
                    "value": "tfuv_1xtx2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tfuv_tx2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(uv)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_95": {
                "variable": {
                    "value": "tftex_1xthxtwx3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tftex_thxtwx3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.ascontiguousarray(texturenp))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_97": {
                "variable": {
                    "value": "tfcamviewmtx_1x3x3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tfcamviewmtx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(camviewmtx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_114": {
                "variable": {
                    "value": "tflight",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lightparam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.rand(bs, 9).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_125": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tfim_bxhxwx3",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "examples/renderers/DIB-R/graphics/test/test_tex.py": {
        "torch": {
            "from_numpy_76": {
                "variable": {
                    "value": "tfp_px3",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p - pmiddle",
                            "BinOp"
                        ],
                        [
                            "p * coef",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_79": {
                "variable": {
                    "value": "tff_fx3",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_81": {
                "variable": {
                    "value": "tfuv_tx2",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "uv",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_83": {
                "variable": {
                    "value": "tfft_fx3",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ft",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_85": {
                "variable": {
                    "value": "tftex_thxtwx3",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.ascontiguousarray(texturenp)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_88": {
                "variable": {
                    "value": "tfcamviewmtx",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "camviewmtx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_89": {
                "variable": {
                    "value": "tfcamshift",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "camviewshift",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-np.dot(camviewmtx.transpose(), camviewshift)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "from_numpy_90": {
                "variable": {
                    "value": "tfcamproj",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "camprojmtx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "perspectiveprojectionnp(camfovy, 1.0 * 1.0 / 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_93": {
                "variable": {
                    "value": "tfp_1xpx3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tfp_px3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(p)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_94": {
                "variable": {
                    "value": "tfuv_1xtx2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tfuv_tx2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(uv)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_95": {
                "variable": {
                    "value": "tftex_1xthxtwx3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tftex_thxtwx3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.ascontiguousarray(texturenp))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_97": {
                "variable": {
                    "value": "tfcamviewmtx_1x3x3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tfcamviewmtx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(camviewmtx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_119": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tfim_bxhxwx3",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "examples/renderers/DIB-R/graphics/test/test_vc.py": {
        "torch": {
            "from_numpy_77": {
                "variable": {
                    "value": "tfp_px3",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p - pmiddle",
                            "BinOp"
                        ],
                        [
                            "p * coef",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_80": {
                "variable": {
                    "value": "tff_fx3",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_82": {
                "variable": {
                    "value": "tfuv_tx2",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "uv",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_84": {
                "variable": {
                    "value": "tfft_fx3",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ft",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_86": {
                "variable": {
                    "value": "tftex_thxtwx3",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.ascontiguousarray(texturenp)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_89": {
                "variable": {
                    "value": "tfcamviewmtx",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "camviewmtx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_90": {
                "variable": {
                    "value": "tfcamshift",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "camviewshift",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-np.dot(camviewmtx.transpose(), camviewshift)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "from_numpy_91": {
                "variable": {
                    "value": "tfcamproj",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "camprojmtx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "perspectiveprojectionnp(camfovy, 1.0 * 1.0 / 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_94": {
                "variable": {
                    "value": "tfp_1xpx3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tfp_px3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(p)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_95": {
                "variable": {
                    "value": "tfuv_1xtx2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tfuv_tx2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(uv)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_96": {
                "variable": {
                    "value": "tftex_1xthxtwx3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tftex_thxtwx3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.ascontiguousarray(texturenp))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_98": {
                "variable": {
                    "value": "tfcamviewmtx_1x3x3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tfcamviewmtx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(camviewmtx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_120": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tfim_bxhxwx3",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_118": {
                "ndarray": {
                    "value": "np.random.rand(bs, pnum, 3).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "examples/renderers/DIB-R/graphics/utils/utils.py": {
        "torch": {
            "sqrt_32": {
                "variable": {
                    "value": "datalen",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(data ** 2, dim=axis, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_32": {
                "input": {
                    "value": "data ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "examples/renderers/DIB-R/graphics/utils/utils_mesh.py": {
        "torch": {}
    },
    "examples/renderers/DIB-R/graphics/vshader/perpsective.py": {
        "torch": {
            "matmul_38": {
                "variable": {
                    "value": "points_bxpx3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "points_bxpx3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points_bxpx3 - camera_pos_bx3.view(-1, 1, 3)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(points_bxpx3, cameratrans_rot_bx3x3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "cameratrans_rot_bx3x3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "camera_rot_bx3x3.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_49": {
                "variable": {
                    "value": "points3d_bxfx9",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pf0_bxfx3, pf1_bxfx3, pf2_bxfx3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_54": {
                "variable": {
                    "value": "points2d_bxfx6",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xy_f0, xy_f1, xy_f2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_62": {
                "variable": {
                    "value": "normal_bxfx3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v01_bxfx3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pf1_bxfx3 - pf0_bxfx3",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "v02_bxfx3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pf2_bxfx3 - pf0_bxfx3",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/renderers/DIB-R/setup.py": {
        "torch": {}
    },
    "examples/renderers/NMR/examples/example1.py": {
        "torch": {
            "ones_60": {
                "variable": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "faces.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "texture_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "device": {
                    "value": "texture_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/renderers/NMR/examples/example2.py": {
        "torch": {
            "Adam_96": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_51": {
                "variable": {
                    "value": "self.vertices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "vertices[None, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_56": {
                "variable": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.faces.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "texture_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "device": {
                    "value": "texture_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_70": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(image - self.image_ref[None, :, :]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_60": {
                "ndarray": {
                    "value": "imread(filename_ref).astype(np.float32).mean(-1) / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "examples/renderers/NMR/examples/example3.py": {
        "torch": {
            "Adam_95": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_54": {
                "variable": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.faces.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "texture_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "device": {
                    "value": "texture_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_55": {
                "variable": {
                    "value": "self.textures",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(1, self.faces.shape[1], texture_size, texture_size, texture_size, 3, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_72": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(image - self.image_ref) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_58": {
                "ndarray": {
                    "value": "imread(filename_ref).astype('float32') / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "permute_58": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_71": {
                "input": {
                    "value": "self.textures",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_109": {
                "input": {
                    "value": "model.textures",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "examples/renderers/NMR/examples/example4.py": {
        "torch": {
            "Adam_109": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_54": {
                "variable": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.faces.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "texture_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "device": {
                    "value": "texture_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_58": {
                "variable": {
                    "value": "image_ref",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "(imread(filename_ref).max(-1) != 0).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_62": {
                "variable": {
                    "value": "self.camera_position",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(np.array([6, 10, -14], dtype=np.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_71": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(image - self.image_ref[None, :, :]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_88": {
                "input": {
                    "value": "model.textures",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_62": {
                "ndarray": {
                    "value": "np.array([6, 10, -14], dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_116": {
                "input": {
                    "value": "model.textures",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "examples/renderers/NMR/neural_renderer/get_points_from_angles.py": {
        "torch": {
            "stack_44": {
                "tensors": {
                    "value": "[distance * torch.cos(elevation) * torch.sin(azimuth), distance * torch.sin(elevation), -distance * torch.cos(elevation) * torch.cos(azimuth)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_44": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sin_45": {
                "input": {
                    "value": "azimuth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math.radians(azimuth)",
                            "Call"
                        ],
                        [
                            "math.pi / 180.0 * azimuth",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_46": {
                "input": {
                    "value": "elevation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math.radians(elevation)",
                            "Call"
                        ],
                        [
                            "math.pi / 180.0 * elevation",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_47": {
                "input": {
                    "value": "elevation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math.radians(elevation)",
                            "Call"
                        ],
                        [
                            "math.pi / 180.0 * elevation",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_45": {
                "input": {
                    "value": "elevation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math.radians(elevation)",
                            "Call"
                        ],
                        [
                            "math.pi / 180.0 * elevation",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "examples/renderers/NMR/neural_renderer/lighting.py": {
        "torch": {
            "zeros_57": {
                "variable": {
                    "value": "light",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_38": {
                "variable": {
                    "value": "color_ambient",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "color_ambient",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(color_ambient, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(color_ambient).float().to(device)",
                            "Call"
                        ],
                        [
                            "color_ambient[None, :]",
                            "Subscript"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "faces.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_42": {
                "variable": {
                    "value": "color_directional",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "color_directional",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(color_directional, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(color_directional).float().to(device)",
                            "Call"
                        ],
                        [
                            "color_directional[None, :]",
                            "Subscript"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "faces.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_46": {
                "variable": {
                    "value": "direction",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "direction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(direction, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(direction).float().to(device)",
                            "Call"
                        ],
                        [
                            "direction[None, :]",
                            "Subscript"
                        ],
                        [
                            "direction[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "(0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "faces.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "normalize_69": {
                "variable": {
                    "value": "normals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cross(v10, v12)",
                    "type": "Call",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "relu_74": {
                "variable": {
                    "value": "cos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(normals * direction, dim=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_40": {
                "variable": {
                    "value": "color_ambient",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "color_ambient",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(color_ambient, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(color_ambient).float().to(device)",
                            "Call"
                        ],
                        [
                            "color_ambient[None, :]",
                            "Subscript"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_44": {
                "variable": {
                    "value": "color_directional",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "color_directional",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(color_directional, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(color_directional).float().to(device)",
                            "Call"
                        ],
                        [
                            "color_directional[None, :]",
                            "Subscript"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_48": {
                "variable": {
                    "value": "direction",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "direction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(direction, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(direction).float().to(device)",
                            "Call"
                        ],
                        [
                            "direction[None, :]",
                            "Subscript"
                        ],
                        [
                            "direction[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "(0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cross_69": {
                "input": {
                    "value": "v10",
                    "type": "variable",
                    "possible_values": [
                        [
                            "faces[:, 0] - faces[:, 1]",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "v12",
                    "type": "variable",
                    "possible_values": [
                        [
                            "faces[:, 2] - faces[:, 1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_74": {
                "input": {
                    "value": "normals * direction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/renderers/NMR/neural_renderer/load_obj.py": {
        "torch": {
            "from_numpy_97": {
                "variable": {
                    "value": "faces",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "faces",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.vstack(faces).astype(np.int32) - 1",
                            "BinOp"
                        ],
                        [
                            "vertices[faces]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(faces).cuda()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.from_numpy(np.vstack(faces).astype(np.int32)).cuda() - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_149": {
                "variable": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack(vertices).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_106": {
                "variable": {
                    "value": "color",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "color",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(color).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_124": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_126": {
                "variable": {
                    "value": "is_update",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "is_update",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(np.array(material_names) == material_name).astype(np.int32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(is_update).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_101": {
                "*size": {
                    "value": "faces.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "texture_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "texture_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_164": {
                "ndarray": {
                    "value": "np.vstack(faces).astype(np.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_181": {
                "input": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.vstack(vertices).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.from_numpy(np.vstack(vertices).astype(np.float32)).cuda()",
                            "Call"
                        ],
                        [
                            "vertices - vertices.max(0)[0][None, :] / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/renderers/NMR/neural_renderer/look.py": {
        "torch": {
            "normalize_63": {
                "variable": {
                    "value": "z_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "direction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(direction, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(direction).to(device)",
                            "Call"
                        ],
                        [
                            "direction.to(device)",
                            "Call"
                        ],
                        [
                            "direction[None, :]",
                            "Subscript"
                        ],
                        [
                            "[0",
                            "MethodArgument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normalize_64": {
                "variable": {
                    "value": "x_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cross(up, z_axis)",
                    "type": "Call",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normalize_65": {
                "variable": {
                    "value": "y_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cross(z_axis, x_axis)",
                    "type": "Call",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_axis[:, None, :], y_axis[:, None, :], z_axis[:, None, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_75": {
                "variable": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertices - eye",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(vertices, r.transpose(1, 2))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "r.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_40": {
                "variable": {
                    "value": "direction",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "direction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(direction, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(direction).to(device)",
                            "Call"
                        ],
                        [
                            "direction.to(device)",
                            "Call"
                        ],
                        [
                            "direction[None, :]",
                            "Subscript"
                        ],
                        [
                            "[0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertices.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_47": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(eye, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(eye).to(device)",
                            "Call"
                        ],
                        [
                            "eye.to(device)",
                            "Call"
                        ],
                        [
                            "eye[None, :]",
                            "Subscript"
                        ],
                        [
                            "eye[:, None, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertices.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "from_numpy_42": {
                "variable": {
                    "value": "direction",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "direction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(direction, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(direction).to(device)",
                            "Call"
                        ],
                        [
                            "direction.to(device)",
                            "Call"
                        ],
                        [
                            "direction[None, :]",
                            "Subscript"
                        ],
                        [
                            "[0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_49": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(eye, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(eye).to(device)",
                            "Call"
                        ],
                        [
                            "eye.to(device)",
                            "Call"
                        ],
                        [
                            "eye[None, :]",
                            "Subscript"
                        ],
                        [
                            "eye[:, None, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cross_64": {
                "input": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.FloatTensor([0, 1, 0])",
                            "Call"
                        ],
                        [
                            "up[None, :]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "other": {
                    "value": "z_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(direction, eps=1e-05)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_65": {
                "input": {
                    "value": "z_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(direction, eps=1e-05)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(torch.cross(up, z_axis), eps=1e-05)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_43": {
                "obj": {
                    "value": "direction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(direction, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(direction).to(device)",
                            "Call"
                        ],
                        [
                            "direction.to(device)",
                            "Call"
                        ],
                        [
                            "direction[None, :]",
                            "Subscript"
                        ],
                        [
                            "[0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_tensor_50": {
                "obj": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(eye, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(eye).to(device)",
                            "Call"
                        ],
                        [
                            "eye.to(device)",
                            "Call"
                        ],
                        [
                            "eye[None, :]",
                            "Subscript"
                        ],
                        [
                            "eye[:, None, :]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "examples/renderers/NMR/neural_renderer/look_at.py": {
        "torch": {
            "normalize_72": {
                "variable": {
                    "value": "z_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "at - eye",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normalize_73": {
                "variable": {
                    "value": "x_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cross(up, z_axis)",
                    "type": "Call",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normalize_74": {
                "variable": {
                    "value": "y_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cross(z_axis, x_axis)",
                    "type": "Call",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_axis[:, None, :], y_axis[:, None, :], z_axis[:, None, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_84": {
                "variable": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertices - eye",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(vertices, r.transpose(1, 2))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "r.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "variable": {
                    "value": "at",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "at",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(at, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(at).to(device)",
                            "Call"
                        ],
                        [
                            "at[None, :].repeat(batch_size, 1)",
                            "Call"
                        ],
                        [
                            "[0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertices.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_49": {
                "variable": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(up, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(up).to(device)",
                            "Call"
                        ],
                        [
                            "up[None, :].repeat(batch_size, 1)",
                            "Call"
                        ],
                        [
                            "[0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertices.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_56": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(eye, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(eye).to(device)",
                            "Call"
                        ],
                        [
                            "eye[None, :].repeat(batch_size, 1)",
                            "Call"
                        ],
                        [
                            "eye.to(device)",
                            "Call"
                        ],
                        [
                            "eye[:, None, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertices.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "from_numpy_44": {
                "variable": {
                    "value": "at",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "at",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(at, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(at).to(device)",
                            "Call"
                        ],
                        [
                            "at[None, :].repeat(batch_size, 1)",
                            "Call"
                        ],
                        [
                            "[0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_51": {
                "variable": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(up, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(up).to(device)",
                            "Call"
                        ],
                        [
                            "up[None, :].repeat(batch_size, 1)",
                            "Call"
                        ],
                        [
                            "[0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_58": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(eye, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(eye).to(device)",
                            "Call"
                        ],
                        [
                            "eye[None, :].repeat(batch_size, 1)",
                            "Call"
                        ],
                        [
                            "eye.to(device)",
                            "Call"
                        ],
                        [
                            "eye[:, None, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cross_73": {
                "input": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(up, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(up).to(device)",
                            "Call"
                        ],
                        [
                            "up[None, :].repeat(batch_size, 1)",
                            "Call"
                        ],
                        [
                            "[0",
                            "MethodArgument"
                        ]
                    ]
                },
                "other": {
                    "value": "z_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(at - eye, eps=1e-05)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_74": {
                "input": {
                    "value": "z_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(at - eye, eps=1e-05)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(torch.cross(up, z_axis), eps=1e-05)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_45": {
                "obj": {
                    "value": "at",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(at, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(at).to(device)",
                            "Call"
                        ],
                        [
                            "at[None, :].repeat(batch_size, 1)",
                            "Call"
                        ],
                        [
                            "[0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_tensor_52": {
                "obj": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(up, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(up).to(device)",
                            "Call"
                        ],
                        [
                            "up[None, :].repeat(batch_size, 1)",
                            "Call"
                        ],
                        [
                            "[0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_tensor_59": {
                "obj": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(eye, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(eye).to(device)",
                            "Call"
                        ],
                        [
                            "eye[None, :].repeat(batch_size, 1)",
                            "Call"
                        ],
                        [
                            "eye.to(device)",
                            "Call"
                        ],
                        [
                            "eye[:, None, :]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "examples/renderers/NMR/neural_renderer/mesh.py": {
        "torch": {
            "Parameter_46": {
                "variable": {
                    "value": "self.textures",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.05 * torch.randn(*shape)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_46": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "examples/renderers/NMR/neural_renderer/perspective.py": {
        "torch": {
            "tensor_37": {
                "variable": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "angle / 180 * math.pi",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertices.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tan_39": {
                "variable": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(angle / 180 * math.pi, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "angle[None]",
                            "Subscript"
                        ],
                        [
                            "30.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_44": {
                "variable": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, y, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/renderers/NMR/neural_renderer/projection.py": {
        "torch": {
            "sqrt_56": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_ ** 2 + y_ ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_59": {
                "variable": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x__, y__, torch.ones_like(z)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_60": {
                "variable": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(vertices, R.transpose(2, 1)) + t",
                            "BinOp"
                        ],
                        [
                            "torch.stack([x__, y__, torch.ones_like(z)], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(vertices, K.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.stack([u, v, z], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "K.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_66": {
                "variable": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[u, v, z]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_43": {
                "input": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(vertices, R.transpose(2, 1)) + t",
                            "BinOp"
                        ],
                        [
                            "torch.stack([x__, y__, torch.ones_like(z)], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(vertices, K.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.stack([u, v, z], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "R.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_59": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "examples/renderers/NMR/neural_renderer/rasterize.py": {
        "torch": {
            "zeros_like_135": {
                "variable": {
                    "value": "grad_faces",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "faces",
                    "type": "variable",
                    "possible_values": [
                        [
                            "faces.clone()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_185": {
                "variable": {
                    "value": "faces_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "faces",
                    "type": "variable",
                    "possible_values": [
                        [
                            "faces.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_137": {
                "variable": {
                    "value": "grad_textures",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": [
                        [
                            "textures.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.cuda.FloatTensor(1).fill_(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool2d_346": {
                "variable": {
                    "value": "rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rgb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rgb.permute((0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "rgb[:, :, list(reversed(range(rgb.shape[2]))), :]",
                            "Subscript"
                        ],
                        [
                            "F.avg_pool2d(rgb, kernel_size=(2, 2))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_115": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_146": {
                "variable": {
                    "value": "grad_rgb_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rgb_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.FloatTensor(ctx.batch_size, ctx.image_size, ctx.image_size, 3).fill_(0)",
                            "Call"
                        ],
                        [
                            "torch.cuda.FloatTensor(1).fill_(0)",
                            "Call"
                        ],
                        [
                            "RasterizeFunction.forward_background(ctx, face_index_map, rgb_map)",
                            "Call"
                        ],
                        [
                            "rgb_map * mask + (1 - mask) * background_color[None, None, None, :]",
                            "BinOp"
                        ],
                        [
                            "rgb_map * mask + (1 - mask) * background_color[:, None, None, :]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_153": {
                "variable": {
                    "value": "grad_alpha_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.FloatTensor(ctx.batch_size, ctx.image_size, ctx.image_size).fill_(0)",
                            "Call"
                        ],
                        [
                            "torch.cuda.FloatTensor(1).fill_(0)",
                            "Call"
                        ],
                        [
                            "RasterizeFunction.forward_alpha_map(ctx, alpha_map, face_index_map)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_160": {
                "variable": {
                    "value": "grad_depth_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ctx.depth_map",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool2d_348": {
                "input": {
                    "value": "alpha[:, None, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_350": {
                "input": {
                    "value": "depth[:, None, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "examples/renderers/NMR/neural_renderer/renderer.py": {
        "torch": {
            "cat_110": {
                "variable": {
                    "value": "faces",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(faces, faces[:, :, list(reversed(range(faces.shape[-1])))])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_145": {
                "variable": {
                    "value": "faces",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(faces, faces[:, :, list(reversed(range(faces.shape[-1])))])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_179": {
                "variable": {
                    "value": "faces",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(faces, faces[:, :, list(reversed(range(faces.shape[-1])))])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_180": {
                "variable": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(textures, textures.permute((0, 1, 4, 3, 2, 5)))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_227": {
                "variable": {
                    "value": "faces",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(faces, faces[:, :, list(reversed(range(faces.shape[-1])))])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_228": {
                "variable": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(textures, textures.permute((0, 1, 4, 3, 2, 5)))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/renderers/NMR/neural_renderer/save_obj.py": {
        "torch": {
            "zeros_38": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "tile_height * texture_size_out",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "tile_width * texture_size_out",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_39": {
                "variable": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_faces, 3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_40": {
                "variable": {
                    "value": "face_nums",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_faces",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "examples/renderers/NMR/neural_renderer/vertices_to_faces.py": {
        "torch": {
            "arange_43": {
                "start": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "examples/renderers/NMR/setup.py": {
        "torch": {}
    },
    "examples/renderers/SoftRas/examples/demo_deform.py": {
        "torch": {
            "Adam_102": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.99)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_104": {
                "variable": {
                    "value": "camera_distances",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "cameras[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_105": {
                "variable": {
                    "value": "elevations",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "cameras[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_106": {
                "variable": {
                    "value": "viewpoints",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "cameras[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_59": {
                "variable": {
                    "value": "base",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.vertices.abs() / (1 - self.vertices.abs())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_60": {
                "variable": {
                    "value": "centroid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.center",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_112": {
                "variable": {
                    "value": "images_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(args.filename_input).astype('float32') / 255.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_52": {
                "data": {
                    "value": "torch.zeros_like(self.template_mesh.vertices)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_53": {
                "data": {
                    "value": "torch.zeros(1, 1, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_61": {
                "input": {
                    "value": "base + self.displace",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sign_61": {
                "input": {
                    "value": "self.vertices",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_52": {
                "input": {
                    "value": "self.template_mesh.vertices",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_53": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_62": {
                "input": {
                    "value": "-vertices",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "examples/renderers/SoftRas/setup.py": {
        "torch": {}
    },
    "examples/renderers/SoftRas/soft_renderer/functional/ambient_lighting.py": {
        "torch": {
            "tensor_33": {
                "variable": {
                    "value": "light_color",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "light_color",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(light_color, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(light_color).float().to(device)",
                            "Call"
                        ],
                        [
                            "light_color[None, :]",
                            "Subscript"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "light.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "from_numpy_35": {
                "variable": {
                    "value": "light_color",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "light_color",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(light_color, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(light_color).float().to(device)",
                            "Call"
                        ],
                        [
                            "light_color[None, :]",
                            "Subscript"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "examples/renderers/SoftRas/soft_renderer/functional/directional_lighting.py": {
        "torch": {
            "relu_48": {
                "variable": {
                    "value": "cosine",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(normals * light_direction, dim=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_36": {
                "variable": {
                    "value": "light_color",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "light_color",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(light_color, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(light_color).float().to(device)",
                            "Call"
                        ],
                        [
                            "light_color[None, :]",
                            "Subscript"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "light.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_40": {
                "variable": {
                    "value": "light_direction",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "light_direction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(light_direction, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(light_direction).float().to(device)",
                            "Call"
                        ],
                        [
                            "light_direction[None, :]",
                            "Subscript"
                        ],
                        [
                            "(0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "light.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "from_numpy_38": {
                "variable": {
                    "value": "light_color",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "light_color",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(light_color, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(light_color).float().to(device)",
                            "Call"
                        ],
                        [
                            "light_color[None, :]",
                            "Subscript"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_42": {
                "variable": {
                    "value": "light_direction",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "light_direction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(light_direction, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(light_direction).float().to(device)",
                            "Call"
                        ],
                        [
                            "light_direction[None, :]",
                            "Subscript"
                        ],
                        [
                            "(0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_48": {
                "input": {
                    "value": "normals * light_direction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/renderers/SoftRas/soft_renderer/functional/face_vertices.py": {
        "torch": {
            "arange_40": {
                "start": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertices.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "examples/renderers/SoftRas/soft_renderer/functional/get_points_from_angles.py": {
        "torch": {
            "stack_40": {
                "tensors": {
                    "value": "[distance * torch.cos(elevation) * torch.sin(azimuth), distance * torch.sin(elevation), -distance * torch.cos(elevation) * torch.cos(azimuth)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_40": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sin_41": {
                "input": {
                    "value": "azimuth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math.radians(azimuth)",
                            "Call"
                        ],
                        [
                            "math.pi / 180.0 * azimuth",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_42": {
                "input": {
                    "value": "elevation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math.radians(elevation)",
                            "Call"
                        ],
                        [
                            "math.pi / 180.0 * elevation",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_43": {
                "input": {
                    "value": "elevation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math.radians(elevation)",
                            "Call"
                        ],
                        [
                            "math.pi / 180.0 * elevation",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_41": {
                "input": {
                    "value": "elevation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math.radians(elevation)",
                            "Call"
                        ],
                        [
                            "math.pi / 180.0 * elevation",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "examples/renderers/SoftRas/soft_renderer/functional/load_obj.py": {
        "torch": {
            "from_numpy_91": {
                "variable": {
                    "value": "faces",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "faces",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.vstack(faces).astype(np.int32) - 1",
                            "BinOp"
                        ],
                        [
                            "vertices[faces]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(faces).cuda()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.from_numpy(np.vstack(faces).astype(np.int32)).cuda() - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_96": {
                "variable": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "faces.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "texture_res ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_144": {
                "variable": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack(vertices).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_101": {
                "variable": {
                    "value": "color",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "color",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(color).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_119": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_121": {
                "variable": {
                    "value": "is_update",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "is_update",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(np.array(material_names) == material_name).astype(np.int32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(is_update).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_159": {
                "ndarray": {
                    "value": "np.vstack(faces).astype(np.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_177": {
                "variable": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack(textures).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_182": {
                "input": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.vstack(vertices).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.from_numpy(np.vstack(vertices).astype(np.float32)).cuda()",
                            "Call"
                        ],
                        [
                            "vertices - vertices.max(0)[0][None, :] / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/renderers/SoftRas/soft_renderer/functional/look.py": {
        "torch": {
            "normalize_59": {
                "variable": {
                    "value": "z_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "direction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(direction, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(direction).to(device)",
                            "Call"
                        ],
                        [
                            "direction[None, :]",
                            "Subscript"
                        ],
                        [
                            "[0",
                            "MethodArgument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normalize_60": {
                "variable": {
                    "value": "x_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cross(up, z_axis)",
                    "type": "Call",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normalize_61": {
                "variable": {
                    "value": "y_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cross(z_axis, x_axis)",
                    "type": "Call",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_64": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_axis[:, None, :], y_axis[:, None, :], z_axis[:, None, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_71": {
                "variable": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertices - eye",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(vertices, r.transpose(1, 2))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "r.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_38": {
                "variable": {
                    "value": "direction",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "direction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(direction, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(direction).to(device)",
                            "Call"
                        ],
                        [
                            "direction[None, :]",
                            "Subscript"
                        ],
                        [
                            "[0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertices.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_45": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(eye, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(eye).to(device)",
                            "Call"
                        ],
                        [
                            "eye[None, :]",
                            "Subscript"
                        ],
                        [
                            "eye.to(device)",
                            "Call"
                        ],
                        [
                            "eye[:, None, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertices.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "from_numpy_40": {
                "variable": {
                    "value": "direction",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "direction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(direction, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(direction).to(device)",
                            "Call"
                        ],
                        [
                            "direction[None, :]",
                            "Subscript"
                        ],
                        [
                            "[0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_47": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(eye, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(eye).to(device)",
                            "Call"
                        ],
                        [
                            "eye[None, :]",
                            "Subscript"
                        ],
                        [
                            "eye.to(device)",
                            "Call"
                        ],
                        [
                            "eye[:, None, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cross_60": {
                "input": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": [
                        [
                            "up[None, :]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "other": {
                    "value": "z_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(direction, eps=1e-05)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_61": {
                "input": {
                    "value": "z_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(direction, eps=1e-05)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(torch.cross(up, z_axis), eps=1e-05)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_41": {
                "obj": {
                    "value": "direction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(direction, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(direction).to(device)",
                            "Call"
                        ],
                        [
                            "direction[None, :]",
                            "Subscript"
                        ],
                        [
                            "[0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_tensor_48": {
                "obj": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(eye, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(eye).to(device)",
                            "Call"
                        ],
                        [
                            "eye[None, :]",
                            "Subscript"
                        ],
                        [
                            "eye.to(device)",
                            "Call"
                        ],
                        [
                            "eye[:, None, :]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "examples/renderers/SoftRas/soft_renderer/functional/look_at.py": {
        "torch": {
            "cross_71": {
                "variable": {
                    "value": "x_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(up, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(up).to(device)",
                            "Call"
                        ],
                        [
                            "up.unsqueeze(0).repeat(batch_size, 1)",
                            "Call"
                        ],
                        [
                            "[0",
                            "MethodArgument"
                        ]
                    ]
                },
                "other": {
                    "value": "z_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "at - eye",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cross_72": {
                "variable": {
                    "value": "y_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "at - eye",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "x_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(up, z_axis)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_75": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack([x_axis, y_axis, z_axis], dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_82": {
                "variable": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertices - eye",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(vertices, r.transpose(1, 2))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "r.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_39": {
                "variable": {
                    "value": "at",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "at",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(at, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(at).to(device)",
                            "Call"
                        ],
                        [
                            "at.unsqueeze(0).repeat(batch_size, 1)",
                            "Call"
                        ],
                        [
                            "[0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertices.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_47": {
                "variable": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(up, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(up).to(device)",
                            "Call"
                        ],
                        [
                            "up.unsqueeze(0).repeat(batch_size, 1)",
                            "Call"
                        ],
                        [
                            "[0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertices.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_54": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(eye, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(eye).to(device)",
                            "Call"
                        ],
                        [
                            "eye.unsqueeze(0).repeat(batch_size, 1)",
                            "Call"
                        ],
                        [
                            "eye.to(device)",
                            "Call"
                        ],
                        [
                            "eye.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertices.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "from_numpy_42": {
                "variable": {
                    "value": "at",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "at",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(at, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(at).to(device)",
                            "Call"
                        ],
                        [
                            "at.unsqueeze(0).repeat(batch_size, 1)",
                            "Call"
                        ],
                        [
                            "[0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_49": {
                "variable": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(up, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(up).to(device)",
                            "Call"
                        ],
                        [
                            "up.unsqueeze(0).repeat(batch_size, 1)",
                            "Call"
                        ],
                        [
                            "[0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_56": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(eye, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(eye).to(device)",
                            "Call"
                        ],
                        [
                            "eye.unsqueeze(0).repeat(batch_size, 1)",
                            "Call"
                        ],
                        [
                            "eye.to(device)",
                            "Call"
                        ],
                        [
                            "eye.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_75": {
                "tensors": {
                    "value": "[x_axis, y_axis, z_axis]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_tensor_43": {
                "obj": {
                    "value": "at",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(at, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(at).to(device)",
                            "Call"
                        ],
                        [
                            "at.unsqueeze(0).repeat(batch_size, 1)",
                            "Call"
                        ],
                        [
                            "[0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_tensor_50": {
                "obj": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(up, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(up).to(device)",
                            "Call"
                        ],
                        [
                            "up.unsqueeze(0).repeat(batch_size, 1)",
                            "Call"
                        ],
                        [
                            "[0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_tensor_57": {
                "obj": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(eye, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(eye).to(device)",
                            "Call"
                        ],
                        [
                            "eye.unsqueeze(0).repeat(batch_size, 1)",
                            "Call"
                        ],
                        [
                            "eye.to(device)",
                            "Call"
                        ],
                        [
                            "eye.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/renderers/SoftRas/soft_renderer/functional/orthogonal.py": {
        "torch": {
            "stack_38": {
                "variable": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, y, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/renderers/SoftRas/soft_renderer/functional/perspective.py": {
        "torch": {
            "cat_39": {
                "variable": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xy.permute(1, 2, 0), z.unsqueeze(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/renderers/SoftRas/soft_renderer/functional/projection.py": {
        "torch": {
            "cat_33": {
                "variable": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vertices, torch.ones_like(vertices[:, :, None, 0])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_34": {
                "variable": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([vertices, torch.ones_like(vertices[:, :, None, 0])], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(vertices, P.transpose(2, 1))",
                            "Call"
                        ],
                        [
                            "torch.stack([x__, y__, z], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "P.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_47": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_ ** 2 + y_ ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_52": {
                "variable": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x__, y__, z]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_33": {
                "input": {
                    "value": "vertices[:, :, None, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "examples/renderers/SoftRas/soft_renderer/functional/save_obj.py": {
        "torch": {
            "ones_35": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "tile_height * texture_res",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "tile_width * texture_res",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_36": {
                "variable": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_faces, 3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_37": {
                "variable": {
                    "value": "face_nums",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_faces",
                    "type": "variable",
                    "possible_values": [
                        [
                            "textures.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_124": {
                "data": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((num_faces, 3, 2), dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "vertices.cuda()",
                            "Call"
                        ],
                        [
                            "vertices.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.autograd.Variable(torch.tensor(vertices))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_125": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "examples/renderers/SoftRas/soft_renderer/functional/soft_rasterize.py": {
        "torch": {
            "full_69": {
                "variable": {
                    "value": "faces_info",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(ctx.batch_size, ctx.num_faces, 9 * 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "ctx.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_71": {
                "variable": {
                    "value": "aggrs_info",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(ctx.batch_size, 2, ctx.image_size, ctx.image_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "ctx.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "soft_colors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.full((ctx.batch_size, 1, ctx.image_size, ctx.image_size), fill_value=background_color[0], device=ctx.device), torch.full((ctx.batch_size, 1, ctx.image_size, ctx.image_size), fill_value=background_color[1], device=ctx.device), torch.full((ctx.batch_size, 1, ctx.image_size, ctx.image_size), fill_value=background_color[2], device=ctx.device), torch.full((ctx.batch_size, 1, ctx.image_size, ctx.image_size), fill_value=1.0, device=ctx.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_111": {
                "variable": {
                    "value": "grad_faces",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "face_vertices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "face_vertices.clone()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "ctx.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_112": {
                "variable": {
                    "value": "grad_textures",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": [
                        [
                            "textures.clone()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "ctx.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_73": {
                "size": {
                    "value": "(ctx.batch_size, 1, ctx.image_size, ctx.image_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "background_color[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "ctx.background_color",
                            "Attribute"
                        ],
                        [
                            "[0",
                            "MethodArgument"
                        ],
                        [
                            "[0",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "ctx.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_75": {
                "size": {
                    "value": "(ctx.batch_size, 1, ctx.image_size, ctx.image_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "background_color[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "ctx.background_color",
                            "Attribute"
                        ],
                        [
                            "[0",
                            "MethodArgument"
                        ],
                        [
                            "[0",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "ctx.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_77": {
                "size": {
                    "value": "(ctx.batch_size, 1, ctx.image_size, ctx.image_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "background_color[2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "ctx.background_color",
                            "Attribute"
                        ],
                        [
                            "[0",
                            "MethodArgument"
                        ],
                        [
                            "[0",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "ctx.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_79": {
                "size": {
                    "value": "(ctx.batch_size, 1, ctx.image_size, ctx.image_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "ctx.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "examples/renderers/SoftRas/soft_renderer/functional/vertex_normals.py": {
        "torch": {
            "zeros_41": {
                "variable": {
                    "value": "normals",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs * nv",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_55": {
                "variable": {
                    "value": "normals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(bs * nv, 3).to(device)",
                            "Call"
                        ],
                        [
                            "F.normalize(normals, eps=1e-06, dim=1)",
                            "Call"
                        ],
                        [
                            "normals.reshape((bs, nv, 3))",
                            "Call"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_49": {
                "input": {
                    "value": "vertices_faces[:, 2] - vertices_faces[:, 1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "vertices_faces[:, 0] - vertices_faces[:, 1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cross_51": {
                "input": {
                    "value": "vertices_faces[:, 0] - vertices_faces[:, 2]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "vertices_faces[:, 1] - vertices_faces[:, 2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cross_53": {
                "input": {
                    "value": "vertices_faces[:, 1] - vertices_faces[:, 0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "vertices_faces[:, 2] - vertices_faces[:, 0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_42": {
                "start": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertices.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "examples/renderers/SoftRas/soft_renderer/functional/voxelization.py": {
        "torch": {
            "zeros_38": {
                "variable": {
                    "value": "voxels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(bs, size, size, size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_44": {
                "variable": {
                    "value": "voxels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(bs, size, size, size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_like_50": {
                "variable": {
                    "value": "visible",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "voxels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((bs, size, size, size), dtype=torch.int, device='cuda')",
                            "Call"
                        ],
                        [
                            "torch.zeros((bs, size, size, size), dtype=torch.int, device='cuda')",
                            "Call"
                        ],
                        [
                            "voxels0 + voxels1 + voxels2 + voxels3",
                            "BinOp"
                        ],
                        [
                            "(voxels > 0).int()",
                            "Call"
                        ],
                        [
                            "voxelize_sub3(faces, voxels)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "examples/renderers/SoftRas/soft_renderer/lighting.py": {
        "torch": {
            "ModuleList_68": {
                "variable": {
                    "value": "self.directionals",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DirectionalLighting(intensity_directionals, color_directionals, directions)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_74": {
                "variable": {
                    "value": "light",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mesh.faces",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "mesh.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_82": {
                "variable": {
                    "value": "light",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mesh.vertices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "mesh.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "examples/renderers/SoftRas/soft_renderer/losses.py": {
        "torch": {
            "matmul_53": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.laplacian",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(self.laplacian, x)",
                            "Call"
                        ],
                        [
                            "x.pow(2).sum(dims)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_49": {
                "ndarray": {
                    "value": "laplacian",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([self.nv, self.nv]).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_89": {
                "ndarray": {
                    "value": "v0s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([v[0] for v in vertices], 'int32')",
                            "Call"
                        ],
                        [
                            "vertices[:, self.v0s, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_90": {
                "ndarray": {
                    "value": "v1s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([v[1] for v in vertices], 'int32')",
                            "Call"
                        ],
                        [
                            "vertices[:, self.v1s, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_91": {
                "ndarray": {
                    "value": "v2s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(v2s, 'int32')",
                            "Call"
                        ],
                        [
                            "vertices[:, self.v2s, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_92": {
                "ndarray": {
                    "value": "v3s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(v3s, 'int32')",
                            "Call"
                        ],
                        [
                            "vertices[:, self.v3s, :]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "examples/renderers/SoftRas/soft_renderer/mesh.py": {
        "torch": {
            "from_numpy_43": {
                "variable": {
                    "value": "self._vertices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self._vertices",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_45": {
                "variable": {
                    "value": "self._faces",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self._faces",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_138": {
                "variable": {
                    "value": "self._surface_normals",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cross(v12, v10)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_160": {
                "variable": {
                    "value": "self.faces",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.faces, self.faces[:, :, [2, 1, 0]])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_161": {
                "variable": {
                    "value": "self.textures",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.textures, self.textures)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_70": {
                "variable": {
                    "value": "self._textures",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_faces",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_79": {
                "variable": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(textures).float().cuda()",
                            "Call"
                        ],
                        [
                            "textures[None, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "textures[None, :, :]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_74": {
                "variable": {
                    "value": "self._textures",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_vertices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_138": {
                "input": {
                    "value": "v12",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.face_vertices[:, :, 2] - self.face_vertices[:, :, 1]",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "v10",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.face_vertices[:, :, 0] - self.face_vertices[:, :, 1]",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "examples/renderers/SoftRas/soft_renderer/rasterizer.py": {
        "torch": {
            "avg_pool2d_73": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "srf.soft_rasterize(mesh.face_vertices, mesh.face_textures, image_size, self.background_color, self.near, self.far, self.fill_back, self.eps, self.sigma_val, self.dist_func, self.dist_eps, self.gamma_val, self.aggr_func_rgb, self.aggr_func_alpha, self.texture_type)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(images, kernel_size=2, stride=2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/renderers/SoftRas/soft_renderer/renderer.py": {
        "torch": {}
    },
    "examples/renderers/SoftRas/soft_renderer/transform.py": {
        "torch": {
            "from_numpy_39": {
                "variable": {
                    "value": "self.P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.P",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "examples/renderers/test/opt_textures.py": {
        "torch": {
            "rand_105": {
                "variable": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "faces.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_112": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.99)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_137": {
                "variable": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "faces.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_143": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.99)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_167": {
                "variable": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "vertices.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_171": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.99)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_194": {
                "variable": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_198": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.99)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_222": {
                "variable": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_226": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.99)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_235": {
                "variable": {
                    "value": "material",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "material",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[0.3, 0.3, 0.3], [1.0, 1.0, 1.0], [0.4, 0.4, 0.4]], dtype=np.float32).reshape(-1, 3, 3)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(material).repeat(1, 1, 1).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_238": {
                "variable": {
                    "value": "shininess",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "shininess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([100], dtype=np.float32).reshape(-1, 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(shininess).repeat(1, 1).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_242": {
                "variable": {
                    "value": "lightdirect",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lightdirect",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * np.random.rand(1, 3).astype(np.float32) - 1",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(lightdirect).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_273": {
                "variable": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_277": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.99)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_282": {
                "variable": {
                    "value": "lightparam",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lightparam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.rand(1, 9).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lightparam).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_56": {
                "variable": {
                    "value": "self.textures",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(1, faces.shape[1], 2, 2, 2, 3, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, faces.shape[1], 2, 3, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, vertices.shape[1], 3).cuda()",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 256, 256).cuda()",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 256, 256).cuda()",
                            "Call"
                        ],
                        [
                            "torch.rand(1, 3, 256, 256).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_122": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(image_pred - image_gt) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_153": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(image_pred[:, :3] - image_gt[None, :, :]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_180": {
                "variable": {
                    "value": "image_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(image_pred, alpha)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_182": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(image_pred[:, :3] - image_gt[None, :, :]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_208": {
                "variable": {
                    "value": "image_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(image_pred, alpha)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_210": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(image_pred[:, :3] - image_gt[None, :, :]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_256": {
                "variable": {
                    "value": "image_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(image_pred, alpha)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_260": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(image_pred[:, :3] - image_gt[None, :, :]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_295": {
                "variable": {
                    "value": "image_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(image_pred, alpha)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_297": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(image_pred[:, :3] - image_gt[None, :, :]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_58": {
                "input": {
                    "value": "self.textures",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_99": {
                "ndarray": {
                    "value": "imread(filename_ref).astype('float32') / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "permute_99": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/renderers/test/opt_vertex.py": {
        "torch": {
            "ones_117": {
                "variable": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "faces.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_121": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.99)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_149": {
                "variable": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "faces.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_155": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.99)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_183": {
                "variable": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "vertices.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_186": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.99)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_218": {
                "variable": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_221": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.99)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_253": {
                "variable": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_256": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.99)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_262": {
                "variable": {
                    "value": "material",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "material",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[0.1, 0.1, 0.1], [1.0, 1.0, 1.0], [0.4, 0.4, 0.4]], dtype=np.float32).reshape(-1, 3, 3)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(material).repeat(1, 1, 1).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_265": {
                "variable": {
                    "value": "shininess",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "shininess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([100], dtype=np.float32).reshape(-1, 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(shininess).repeat(1, 1).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_269": {
                "variable": {
                    "value": "lightdirect",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lightdirect",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * np.random.rand(1, 3).astype(np.float32) - 1",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(lightdirect).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_304": {
                "variable": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_307": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.99)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_311": {
                "variable": {
                    "value": "lightparam",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lightparam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.rand(1, 9).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lightparam).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_57": {
                "variable": {
                    "value": "self.update",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(vertices.shape) * 0.001",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_131": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(image_pred - image_gt[None, :, :]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_166": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(image_pred - image_gt[None, :, :]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_197": {
                "variable": {
                    "value": "image_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(image_pred, alpha)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_200": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(image_pred - image_gt[None, :, :]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_231": {
                "variable": {
                    "value": "image_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(image_pred, alpha)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_234": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(image_pred - image_gt[None, :, :]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_282": {
                "variable": {
                    "value": "image_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(image_pred, alpha)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_285": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(image_pred - image_gt[None, :, :]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_322": {
                "variable": {
                    "value": "image_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(image_pred, alpha)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_326": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(image_pred - image_gt[None, :, :]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_57": {
                "*size": {
                    "value": "vertices.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_78": {
                "ndarray": {
                    "value": "imread(filename_ref).astype(np.float32).mean(-1) / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "examples/renderers/test/simple_render.py": {
        "torch": {
            "ones_100": {
                "variable": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "faces.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_118": {
                "variable": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "faces.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_138": {
                "variable": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "vertices.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_156": {
                "variable": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_173": {
                "variable": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_179": {
                "variable": {
                    "value": "material",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "material",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[0.1, 0.1, 0.1], [1.0, 1.0, 1.0], [0.4, 0.4, 0.4]], dtype=np.float32).reshape(-1, 3, 3)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(material).repeat(1, 1, 1).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_182": {
                "variable": {
                    "value": "shininess",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "shininess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([100], dtype=np.float32).reshape(-1, 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(shininess).repeat(1, 1).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_186": {
                "variable": {
                    "value": "lightdirect",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lightdirect",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * np.random.rand(1, 3).astype(np.float32) - 1",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(lightdirect).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_208": {
                "variable": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_213": {
                "variable": {
                    "value": "lightparam",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lightparam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.rand(1, 9).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lightparam).cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/renderers/test/test_dibr.py": {
        "torch": {
            "ones_83": {
                "variable": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "vertices.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/renderers/test/test_nmr.py": {
        "torch": {
            "ones_72": {
                "variable": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "faces.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/renderers/test/test_softras.py": {
        "torch": {
            "ones_72": {
                "variable": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "faces.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "kaolin/conversions/meshconversions.py": {
        "torch": {
            "index_select_95": {
                "variable": {
                    "value": "v1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mesh.vertices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "faces[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_96": {
                "variable": {
                    "value": "v2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mesh.vertices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "faces[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_97": {
                "variable": {
                    "value": "v3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mesh.vertices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "faces[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_136": {
                "variable": {
                    "value": "voxel",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(resolution, resolution, resolution)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "split_138": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "points.permute(1, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_89": {
                "variable": {
                    "value": "tri_faces_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mesh.faces[:, :2], mesh.faces[:, 3:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_90": {
                "variable": {
                    "value": "tri_faces_2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mesh.faces[:, :1], mesh.faces[:, 2:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_91": {
                "variable": {
                    "value": "faces",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tri_faces_1, tri_faces_2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_103": {
                "variable": {
                    "value": "sides",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(side_1, side_2, side_3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_118": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(points, v4, v5, v6)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_tensor_165": {
                "obj": {
                    "value": "occ_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kal.rep.SDF.check_sign(mesh, query)",
                            "Call"
                        ],
                        [
                            "occ_points.cpu().numpy()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_129": {
                "variable": {
                    "value": "new_verts[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(new_verts[j], vertex_set[new_traingles[i][j]])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "abs_100": {
                "input": {
                    "value": "v1 - v2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_101": {
                "input": {
                    "value": "v2 - v3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_102": {
                "input": {
                    "value": "v3 - v1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "kaolin/conversions/pointcloudconversions.py": {
        "torch": {
            "from_numpy_55": {
                "variable": {
                    "value": "gridpts",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gridpts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.where(voxels == 0)",
                            "Call"
                        ],
                        [
                            "np.asarray([gridpts[0], gridpts[1], gridpts[2]]).T.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(gridpts)",
                            "Call"
                        ],
                        [
                            "voxsize * (gridpts - (voxres - 1) / 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_75": {
                "ndarray": {
                    "value": "voxels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((voxres, voxres, voxres), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "pointcloud_to_voxelgrid(points, 32, 0.1)",
                            "Call"
                        ],
                        [
                            "pointcloud_to_voxelgrid(points, 32, 0.1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_81": {
                "ndarray": {
                    "value": "voxels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((voxres, voxres, voxres), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "pointcloud_to_voxelgrid(points, 32, 0.1)",
                            "Call"
                        ],
                        [
                            "pointcloud_to_voxelgrid(points, 32, 0.1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "kaolin/conversions/sdfconversions.py": {
        "torch": {}
    },
    "kaolin/conversions/voxelgridconversions.py": {
        "torch": {
            "conv3d_101": {
                "variable": {
                    "value": "voxel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "voxel.unsqueeze(0).unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "conv_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(scale_filter).to(voxel.device) / scale_factor",
                            "BinOp"
                        ],
                        [
                            "torch.ones((1, 1, 3, 3, 3))",
                            "Call"
                        ],
                        [
                            "conv_filter.cuda()",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_365": {
                "variable": {
                    "value": "conv_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 1, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_366": {
                "variable": {
                    "value": "surface_voxel",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "voxel.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv3d_371": {
                "variable": {
                    "value": "local_occupancy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "voxel.unsqueeze(0).unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "conv_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(scale_filter).to(voxel.device) / scale_factor",
                            "BinOp"
                        ],
                        [
                            "torch.ones((1, 1, 3, 3, 3))",
                            "Call"
                        ],
                        [
                            "conv_filter.cuda()",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_430": {
                "variable": {
                    "value": "point_displacement",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "point_positions.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_264": {
                "variable": {
                    "value": "voxel",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(dim, dim, dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Tensor_317": {
                "variable": {
                    "value": "voxgrid",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_99": {
                "*size": {
                    "value": "scale_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 1]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "kaolin/datasets/modelnet.py": {
        "torch": {}
    },
    "kaolin/datasets/scannet.py": {
        "torch": {}
    },
    "kaolin/datasets/shapenet.py": {
        "torch": {
            "tensor_1003": {
                "variable": {
                    "value": "data[tag_inp_len]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "len(input_tags)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_1004": {
                "variable": {
                    "value": "data[tag_full_len]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "len(full_tag[:last_tag_id + 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_1005": {
                "variable": {
                    "value": "data[tag_label_len]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "len(full_tag)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_712": {
                "variable": {
                    "value": "bbox_true",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mesh.vertices.min(dim=0)[0], mesh.vertices.max(dim=0)[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_976": {
                "ndarray": {
                    "value": "embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(len(self.tag_index), dtype=np.uint8)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_731": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_714": {
                "*size": {
                    "value": "self.params['num_points']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "kaolin/datasets/shrec.py": {
        "torch": {}
    },
    "kaolin/datasets/usdfile.py": {
        "torch": {
            "tensor_26": {
                "variable": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "usd_mesh.GetPointsAttr().Get()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_27": {
                "variable": {
                    "value": "faces",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "usd_mesh.GetFaceVertexIndicesAttr().Get()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_25": {
                "data": {
                    "value": "usd_mesh.GetFaceVertexCountsAttr().Get()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_68": {
                "variable": {
                    "value": "face_counts",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mesh.GetFaceVertexCountsAttr().Get()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_69": {
                "input": {
                    "value": "face_counts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(mesh.GetFaceVertexCountsAttr().Get())",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "face_counts[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "kaolin/engine/classification.py": {
        "torch": {
            "argmax_178": {
                "variable": {
                    "value": "predlabel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(data)",
                            "Call"
                        ],
                        [
                            "self.model(data)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_179": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(predlabel == label.view(-1)).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_195": {
                "variable": {
                    "value": "predlabel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(data)",
                            "Call"
                        ],
                        [
                            "self.model(data)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_196": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(predlabel == label.view(-1)).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_57": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_162": {
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.hyperparams['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "betas": {
                    "value": "(self.hyperparams['beta1'], self.hyperparams['beta2'])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_240": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "kaolin/engine/engine.py": {
        "torch": {}
    },
    "kaolin/graphics/DIBRenderer.py": {
        "torch": {}
    },
    "kaolin/graphics/DifferentiableRenderer.py": {
        "torch": {}
    },
    "kaolin/graphics/Lighting.py": {
        "torch": {
            "zeros_115": {
                "variable": {
                    "value": "light",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "face_vertices.shape[0]",
                            "Subscript"
                        ],
                        [
                            "face_vertices.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "num_faces",
                    "type": "variable",
                    "possible_values": [
                        [
                            "face_vertices.shape[1]",
                            "Subscript"
                        ],
                        [
                            "face_vertices.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_251": {
                "variable": {
                    "value": "light",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "face_vertices.shape[0]",
                            "Subscript"
                        ],
                        [
                            "face_vertices.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "num_faces",
                    "type": "variable",
                    "possible_values": [
                        [
                            "face_vertices.shape[1]",
                            "Subscript"
                        ],
                        [
                            "face_vertices.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_263": {
                "variable": {
                    "value": "normals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cross(v10, v12)",
                    "type": "Call",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "relu_271": {
                "variable": {
                    "value": "cos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(normals * direction, dim=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_48": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_137": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_170": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_283": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_tensor_73": {
                "obj": {
                    "value": "face_vertices",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_tensor_77": {
                "obj": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_tensor_86": {
                "obj": {
                    "value": "ambient_color",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ambient_color[None, :].to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_198": {
                "obj": {
                    "value": "face_vertices",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_tensor_202": {
                "obj": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_tensor_211": {
                "obj": {
                    "value": "directional_color",
                    "type": "variable",
                    "possible_values": [
                        [
                            "directional_color[None, :].to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_215": {
                "obj": {
                    "value": "direction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "direction[None, :].to(device)",
                            "Call"
                        ],
                        [
                            "direction[:, None, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cross_263": {
                "input": {
                    "value": "v10",
                    "type": "variable",
                    "possible_values": [
                        [
                            "faces[:, 0] - faces[:, 1]",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "v12",
                    "type": "variable",
                    "possible_values": [
                        [
                            "faces[:, 2] - faces[:, 1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_271": {
                "input": {
                    "value": "normals * direction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "kaolin/graphics/NeuralMeshRenderer.py": {
        "torch": {
            "Tensor_534": {
                "variable": {
                    "value": "elevation",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_552": {
                "variable": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "faces.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_443": {
                "variable": {
                    "value": "z_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "at - eye",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normalize_444": {
                "variable": {
                    "value": "x_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cross(up, z_axis)",
                    "type": "Call",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normalize_445": {
                "variable": {
                    "value": "y_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cross(z_axis, x_axis)",
                    "type": "Call",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_448": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_axis[:, None, :], y_axis[:, None, :], z_axis[:, None, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_456": {
                "variable": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mesh.vertices",
                            "Attribute"
                        ],
                        [
                            "vertices[None, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "vertices - vertices_middle",
                            "BinOp"
                        ],
                        [
                            "vertices * coef",
                            "BinOp"
                        ],
                        [
                            "self.transform_to_camera_frame(vertices)",
                            "Call"
                        ],
                        [
                            "self.project_to_image(vertices)",
                            "Call"
                        ],
                        [
                            "self.look_at(vertices, self.eye)",
                            "Call"
                        ],
                        [
                            "self.look(vertices, self.eye, self.camera_direction)",
                            "Call"
                        ],
                        [
                            "self.perspective_distortion(vertices, angle=self.viewing_angle)",
                            "Call"
                        ],
                        [
                            "self.perspective_distortion(vertices, angle=self.viewing_angle)",
                            "Call"
                        ],
                        [
                            "perspective_projection(vertices, K, rmat, tvec)",
                            "Call"
                        ],
                        [
                            "vertices - eye",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(vertices, R.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "vertices - eye",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(vertices, R.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.stack((x, y, z), dim=2)",
                            "Call"
                        ],
                        [
                            "vertices.reshape(B * V, 3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "R.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_480": {
                "variable": {
                    "value": "z_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "direction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "direction.to(device)",
                            "Call"
                        ],
                        [
                            "direction[None, :]",
                            "Subscript"
                        ],
                        [
                            "torch.FloatTensor([0",
                            "MethodArgument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normalize_481": {
                "variable": {
                    "value": "x_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cross(up, z_axis)",
                    "type": "Call",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normalize_482": {
                "variable": {
                    "value": "y_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cross(z_axis, x_axis)",
                    "type": "Call",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_485": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_axis[:, None, :], y_axis[:, None, :], z_axis[:, None, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_492": {
                "variable": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mesh.vertices",
                            "Attribute"
                        ],
                        [
                            "vertices[None, :, :].cuda()",
                            "Call"
                        ],
                        [
                            "vertices - vertices_middle",
                            "BinOp"
                        ],
                        [
                            "vertices * coef",
                            "BinOp"
                        ],
                        [
                            "self.transform_to_camera_frame(vertices)",
                            "Call"
                        ],
                        [
                            "self.project_to_image(vertices)",
                            "Call"
                        ],
                        [
                            "self.look_at(vertices, self.eye)",
                            "Call"
                        ],
                        [
                            "self.look(vertices, self.eye, self.camera_direction)",
                            "Call"
                        ],
                        [
                            "self.perspective_distortion(vertices, angle=self.viewing_angle)",
                            "Call"
                        ],
                        [
                            "self.perspective_distortion(vertices, angle=self.viewing_angle)",
                            "Call"
                        ],
                        [
                            "perspective_projection(vertices, K, rmat, tvec)",
                            "Call"
                        ],
                        [
                            "vertices - eye",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(vertices, R.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "vertices - eye",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(vertices, R.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.stack((x, y, z), dim=2)",
                            "Call"
                        ],
                        [
                            "vertices.reshape(B * V, 3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "R.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tan_501": {
                "variable": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor([angle * 180 / kal.mathutils.pi]).to(device)",
                            "Call"
                        ],
                        [
                            "30.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_506": {
                "variable": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, y, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_62": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_72": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_73": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_257": {
                "variable": {
                    "value": "faces",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(faces, faces[:, :, list(reversed(range(faces.shape[-1])))])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_259": {
                "variable": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(textures, textures.permute(0, 1, 4, 3, 2, 5))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_554": {},
            "cross_444": {
                "input": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": [
                        [
                            "up.to(device)",
                            "Call"
                        ],
                        [
                            "up[None, :].repeat(batchsize, 1)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([0, 1, 0]).to(device)",
                            "Call"
                        ],
                        [
                            "up[None, :]",
                            "Subscript"
                        ],
                        [
                            "torch.FloatTensor([0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "other": {
                    "value": "z_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(at - eye, eps=1e-05)",
                            "Call"
                        ],
                        [
                            "F.normalize(direction, eps=1e-05)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_445": {
                "input": {
                    "value": "z_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(at - eye, eps=1e-05)",
                            "Call"
                        ],
                        [
                            "F.normalize(direction, eps=1e-05)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(torch.cross(up, z_axis), eps=1e-05)",
                            "Call"
                        ],
                        [
                            "F.normalize(torch.cross(up, z_axis), eps=1e-05)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_481": {
                "input": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": [
                        [
                            "up.to(device)",
                            "Call"
                        ],
                        [
                            "up[None, :].repeat(batchsize, 1)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([0, 1, 0]).to(device)",
                            "Call"
                        ],
                        [
                            "up[None, :]",
                            "Subscript"
                        ],
                        [
                            "torch.FloatTensor([0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "other": {
                    "value": "z_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(at - eye, eps=1e-05)",
                            "Call"
                        ],
                        [
                            "F.normalize(direction, eps=1e-05)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_482": {
                "input": {
                    "value": "z_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(at - eye, eps=1e-05)",
                            "Call"
                        ],
                        [
                            "F.normalize(direction, eps=1e-05)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(torch.cross(up, z_axis), eps=1e-05)",
                            "Call"
                        ],
                        [
                            "F.normalize(torch.cross(up, z_axis), eps=1e-05)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_520": {
                "start": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertices.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tan_175": {
                "input": {
                    "value": "kal.mathutils.pi * self.viewing_angle / 180",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "kaolin/graphics/SoftRenderer.py": {
        "torch": {
            "normalize_445": {
                "variable": {
                    "value": "z_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "at - eye",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normalize_446": {
                "variable": {
                    "value": "x_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cross(up, z_axis)",
                    "type": "Call",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normalize_447": {
                "variable": {
                    "value": "y_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cross(z_axis, x_axis)",
                    "type": "Call",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_450": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_axis[:, None, :], y_axis[:, None, :], z_axis[:, None, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_458": {
                "variable": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transform_to_camera_frame(vertices)",
                            "Call"
                        ],
                        [
                            "project_to_image(vertices)",
                            "Call"
                        ],
                        [
                            "self.look_at(vertices, self.eye)",
                            "Call"
                        ],
                        [
                            "self.look(vertices, self.eye, self.camera_direction)",
                            "Call"
                        ],
                        [
                            "self.perspective_distort(vertices, angle=self.viewing_angle)",
                            "Call"
                        ],
                        [
                            "self.perspective_distort(vertices, angle=self.viewing_angle)",
                            "Call"
                        ],
                        [
                            "perspective_projection(vertices, K, rmat, tvec)",
                            "Call"
                        ],
                        [
                            "vertices - eye",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(vertices, R.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "vertices - eye",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(vertices, R.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.stack((x, y, z), dim=2)",
                            "Call"
                        ],
                        [
                            "vertices.reshape(B * V, 3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "R.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_482": {
                "variable": {
                    "value": "z_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "direction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "direction.to(device)",
                            "Call"
                        ],
                        [
                            "direction[None, :]",
                            "Subscript"
                        ],
                        [
                            "torch.FloatTensor([0",
                            "MethodArgument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normalize_483": {
                "variable": {
                    "value": "x_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cross(up, z_axis)",
                    "type": "Call",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normalize_484": {
                "variable": {
                    "value": "y_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cross(z_axis, x_axis)",
                    "type": "Call",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_487": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_axis[:, None, :], y_axis[:, None, :], z_axis[:, None, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_494": {
                "variable": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transform_to_camera_frame(vertices)",
                            "Call"
                        ],
                        [
                            "project_to_image(vertices)",
                            "Call"
                        ],
                        [
                            "self.look_at(vertices, self.eye)",
                            "Call"
                        ],
                        [
                            "self.look(vertices, self.eye, self.camera_direction)",
                            "Call"
                        ],
                        [
                            "self.perspective_distort(vertices, angle=self.viewing_angle)",
                            "Call"
                        ],
                        [
                            "self.perspective_distort(vertices, angle=self.viewing_angle)",
                            "Call"
                        ],
                        [
                            "perspective_projection(vertices, K, rmat, tvec)",
                            "Call"
                        ],
                        [
                            "vertices - eye",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(vertices, R.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "vertices - eye",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(vertices, R.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.stack((x, y, z), dim=2)",
                            "Call"
                        ],
                        [
                            "vertices.reshape(B * V, 3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "R.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tan_503": {
                "variable": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor([angle * 180 / kal.math.pi]).to(device)",
                            "Call"
                        ],
                        [
                            "30.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_508": {
                "variable": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, y, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_61": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_81": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_82": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_265": {
                "variable": {
                    "value": "faces",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(faces, faces[:, :, list(reversed(range(faces.shape[-1])))])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_267": {
                "variable": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(textures, textures.permute(0, 1, 4, 3, 2, 5))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_446": {
                "input": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": [
                        [
                            "up.to(device)",
                            "Call"
                        ],
                        [
                            "up[None, :].repeat(batchsize, 1)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([0, 1, 0]).to(device)",
                            "Call"
                        ],
                        [
                            "up[None, :]",
                            "Subscript"
                        ],
                        [
                            "torch.FloatTensor([0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "other": {
                    "value": "z_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(at - eye, eps=1e-05)",
                            "Call"
                        ],
                        [
                            "F.normalize(direction, eps=1e-05)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_447": {
                "input": {
                    "value": "z_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(at - eye, eps=1e-05)",
                            "Call"
                        ],
                        [
                            "F.normalize(direction, eps=1e-05)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(torch.cross(up, z_axis), eps=1e-05)",
                            "Call"
                        ],
                        [
                            "F.normalize(torch.cross(up, z_axis), eps=1e-05)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_483": {
                "input": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": [
                        [
                            "up.to(device)",
                            "Call"
                        ],
                        [
                            "up[None, :].repeat(batchsize, 1)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([0, 1, 0]).to(device)",
                            "Call"
                        ],
                        [
                            "up[None, :]",
                            "Subscript"
                        ],
                        [
                            "torch.FloatTensor([0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "other": {
                    "value": "z_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(at - eye, eps=1e-05)",
                            "Call"
                        ],
                        [
                            "F.normalize(direction, eps=1e-05)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_484": {
                "input": {
                    "value": "z_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(at - eye, eps=1e-05)",
                            "Call"
                        ],
                        [
                            "F.normalize(direction, eps=1e-05)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(torch.cross(up, z_axis), eps=1e-05)",
                            "Call"
                        ],
                        [
                            "F.normalize(torch.cross(up, z_axis), eps=1e-05)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_522": {
                "start": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertices.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tan_183": {
                "input": {
                    "value": "kal.math.pi * self.viewing_angle / 180",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "kaolin/graphics/Transformations.py": {
        "torch": {
            "stack_68": {
                "tensors": {
                    "value": "[distance * torch.cos(elevation) * torch.sin(azimuth), distance * torch.sin(elevation), -distance * torch.cos(elevation) * torch.cos(azimuth)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_68": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sin_69": {
                "input": {
                    "value": "azimuth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kal.mathutils.deg2rad(azimuth)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_70": {
                "input": {
                    "value": "elevation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kal.mathutils.deg2rad(elevation)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_71": {
                "input": {
                    "value": "elevation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kal.mathutils.deg2rad(elevation)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_69": {
                "input": {
                    "value": "elevation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kal.mathutils.deg2rad(elevation)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "kaolin/graphics/nmr/rasterizer.py": {
        "torch": {
            "zeros_like_146": {
                "variable": {
                    "value": "grad_faces",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "faces",
                    "type": "variable",
                    "possible_values": [
                        [
                            "faces.clone()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_196": {
                "variable": {
                    "value": "faces_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "faces",
                    "type": "variable",
                    "possible_values": [
                        [
                            "faces.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_148": {
                "variable": {
                    "value": "grad_textures",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": [
                        [
                            "textures.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.cuda.FloatTensor(1).fill_(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool2d_363": {
                "variable": {
                    "value": "rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rgb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rgb.permute((0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "rgb[:, :, list(reversed(range(rgb.shape[2]))), :]",
                            "Subscript"
                        ],
                        [
                            "F.avg_pool2d(rgb, kernel_size=(2, 2))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_124": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_125": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_157": {
                "variable": {
                    "value": "grad_rgb_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rgb_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.FloatTensor(ctx.batch_size, ctx.image_size, ctx.image_size, 3).fill_(0)",
                            "Call"
                        ],
                        [
                            "torch.cuda.FloatTensor(1).fill_(0)",
                            "Call"
                        ],
                        [
                            "RasterizeFunction.forward_background(ctx, face_index_map, rgb_map)",
                            "Call"
                        ],
                        [
                            "rgb_map * mask + (1 - mask) * background_color[None, None, None, :]",
                            "BinOp"
                        ],
                        [
                            "rgb_map * mask + (1 - mask) * background_color[:, None, None, :]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_164": {
                "variable": {
                    "value": "grad_alpha_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.FloatTensor(ctx.batch_size, ctx.image_size, ctx.image_size).fill_(0)",
                            "Call"
                        ],
                        [
                            "torch.cuda.FloatTensor(1).fill_(0)",
                            "Call"
                        ],
                        [
                            "RasterizeFunction.forward_alpha_map(ctx, alpha_map, face_index_map)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_171": {
                "variable": {
                    "value": "grad_depth_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ctx.depth_map",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool2d_365": {
                "input": {
                    "value": "alpha[:, None, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_368": {
                "input": {
                    "value": "depth[:, None, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "kaolin/graphics/softras/functional/ambient_lighting.py": {
        "torch": {
            "tensor_35": {
                "variable": {
                    "value": "light_color",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "light_color",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(light_color, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(light_color).float().to(device)",
                            "Call"
                        ],
                        [
                            "light_color[None, :]",
                            "Subscript"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "light.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "from_numpy_37": {
                "variable": {
                    "value": "light_color",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "light_color",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(light_color, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(light_color).float().to(device)",
                            "Call"
                        ],
                        [
                            "light_color[None, :]",
                            "Subscript"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "kaolin/graphics/softras/functional/directional_lighting.py": {
        "torch": {
            "relu_50": {
                "variable": {
                    "value": "cosine",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(normals * light_direction, dim=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_38": {
                "variable": {
                    "value": "light_color",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "light_color",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(light_color, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(light_color).float().to(device)",
                            "Call"
                        ],
                        [
                            "light_color[None, :]",
                            "Subscript"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "light.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_42": {
                "variable": {
                    "value": "light_direction",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "light_direction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(light_direction, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(light_direction).float().to(device)",
                            "Call"
                        ],
                        [
                            "light_direction[None, :]",
                            "Subscript"
                        ],
                        [
                            "(0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "light.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "from_numpy_40": {
                "variable": {
                    "value": "light_color",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "light_color",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(light_color, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(light_color).float().to(device)",
                            "Call"
                        ],
                        [
                            "light_color[None, :]",
                            "Subscript"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_44": {
                "variable": {
                    "value": "light_direction",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "light_direction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(light_direction, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(light_direction).float().to(device)",
                            "Call"
                        ],
                        [
                            "light_direction[None, :]",
                            "Subscript"
                        ],
                        [
                            "(0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_50": {
                "input": {
                    "value": "normals * light_direction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "kaolin/graphics/softras/functional/face_vertices.py": {
        "torch": {
            "arange_43": {
                "start": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "kaolin/graphics/softras/functional/get_points_from_angles.py": {
        "torch": {
            "stack_43": {
                "tensors": {
                    "value": "[distance * torch.cos(elevation) * torch.sin(azimuth), distance * torch.sin(elevation), -distance * torch.cos(elevation) * torch.cos(azimuth)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_43": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sin_44": {
                "input": {
                    "value": "azimuth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math.radians(azimuth)",
                            "Call"
                        ],
                        [
                            "math.pi / 180.0 * azimuth",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_45": {
                "input": {
                    "value": "elevation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math.radians(elevation)",
                            "Call"
                        ],
                        [
                            "math.pi / 180.0 * elevation",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_46": {
                "input": {
                    "value": "elevation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math.radians(elevation)",
                            "Call"
                        ],
                        [
                            "math.pi / 180.0 * elevation",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_44": {
                "input": {
                    "value": "elevation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math.radians(elevation)",
                            "Call"
                        ],
                        [
                            "math.pi / 180.0 * elevation",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "kaolin/graphics/softras/functional/load_obj.py": {
        "torch": {
            "from_numpy_93": {
                "variable": {
                    "value": "faces",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "faces",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.vstack(faces).astype(np.int32) - 1",
                            "BinOp"
                        ],
                        [
                            "vertices[faces]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(faces).cuda()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.from_numpy(np.vstack(faces).astype(np.int32)).cuda() - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_98": {
                "variable": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "faces.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "texture_res ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_146": {
                "variable": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack(vertices).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_103": {
                "variable": {
                    "value": "color",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "color",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(color).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_121": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_123": {
                "variable": {
                    "value": "is_update",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "is_update",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(np.array(material_names) == material_name).astype(np.int32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(is_update).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_161": {
                "ndarray": {
                    "value": "np.vstack(faces).astype(np.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_179": {
                "variable": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack(textures).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_184": {
                "input": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.vstack(vertices).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.from_numpy(np.vstack(vertices).astype(np.float32)).cuda()",
                            "Call"
                        ],
                        [
                            "vertices - vertices.max(0)[0][None, :] / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "kaolin/graphics/softras/functional/look.py": {
        "torch": {
            "normalize_61": {
                "variable": {
                    "value": "z_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "direction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(direction, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(direction).to(device)",
                            "Call"
                        ],
                        [
                            "direction[None, :]",
                            "Subscript"
                        ],
                        [
                            "[0",
                            "MethodArgument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normalize_62": {
                "variable": {
                    "value": "x_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cross(up, z_axis)",
                    "type": "Call",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normalize_63": {
                "variable": {
                    "value": "y_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cross(z_axis, x_axis)",
                    "type": "Call",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_66": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_axis[:, None, :], y_axis[:, None, :], z_axis[:, None, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_73": {
                "variable": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertices - eye",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(vertices, r.transpose(1, 2))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "r.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_40": {
                "variable": {
                    "value": "direction",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "direction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(direction, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(direction).to(device)",
                            "Call"
                        ],
                        [
                            "direction[None, :]",
                            "Subscript"
                        ],
                        [
                            "[0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertices.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_47": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(eye, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(eye).to(device)",
                            "Call"
                        ],
                        [
                            "eye[None, :]",
                            "Subscript"
                        ],
                        [
                            "eye.to(device)",
                            "Call"
                        ],
                        [
                            "eye[:, None, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertices.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "from_numpy_42": {
                "variable": {
                    "value": "direction",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "direction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(direction, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(direction).to(device)",
                            "Call"
                        ],
                        [
                            "direction[None, :]",
                            "Subscript"
                        ],
                        [
                            "[0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_49": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(eye, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(eye).to(device)",
                            "Call"
                        ],
                        [
                            "eye[None, :]",
                            "Subscript"
                        ],
                        [
                            "eye.to(device)",
                            "Call"
                        ],
                        [
                            "eye[:, None, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cross_62": {
                "input": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": [
                        [
                            "up[None, :]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "other": {
                    "value": "z_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(direction, eps=1e-05)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_63": {
                "input": {
                    "value": "z_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(direction, eps=1e-05)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(torch.cross(up, z_axis), eps=1e-05)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_43": {
                "obj": {
                    "value": "direction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(direction, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(direction).to(device)",
                            "Call"
                        ],
                        [
                            "direction[None, :]",
                            "Subscript"
                        ],
                        [
                            "[0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_tensor_50": {
                "obj": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(eye, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(eye).to(device)",
                            "Call"
                        ],
                        [
                            "eye[None, :]",
                            "Subscript"
                        ],
                        [
                            "eye.to(device)",
                            "Call"
                        ],
                        [
                            "eye[:, None, :]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "kaolin/graphics/softras/functional/look_at.py": {
        "torch": {
            "normalize_72": {
                "variable": {
                    "value": "z_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "at - eye",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normalize_73": {
                "variable": {
                    "value": "x_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cross(up, z_axis)",
                    "type": "Call",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normalize_74": {
                "variable": {
                    "value": "y_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cross(z_axis, x_axis)",
                    "type": "Call",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_axis[:, None, :], y_axis[:, None, :], z_axis[:, None, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_84": {
                "variable": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertices - eye",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(vertices, r.transpose(1, 2))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "r.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "variable": {
                    "value": "at",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "at",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(at, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(at).to(device)",
                            "Call"
                        ],
                        [
                            "at[None, :].repeat(batch_size, 1)",
                            "Call"
                        ],
                        [
                            "[0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertices.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_49": {
                "variable": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(up, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(up).to(device)",
                            "Call"
                        ],
                        [
                            "up[None, :].repeat(batch_size, 1)",
                            "Call"
                        ],
                        [
                            "[0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertices.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_56": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(eye, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(eye).to(device)",
                            "Call"
                        ],
                        [
                            "eye[None, :].repeat(batch_size, 1)",
                            "Call"
                        ],
                        [
                            "eye.to(device)",
                            "Call"
                        ],
                        [
                            "eye[:, None, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertices.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "from_numpy_44": {
                "variable": {
                    "value": "at",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "at",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(at, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(at).to(device)",
                            "Call"
                        ],
                        [
                            "at[None, :].repeat(batch_size, 1)",
                            "Call"
                        ],
                        [
                            "[0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_51": {
                "variable": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(up, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(up).to(device)",
                            "Call"
                        ],
                        [
                            "up[None, :].repeat(batch_size, 1)",
                            "Call"
                        ],
                        [
                            "[0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_58": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(eye, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(eye).to(device)",
                            "Call"
                        ],
                        [
                            "eye[None, :].repeat(batch_size, 1)",
                            "Call"
                        ],
                        [
                            "eye.to(device)",
                            "Call"
                        ],
                        [
                            "eye[:, None, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cross_73": {
                "input": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(up, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(up).to(device)",
                            "Call"
                        ],
                        [
                            "up[None, :].repeat(batch_size, 1)",
                            "Call"
                        ],
                        [
                            "[0",
                            "MethodArgument"
                        ]
                    ]
                },
                "other": {
                    "value": "z_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(at - eye, eps=1e-05)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_74": {
                "input": {
                    "value": "z_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(at - eye, eps=1e-05)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(torch.cross(up, z_axis), eps=1e-05)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_45": {
                "obj": {
                    "value": "at",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(at, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(at).to(device)",
                            "Call"
                        ],
                        [
                            "at[None, :].repeat(batch_size, 1)",
                            "Call"
                        ],
                        [
                            "[0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_tensor_52": {
                "obj": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(up, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(up).to(device)",
                            "Call"
                        ],
                        [
                            "up[None, :].repeat(batch_size, 1)",
                            "Call"
                        ],
                        [
                            "[0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_tensor_59": {
                "obj": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(eye, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(eye).to(device)",
                            "Call"
                        ],
                        [
                            "eye[None, :].repeat(batch_size, 1)",
                            "Call"
                        ],
                        [
                            "eye.to(device)",
                            "Call"
                        ],
                        [
                            "eye[:, None, :]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "kaolin/graphics/softras/functional/orthogonal.py": {
        "torch": {
            "stack_40": {
                "variable": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, y, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "kaolin/graphics/softras/functional/perspective.py": {
        "torch": {
            "tensor_36": {
                "variable": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "angle / 180 * math.pi",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertices.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tan_38": {
                "variable": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(angle / 180 * math.pi, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "angle[None]",
                            "Subscript"
                        ],
                        [
                            "30.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_43": {
                "variable": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, y, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "kaolin/graphics/softras/functional/projection.py": {
        "torch": {
            "cat_35": {
                "variable": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vertices, torch.ones_like(vertices[:, :, None, 0])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_36": {
                "variable": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([vertices, torch.ones_like(vertices[:, :, None, 0])], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(vertices, P.transpose(2, 1))",
                            "Call"
                        ],
                        [
                            "torch.stack([x__, y__, z], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "P.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_49": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_ ** 2 + y_ ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_54": {
                "variable": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x__, y__, z]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_35": {
                "input": {
                    "value": "vertices[:, :, None, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "kaolin/graphics/softras/functional/save_obj.py": {
        "torch": {
            "ones_37": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "tile_height * texture_res",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "tile_width * texture_res",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_38": {
                "variable": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_faces, 3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_39": {
                "variable": {
                    "value": "face_nums",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_faces",
                    "type": "variable",
                    "possible_values": [
                        [
                            "textures.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_126": {
                "data": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((num_faces, 3, 2), dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "vertices.cuda()",
                            "Call"
                        ],
                        [
                            "vertices.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.autograd.Variable(torch.tensor(vertices))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_127": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "kaolin/graphics/softras/functional/soft_rasterize.py": {
        "torch": {
            "zeros_like_109": {
                "variable": {
                    "value": "grad_faces",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "face_vertices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "face_vertices.clone()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_110": {
                "variable": {
                    "value": "grad_textures",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": [
                        [
                            "textures.clone()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "kaolin/graphics/softras/functional/vertex_normals.py": {
        "torch": {
            "zeros_43": {
                "variable": {
                    "value": "normals",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs * nv",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_58": {
                "variable": {
                    "value": "normals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(bs * nv, 3).to(device)",
                            "Call"
                        ],
                        [
                            "F.normalize(normals, eps=1e-06, dim=1)",
                            "Call"
                        ],
                        [
                            "normals.reshape((bs, nv, 3))",
                            "Call"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_52": {
                "input": {
                    "value": "vertices_faces[:, 2] - vertices_faces[:, 1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "vertices_faces[:, 0] - vertices_faces[:, 1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cross_54": {
                "input": {
                    "value": "vertices_faces[:, 0] - vertices_faces[:, 2]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "vertices_faces[:, 1] - vertices_faces[:, 2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cross_56": {
                "input": {
                    "value": "vertices_faces[:, 1] - vertices_faces[:, 0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "vertices_faces[:, 2] - vertices_faces[:, 0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_45": {
                "start": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "kaolin/graphics/softras/functional/voxelization.py": {
        "torch": {
            "zeros_40": {
                "variable": {
                    "value": "voxels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "faces.size(0)",
                            "Call"
                        ],
                        [
                            "faces.size(0)",
                            "Call"
                        ],
                        [
                            "voxels.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_46": {
                "variable": {
                    "value": "voxels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "faces.size(0)",
                            "Call"
                        ],
                        [
                            "faces.size(0)",
                            "Call"
                        ],
                        [
                            "voxels.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_52": {
                "variable": {
                    "value": "visible",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "voxels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(bs, size, size, size).int().cuda()",
                            "Call"
                        ],
                        [
                            "torch.zeros(bs, size, size, size).int().cuda()",
                            "Call"
                        ],
                        [
                            "voxels0 + voxels1 + voxels2 + voxels3",
                            "BinOp"
                        ],
                        [
                            "(voxels > 0).int()",
                            "Call"
                        ],
                        [
                            "voxelize_sub3(faces, voxels)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "kaolin/graphics/softras/losses.py": {
        "torch": {
            "matmul_55": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.laplacian",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(self.laplacian, x)",
                            "Call"
                        ],
                        [
                            "x.pow(2).sum(dims)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_51": {
                "ndarray": {
                    "value": "laplacian",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([self.nv, self.nv]).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_91": {
                "ndarray": {
                    "value": "v0s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([v[0] for v in vertices], 'int32')",
                            "Call"
                        ],
                        [
                            "vertices[:, self.v0s, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_92": {
                "ndarray": {
                    "value": "v1s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([v[1] for v in vertices], 'int32')",
                            "Call"
                        ],
                        [
                            "vertices[:, self.v1s, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_93": {
                "ndarray": {
                    "value": "v2s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(v2s, 'int32')",
                            "Call"
                        ],
                        [
                            "vertices[:, self.v2s, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_94": {
                "ndarray": {
                    "value": "v3s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(v3s, 'int32')",
                            "Call"
                        ],
                        [
                            "vertices[:, self.v3s, :]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "kaolin/graphics/softras/mesh.py": {
        "torch": {
            "from_numpy_45": {
                "variable": {
                    "value": "self._vertices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self._vertices",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_47": {
                "variable": {
                    "value": "self._faces",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self._faces",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_140": {
                "variable": {
                    "value": "self._surface_normals",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cross(v12, v10)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_162": {
                "variable": {
                    "value": "self.faces",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.faces, self.faces[:, :, [2, 1, 0]])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_163": {
                "variable": {
                    "value": "self.textures",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.textures, self.textures)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_72": {
                "variable": {
                    "value": "self._textures",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_faces",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_81": {
                "variable": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(textures).float().cuda()",
                            "Call"
                        ],
                        [
                            "textures[None, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "textures[None, :, :]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_76": {
                "variable": {
                    "value": "self._textures",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_vertices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_140": {
                "input": {
                    "value": "v12",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.face_vertices[:, :, 2] - self.face_vertices[:, :, 1]",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "v10",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.face_vertices[:, :, 0] - self.face_vertices[:, :, 1]",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "kaolin/graphics/softras/rasterizer.py": {
        "torch": {
            "avg_pool2d_76": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "srf.soft_rasterize(mesh.face_vertices, mesh.face_textures, image_size, self.background_color, self.near, self.far, self.fill_back, self.eps, self.sigma_val, self.dist_func, self.dist_eps, self.gamma_val, self.aggr_func_rgb, self.aggr_func_alpha, self.texture_type)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(images, kernel_size=2, stride=2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "kaolin/graphics/softras/renderer.py": {
        "torch": {}
    },
    "kaolin/graphics/softras/transform.py": {
        "torch": {
            "from_numpy_41": {
                "variable": {
                    "value": "self.P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.P",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "kaolin/helpers.py": {
        "torch": {
            "sqrt_62": {
                "variable": {
                    "value": "magnitude",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(torch.pow(matrix, 2), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_64": {
                "variable": {
                    "value": "matrix[valid_inds]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "matrix[valid_inds]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "magnitude[valid_inds].unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_62": {
                "input": {
                    "value": "torch.pow(matrix, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_tensor_71": {
                "obj": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pow_62": {
                "input": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_226": {
                "ndarray": {
                    "value": "arr",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "kaolin/mathutils/common.py": {
        "torch": {
            "tensor_24": {
                "variable": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "3.141592653589793",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_tensor_43": {
                "obj": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_tensor_66": {
                "obj": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "kaolin/mathutils/geometry/lie.py": {
        "torch": {
            "zeros_51": {
                "variable": {
                    "value": "omega_cross",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "bmm_127": {
                "variable": {
                    "value": "omega_cross_sq",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "omega_cross",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((B, 3, 3)).type(dtype).to(device)",
                            "Call"
                        ],
                        [
                            "SO3_hat(x)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "omega_cross",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((B, 3, 3)).type(dtype).to(device)",
                            "Call"
                        ],
                        [
                            "SO3_hat(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_130": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "omega",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_150": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_tensor_116": {
                "obj": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "I + A + B",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_137": {
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(omega, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_139": {
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(omega, dim=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "kaolin/mathutils/geometry/transformations.py": {
        "torch": {
            "cos_90": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(theta)",
                            "Call"
                        ],
                        [
                            "theta.view(theta.numel())",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(theta)",
                            "Call"
                        ],
                        [
                            "theta.view(theta.numel())",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(theta)",
                            "Call"
                        ],
                        [
                            "theta.view(theta.numel())",
                            "Call"
                        ],
                        [
                            "np.deg2rad(azimuth)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_91": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(theta)",
                            "Call"
                        ],
                        [
                            "theta.view(theta.numel())",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(theta)",
                            "Call"
                        ],
                        [
                            "theta.view(theta.numel())",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(theta)",
                            "Call"
                        ],
                        [
                            "theta.view(theta.numel())",
                            "Call"
                        ],
                        [
                            "np.deg2rad(azimuth)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_92": {
                "variable": {
                    "value": "rx",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "theta.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_93": {
                "variable": {
                    "value": "rx[:, 0, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "theta.numel()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_168": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(theta)",
                            "Call"
                        ],
                        [
                            "theta.view(theta.numel())",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(theta)",
                            "Call"
                        ],
                        [
                            "theta.view(theta.numel())",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(theta)",
                            "Call"
                        ],
                        [
                            "theta.view(theta.numel())",
                            "Call"
                        ],
                        [
                            "np.deg2rad(azimuth)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_169": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(theta)",
                            "Call"
                        ],
                        [
                            "theta.view(theta.numel())",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(theta)",
                            "Call"
                        ],
                        [
                            "theta.view(theta.numel())",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(theta)",
                            "Call"
                        ],
                        [
                            "theta.view(theta.numel())",
                            "Call"
                        ],
                        [
                            "np.deg2rad(azimuth)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_170": {
                "variable": {
                    "value": "ry",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "theta.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_171": {
                "variable": {
                    "value": "ry[:, 1, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "theta.numel()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_246": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(theta)",
                            "Call"
                        ],
                        [
                            "theta.view(theta.numel())",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(theta)",
                            "Call"
                        ],
                        [
                            "theta.view(theta.numel())",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(theta)",
                            "Call"
                        ],
                        [
                            "theta.view(theta.numel())",
                            "Call"
                        ],
                        [
                            "np.deg2rad(azimuth)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_247": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(theta)",
                            "Call"
                        ],
                        [
                            "theta.view(theta.numel())",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(theta)",
                            "Call"
                        ],
                        [
                            "theta.view(theta.numel())",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(theta)",
                            "Call"
                        ],
                        [
                            "theta.view(theta.numel())",
                            "Call"
                        ],
                        [
                            "np.deg2rad(azimuth)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_248": {
                "variable": {
                    "value": "rz",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "theta.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_249": {
                "variable": {
                    "value": "rz[:, 2, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "theta.numel()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConstantPad1d_310": {
                "variable": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "where_389": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.abs(w) > eps",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0 / w",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.ones_like(w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_433": {
                "variable": {
                    "value": "pts_tformed_homo",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tform.unsqueeze(-3)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "pts.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_465": {
                "variable": {
                    "value": "inv_rot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tform[..., :3, :3]",
                            "Subscript"
                        ]
                    ]
                },
                "dim0": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_466": {
                "variable": {
                    "value": "inv_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-inv_rot",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "other": {
                    "value": "trans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tform[..., :3, :3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_469": {
                "variable": {
                    "value": "inv_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tform",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_69": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(theta)",
                            "Call"
                        ],
                        [
                            "theta.view(theta.numel())",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(theta)",
                            "Call"
                        ],
                        [
                            "theta.view(theta.numel())",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(theta)",
                            "Call"
                        ],
                        [
                            "theta.view(theta.numel())",
                            "Call"
                        ],
                        [
                            "np.deg2rad(azimuth)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_147": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(theta)",
                            "Call"
                        ],
                        [
                            "theta.view(theta.numel())",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(theta)",
                            "Call"
                        ],
                        [
                            "theta.view(theta.numel())",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(theta)",
                            "Call"
                        ],
                        [
                            "theta.view(theta.numel())",
                            "Call"
                        ],
                        [
                            "np.deg2rad(azimuth)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_225": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(theta)",
                            "Call"
                        ],
                        [
                            "theta.view(theta.numel())",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(theta)",
                            "Call"
                        ],
                        [
                            "theta.view(theta.numel())",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(theta)",
                            "Call"
                        ],
                        [
                            "theta.view(theta.numel())",
                            "Call"
                        ],
                        [
                            "np.deg2rad(azimuth)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_72": {
                "obj": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(theta)",
                            "Call"
                        ],
                        [
                            "theta.view(theta.numel())",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(theta)",
                            "Call"
                        ],
                        [
                            "theta.view(theta.numel())",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(theta)",
                            "Call"
                        ],
                        [
                            "theta.view(theta.numel())",
                            "Call"
                        ],
                        [
                            "np.deg2rad(azimuth)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_150": {
                "obj": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(theta)",
                            "Call"
                        ],
                        [
                            "theta.view(theta.numel())",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(theta)",
                            "Call"
                        ],
                        [
                            "theta.view(theta.numel())",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(theta)",
                            "Call"
                        ],
                        [
                            "theta.view(theta.numel())",
                            "Call"
                        ],
                        [
                            "np.deg2rad(azimuth)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_228": {
                "obj": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(theta)",
                            "Call"
                        ],
                        [
                            "theta.view(theta.numel())",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(theta)",
                            "Call"
                        ],
                        [
                            "theta.view(theta.numel())",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(theta)",
                            "Call"
                        ],
                        [
                            "theta.view(theta.numel())",
                            "Call"
                        ],
                        [
                            "np.deg2rad(azimuth)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_303": {
                "obj": {
                    "value": "pts",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_tensor_377": {
                "obj": {
                    "value": "pts",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_389": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pts[..., -1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "is_tensor_411": {
                "obj": {
                    "value": "pts",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_tensor_414": {
                "obj": {
                    "value": "tform",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_tensor_453": {
                "obj": {
                    "value": "tform",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_509": {
                "variable": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tform",
                            "Name"
                        ],
                        [
                            "torch.matmul(cat, tform)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "tform",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_389": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pts[..., -1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "is_tensor_498": {
                "obj": {
                    "value": "tform",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "kaolin/metrics/mesh.py": {
        "torch": {
            "index_select_119": {
                "variable": {
                    "value": "p1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mesh.vertices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "mesh.faces[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_120": {
                "variable": {
                    "value": "p2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mesh.vertices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "mesh.faces[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_121": {
                "variable": {
                    "value": "p3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mesh.vertices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "mesh.faces[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_127": {
                "variable": {
                    "value": "el1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "e1 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_127": {
                "variable": {
                    "value": "el1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_128": {
                "variable": {
                    "value": "el2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "e2 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_128": {
                "variable": {
                    "value": "el2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_129": {
                "variable": {
                    "value": "el3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "e3 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_129": {
                "variable": {
                    "value": "el3",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_156": {
                "variable": {
                    "value": "lap_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum((lap1 - lap2) ** 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_178": {
                "variable": {
                    "value": "v1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mesh.vertices.clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "mesh.faces[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_179": {
                "variable": {
                    "value": "v2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mesh.vertices.clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "mesh.faces[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_180": {
                "variable": {
                    "value": "v3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mesh.vertices.clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "mesh.faces[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_241": {
                "variable": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "clamp_252": {
                "variable": {
                    "value": "dots",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dots / dots_div",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cross_279": {
                "variable": {
                    "value": "nor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v21",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v2 - v1",
                            "BinOp"
                        ],
                        [
                            "v2 - v1",
                            "BinOp"
                        ],
                        [
                            "v21.view(1, -1, 3).expand(points.shape[0], v21.shape[0], 3).contiguous().view(-1, 3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v13",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v1 - v3",
                            "BinOp"
                        ],
                        [
                            "v1 - v3",
                            "BinOp"
                        ],
                        [
                            "v13.view(1, -1, 3).expand(points.shape[0], v13.shape[0], 3).contiguous().view(-1, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "le_311": {
                "variable": {
                    "value": "outside_triangle",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(sign1 + sign2 + sign3)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gt_312": {
                "variable": {
                    "value": "inside_triangle",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(sign1 + sign2 + sign3)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_347": {
                "variable": {
                    "value": "sign",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "nor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(v21[type_4], v13[type_4])",
                            "Call"
                        ],
                        [
                            "torch.cross(v21, v13)",
                            "Call"
                        ],
                        [
                            "nor.view(1, -1, 3).expand(points.shape[0], nor.shape[0], 3).contiguous().view(-1, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_358": {
                "variable": {
                    "value": "dotter",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dotter / dotter_div",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_56": {
                "variable": {
                    "value": "dist1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_57": {
                "variable": {
                    "value": "idx1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_58": {
                "variable": {
                    "value": "type1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_184": {
                "variable": {
                    "value": "v4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mesh.vertices.clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "mesh.faces[:, 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "v1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(v1, v1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_189": {
                "variable": {
                    "value": "v2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(v2, v4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_190": {
                "variable": {
                    "value": "v3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(v3, v3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_238": {
                "variable": {
                    "value": "nor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v21[type_4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "v13[type_4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_243": {
                "input": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(dists)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(np.zeros(sign1.shape))",
                            "Call"
                        ],
                        [
                            "distances.view(points.shape[0], faces_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_260": {
                "input": {
                    "value": "p1.view(p1.shape[0], 1, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "p2.view(p2.shape[0], 3, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_326": {
                "variable": {
                    "value": "dots",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dotter1, dotter2, dotter3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_343": {
                "input": {
                    "value": "min_distaces",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(distances, dim=1)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_156": {
                "input": {
                    "value": "(lap1 - lap2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_311": {
                "input": {
                    "value": "sign1 + sign2 + sign3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_312": {
                "input": {
                    "value": "sign1 + sign2 + sign3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_341": {
                "input": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(dists)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(np.zeros(sign1.shape))",
                            "Call"
                        ],
                        [
                            "distances.view(points.shape[0], faces_len)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_327": {
                "input": {
                    "value": "dots",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_compute_dot(v, p)",
                            "Call"
                        ],
                        [
                            "torch.clamp(dots / dots_div, 0.0, 1.0).view(-1, 1)",
                            "Call"
                        ],
                        [
                            "v * dots - p",
                            "BinOp"
                        ],
                        [
                            "_compute_dot(dots, dots)",
                            "Call"
                        ],
                        [
                            "torch.cat((dotter1, dotter2, dotter3), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "kaolin/metrics/point.py": {
        "torch": {
            "sqrt_194": {
                "variable": {
                    "value": "pred_distances",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "directed_distance(gt_points, pred_points, mean=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_196": {
                "variable": {
                    "value": "gt_distances",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "directed_distance(pred_points, gt_points, mean=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_29": {
                "variable": {
                    "value": "dist1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_30": {
                "variable": {
                    "value": "idx1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_125": {
                "variable": {
                    "value": "closest_S2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "S2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S2.contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "closest_index_in_S2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sided_minimum_dist(S1.unsqueeze(0), S2.unsqueeze(0))[0]",
                            "Subscript"
                        ],
                        [
                            "nnsearch(S1, S2)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_208": {
                "variable": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_distances > radius",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_209": {
                "variable": {
                    "value": "fp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_distances > radius",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_210": {
                "variable": {
                    "value": "tp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_distances <= radius",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_166": {
                "input": {
                    "value": "torch.mul(points1, points2).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_167": {
                "input": {
                    "value": "(points1 + points2).clamp(min=0, max=1).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_166": {
                "input": {
                    "value": "points1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points1.view(-1).byte()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "points2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points2.view(-1).byte()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "kaolin/metrics/voxel.py": {
        "torch": {
            "sum_45": {
                "input": {
                    "value": "torch.mul(pred, gt).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_46": {
                "input": {
                    "value": "(pred + gt).clamp(min=0, max=1).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_45": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.clone()",
                            "Call"
                        ],
                        [
                            "pred.view(-1).byte()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt.view(-1).byte()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "kaolin/models/DIBREncoder.py": {
        "torch": {
            "Linear_51": {
                "variable": {
                    "value": "self.linear3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "self.linear6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "VERTS * 6",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "variable": {
                    "value": "self.encoder1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*all_blocks",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "variable": {
                    "value": "self.encoder2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*all_blocks",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_65": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*all_blocks",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "in_channels": {
                    "value": "indim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outdim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ker",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_82": {
                "num_features": {
                    "value": "outdim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_89": {
                "in_features": {
                    "value": "indim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "outdim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_90": {
                "num_features": {
                    "value": "outdim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "kaolin/models/GEOMetrics.py": {
        "torch": {
            "Sequential_48": {
                "variable": {
                    "value": "self.fully",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(latent_length, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.ConvTranspose3d(64, 64, 4, stride=2, padding=(1, 1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_75": {
                "variable": {
                    "value": "voxels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "decode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fully(latent).view(-1, 64, 2, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.model(decode).reshape(-1, 32, 32, 32)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_49": {
                "in_features": {
                    "value": "latent_length",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_53": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_54": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_55": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_57": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_58": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_59": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_61": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_62": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_63": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_65": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_66": {
                "num_features": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_67": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_69": {
                "in_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "kaolin/models/GraphResNet.py": {
        "torch": {
            "relu_54": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc1(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_55": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc2(x, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_59": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc3(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_60": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc4(x, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_64": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc5(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_65": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc6(x, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_70": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc7(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_71": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc8(x, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_76": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc9(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_77": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc10(x, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_82": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc11(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_83": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc12(x, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_88": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc13(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "kaolin/models/Image2MeshReconstructionBaseline.py": {
        "torch": {
            "Linear_53": {
                "variable": {
                    "value": "self.linear3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self.linear6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "VERTS * 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "variable": {
                    "value": "self.encoder1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*all_blocks",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.encoder2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*all_blocks",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_67": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*all_blocks",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_83": {
                "in_channels": {
                    "value": "indim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outdim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ker",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_84": {
                "num_features": {
                    "value": "outdim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_91": {
                "in_features": {
                    "value": "indim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "outdim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_92": {
                "num_features": {
                    "value": "outdim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "kaolin/models/MeshEncoder.py": {
        "torch": {
            "cat_37": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(temp, features[:, res.shape[1]:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "elu_42": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h1(positions, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_43": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h21(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_44": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h22(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_45": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h23(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_46": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h24(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_47": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h3(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_48": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h4(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_49": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h41(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_50": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h5(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_51": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h6(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_52": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h7(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_53": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h8(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_54": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h81(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_55": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h9(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_56": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h10(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_57": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h11(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_59": {
                "variable": {
                    "value": "latent",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.reduce(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_60": {
                "input": {
                    "value": "latent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.elu(self.reduce(features, adj))",
                            "Call"
                        ],
                        [
                            "torch.max(latent, dim=0)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "kaolin/models/OccupancyNetwork.py": {
        "torch": {
            "Normal_153": {
                "variable": {
                    "value": "p0_z",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros(z_dim, device=device)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.ones(z_dim, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "variable": {
                    "value": "self.features.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_106": {
                "variable": {
                    "value": "self.fc_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_118": {
                "variable": {
                    "value": "self.fc_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_175": {
                "variable": {
                    "value": "self.conv_gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "c_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "f_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_176": {
                "variable": {
                    "value": "self.conv_beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "c_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "f_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_247": {
                "variable": {
                    "value": "self.fc_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "size_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "size_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size_in",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_248": {
                "variable": {
                    "value": "self.fc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "size_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size_in",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "size_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size_in",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_249": {
                "variable": {
                    "value": "self.actvn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_327": {
                "variable": {
                    "value": "kl",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Bernoulli_351": {
                "variable": {
                    "value": "p_r",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder(p, z, c, **kwargs)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_363": {
                "variable": {
                    "value": "mean_z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.size(0)",
                            "Call"
                        ],
                        [
                            "p.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_364": {
                "variable": {
                    "value": "logstd_z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.size(0)",
                            "Call"
                        ],
                        [
                            "p.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Normal_366": {
                "variable": {
                    "value": "q_z",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mean_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(batch_size, 0).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "torch.exp(logstd_z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "c_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_104": {
                "variable": {
                    "value": "self.fc_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_154": {
                "*size": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_155": {
                "*size": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_178": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "f_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_254": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "size_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "size_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size_in",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_65": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InstanceNorm1d_180": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "f_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_366": {
                "input": {
                    "value": "logstd_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(batch_size, 0).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_123": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "normalize_imagenet(x)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "kaolin/models/Pixel2Mesh.py": {
        "torch": {
            "Conv2d_46": {
                "variable": {
                    "value": "self.layer0_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "variable": {
                    "value": "self.layer0_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "variable": {
                    "value": "self.layer1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "variable": {
                    "value": "self.layer1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "variable": {
                    "value": "self.layer1_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "variable": {
                    "value": "self.layer2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "variable": {
                    "value": "self.layer2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "variable": {
                    "value": "self.layer2_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "variable": {
                    "value": "self.layer3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "variable": {
                    "value": "self.layer3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "variable": {
                    "value": "self.layer3_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "variable": {
                    "value": "self.layer4_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "variable": {
                    "value": "self.layer4_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "variable": {
                    "value": "self.layer4_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "variable": {
                    "value": "self.layer5_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "variable": {
                    "value": "self.layer5_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.layer5_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "variable": {
                    "value": "self.layer5_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_72": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer0_1(img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_73": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer0_2(img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_75": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer1_1(img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_76": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer1_2(img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_77": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer1_3(img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_79": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer2_1(img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_80": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer2_2(img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_81": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer2_3(img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_82": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.layer0_1(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer0_2(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer1_1(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer1_2(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer1_3(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer2_1(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer2_2(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer2_3(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer3_1(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer3_2(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer3_3(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer4_1(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer4_2(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer4_3(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer5_1(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer5_2(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer5_3(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer5_4(img))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_84": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer3_1(img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_85": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer3_2(img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_86": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer3_3(img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_87": {
                "variable": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.layer0_1(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer0_2(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer1_1(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer1_2(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer1_3(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer2_1(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer2_2(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer2_3(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer3_1(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer3_2(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer3_3(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer4_1(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer4_2(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer4_3(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer5_1(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer5_2(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer5_3(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer5_4(img))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_89": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer4_1(img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_90": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer4_2(img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_91": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer4_3(img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_92": {
                "variable": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.layer0_1(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer0_2(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer1_1(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer1_2(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer1_3(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer2_1(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer2_2(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer2_3(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer3_1(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer3_2(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer3_3(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer4_1(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer4_2(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer4_3(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer5_1(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer5_2(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer5_3(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer5_4(img))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_94": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer5_1(img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_95": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer5_2(img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_96": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer5_3(img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_97": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer5_4(img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_98": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.layer0_1(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer0_2(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer1_1(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer1_2(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer1_3(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer2_1(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer2_2(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer2_3(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer3_1(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer3_2(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer3_3(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer4_1(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer4_2(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer4_3(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer5_1(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer5_2(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer5_3(img))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer5_4(img))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_141": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc1(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_142": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc2(x, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_146": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc3(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_147": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc4(x, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_151": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc5(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_152": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc6(x, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_157": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc7(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_158": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc8(x, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_163": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc9(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_164": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc10(x, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_169": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc11(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_170": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc12(x, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_175": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc13(features, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_205": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_features, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_206": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_218": {
                "variable": {
                    "value": "support",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.weight.unsqueeze(0).expand(input.shape[0], -1, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_220": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj.unsqueeze(0).expand(input.shape[0], -1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "support",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(input, self.weight.unsqueeze(0).expand(input.shape[0], -1, -1))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "kaolin/models/PointNet.py": {
        "torch": {
            "ModuleList_123": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_297": {
                "variable": {
                    "value": "self.linear_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_307": {
                "variable": {
                    "value": "self.last_linear_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "classifier_layer_dims[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_467": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_482": {
                "variable": {
                    "value": "self.last_conv_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "classifier_layer_dims[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_125": {
                "variable": {
                    "value": "self.bn_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_196": {
                "tensors": {
                    "value": "(x, local_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_299": {
                "variable": {
                    "value": "self.bn_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_315": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_469": {
                "variable": {
                    "value": "self.bn_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_186": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn_layers[0](self.conv_layers[0](x)))",
                            "Call"
                        ],
                        [
                            "self.activation(self.conv_layers[0](x))",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn_layers[idx](self.conv_layers[idx](x)))",
                            "Call"
                        ],
                        [
                            "self.activation(self.conv_layers[idx](x))",
                            "Call"
                        ],
                        [
                            "self.bn_layers[-1](self.conv_layers[-1](x))",
                            "Call"
                        ],
                        [
                            "self.conv_layers[-1](x)",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, self.feat_size)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.feat_size, 1).repeat(1, 1, num_points)",
                            "Call"
                        ],
                        [
                            "self.feature_extractor(x)",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn_layers[idx](self.linear_layers[idx](x)))",
                            "Call"
                        ],
                        [
                            "self.activation(self.linear_layers[idx](x))",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn_layers[-1](self.dropout(self.linear_layers[-1](x))))",
                            "Call"
                        ],
                        [
                            "self.activation(self.dropout(self.linear_layers[-1](x)))",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn_layers[-1](self.linear_layers[-1](x)))",
                            "Call"
                        ],
                        [
                            "self.activation(self.linear_layers[-1](x))",
                            "Call"
                        ],
                        [
                            "self.last_linear_layer(x)",
                            "Call"
                        ],
                        [
                            "self.feature_extractor(x)",
                            "Call"
                        ],
                        [
                            "self.last_conv_layer(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.activation(self.bn_layers[idx](self.conv_layers[idx](x)))",
                            "Call"
                        ],
                        [
                            "self.activation(self.conv_layers[idx](x))",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_471": {
                "in_channels": {
                    "value": "self.local_feat_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "classifier_layer_dims[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_127": {
                "in_channels": {
                    "value": "layer_dims[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "layer_dims[idx + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_301": {
                "in_features": {
                    "value": "classifier_layer_dims[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "classifier_layer_dims[idx + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm1d_474": {
                "num_features": {
                    "value": "classifier_layer_dims[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv1d_476": {
                "in_channels": {
                    "value": "classifier_layer_dims[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "classifier_layer_dims[idx + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_130": {
                "num_features": {
                    "value": "layer_dims[idx + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm1d_304": {
                "num_features": {
                    "value": "classifier_layer_dims[idx + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm1d_479": {
                "num_features": {
                    "value": "classifier_layer_dims[idx + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "kaolin/models/PointNet2.py": {
        "torch": {
            "ModuleList_562": {
                "variable": {
                    "value": "self.sub_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_651": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_features_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_717": {
                "variable": {
                    "value": "self.unit_pointnet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*unit_pointnets",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_812": {
                "variable": {
                    "value": "self.set_abstractions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_877": {
                "variable": {
                    "value": "self.final_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*final_layer_modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_939": {
                "variable": {
                    "value": "self.set_abstractions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_1008": {
                "variable": {
                    "value": "self.feature_propagators",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_1061": {
                "variable": {
                    "value": "self.final_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*final_layer_modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "sum_753": {
                "variable": {
                    "value": "total_inverse_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inverse_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / (dist + 1e-08)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_759": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[new_features, features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_172": {
                "input": {
                    "value": "dist2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randint_359": {
                "low": {
                    "value": "int(1000000000.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "high": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_459": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grouped_xyz, grouped_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_480": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grouped_xyz, grouped_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_709": {
                "in_channels": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features + num_features_prev",
                            "BinOp"
                        ],
                        [
                            "out_features",
                            "Name"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_dims",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_714": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_712": {
                "num_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_dims",
                            "Name"
                        ]
                    ]
                }
            },
            "Linear_865": {
                "in_features": {
                    "value": "self.set_abstractions[-1].get_num_features_out()",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_868": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_869": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_870": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_872": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_873": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_874": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv1d_1053": {
                "in_channels": {
                    "value": "self.feature_propagators[-1].get_num_features_out()",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_1056": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_1057": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv1d_1058": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_867": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_871": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_1055": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "kaolin/models/SimpleGCN.py": {
        "torch": {
            "Parameter_49": {
                "variable": {
                    "value": "self.weight1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_features, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_65": {
                "variable": {
                    "value": "support",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.weight1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(side_1, side_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_51": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_69": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.ones((support.shape[0], 1)).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_71": {
                "variable": {
                    "value": "side_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "normalized_support",
                    "type": "variable",
                    "possible_values": [
                        [
                            "support[:, :side_len] / norm",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_73": {
                "variable": {
                    "value": "side_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "support[:, :side_len]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_69": {
                "*size": {
                    "value": "(support.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "kaolin/models/VGG18.py": {
        "torch": {
            "Sequential_41": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(4, 16, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(16, 16, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_51": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(16, 32, kernel_size=3, padding=1, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(32, 32, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "variable": {
                    "value": "self.layer5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(32, 32, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "variable": {
                    "value": "self.layer6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(32, 64, kernel_size=3, padding=1, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_71": {
                "variable": {
                    "value": "self.layer7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64, 64, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "variable": {
                    "value": "self.layer8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64, 64, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_81": {
                "variable": {
                    "value": "self.layer9",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64, 128, kernel_size=3, padding=1, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_86": {
                "variable": {
                    "value": "self.layer10",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(128, 128, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_91": {
                "variable": {
                    "value": "self.layer11",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(128, 128, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_96": {
                "variable": {
                    "value": "self.layer12",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(128, 256, kernel_size=3, padding=1, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_101": {
                "variable": {
                    "value": "self.layer13",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(256, 256, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_107": {
                "variable": {
                    "value": "self.layer14",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(256, 256, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_112": {
                "variable": {
                    "value": "self.layer15",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(256, 512, kernel_size=3, padding=1, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "variable": {
                    "value": "self.layer16",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(512, 512, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_122": {
                "variable": {
                    "value": "self.layer17",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(512, 512, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_126": {
                "variable": {
                    "value": "self.layer18",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(512, 512, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "in_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_43": {
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_44": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_48": {
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_49": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_53": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_54": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_58": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_59": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_63": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_64": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_68": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_69": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_73": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_74": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_78": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_79": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_82": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_83": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_84": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_87": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_88": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_89": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_93": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_94": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_98": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_99": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_102": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_103": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_104": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_108": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_109": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_110": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_113": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_114": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_115": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_118": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_119": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_120": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_123": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_124": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_125": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_127": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_128": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_129": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "kaolin/models/Voxel3DIWGAN.py": {
        "torch": {
            "Linear_54": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256 * 2 * 2 * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "self.post_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.BatchNorm3d(256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.ConvTranspose3d(256, 256, kernel_size=4, stride=2, padding=(1, 1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.ConvTranspose3d(256, 128, kernel_size=4, stride=2, padding=(1, 1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.ConvTranspose3d(128, 64, kernel_size=4, stride=2, padding=(1, 1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.ConvTranspose3d(64, 1, kernel_size=4, stride=2, padding=(1, 1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_92": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :32, :32, :32]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_109": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv3d(1, 32, kernel_size=4, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_113": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv3d(32, 64, kernel_size=4, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv3d(64, 128, kernel_size=4, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_121": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv3d(128, 256, kernel_size=2, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_125": {
                "variable": {
                    "value": "self.layer5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_56": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose3d_61": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_63": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose3d_67": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_69": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose3d_73": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_75": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose3d_79": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_110": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_111": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv3d_114": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_115": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv3d_118": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_119": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv3d_122": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_123": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "kaolin/models/VoxelGAN.py": {
        "torch": {
            "Sequential_49": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.ConvTranspose3d(200, 512, 4, 2, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.ConvTranspose3d(512, 256, 4, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.ConvTranspose3d(256, 128, 4, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.ConvTranspose3d(128, 1, 4, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_90": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv3d(1, 64, 4, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_95": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv3d(64, 128, 4, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_100": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv3d(128, 256, 4, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_105": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv3d(256, 512, 4, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_110": {
                "variable": {
                    "value": "self.layer5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv3d(512, 1, 2, 2, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_50": {
                "in_channels": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_51": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose3d_55": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_56": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose3d_60": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_61": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose3d_65": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_91": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_92": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_96": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_97": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_101": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_102": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_106": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_107": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_111": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "kaolin/models/VoxelSuperresODM.py": {
        "torch": {
            "Sequential_51": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(6, 128, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_54": {
                "variable": {
                    "value": "self.inner_convs_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv2d(128, 128, kernel_size=3, padding=1) for i in range(16)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_56": {
                "variable": {
                    "value": "self.inner_bns_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.BatchNorm2d(128) for i in range(16)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_58": {
                "variable": {
                    "value": "self.inner_convs_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv2d(128, 128, kernel_size=3, padding=1) for i in range(16)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_60": {
                "variable": {
                    "value": "self.inner_bns_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.BatchNorm2d(128) for i in range(16)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(128, 128, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_72": {
                "variable": {
                    "value": "self.sub_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "sub_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[nn.Conv2d(128, 128, kernel_size=3, padding=1), nn.PixelShuffle(2)]",
                            "List"
                        ]
                    ]
                }
            },
            "Sequential_73": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(32, 6, kernel_size=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_94": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "x + recall",
                            "BinOp"
                        ],
                        [
                            "self.sub_list[2 * i](x)",
                            "Call"
                        ],
                        [
                            "self.sub_list[2 * i + 1](x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_83": {
                "variable": {
                    "value": "recall",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recall",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inner_convs_1[i](x.clone())",
                            "Call"
                        ],
                        [
                            "self.inner_bns_1[i](recall)",
                            "Call"
                        ],
                        [
                            "F.relu(recall)",
                            "Call"
                        ],
                        [
                            "self.inner_convs_2[i](recall)",
                            "Call"
                        ],
                        [
                            "self.inner_bns_2[i](recall)",
                            "Call"
                        ],
                        [
                            "recall + temp",
                            "BinOp"
                        ],
                        [
                            "self.layer2(recall)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_52": {
                "in_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_53": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_64": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PixelShuffle_67": {
                "upscale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_57": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_61": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PixelShuffle_71": {
                "upscale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "kaolin/models/VoxelSuperresSimple.py": {
        "torch": {
            "Conv3d_25": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_26": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_27": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_28": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_29": {
                "variable": {
                    "value": "self.deconv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_30": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_31": {
                "variable": {
                    "value": "self.deconv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_32": {
                "variable": {
                    "value": "self.deconv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_36": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_37": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_39": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.deconv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_40": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv4(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "kaolin/models/dgcnn.py": {
        "torch": {
            "sum_50": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_176": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feature - x, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_176": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "adaptive_max_pool1d_200": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool1d_201": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(batch_size, -1, num_points)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, num_points, 1, num_dims).repeat(1, 1, k, 1)",
                            "Call"
                        ],
                        [
                            "self.get_graph_feature(x, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.__getattr__(f'conv_layers_{it}')(x)",
                            "Call"
                        ],
                        [
                            "x.max(dim=-1, keepdim=False)[0]",
                            "Subscript"
                        ],
                        [
                            "self.embedding_layer(torch.cat(x_list, dim=1))",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2), 1)",
                            "Call"
                        ],
                        [
                            "self.__getattr__(f'fc_layers_{it}')(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer(x)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_202": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_49": {
                "input": {
                    "value": "x.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(batch_size, -1, num_points)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, num_points, 1, num_dims).repeat(1, 1, k, 1)",
                            "Call"
                        ],
                        [
                            "self.get_graph_feature(x, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.__getattr__(f'conv_layers_{it}')(x)",
                            "Call"
                        ],
                        [
                            "x.max(dim=-1, keepdim=False)[0]",
                            "Subscript"
                        ],
                        [
                            "self.embedding_layer(torch.cat(x_list, dim=1))",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2), 1)",
                            "Call"
                        ],
                        [
                            "self.__getattr__(f'fc_layers_{it}')(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_159": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_161": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_116": {
                "*args": {
                    "value": "nn.Conv1d(emb_input_dim, emb_dims, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_133": {
                "in_features": {
                    "value": "self.fc_dims[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_163": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ],
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_197": {
                "tensors": {
                    "value": "x_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_117": {
                "in_channels": {
                    "value": "emb_input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum(conv_dims)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "emb_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_118": {
                "num_features": {
                    "value": "emb_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LeakyReLU_118": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sequential_106": {
                "*args": {
                    "value": "nn.Conv2d(self.conv_dims[it] * 2, self.conv_dims[it + 1], kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_125": {
                "*args": {
                    "value": "nn.Linear(self.fc_dims[it], self.fc_dims[it + 1], bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_107": {
                "in_channels": {
                    "value": "self.conv_dims[it] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.conv_dims[it + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_111": {
                "num_features": {
                    "value": "self.conv_dims[it + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "LeakyReLU_112": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_126": {
                "in_features": {
                    "value": "self.fc_dims[it]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.fc_dims[it + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_127": {
                "num_features": {
                    "value": "self.fc_dims[it + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "LeakyReLU_128": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_129": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "kaolin/rep/Mesh.py": {
        "torch": {
            "from_numpy_460": {
                "variable": {
                    "value": "faces",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "faces",
                    "type": "variable",
                    "possible_values": [
                        [
                            "faces.clone()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.LongTensor(np.array(faces, dtype=np.int64) - 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.LongTensor(np.array(faces, dtype=np.int64))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.vstack(faces).astype(np.int32) - 1",
                            "BinOp"
                        ],
                        [
                            "vertices[faces]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(faces).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_464": {
                "variable": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "faces.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "texture_res ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_612": {
                "variable": {
                    "value": "edges",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[faces[:, i:i + 2] for i in range(facesize - 1)] + [faces[:, [-1, 0]]]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_617": {
                "variable": {
                    "value": "face_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "nb_faces",
                    "type": "variable",
                    "possible_values": [
                        [
                            "faces.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertices.device",
                            "Attribute"
                        ],
                        [
                            "vertices.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unique_621": {
                "variable": {
                    "value": "(edges, edges_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "edges",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat([faces[:, i:i + 2] for i in range(facesize - 1)] + [faces[:, [-1, 0]]], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.sort(edges, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.Tensor(edges).long().to(device)",
                            "Call"
                        ]
                    ]
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "return_inverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_625": {
                "variable": {
                    "value": "(sorted_edges_ids, order_edges_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "edges_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_633": {
                "variable": {
                    "value": "offsets",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sorted_edges_ids.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertices.device",
                            "Attribute"
                        ],
                        [
                            "vertices.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_643": {
                "variable": {
                    "value": "nb_faces_per_edge",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[nb_faces_per_edge, sorted_edges_ids.shape[0] - idx_first[-1:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_646": {
                "variable": {
                    "value": "max_sub_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nb_faces_per_edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx_first[1:] - idx_first[:-1]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([nb_faces_per_edge, sorted_edges_ids.shape[0] - idx_first[-1:]], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_652": {
                "variable": {
                    "value": "ff",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ef[edges_ids[i * nb_faces:(i + 1) * nb_faces]] for i in range(facesize)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_659": {
                "variable": {
                    "value": "max_sub_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nb_faces_per_face",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([nb_faces_per_edge[edges_ids[i * nb_faces:(i + 1) * nb_faces]] for i in range(facesize)], dim=1).sum(dim=1) - facesize",
                            "BinOp"
                        ],
                        [
                            "nb_faces_per_face - torch.sum(to_del, dim=1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_667": {
                "variable": {
                    "value": "_edges",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edges, torch.arange(nb_edges, device=device).view(-1, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_669": {
                "variable": {
                    "value": "double_edges",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_edges, _edges[:, [1, 0, 2]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unique_670": {
                "variable": {
                    "value": "double_edges",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "double_edges",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([_edges, _edges[:, [1, 0, 2]]], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.unique(double_edges, sorted=True, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_680": {
                "variable": {
                    "value": "offsets",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nb_double_edges",
                    "type": "variable",
                    "possible_values": [
                        [
                            "double_edges.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertices.device",
                            "Attribute"
                        ],
                        [
                            "vertices.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_684": {
                "variable": {
                    "value": "nb_edges_per_vertex",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[nb_edges_per_vertex, nb_double_edges - idx_first[-1:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_686": {
                "variable": {
                    "value": "max_sub_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nb_edges_per_vertex",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx_first[1:] - idx_first[:-1]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([nb_edges_per_vertex, nb_double_edges - idx_first[-1:]], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_692": {
                "variable": {
                    "value": "ee",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ve[edges[:, 0], :], ve[edges[:, 1], :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_694": {
                "variable": {
                    "value": "max_sub_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nb_edges_per_edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nb_edges_per_vertex[edges[:, 0]] + nb_edges_per_vertex[edges[:, 1]] - 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sort_699": {
                "variable": {
                    "value": "(vertex_ordered, order_vertex)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "faces.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_706": {
                "variable": {
                    "value": "offsets",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "vertex_ordered.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertices.device",
                            "Attribute"
                        ],
                        [
                            "vertices.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_711": {
                "variable": {
                    "value": "nb_faces_per_vertex",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[nb_faces_per_vertex, vertex_ordered.shape[0] - idx_first[-1:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_713": {
                "variable": {
                    "value": "max_sub_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nb_faces_per_vertex",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx_first[1:] - idx_first[:-1]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([nb_faces_per_vertex, vertex_ordered.shape[0] - idx_first[-1:]], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_864": {
                "variable": {
                    "value": "edges",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_886": {
                "variable": {
                    "value": "neighbor_num",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj_sparse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.compute_adjacency_matrix_sparse()",
                            "Call"
                        ],
                        [
                            "self.compute_adjacency_matrix_sparse()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_955": {
                "variable": {
                    "value": "magnitude",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(torch.pow(matrix, 2), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_957": {
                "variable": {
                    "value": "matrix[valid_inds]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "matrix[valid_inds]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "magnitude[valid_inds].unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_420": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_469": {
                "variable": {
                    "value": "color",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "color",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(color).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_489": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_492": {
                "variable": {
                    "value": "is_update",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "is_update",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(np.array(material_names) == material_name).astype(np.int32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(is_update).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_890": {
                "variable": {
                    "value": "neighbor_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj_sparse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.compute_adjacency_matrix_sparse()",
                            "Call"
                        ],
                        [
                            "self.compute_adjacency_matrix_sparse()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.vertices",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_615": {
                "input": {
                    "value": "edges",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat([faces[:, i:i + 2] for i in range(facesize - 1)] + [faces[:, [-1, 0]]], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.sort(edges, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.Tensor(edges).long().to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_628": {
                "condition": {
                    "value": "torch.nn.functional.pad(sorted_edges_ids[1:] != sorted_edges_ids[:-1], (1, 0), value=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_635": {
                "start": {
                    "value": "sorted_edges_ids.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertices.device",
                            "Attribute"
                        ],
                        [
                            "vertices.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cumsum_636": {
                "input": {
                    "value": "offsets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(sorted_edges_ids.shape[0], device=device, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(nb_double_edges, device=device, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(vertex_ordered.shape[0], device=device, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_647": {
                "*size": {
                    "value": "(nb_edges, max_sub_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertices.device",
                            "Attribute"
                        ],
                        [
                            "vertices.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_650": {
                "tensors": {
                    "value": "[nb_faces_per_edge[edges_ids[i * nb_faces:(i + 1) * nb_faces]] for i in range(facesize)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_650": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_655": {
                "input": {
                    "value": "ff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([ef[edges_ids[i * nb_faces:(i + 1) * nb_faces]] for i in range(facesize)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sort(ff, dim=-1, descending=True)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.sort(ff, dim=-1, descending=True)[0][:, :max_sub_idx]",
                            "Subscript"
                        ],
                        [
                            "-torch.ones((P, ff_max)).long().to(device)",
                            "UnaryOp"
                        ],
                        [
                            "Mesh.list_of_lists_to_matrix(face_face_nbd, ff_count, ff)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_658": {
                "input": {
                    "value": "to_del",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(ff[:, 1:] == ff[:, :-1]) & (ff[:, 1:] != -1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_675": {
                "condition": {
                    "value": "torch.nn.functional.pad(double_edges[1:, 0] != double_edges[:-1, 0], (1, 0), value=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_682": {
                "start": {
                    "value": "nb_double_edges",
                    "type": "variable",
                    "possible_values": [
                        [
                            "double_edges.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertices.device",
                            "Attribute"
                        ],
                        [
                            "vertices.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cumsum_683": {
                "input": {
                    "value": "offsets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(sorted_edges_ids.shape[0], device=device, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(nb_double_edges, device=device, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(vertex_ordered.shape[0], device=device, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_687": {
                "*size": {
                    "value": "(nb_vertices, max_sub_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertices.device",
                            "Attribute"
                        ],
                        [
                            "vertices.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_689": {
                "*size": {
                    "value": "(nb_vertices, max_sub_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertices.device",
                            "Attribute"
                        ],
                        [
                            "vertices.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_702": {
                "condition": {
                    "value": "torch.nn.functional.pad(vertex_ordered[1:] != vertex_ordered[:-1], (1, 0), value=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_708": {
                "start": {
                    "value": "vertex_ordered.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertices.device",
                            "Attribute"
                        ],
                        [
                            "vertices.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cumsum_709": {
                "input": {
                    "value": "offsets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(sorted_edges_ids.shape[0], device=device, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(nb_double_edges, device=device, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(vertex_ordered.shape[0], device=device, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_714": {
                "*size": {
                    "value": "(nb_vertices, max_sub_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertices.device",
                            "Attribute"
                        ],
                        [
                            "vertices.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_814": {},
            "Tensor_816": {},
            "Tensor_818": {},
            "Tensor_820": {},
            "Tensor_822": {},
            "Tensor_824": {},
            "ones_830": {
                "*size": {
                    "value": "(N, vv_max)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_836": {
                "*size": {
                    "value": "(N, ve_max)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_842": {
                "*size": {
                    "value": "(N, vf_max)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_848": {
                "*size": {
                    "value": "(M, ee_max)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_854": {
                "*size": {
                    "value": "(M, ef_max)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_860": {
                "*size": {
                    "value": "(P, ff_max)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mm_908": {
                "input": {
                    "value": "adj_sparse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.compute_adjacency_matrix_sparse()",
                            "Call"
                        ],
                        [
                            "self.compute_adjacency_matrix_sparse()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.vertices",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_910": {
                "input": {
                    "value": "adj_sparse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.compute_adjacency_matrix_sparse()",
                            "Call"
                        ],
                        [
                            "self.compute_adjacency_matrix_sparse()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_955": {
                "input": {
                    "value": "torch.pow(matrix, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_629": {
                "input": {
                    "value": "sorted_edges_ids[1:] != sorted_edges_ids[:-1]",
                    "type": "Compare",
                    "possible_values": []
                },
                "pad": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_654": {
                "start": {
                    "value": "nb_faces",
                    "type": "variable",
                    "possible_values": [
                        [
                            "faces.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertices.device",
                            "Attribute"
                        ],
                        [
                            "vertices.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_660": {
                "input": {
                    "value": "ff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([ef[edges_ids[i * nb_faces:(i + 1) * nb_faces]] for i in range(facesize)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sort(ff, dim=-1, descending=True)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.sort(ff, dim=-1, descending=True)[0][:, :max_sub_idx]",
                            "Subscript"
                        ],
                        [
                            "-torch.ones((P, ff_max)).long().to(device)",
                            "UnaryOp"
                        ],
                        [
                            "Mesh.list_of_lists_to_matrix(face_face_nbd, ff_count, ff)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "arange_667": {
                "start": {
                    "value": "nb_edges",
                    "type": "variable",
                    "possible_values": [
                        [
                            "edges.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertices.device",
                            "Attribute"
                        ],
                        [
                            "vertices.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "pad_676": {
                "input": {
                    "value": "double_edges[1:, 0] != double_edges[:-1, 0]",
                    "type": "Compare",
                    "possible_values": []
                },
                "pad": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_696": {
                "start": {
                    "value": "nb_edges",
                    "type": "variable",
                    "possible_values": [
                        [
                            "edges.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertices.device",
                            "Attribute"
                        ],
                        [
                            "vertices.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_697": {
                "input": {
                    "value": "ee",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([ve[edges[:, 0], :], ve[edges[:, 1], :]], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sort(ee, dim=-1, descending=True)[0][:, :max_sub_idx]",
                            "Subscript"
                        ],
                        [
                            "-torch.ones((M, ee_max)).long().to(device)",
                            "UnaryOp"
                        ],
                        [
                            "Mesh.list_of_lists_to_matrix(edge_edge_nbd, ee_count, ee)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_703": {
                "input": {
                    "value": "vertex_ordered[1:] != vertex_ordered[:-1]",
                    "type": "Compare",
                    "possible_values": []
                },
                "pad": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_955": {
                "input": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "kaolin/rep/PointCloud.py": {
        "torch": {
            "rand_135": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*points.shape[:2]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "from_numpy_115": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(points)",
                            "Call"
                        ],
                        [
                            "points.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "points.clone()",
                            "Call"
                        ],
                        [
                            "points.squeeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_117": {
                "obj": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(points)",
                            "Call"
                        ],
                        [
                            "points.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "points.clone()",
                            "Call"
                        ],
                        [
                            "points.squeeze(0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "kaolin/rep/QuadMesh.py": {
        "torch": {
            "cat_138": {
                "variable": {
                    "value": "tri_faces_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.faces[:, :2], self.faces[:, 3:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_139": {
                "variable": {
                    "value": "tri_faces_2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.faces[:, :1], self.faces[:, 2:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_140": {
                "variable": {
                    "value": "tri_faces",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tri_faces_1, tri_faces_2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "split_143": {
                "variable": {
                    "value": "(x1, x2, x3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "torch.index_select(self.vertices, 0, tri_faces[:, 0]) - torch.index_select(self.vertices, 0, tri_faces[:, 1])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_145": {
                "variable": {
                    "value": "(y1, y2, y3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "torch.index_select(self.vertices, 0, tri_faces[:, 1]) - torch.index_select(self.vertices, 0, tri_faces[:, 2])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Categorical_155": {
                "variable": {
                    "value": "cat_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "Areas.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_160": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.vertices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "select_faces[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_161": {
                "variable": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.vertices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "select_faces[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_162": {
                "variable": {
                    "value": "zs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.vertices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "select_faces[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sqrt_163": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_uni.sample([num_samples])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_218": {
                "variable": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.vertices.shape[0], self.vertices.shape[0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Uniform_133": {
                "variable": {
                    "value": "dist_uni",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "torch.tensor([0.0]).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "high": {
                    "value": "torch.tensor([1.0]).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Uniform_136": {
                "variable": {
                    "value": "dist_uni",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "torch.tensor([0.0])",
                    "type": "Call",
                    "possible_values": []
                },
                "high": {
                    "value": "torch.tensor([1.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_263": {
                "variable": {
                    "value": "identity_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "vert_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.vertices.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_264": {
                "variable": {
                    "value": "identity",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(identity_indices, identity_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_266": {
                "variable": {
                    "value": "identity",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(identity, identity)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_268": {
                "variable": {
                    "value": "i_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(v1, v2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_269": {
                "variable": {
                    "value": "i_2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(v1, v4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_271": {
                "variable": {
                    "value": "i_3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(v2, v1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_272": {
                "variable": {
                    "value": "i_4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(v2, v3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_274": {
                "variable": {
                    "value": "i_5",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(v3, v2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_275": {
                "variable": {
                    "value": "i_6",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(v3, v4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_277": {
                "variable": {
                    "value": "i_7",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(v4, v3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_278": {
                "variable": {
                    "value": "i_8",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(v4, v1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_280": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(identity, i_1, i_2, i_3, i_4, i_5, i_6, i_7, i_8)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_280": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_150": {
                "input": {
                    "value": "a + b + c",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_152": {
                "input": {
                    "value": "Areas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sqrt(a + b + c) / 2",
                            "BinOp"
                        ],
                        [
                            "Areas / torch.sum(Areas)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_134": {
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_137": {
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "index_select_143": {
                "input": {
                    "value": "self.vertices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "tri_faces[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_144": {
                "input": {
                    "value": "self.vertices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "tri_faces[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_145": {
                "input": {
                    "value": "self.vertices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "tri_faces[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_146": {
                "input": {
                    "value": "self.vertices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "tri_faces[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_282": {
                "*size": {
                    "value": "indices.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "kaolin/rep/SDF.py": {
        "torch": {
            "index_select_81": {
                "variable": {
                    "value": "v1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mesh.vertices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "mesh.faces[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_82": {
                "variable": {
                    "value": "v2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mesh.vertices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "mesh.faces[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_83": {
                "variable": {
                    "value": "v3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mesh.vertices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "mesh.faces[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_57": {
                "variable": {
                    "value": "ints",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_68": {
                "variable": {
                    "value": "gradxyz1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "ints.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_115": {
                "input": {
                    "value": "(points ** 2).sum(dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_127": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points.contiguous()",
                            "Call"
                        ],
                        [
                            "self.rescale(points)",
                            "Call"
                        ],
                        [
                            "points[mask]",
                            "Subscript"
                        ],
                        [
                            "points[point_indices]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_133": {
                "variable": {
                    "value": "negative_res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_134": {
                "variable": {
                    "value": "negative_res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_135": {
                "variable": {
                    "value": "negative_res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "negative_res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(d[:, 1], d[:, 2])",
                            "Call"
                        ],
                        [
                            "torch.max(d[:, 0], negative_res)",
                            "Call"
                        ],
                        [
                            "torch.min(negative_res, torch.zeros(negative_res.shape).to(d.device))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_131": {
                "input": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(points)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_135": {
                "*size": {
                    "value": "negative_res.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_131": {
                "*size": {
                    "value": "d.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "kaolin/rep/TriangleMesh.py": {
        "torch": {
            "sqrt_95": {
                "variable": {
                    "value": "magnitude",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(torch.pow(matrix, 2), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_97": {
                "variable": {
                    "value": "matrix[valid_inds]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "matrix[valid_inds]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "magnitude[valid_inds].unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_107": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.vertices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "self.faces[:, 0].flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_109": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.vertices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "self.faces[:, 1].flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_111": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.vertices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "self.faces[:, 2].flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_132": {
                "variable": {
                    "value": "vertex_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.vertices.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_132": {
                "variable": {
                    "value": "vertex_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_140": {
                "variable": {
                    "value": "vn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.vertices",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_142": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_abc[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_143": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(inds, torch.zeros_like(inds))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_145": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_abc[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_146": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(inds, 1 * torch.ones_like(inds))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_148": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_abc[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_149": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(inds, 2 * torch.ones_like(inds))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_159": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.vertices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "self.faces[:, 0].flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_161": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.vertices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "self.faces[:, 1].flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_163": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.vertices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "self.faces[:, 2].flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_188": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.vertices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "self.edges[:, 0].flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_190": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.vertices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "self.edges[:, 1].flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_257": {
                "variable": {
                    "value": "(x1, x2, x3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "torch.index_select(self.vertices, 0, self.faces[:, 0]) - torch.index_select(self.vertices, 0, self.faces[:, 1])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_260": {
                "variable": {
                    "value": "(y1, y2, y3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "torch.index_select(self.vertices, 0, self.faces[:, 1]) - torch.index_select(self.vertices, 0, self.faces[:, 2])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Categorical_271": {
                "variable": {
                    "value": "cat_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "Areas.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_276": {
                "variable": {
                    "value": "v0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.vertices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "select_faces[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_277": {
                "variable": {
                    "value": "v1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.vertices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "select_faces[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_278": {
                "variable": {
                    "value": "v2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.vertices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "select_faces[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sqrt_279": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_uni.sample([num_samples])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_297": {
                "variable": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.vertices.shape[0], self.vertices.shape[0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Uniform_250": {
                "variable": {
                    "value": "dist_uni",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "torch.tensor([0.0]).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "high": {
                    "value": "torch.tensor([1.0]).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Uniform_253": {
                "variable": {
                    "value": "dist_uni",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "torch.tensor([0.0])",
                    "type": "Call",
                    "possible_values": []
                },
                "high": {
                    "value": "torch.tensor([1.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_351": {
                "variable": {
                    "value": "identity_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "vert_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.vertices.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_352": {
                "variable": {
                    "value": "identity",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(identity_indices, identity_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_354": {
                "variable": {
                    "value": "identity",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(identity, identity)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_356": {
                "variable": {
                    "value": "i_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(v1, v2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_357": {
                "variable": {
                    "value": "i_2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(v1, v3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_359": {
                "variable": {
                    "value": "i_3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(v2, v1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_360": {
                "variable": {
                    "value": "i_4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(v2, v3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_362": {
                "variable": {
                    "value": "i_5",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(v3, v2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_363": {
                "variable": {
                    "value": "i_6",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(v3, v1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_364": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(identity, i_1, i_2, i_3, i_4, i_5, i_6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_364": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_95": {
                "input": {
                    "value": "torch.pow(matrix, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_117": {
                "input": {
                    "value": "b - a",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "c - a",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_119": {
                "input": {
                    "value": "c - b",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "a - b",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_121": {
                "input": {
                    "value": "a - c",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "b - c",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_170": {
                "input": {
                    "value": "b - a",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "c - a",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_172": {
                "input": {
                    "value": "c - b",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "a - b",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_174": {
                "input": {
                    "value": "a - c",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "b - c",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_178": {
                "condition": {
                    "value": "face_normals_norm > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "face_normals_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "face_normals.norm(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.ones_like(face_normals_norm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_266": {
                "input": {
                    "value": "a + b + c",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_95": {
                "input": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_143": {
                "input": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nonzero(mask_abc[:, 0])",
                            "Call"
                        ],
                        [
                            "torch.cat((inds, torch.zeros_like(inds)), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nonzero(mask_abc[:, 1])",
                            "Call"
                        ],
                        [
                            "torch.cat((inds, 1 * torch.ones_like(inds)), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nonzero(mask_abc[:, 2])",
                            "Call"
                        ],
                        [
                            "torch.cat((inds, 2 * torch.ones_like(inds)), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_251": {
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_254": {
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "index_select_257": {
                "input": {
                    "value": "self.vertices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "self.faces[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_258": {
                "input": {
                    "value": "self.vertices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "self.faces[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_260": {
                "input": {
                    "value": "self.vertices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "self.faces[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_261": {
                "input": {
                    "value": "self.vertices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "self.faces[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_268": {
                "input": {
                    "value": "Areas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sqrt(a + b + c) / 2",
                            "BinOp"
                        ],
                        [
                            "Areas / (torch.sum(Areas) + eps)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_366": {
                "*size": {
                    "value": "indices.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_146": {
                "input": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nonzero(mask_abc[:, 0])",
                            "Call"
                        ],
                        [
                            "torch.cat((inds, torch.zeros_like(inds)), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nonzero(mask_abc[:, 1])",
                            "Call"
                        ],
                        [
                            "torch.cat((inds, 1 * torch.ones_like(inds)), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nonzero(mask_abc[:, 2])",
                            "Call"
                        ],
                        [
                            "torch.cat((inds, 2 * torch.ones_like(inds)), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_149": {
                "input": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nonzero(mask_abc[:, 0])",
                            "Call"
                        ],
                        [
                            "torch.cat((inds, torch.zeros_like(inds)), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nonzero(mask_abc[:, 1])",
                            "Call"
                        ],
                        [
                            "torch.cat((inds, 1 * torch.ones_like(inds)), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nonzero(mask_abc[:, 2])",
                            "Call"
                        ],
                        [
                            "torch.cat((inds, 2 * torch.ones_like(inds)), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_179": {
                "input": {
                    "value": "face_normals_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "face_normals.norm(dim=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "kaolin/rep/VoxelGrid.py": {
        "torch": {}
    },
    "kaolin/testing/__init__.py": {
        "torch": {
            "is_tensor_15": {
                "obj": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "kaolin/transforms/meshfunc.py": {
        "torch": {
            "Uniform_68": {
                "variable": {
                    "value": "dist_uni",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "torch.tensor([0.0]).to(vertices.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "high": {
                    "value": "torch.tensor([1.0]).to(vertices.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_72": {
                "variable": {
                    "value": "(x1, x2, x3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "torch.index_select(vertices, 0, faces[:, 0]) - torch.index_select(vertices, 0, faces[:, 1])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_75": {
                "variable": {
                    "value": "(y1, y2, y3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "torch.index_select(vertices, 0, faces[:, 1]) - torch.index_select(vertices, 0, faces[:, 2])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Categorical_86": {
                "variable": {
                    "value": "cat_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "Areas.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_91": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "select_faces[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_92": {
                "variable": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "select_faces[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_93": {
                "variable": {
                    "value": "zs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "select_faces[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sqrt_94": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_uni.sample([num_samples])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_166": {
                "variable": {
                    "value": "_scf",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_228": {
                "variable": {
                    "value": "mesh.vertices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "rotmat",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "mesh.vertices.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_228": {
                "variable": {
                    "value": "mesh.vertices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_tensor_191": {
                "obj": {
                    "value": "trans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "trans.view(1, 3)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([trans[0], trans[1], trans[2]]).to(mesh.vertices.device).view(1, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_68": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_69": {
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_81": {
                "input": {
                    "value": "a + b + c",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tensor_200": {
                "variable": {
                    "value": "trans",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "index_select_72": {
                "input": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "faces[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_73": {
                "input": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "faces[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_75": {
                "input": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "faces[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_76": {
                "input": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "faces[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_83": {
                "input": {
                    "value": "Areas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sqrt(a + b + c) / 2",
                            "BinOp"
                        ],
                        [
                            "Areas / (torch.sum(Areas) + eps)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "kaolin/transforms/pointcloudfunc.py": {
        "torch": {
            "randn_223": {
                "variable": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_224": {
                "variable": {
                    "value": "tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_231": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_55": {
                "variable": {
                    "value": "cloud",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "cloud",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(cloud)",
                            "Call"
                        ],
                        [
                            "cloud.points",
                            "Attribute"
                        ],
                        [
                            "cloud.clone()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(cloud)",
                            "Call"
                        ],
                        [
                            "cloud.points",
                            "Attribute"
                        ],
                        [
                            "cloud.clone()",
                            "Call"
                        ],
                        [
                            "torch.mm(rotmat, cloud.transpose(0, 1)).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(rotmat, cloud.transpose(1, 2)).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(cloud)",
                            "Call"
                        ],
                        [
                            "cloud.clone()",
                            "Call"
                        ],
                        [
                            "(cloud - cloud.mean(-2).unsqueeze(-2)) / (cloud.std(-2).unsqueeze(-2) + EPS)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_58": {
                "variable": {
                    "value": "scf",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "scf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(scf)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([scf]).to(cloud.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_64": {
                "variable": {
                    "value": "scf",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_102": {
                "variable": {
                    "value": "cloud",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "cloud",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(cloud)",
                            "Call"
                        ],
                        [
                            "cloud.points",
                            "Attribute"
                        ],
                        [
                            "cloud.clone()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(cloud)",
                            "Call"
                        ],
                        [
                            "cloud.points",
                            "Attribute"
                        ],
                        [
                            "cloud.clone()",
                            "Call"
                        ],
                        [
                            "torch.mm(rotmat, cloud.transpose(0, 1)).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(rotmat, cloud.transpose(1, 2)).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(cloud)",
                            "Call"
                        ],
                        [
                            "cloud.clone()",
                            "Call"
                        ],
                        [
                            "(cloud - cloud.mean(-2).unsqueeze(-2)) / (cloud.std(-2).unsqueeze(-2) + EPS)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_106": {
                "variable": {
                    "value": "rotmat",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rotmat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(rotmat)",
                            "Call"
                        ],
                        [
                            "rotmat.expand(cloud.shape[0], 3, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_120": {
                "variable": {
                    "value": "cloud",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rotmat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(rotmat)",
                            "Call"
                        ],
                        [
                            "rotmat.expand(cloud.shape[0], 3, 3)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "cloud.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_120": {
                "variable": {
                    "value": "cloud",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_124": {
                "variable": {
                    "value": "cloud",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rotmat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(rotmat)",
                            "Call"
                        ],
                        [
                            "rotmat.expand(cloud.shape[0], 3, 3)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "cloud.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_124": {
                "variable": {
                    "value": "cloud",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_204": {
                "variable": {
                    "value": "cloud",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "cloud",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(cloud)",
                            "Call"
                        ],
                        [
                            "cloud.points",
                            "Attribute"
                        ],
                        [
                            "cloud.clone()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(cloud)",
                            "Call"
                        ],
                        [
                            "cloud.points",
                            "Attribute"
                        ],
                        [
                            "cloud.clone()",
                            "Call"
                        ],
                        [
                            "torch.mm(rotmat, cloud.transpose(0, 1)).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(rotmat, cloud.transpose(1, 2)).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(cloud)",
                            "Call"
                        ],
                        [
                            "cloud.clone()",
                            "Call"
                        ],
                        [
                            "(cloud - cloud.mean(-2).unsqueeze(-2)) / (cloud.std(-2).unsqueeze(-2) + EPS)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "kaolin/transforms/transforms.py": {
        "torch": {
            "from_numpy_116": {
                "variable": {
                    "value": "verts",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data['vertices']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_117": {
                "variable": {
                    "value": "faces",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data['faces']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_123": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data['arr_0']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_142": {
                "ndarray": {
                    "value": "arr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_731": {
                "*size": {
                    "value": "self.num_samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "kaolin/transforms/voxelfunc.py": {
        "torch": {}
    },
    "kaolin/vision/geometry.py": {
        "torch": {
            "eye_122": {
                "variable": {
                    "value": "extrinsics",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_158": {
                "tensors": {
                    "value": "[u, v]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_tensor_94": {
                "obj": {
                    "value": "pts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "homogenize_points(pts)",
                            "Call"
                        ],
                        [
                            "transform3d(pts, torch.matmul(intrinsics, extrinsics))",
                            "Call"
                        ],
                        [
                            "homogenize_points(pts)",
                            "Call"
                        ],
                        [
                            "homogenize_points(pts)",
                            "Call"
                        ],
                        [
                            "homogenize_points(pts)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_97": {
                "obj": {
                    "value": "intrinsics",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_151": {
                "input": {
                    "value": "intrinsics",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "extrinsics",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(4).to(pts.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_155": {
                "condition": {
                    "value": "z == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(z)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pts[..., 2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "where_156": {
                "condition": {
                    "value": "z == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(z)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pts[..., 2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "is_tensor_222": {
                "obj": {
                    "value": "pts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "homogenize_points(pts)",
                            "Call"
                        ],
                        [
                            "transform3d(pts, torch.matmul(intrinsics, extrinsics))",
                            "Call"
                        ],
                        [
                            "homogenize_points(pts)",
                            "Call"
                        ],
                        [
                            "homogenize_points(pts)",
                            "Call"
                        ],
                        [
                            "homogenize_points(pts)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_225": {
                "obj": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth.unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_228": {
                "obj": {
                    "value": "intrinsics",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_tensor_101": {
                "obj": {
                    "value": "extrinsics",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(4).to(pts.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_155": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pts[..., 2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_like_156": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pts[..., 2]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "kaolin/visualize/vis.py": {
        "torch": {
            "rand_110": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_points",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_117": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_points",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "kaolin/visualize/vis_usd.py": {
        "torch": {
            "nonzero_129": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "voxels.voxels.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_243": {
                "variable": {
                    "value": "y_translation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "points[:, self.up_axis_index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_249": {
                "variable": {
                    "value": "center_point",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "center_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(center_point, device=points.device)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "points.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_236": {
                "input": {
                    "value": "torch.max(points, 0)[0] - torch.min(points, 0)[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_250": {
                "input": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nonzero(voxels.voxels.detach()).float()",
                            "Call"
                        ],
                        [
                            "points.cpu().numpy().astype(float)",
                            "Call"
                        ],
                        [
                            "points.cpu().numpy().astype(float)",
                            "Call"
                        ],
                        [
                            "vertices.tolist()",
                            "Call"
                        ],
                        [
                            "points + translation",
                            "BinOp"
                        ]
                    ]
                }
            },
            "min_250": {
                "input": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nonzero(voxels.voxels.detach()).float()",
                            "Call"
                        ],
                        [
                            "points.cpu().numpy().astype(float)",
                            "Call"
                        ],
                        [
                            "points.cpu().numpy().astype(float)",
                            "Call"
                        ],
                        [
                            "vertices.tolist()",
                            "Call"
                        ],
                        [
                            "points + translation",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_251": {
                "input": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nonzero(voxels.voxels.detach()).float()",
                            "Call"
                        ],
                        [
                            "points.cpu().numpy().astype(float)",
                            "Call"
                        ],
                        [
                            "points.cpu().numpy().astype(float)",
                            "Call"
                        ],
                        [
                            "vertices.tolist()",
                            "Call"
                        ],
                        [
                            "points + translation",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_236": {
                "input": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nonzero(voxels.voxels.detach()).float()",
                            "Call"
                        ],
                        [
                            "points.cpu().numpy().astype(float)",
                            "Call"
                        ],
                        [
                            "points.cpu().numpy().astype(float)",
                            "Call"
                        ],
                        [
                            "vertices.tolist()",
                            "Call"
                        ],
                        [
                            "points + translation",
                            "BinOp"
                        ]
                    ]
                }
            },
            "min_236": {
                "input": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nonzero(voxels.voxels.detach()).float()",
                            "Call"
                        ],
                        [
                            "points.cpu().numpy().astype(float)",
                            "Call"
                        ],
                        [
                            "points.cpu().numpy().astype(float)",
                            "Call"
                        ],
                        [
                            "vertices.tolist()",
                            "Call"
                        ],
                        [
                            "points + translation",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "setup.py": {
        "torch": {}
    },
    "tests/common.py": {
        "torch": {
            "is_available_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/conversions/test_meshconversions.py": {
        "torch": {
            "rand_56": {
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/conversions/test_pointcloudconversions.py": {
        "torch": {}
    },
    "tests/conversions/test_sdfconversions.py": {
        "torch": {
            "abs_44": {
                "input": {
                    "value": "points[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_45": {
                "input": {
                    "value": "points[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_46": {
                "input": {
                    "value": "points[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_68": {
                "input": {
                    "value": "verts[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_69": {
                "input": {
                    "value": "verts[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_70": {
                "input": {
                    "value": "verts[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "tests/conversions/test_voxelgridconversions.py": {
        "torch": {
            "ones_25": {
                "variable": {
                    "value": "voxel",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[32, 32, 32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_36": {
                "variable": {
                    "value": "voxel",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[64, 64, 64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_46": {
                "variable": {
                    "value": "voxel",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[32, 32, 32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_52": {
                "variable": {
                    "value": "voxel",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[64, 64, 64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_62": {
                "variable": {
                    "value": "voxel",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[32, 32, 32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_68": {
                "variable": {
                    "value": "voxel",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[64, 64, 64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_78": {
                "variable": {
                    "value": "voxel",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[10, 10, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_86": {
                "variable": {
                    "value": "voxel",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[10, 10, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_80": {
                "*size": {
                    "value": "(200, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_88": {
                "*size": {
                    "value": "(200, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/datasets/test_ModelNet.py": {
        "torch": {}
    },
    "tests/datasets/test_ShapeNet.py": {
        "torch": {}
    },
    "tests/datasets/test_shrec.py": {
        "torch": {}
    },
    "tests/mathutils/test_common.py": {
        "torch": {
            "gradcheck_40": {
                "func": {
                    "value": "kal.mathutils.rad2deg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tensor_to_gradcheck_var(x_rad)",
                    "type": "Call",
                    "possible_values": []
                },
                "raise_exception": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gradcheck_52": {
                "func": {
                    "value": "kal.mathutils.deg2rad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tensor_to_gradcheck_var(x_deg)",
                    "type": "Call",
                    "possible_values": []
                },
                "raise_exception": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_35": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_46": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_47": {
                "type": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "tests/mathutils/test_transformations.py": {
        "torch": {
            "randn_98": {
                "variable": {
                    "value": "pts",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_105": {
                "variable": {
                    "value": "pts",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_30": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_56": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_78": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_35": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_42": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_61": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_68": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_83": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_90": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/metrics/test_mesh_metrics.py": {
        "torch": {
            "manual_seed_60": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_61": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_63": {
                "*size": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/metrics/test_point_metrics.py": {
        "torch": {
            "rand_25": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_26": {
                "variable": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_38": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_39": {
                "variable": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_61": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_79": {
                "variable": {
                    "value": "points1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/metrics/test_voxel_metrics.py": {
        "torch": {
            "rand_26": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_27": {
                "variable": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_31": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_36": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_37": {
                "variable": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_41": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_42": {
                "variable": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/models/test_PointNet.py": {
        "torch": {
            "randn_28": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_39": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_49": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_60": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/models/test_PointNet2.py": {
        "torch": {
            "randn_27": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_36": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/models/test_Voxel3DIWGAN.py": {
        "torch": {
            "randn_28": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/models/test_VoxelGAN.py": {
        "torch": {
            "randn_28": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/models/test_VoxelSuperresODM.py": {
        "torch": {
            "randn_25": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/models/test_VoxelSuperresSimple.py": {
        "torch": {
            "randn_25": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/rep/test_SDF_representation.py": {
        "torch": {
            "rand_28": {
                "*size": {
                    "value": "(1000, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_38": {
                "*size": {
                    "value": "(1000, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_33": {
                "*size": {
                    "value": "(1000, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/rep/test_mesh_representation.py": {
        "torch": {
            "abs_87": {
                "input": {
                    "value": "v1 - v2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_105": {
                "input": {
                    "value": "mesh1.vertices - mesh2.vertices",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_106": {
                "input": {
                    "value": "mesh1.faces - mesh2.faces",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/rep/test_point_representation.py": {
        "torch": {
            "ones_24": {
                "variable": {
                    "value": "pts",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_25": {
                "variable": {
                    "value": "normals",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/rep/test_voxel_representation.py": {
        "torch": {
            "ones_23": {
                "variable": {
                    "value": "voxels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[32, 32, 32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_29": {
                "variable": {
                    "value": "voxel",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[32, 32, 32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_38": {
                "variable": {
                    "value": "voxel",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[128, 128, 128]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_49": {
                "variable": {
                    "value": "voxel",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[32, 32, 32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_58": {
                "variable": {
                    "value": "voxel",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[128, 128, 128]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_71": {
                "variable": {
                    "value": "voxel",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[32, 32, 32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_89": {
                "variable": {
                    "value": "voxel",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[32, 32, 32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_95": {
                "variable": {
                    "value": "voxel",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[32, 32, 32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_100": {
                "variable": {
                    "value": "voxel",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[64, 64, 64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_108": {
                "variable": {
                    "value": "voxel",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[32, 32, 32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_114": {
                "variable": {
                    "value": "voxel",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[32, 32, 32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_120": {
                "variable": {
                    "value": "voxel",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[64, 64, 64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_129": {
                "variable": {
                    "value": "voxel",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[32, 32, 32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_136": {
                "variable": {
                    "value": "voxel",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[32, 32, 32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_142": {
                "variable": {
                    "value": "voxel",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[128, 128, 128]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_162": {
                "variable": {
                    "value": "voxel",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[32, 32, 32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_76": {
                "*size": {
                    "value": "[32, 32, 32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_81": {
                "*size": {
                    "value": "[64, 64, 64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_152": {
                "*size": {
                    "value": "[32, 32, 32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_157": {
                "*size": {
                    "value": "[128, 128, 128]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_167": {
                "input": {
                    "value": "voxel - new_voxel",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_compute_adjacency_info.py": {
        "torch": {
            "zeros_53": {
                "variable": {
                    "value": "_key2key_arr",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "edges.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertices.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_78": {
                "variable": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_102": {
                "*size": {
                    "value": "(edges.shape[0], edges.shape[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_120": {
                "input": {
                    "value": "ee_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ee_count.cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_59": {
                "input": {
                    "value": "vv != -1",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_62": {
                "input": {
                    "value": "ve != -1",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_69": {
                "input": {
                    "value": "vf != -1",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sort_60": {
                "input": {
                    "value": "_vv",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unique_65": {
                "input": {
                    "value": "ve[i, :ve_count[i]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unique_66": {
                "input": {
                    "value": "_key2key_arr[_ve[i, :ve_count[i]]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_70": {
                "input": {
                    "value": "_vf",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_73": {
                "input": {
                    "value": "_ef",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_76": {
                "input": {
                    "value": "_ff",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_121": {
                "input": {
                    "value": "_ee[:, :torch.max(ee_count)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_122": {
                "input": {
                    "value": "ee",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ee.cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_121": {
                "input": {
                    "value": "ee_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ee_count.cpu()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_import.py": {
        "torch": {
            "Tensor_24": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/transforms/test_pointcloudfunc.py": {
        "torch": {
            "randn_9": {
                "variable": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_10": {
                "variable": {
                    "value": "tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_10": {
                "variable": {
                    "value": "tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/transforms/test_transforms.py": {
        "torch": {
            "ones_22": {
                "variable": {
                    "value": "pc",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_28": {
                "variable": {
                    "value": "pc",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_50": {
                "variable": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_58": {
                "variable": {
                    "value": "voxel",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[32, 32, 32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_68": {
                "variable": {
                    "value": "voxel",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[32, 32, 32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_tensor_16": {
                "obj": {
                    "value": "ten",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nptotensor(arr)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_38": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_24": {
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_29": {
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_34": {
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_39": {
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_40": {
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_53": {
                "input": {
                    "value": "src.mean(-2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_54": {
                "input": {
                    "value": "src.std(-2)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tests/vision/test_geometry.py": {
        "torch": {
            "rand_28": {
                "variable": {
                    "value": "pts",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_42": {
                "variable": {
                    "value": "img_pts",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_54": {
                "variable": {
                    "value": "pts",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_67": {
                "variable": {
                    "value": "img_pts",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_43": {
                "*size": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_68": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/visualize/test_vis_usd.py": {
        "torch": {
            "device_28": {
                "type": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_30": {
                "type": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}