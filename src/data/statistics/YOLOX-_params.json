{
    "demo/MegEngine/python/convert_weights.py": {
        "torch": {
            "load_24": {
                "variable": {
                    "value": "torch_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weight_file",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "exps/default/nano.py": {
        "torch": {}
    },
    "exps/default/yolov3.py": {
        "torch": {
            "RandomSampler_75": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "exps/eus_voc/yolox_voc_x.py": {
        "torch": {
            "DataLoader_114": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valdataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VOCDetection(data_dir=os.path.join(get_yolox_datadir(), 'eus'), img_size=self.test_size, preproc=ValTransform(rgb_means=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225)), dataset_mode='val')",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_102": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valdataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VOCDetection(data_dir=os.path.join(get_yolox_datadir(), 'eus'), img_size=self.test_size, preproc=ValTransform(rgb_means=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225)), dataset_mode='val')",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SequentialSampler_106": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "valdataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VOCDetection(data_dir=os.path.join(get_yolox_datadir(), 'eus'), img_size=self.test_size, preproc=ValTransform(rgb_means=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225)), dataset_mode='val')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "exps/example/yolox_voc/yolox_voc_s.py": {
        "torch": {
            "DataLoader_107": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valdataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VOCDetection(data_dir=os.path.join(get_yolox_datadir(), 'VOCdevkit'), image_sets=[('2007', 'test')], img_size=self.test_size, preproc=ValTransform(rgb_means=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225)))",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_95": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valdataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VOCDetection(data_dir=os.path.join(get_yolox_datadir(), 'VOCdevkit'), image_sets=[('2007', 'test')], img_size=self.test_size, preproc=ValTransform(rgb_means=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225)))",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SequentialSampler_99": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "valdataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VOCDetection(data_dir=os.path.join(get_yolox_datadir(), 'VOCdevkit'), image_sets=[('2007', 'test')], img_size=self.test_size, preproc=ValTransform(rgb_means=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225)))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "setup.py": {
        "torch": {
            "split_11": {
                "tensor": {
                    "value": ".",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "tools/demo.py": {
        "torch": {
            "from_numpy_139": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.imread(img)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "img.cuda()",
                            "Call"
                        ],
                        [
                            "img_info['raw_img']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_139": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_262": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(file_name, 'best_ckpt.pth.tar')",
                            "Call"
                        ],
                        [
                            "args.ckpt",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_118": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "exp.test_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "exp.test_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_116": {
                "f": {
                    "value": "trt_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "os.path.join(file_name, 'model_trt.pth')",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "tools/eval.py": {
        "torch": {
            "set_device_144": {
                "device": {
                    "value": "rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.local_rank",
                            "Attribute"
                        ]
                    ]
                }
            },
            "load_155": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(file_name, 'best_ckpt.pth.tar')",
                            "Call"
                        ],
                        [
                            "args.ckpt",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:{}'.format(rank)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_109": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools/export_onnx.py": {
        "torch": {
            "load_71": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(file_name, 'best_ckpt.pth.tar')",
                            "Call"
                        ],
                        [
                            "args.ckpt",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "randn_81": {
                "variable": {
                    "value": "dummy_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "exp.test_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "exp.test_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "tools/test_imgs.py": {
        "torch": {
            "load_154": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join('./YOLOX_outputs/yolox_voc_x', 'best_ckpt.pth.tar')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_79": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.imread(img)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "img.cuda()",
                            "Call"
                        ],
                        [
                            "img_info['raw_img']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_79": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_58": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "exp.test_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "exp.test_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_56": {
                "f": {
                    "value": "trt_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "tools/test_video.py": {
        "torch": {
            "load_162": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join('./YOLOX_outputs/yolox_voc_x', 'best_ckpt.pth.tar')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_78": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.imread(img)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "img.cuda()",
                            "Call"
                        ],
                        [
                            "img_info['raw_img']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_78": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_57": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "exp.test_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "exp.test_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_55": {
                "f": {
                    "value": "trt_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "tools/train.py": {
        "torch": {
            "manual_seed_92": {
                "seed": {
                    "value": "exp.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools/trt.py": {
        "torch": {
            "load_49": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(file_name, 'best_ckpt.pth.tar')",
                            "Call"
                        ],
                        [
                            "args.ckpt",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_57": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "exp.test_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "exp.test_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_65": {
                "obj": {
                    "value": "model_trt.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(file_name, 'model_trt.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "yolox/core/launch.py": {
        "torch": {
            "is_available_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_205": {
                "device": {
                    "value": "local_rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(os.environ.get('LOCAL_RANK', '0'))",
                            "Call"
                        ],
                        [
                            "range(0, num_gpus_per_machine)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "yolox/core/trainer.py": {
        "torch": {
            "set_device_129": {
                "device": {
                    "value": "self.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_180": {
                "variable": {
                    "value": "self.tblogger",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "self.file_name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_276": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.file_name, 'latest' + '_ckpt.pth.tar')",
                            "Call"
                        ],
                        [
                            "self.args.ckpt",
                            "Attribute"
                        ],
                        [
                            "self.args.ckpt",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_298": {
                "f": {
                    "value": "ckpt_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.file_name, 'latest' + '_ckpt.pth.tar')",
                            "Call"
                        ],
                        [
                            "self.args.ckpt",
                            "Attribute"
                        ],
                        [
                            "self.args.ckpt",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "yolox/data/data_augment.py": {
        "torch": {}
    },
    "yolox/data/data_prefetcher.py": {
        "torch": {
            "Stream_23": {
                "variable": {
                    "value": "self.stream",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_stream_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "broadcast_74": {
                "tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.LongTensor(1).cuda()",
                            "Call"
                        ]
                    ]
                },
                "devices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "current_stream_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_stream_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "yolox/data/dataloading.py": {
        "torch": {
            "RandomSampler_104": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SequentialSampler_107": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "yolox/data/datasets/datasets_wrapper.py": {
        "torch": {}
    },
    "yolox/data/samplers.py": {
        "torch": {
            "Generator_86": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_90": {
                "n": {
                    "value": "self._size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_92": {
                "start": {
                    "value": "self._size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "yolox/evaluators/coco_evaluator.py": {
        "torch": {
            "ones_94": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "test_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "test_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_92": {
                "f": {
                    "value": "trt_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "yolox/evaluators/voc_evaluator.py": {
        "torch": {
            "ones_91": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "test_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "test_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_197": {
                "variable": {
                    "value": "c_dets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bboxes, scores.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_89": {
                "f": {
                    "value": "trt_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "yolox/exp/base_exp.py": {
        "torch": {}
    },
    "yolox/exp/yolox_base.py": {
        "torch": {
            "DataLoader_229": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valdataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "COCODataset(data_dir=None, json_file=self.val_ann if not testdev else 'image_info_test-dev2017.json', name='val2017' if not testdev else 'test2017', img_size=self.test_size, preproc=ValTransform(rgb_means=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225)))",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_176": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "pg0",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.warmup_lr",
                            "Attribute"
                        ],
                        [
                            "self.basic_lr_per_img * batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedSampler_217": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valdataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "COCODataset(data_dir=None, json_file=self.val_ann if not testdev else 'image_info_test-dev2017.json', name='val2017' if not testdev else 'test2017', img_size=self.test_size, preproc=ValTransform(rgb_means=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225)))",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SequentialSampler_221": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "valdataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "COCODataset(data_dir=None, json_file=self.val_ann if not testdev else 'image_info_test-dev2017.json', name='val2017' if not testdev else 'test2017', img_size=self.test_size, preproc=ValTransform(rgb_means=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225)))",
                            "Call"
                        ]
                    ]
                }
            },
            "broadcast_152": {
                "tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.LongTensor(2).cuda()",
                            "Call"
                        ]
                    ]
                },
                "devices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "yolox/models/darknet.py": {
        "torch": {
            "Sequential_32": {
                "variable": {
                    "value": "self.stem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BaseConv(in_channels, stem_out_channels, ksize=3, stride=1, act='lrelu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.dark2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.make_group_layer(in_channels, num_blocks[0], stride=2)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "self.dark3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.make_group_layer(in_channels, num_blocks[1], stride=2)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self.dark4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.make_group_layer(in_channels, num_blocks[2], stride=2)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "self.dark5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.make_group_layer(in_channels, num_blocks[3], stride=2)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_67": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[BaseConv(in_filters, filters_list[0], 1, stride=1, act='lrelu'), BaseConv(filters_list[0], filters_list[1], 3, stride=1, act='lrelu'), SPPBottleneck(in_channels=filters_list[1], out_channels=filters_list[0], activation='lrelu'), BaseConv(filters_list[0], filters_list[1], 3, stride=1, act='lrelu'), BaseConv(filters_list[1], filters_list[0], 1, stride=1, act='lrelu')]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_118": {
                "variable": {
                    "value": "self.dark2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv(base_channels, base_channels * 2, 3, 2, act=act)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_130": {
                "variable": {
                    "value": "self.dark3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv(base_channels * 2, base_channels * 4, 3, 2, act=act)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_142": {
                "variable": {
                    "value": "self.dark4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv(base_channels * 4, base_channels * 8, 3, 2, act=act)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_154": {
                "variable": {
                    "value": "self.dark5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv(base_channels * 8, base_channels * 16, 3, 2, act=act)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "yolox/models/losses.py": {
        "torch": {
            "max_20": {
                "variable": {
                    "value": "tl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred[:, :2] - pred[:, 2:] / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_23": {
                "variable": {
                    "value": "br",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred[:, :2] + pred[:, 2:] / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "prod_27": {
                "variable": {
                    "value": "area_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred[:, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "prod_28": {
                "variable": {
                    "value": "area_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target[:, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "prod_31": {
                "input": {
                    "value": "br - tl",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_37": {
                "variable": {
                    "value": "c_tl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred[:, :2] - pred[:, 2:] / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_40": {
                "variable": {
                    "value": "c_br",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred[:, :2] + pred[:, 2:] / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "prod_43": {
                "variable": {
                    "value": "area_c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c_br - c_tl",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "yolox/models/network_blocks.py": {
        "torch": {
            "SiLU_19": {
                "variable": {
                    "value": "module",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "inplace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_38": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ksize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(ksize - 1) // 2",
                            "BinOp"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_47": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_131": {
                "variable": {
                    "value": "self.m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.MaxPool2d(kernel_size=ks, stride=1, padding=ks // 2) for ks in kernel_sizes]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_142": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x] + [m(x) for m in self.m]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_178": {
                "variable": {
                    "value": "self.m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*module_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_184": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_1, x_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_201": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(patch_top_left, patch_bot_left, patch_top_right, patch_bot_right)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "variable": {
                    "value": "module",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "inplace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sigmoid_14": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dconv(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x] + [m(x) for m in self.m], dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x_1, x_2), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat((patch_top_left, patch_bot_left, patch_top_right, patch_bot_right), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "LeakyReLU_23": {
                "variable": {
                    "value": "module",
                    "type": "variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "inplace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MaxPool2d_133": {
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "ks // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "yolox/models/yolo_fpn.py": {
        "torch": {
            "Upsample_36": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[self._make_cbl(in_filters, filters_list[0], 1), self._make_cbl(filters_list[0], filters_list[1], 3), self._make_cbl(filters_list[1], filters_list[0], 1), self._make_cbl(filters_list[0], filters_list[1], 3), self._make_cbl(filters_list[1], filters_list[0], 1)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_74": {
                "variable": {
                    "value": "x1_in",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1_in, x1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_80": {
                "variable": {
                    "value": "x2_in",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x2_in, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_55": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "yolox/models/yolo_head.py": {
        "torch": {
            "ModuleList_40": {
                "variable": {
                    "value": "self.cls_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_41": {
                "variable": {
                    "value": "self.reg_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_42": {
                "variable": {
                    "value": "self.cls_preds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_43": {
                "variable": {
                    "value": "self.reg_preds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_44": {
                "variable": {
                    "value": "self.obj_preds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_45": {
                "variable": {
                    "value": "self.stems",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_127": {
                "variable": {
                    "value": "self.l1_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_128": {
                "variable": {
                    "value": "self.bcewithlog_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_248": {
                "variable": {
                    "value": "grids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(grids, dim=1).type(dtype)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_249": {
                "variable": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(strides, dim=1).type(dtype)",
                            "Call"
                        ],
                        [
                            "[8",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_279": {
                "variable": {
                    "value": "x_shifts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x_shifts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(x_shifts, 1)",
                            "Call"
                        ],
                        [
                            "x_shifts.cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_280": {
                "variable": {
                    "value": "y_shifts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "y_shifts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(y_shifts, 1)",
                            "Call"
                        ],
                        [
                            "y_shifts.cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_281": {
                "variable": {
                    "value": "expanded_strides",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "expanded_strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(expanded_strides, 1)",
                            "Call"
                        ],
                        [
                            "expanded_strides.cpu().float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_386": {
                "variable": {
                    "value": "cls_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cls_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(cls_targets, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_387": {
                "variable": {
                    "value": "reg_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "reg_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(reg_targets, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_388": {
                "variable": {
                    "value": "obj_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "obj_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(obj_targets, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_389": {
                "variable": {
                    "value": "fg_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "fg_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(fg_masks, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_427": {
                "variable": {
                    "value": "l1_target[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "gt[:, 2] / stride + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_428": {
                "variable": {
                    "value": "l1_target[:, 3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "gt[:, 3] / stride + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "one_hot_481": {
                "variable": {
                    "value": "gt_cls_per_image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "gt_classes.to(torch.int64)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_481": {
                "variable": {
                    "value": "gt_cls_per_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_495": {
                "variable": {
                    "value": "pair_wise_cls_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_preds_.sqrt_()",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "gt_cls_per_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.one_hot(gt_classes.to(torch.int64), self.num_classes).float().unsqueeze(1).repeat(1, num_in_boxes_anchor, 1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_495": {
                "variable": {
                    "value": "pair_wise_cls_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_431": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_576": {
                "variable": {
                    "value": "bbox_deltas",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[b_l, b_t, b_r, b_b]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_601": {
                "variable": {
                    "value": "center_deltas",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[c_l, c_t, c_r, c_b]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_616": {
                "variable": {
                    "value": "matching_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pair_wise_cls_loss + 3.0 * pair_wise_ious_loss + 100000.0 * ~is_in_boxes_and_center",
                            "BinOp"
                        ]
                    ]
                }
            },
            "topk_620": {
                "variable": {
                    "value": "(topk_ious, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "ious_in_boxes_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pair_wise_ious",
                            "Name"
                        ]
                    ]
                },
                "k": {
                    "value": "n_candidate_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(10, ious_in_boxes_matrix.size(1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_621": {
                "variable": {
                    "value": "dynamic_ks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "topk_ious.sum(1).int()",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_138": {
                "variable": {
                    "value": "conv.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "b.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_143": {
                "variable": {
                    "value": "conv.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "b.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_210": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.flatten(start_dim=2) for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_210": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "meshgrid_225": {
                "variable": {
                    "value": "(yv, xv)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "[torch.arange(hsize), torch.arange(wsize)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_226": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xv, yv)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "meshgrid_242": {
                "variable": {
                    "value": "(yv, xv)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "[torch.arange(hsize), torch.arange(wsize)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_243": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xv, yv)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_283": {
                "variable": {
                    "value": "origin_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "origin_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(origin_preds, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_391": {
                "variable": {
                    "value": "l1_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "l1_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(l1_targets, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_623": {
                "variable": {
                    "value": "(_, pos_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cost[gt_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "k": {
                    "value": "dynamic_ks[gt_idx].item()",
                    "type": "Call",
                    "possible_values": []
                },
                "largest": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "min_632": {
                "variable": {
                    "value": "(cost_min, cost_argmin)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cost[:, anchor_matching_gt > 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_167": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[reg_output, obj_output, cls_output]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_190": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[reg_output, obj_output.sigmoid(), cls_output.sigmoid()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_235": {
                "input": {
                    "value": "output[..., 2:4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_252": {
                "input": {
                    "value": "outputs[..., 2:4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_486": {
                "input": {
                    "value": "pair_wise_ious + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "*args": {
                    "value": "*[Conv(in_channels=int(256 * width), out_channels=int(256 * width), ksize=3, stride=1, act=act), Conv(in_channels=int(256 * width), out_channels=int(256 * width), ksize=3, stride=1, act=act)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "*args": {
                    "value": "*[Conv(in_channels=int(256 * width), out_channels=int(256 * width), ksize=3, stride=1, act=act), Conv(in_channels=int(256 * width), out_channels=int(256 * width), ksize=3, stride=1, act=act)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_99": {
                "in_channels": {
                    "value": "int(256 * width)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n_anchors * self.num_classes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_108": {
                "in_channels": {
                    "value": "int(256 * width)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_117": {
                "in_channels": {
                    "value": "int(256 * width)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n_anchors * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_131": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_203": {
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat([x.flatten(start_dim=2) for x in outputs], dim=2).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_246": {
                "size": {
                    "value": "(*shape, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "empty_cache_362": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_174": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "grid.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_225": {
                "start": {
                    "value": "wsize",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_242": {
                "start": {
                    "value": "wsize",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "one_hot_365": {
                "tensor": {
                    "value": "gt_matched_classes.to(torch.int64)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_337": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "yolox/models/yolo_pafpn.py": {
        "torch": {
            "Upsample_32": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_99": {
                "variable": {
                    "value": "f_out0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f_out0, x1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "f_out1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f_out1, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_108": {
                "variable": {
                    "value": "p_out1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p_out1, fpn_out1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "p_out0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p_out0, fpn_out0]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "yolox/models/yolox.py": {
        "torch": {}
    },
    "yolox/utils/allreduce_norm.py": {
        "torch": {
            "cat_85": {
                "variable": {
                    "value": "flatten_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[py_dict[k].flatten() for k in py_key]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "broadcast_79": {
                "tensor": {
                    "value": "py_key_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pyobj2tensor(py_key)",
                            "Call"
                        ]
                    ]
                },
                "src": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_92": {
                "tensor": {
                    "value": "flatten_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([py_dict[k].flatten() for k in py_key])",
                            "Call"
                        ],
                        [
                            "flatten_tensor / world_size",
                            "BinOp"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "tensor_numels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[py_dict[k].numel() for k in py_key]",
                            "ListComp"
                        ]
                    ]
                }
            }
        }
    },
    "yolox/utils/boxes.py": {
        "torch": {
            "max_47": {
                "variable": {
                    "value": "(class_conf, class_pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "image_pred[:, 5:5 + num_classes]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_54": {
                "variable": {
                    "value": "detections",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(image_pred[:, :5], class_conf, class_pred.float())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_79": {
                "variable": {
                    "value": "tl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bboxes_a[:, None, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_80": {
                "variable": {
                    "value": "br",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bboxes_a[:, None, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "prod_81": {
                "variable": {
                    "value": "area_a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bboxes_a[:, 2:] - bboxes_a[:, :2]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "prod_82": {
                "variable": {
                    "value": "area_b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bboxes_b[:, 2:] - bboxes_b[:, :2]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_84": {
                "variable": {
                    "value": "tl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bboxes_a[:, None, :2] - bboxes_a[:, None, 2:] / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_88": {
                "variable": {
                    "value": "br",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bboxes_a[:, None, :2] + bboxes_a[:, None, 2:] / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "prod_93": {
                "variable": {
                    "value": "area_a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bboxes_a[:, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "prod_94": {
                "variable": {
                    "value": "area_b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bboxes_b[:, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_69": {
                "variable": {
                    "value": "output[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output[i], detections)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "prod_96": {
                "input": {
                    "value": "br - tl",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "yolox/utils/checkpoint.py": {
        "torch": {
            "save_41": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, model_name + '_ckpt.pth.tar')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "yolox/utils/dist.py": {
        "torch": {
            "device_111": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu if backend == gloo else cuda",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_136": {
                "variable": {
                    "value": "local_size",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[tensor.numel()]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_149": {
                "variable": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(max_size - local_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_152": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tensor, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_253": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_138": {
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_181": {
                "*size": {
                    "value": "(max_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_226": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ByteTensor(storage).to(device=device)",
                            "Call"
                        ],
                        [
                            "torch.cat((tensor, padding), dim=0)",
                            "Call"
                        ],
                        [
                            "_serialize_to_tensor(data, group)",
                            "Call"
                        ],
                        [
                            "_serialize_to_tensor(data, group)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "tensor_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.empty((max_size,), dtype=torch.uint8, device=tensor.device) for _ in size_list]",
                            "ListComp"
                        ],
                        [
                            "[torch.empty((max_size,), dtype=torch.uint8, device=tensor.device) for _ in size_list]",
                            "ListComp"
                        ]
                    ]
                },
                "dst": {
                    "value": "dst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "group": {
                    "value": "group",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_get_global_gloo_group()",
                            "Call"
                        ],
                        [
                            "_get_global_gloo_group()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "gather_234": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ByteTensor(storage).to(device=device)",
                            "Call"
                        ],
                        [
                            "torch.cat((tensor, padding), dim=0)",
                            "Call"
                        ],
                        [
                            "_serialize_to_tensor(data, group)",
                            "Call"
                        ],
                        [
                            "_serialize_to_tensor(data, group)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dst": {
                    "value": "dst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "group": {
                    "value": "group",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_get_global_gloo_group()",
                            "Call"
                        ],
                        [
                            "_get_global_gloo_group()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "synchronize_254": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_223": {
                "*size": {
                    "value": "(max_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "yolox/utils/ema.py": {
        "torch": {
            "no_grad_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "yolox/utils/metric.py": {
        "torch": {
            "max_memory_allocated_47": {
                "variable": {
                    "value": "mem_usage_bytes",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "yolox/utils/model_utils.py": {
        "torch": {
            "zeros_22": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 3, stride, stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "next(model.parameters()).device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "variable": {
                    "value": "fusedconv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "conv.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "conv.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "conv.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "conv.groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "diag_49": {
                "variable": {
                    "value": "w_bn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn.weight.div(torch.sqrt(bn.eps + bn.running_var))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_50": {
                "input": {
                    "value": "w_bn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.diag(bn.weight.div(torch.sqrt(bn.eps + bn.running_var)))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "w_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv.weight.clone().view(conv.out_channels, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_54": {
                "*size": {
                    "value": "conv.weight.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "conv.weight.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_49": {
                "input": {
                    "value": "bn.eps + bn.running_var",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_59": {
                "input": {
                    "value": "bn.running_var + bn.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_61": {
                "input": {
                    "value": "w_bn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.diag(bn.weight.div(torch.sqrt(bn.eps + bn.running_var)))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "b_conv.reshape(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_61": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    }
}