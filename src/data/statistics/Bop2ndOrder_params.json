{
    "bnn_optimization/data/cifar10.py": {
        "tensorflow": {
            "resize_with_crop_or_pad_11": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data['image']",
                            "Subscript"
                        ],
                        [
                            "tf.image.resize_with_crop_or_pad(image, 40, 40)",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ]
                    ]
                },
                "target_height": {
                    "value": "40",
                    "type": "Constant",
                    "possible_values": []
                },
                "target_width": {
                    "value": "40",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_crop_12": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data['image']",
                            "Subscript"
                        ],
                        [
                            "tf.image.resize_with_crop_or_pad(image, 40, 40)",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[32, 32, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_flip_left_right_13": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data['image']",
                            "Subscript"
                        ],
                        [
                            "tf.image.resize_with_crop_or_pad(image, 40, 40)",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_15": {
                "x": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data['image']",
                            "Subscript"
                        ],
                        [
                            "tf.image.resize_with_crop_or_pad(image, 40, 40)",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "bnn_optimization/data/imagenet.py": {
        "tensorflow": {
            "equal_75": {
                "variable": {
                    "value": "match",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "a",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cast_76": {
                "variable": {
                    "value": "match",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "match",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.equal(a, b)",
                            "Call"
                        ],
                        [
                            "tf.cast(match, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_82": {
                "variable": {
                    "value": "bbox",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.0, 0.0, 1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "extract_jpeg_shape_92": {
                "variable": {
                    "value": "original_shape",
                    "type": "Name",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_bytes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cond_95": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "pred": {
                    "value": "bad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_at_least_x_are_equal(original_shape, tf.shape(image), 3)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : _decode_and_center_crop(image_bytes, image_size)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.compat.v1.image.resize_bicubic([image], [image_size, image_size])[0]",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "extract_jpeg_shape_106": {
                "variable": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_bytes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cast_110": {
                "variable": {
                    "value": "padded_center_crop_size",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "image_size / (image_size + CROP_PADDING) * tf.cast(tf.minimum(image_height, image_width), tf.float32)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_120": {
                "variable": {
                    "value": "crop_window",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[offset_height, offset_width, padded_center_crop_size, padded_center_crop_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "decode_and_crop_jpeg_123": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_bytes",
                    "type": "Name",
                    "possible_values": []
                },
                "crop_window": {
                    "value": "crop_window",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack([offset_y, offset_x, target_height, target_width])",
                            "Call"
                        ],
                        [
                            "tf.stack([offset_height, offset_width, padded_center_crop_size, padded_center_crop_size])",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_159": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "distorted_bounding_box_crop(image_bytes, bbox, min_object_covered=0.1, aspect_ratio_range=(3.0 / 4, 4.0 / 3.0), area_range=(0.08, 1.0), max_attempts=10, scope=None)",
                            "Call"
                        ],
                        [
                            "tf.cond(bad, lambda : _decode_and_center_crop(image_bytes, image_size), lambda : tf.compat.v1.image.resize_bicubic([image], [image_size, image_size])[0])",
                            "Call"
                        ],
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.image.resize_bicubic([image], [image_size, image_size])[0]",
                            "Subscript"
                        ],
                        [
                            "image / tf.broadcast_to(stddev_rgb, tf.shape(image))",
                            "BinOp"
                        ],
                        [
                            "_decode_and_random_crop(image_bytes, image_size)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_decode_and_center_crop(image_bytes, image_size)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.bfloat16 if use_bfloat16 else tf.float32)",
                            "Call"
                        ],
                        [
                            "_normalize(image, mean_rgb=MEAN_RGB, stddev_rgb=STDDEV_RGB)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[image_size, image_size, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_160": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "distorted_bounding_box_crop(image_bytes, bbox, min_object_covered=0.1, aspect_ratio_range=(3.0 / 4, 4.0 / 3.0), area_range=(0.08, 1.0), max_attempts=10, scope=None)",
                            "Call"
                        ],
                        [
                            "tf.cond(bad, lambda : _decode_and_center_crop(image_bytes, image_size), lambda : tf.compat.v1.image.resize_bicubic([image], [image_size, image_size])[0])",
                            "Call"
                        ],
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.image.resize_bicubic([image], [image_size, image_size])[0]",
                            "Subscript"
                        ],
                        [
                            "image / tf.broadcast_to(stddev_rgb, tf.shape(image))",
                            "BinOp"
                        ],
                        [
                            "_decode_and_random_crop(image_bytes, image_size)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_decode_and_center_crop(image_bytes, image_size)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.bfloat16 if use_bfloat16 else tf.float32)",
                            "Call"
                        ],
                        [
                            "_normalize(image, mean_rgb=MEAN_RGB, stddev_rgb=STDDEV_RGB)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bfloat16 if use_bfloat16 else tf.float32",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "extract_jpeg_shape_52": {
                "variable": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_bytes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "sample_distorted_bounding_box_53": {
                "variable": {
                    "value": "sample_distorted_bounding_box",
                    "type": "Name",
                    "possible_values": []
                },
                "image_size": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.extract_jpeg_shape(image_bytes)",
                            "Call"
                        ],
                        [
                            "tf.image.extract_jpeg_shape(image_bytes)",
                            "Call"
                        ]
                    ]
                },
                "bounding_boxes": {
                    "value": "bbox",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant([0.0, 0.0, 1.0, 1.0], dtype=tf.float32, shape=[1, 1, 4])",
                            "Call"
                        ]
                    ]
                },
                "min_object_covered": {
                    "value": "min_object_covered",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "aspect_ratio_range": {
                    "value": "aspect_ratio_range",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(0.75",
                            "MethodArgument"
                        ]
                    ]
                },
                "area_range": {
                    "value": "area_range",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(0.05",
                            "MethodArgument"
                        ]
                    ]
                },
                "max_attempts": {
                    "value": "max_attempts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "use_image_if_no_bounding_boxes": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unstack_65": {
                "variable": {
                    "value": "(offset_y, offset_x, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "bbox_begin",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "unstack_66": {
                "variable": {
                    "value": "(target_height, target_width, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "bbox_size",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "stack_67": {
                "variable": {
                    "value": "crop_window",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[offset_y, offset_x, target_height, target_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "decode_and_crop_jpeg_68": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_bytes",
                    "type": "Name",
                    "possible_values": []
                },
                "crop_window": {
                    "value": "crop_window",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack([offset_y, offset_x, target_height, target_width])",
                            "Call"
                        ],
                        [
                            "tf.stack([offset_height, offset_width, padded_center_crop_size, padded_center_crop_size])",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "greater_equal_77": {
                "x": {
                    "value": "tf.reduce_sum(match)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "broadcast_to_133": {
                "input": {
                    "value": "mean_rgb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MEAN_RGB",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(image)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "broadcast_to_134": {
                "input": {
                    "value": "stddev_rgb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "STDDEV_RGB",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(image)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "random_flip_left_right_155": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "distorted_bounding_box_crop(image_bytes, bbox, min_object_covered=0.1, aspect_ratio_range=(3.0 / 4, 4.0 / 3.0), area_range=(0.08, 1.0), max_attempts=10, scope=None)",
                            "Call"
                        ],
                        [
                            "tf.cond(bad, lambda : _decode_and_center_crop(image_bytes, image_size), lambda : tf.compat.v1.image.resize_bicubic([image], [image_size, image_size])[0])",
                            "Call"
                        ],
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.image.resize_bicubic([image], [image_size, image_size])[0]",
                            "Subscript"
                        ],
                        [
                            "image / tf.broadcast_to(stddev_rgb, tf.shape(image))",
                            "BinOp"
                        ],
                        [
                            "_decode_and_random_crop(image_bytes, image_size)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_decode_and_center_crop(image_bytes, image_size)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.bfloat16 if use_bfloat16 else tf.float32)",
                            "Call"
                        ],
                        [
                            "_normalize(image, mean_rgb=MEAN_RGB, stddev_rgb=STDDEV_RGB)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_51": {
                "name": {
                    "value": "scope or 'distorted_bounding_box_crop'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "reduce_sum_77": {
                "input_tensor": {
                    "value": "match",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.equal(a, b)",
                            "Call"
                        ],
                        [
                            "tf.cast(match, tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_93": {
                "input": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "distorted_bounding_box_crop(image_bytes, bbox, min_object_covered=0.1, aspect_ratio_range=(3.0 / 4, 4.0 / 3.0), area_range=(0.08, 1.0), max_attempts=10, scope=None)",
                            "Call"
                        ],
                        [
                            "tf.cond(bad, lambda : _decode_and_center_crop(image_bytes, image_size), lambda : tf.compat.v1.image.resize_bicubic([image], [image_size, image_size])[0])",
                            "Call"
                        ],
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.image.resize_bicubic([image], [image_size, image_size])[0]",
                            "Subscript"
                        ],
                        [
                            "image / tf.broadcast_to(stddev_rgb, tf.shape(image))",
                            "BinOp"
                        ],
                        [
                            "_decode_and_random_crop(image_bytes, image_size)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_decode_and_center_crop(image_bytes, image_size)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.bfloat16 if use_bfloat16 else tf.float32)",
                            "Call"
                        ],
                        [
                            "_normalize(image, mean_rgb=MEAN_RGB, stddev_rgb=STDDEV_RGB)",
                            "Call"
                        ]
                    ]
                }
            },
            "resize_bicubic_124": {
                "images": {
                    "value": "[image]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[image_size, image_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_133": {
                "input": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "distorted_bounding_box_crop(image_bytes, bbox, min_object_covered=0.1, aspect_ratio_range=(3.0 / 4, 4.0 / 3.0), area_range=(0.08, 1.0), max_attempts=10, scope=None)",
                            "Call"
                        ],
                        [
                            "tf.cond(bad, lambda : _decode_and_center_crop(image_bytes, image_size), lambda : tf.compat.v1.image.resize_bicubic([image], [image_size, image_size])[0])",
                            "Call"
                        ],
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.image.resize_bicubic([image], [image_size, image_size])[0]",
                            "Subscript"
                        ],
                        [
                            "image / tf.broadcast_to(stddev_rgb, tf.shape(image))",
                            "BinOp"
                        ],
                        [
                            "_decode_and_random_crop(image_bytes, image_size)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_decode_and_center_crop(image_bytes, image_size)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.bfloat16 if use_bfloat16 else tf.float32)",
                            "Call"
                        ],
                        [
                            "_normalize(image, mean_rgb=MEAN_RGB, stddev_rgb=STDDEV_RGB)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_134": {
                "input": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "distorted_bounding_box_crop(image_bytes, bbox, min_object_covered=0.1, aspect_ratio_range=(3.0 / 4, 4.0 / 3.0), area_range=(0.08, 1.0), max_attempts=10, scope=None)",
                            "Call"
                        ],
                        [
                            "tf.cond(bad, lambda : _decode_and_center_crop(image_bytes, image_size), lambda : tf.compat.v1.image.resize_bicubic([image], [image_size, image_size])[0])",
                            "Call"
                        ],
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.image.resize_bicubic([image], [image_size, image_size])[0]",
                            "Subscript"
                        ],
                        [
                            "image / tf.broadcast_to(stddev_rgb, tf.shape(image))",
                            "BinOp"
                        ],
                        [
                            "_decode_and_random_crop(image_bytes, image_size)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_decode_and_center_crop(image_bytes, image_size)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.bfloat16 if use_bfloat16 else tf.float32)",
                            "Call"
                        ],
                        [
                            "_normalize(image, mean_rgb=MEAN_RGB, stddev_rgb=STDDEV_RGB)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_113": {
                "x": {
                    "value": "tf.minimum(image_height, image_width)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "resize_bicubic_98": {
                "images": {
                    "value": "[image]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[image_size, image_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "minimum_113": {
                "x": {
                    "value": "image_height",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "image_width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "bnn_optimization/data/problem_definitions.py": {
        "tensorflow": {
            "cast_14": {
                "x": {
                    "value": "data['image']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_17": {
                "indices": {
                    "value": "data['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.features['label'].num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "bnn_optimization/models/binary_alexnet.py": {
        "tensorflow": {
            "Input_42": {
                "variable": {
                    "value": "img_input",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Model_60": {
                "inputs": {
                    "value": "img_input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.layers.Input(shape=input_shape)",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv_block(img_input, features=64, kernel_size=11, strides=4, pool=True, first_layer=True)",
                            "Call"
                        ],
                        [
                            "conv_block(out, features=192, kernel_size=5, pool=True)",
                            "Call"
                        ],
                        [
                            "conv_block(out, features=384, kernel_size=3)",
                            "Call"
                        ],
                        [
                            "conv_block(out, features=384, kernel_size=3)",
                            "Call"
                        ],
                        [
                            "conv_block(out, features=256, kernel_size=3, pool=True)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Flatten()(out)",
                            "Call"
                        ],
                        [
                            "dense_block(out, units=4096)",
                            "Call"
                        ],
                        [
                            "dense_block(out, units=4096)",
                            "Call"
                        ],
                        [
                            "dense_block(out, num_classes, final_layer=True)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Activation('softmax')(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "PolynomialDecay_79": {
                "variable": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_learning_rate": {
                    "value": "self.lr_start",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "decay_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.epochs * 1281167 // self.batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "end_learning_rate": {
                    "value": "self.lr_end",
                    "type": "Attribute",
                    "possible_values": []
                },
                "power": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "PolynomialDecay_82": {
                "variable": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_learning_rate": {
                    "value": "self.gamma_start",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "decay_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.epochs * 1281167 // self.batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "end_learning_rate": {
                    "value": "self.gamma_end",
                    "type": "Attribute",
                    "possible_values": []
                },
                "power": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Flatten_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_58": {
                "activation": {
                    "value": "softmax",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNormalization_31": {
                "scale": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNormalization_38": {
                "scale": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2D_30": {
                "pool_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_99": {
                "learning_rate": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.optimizers.schedules.PolynomialDecay(self.lr_start, decay_step, end_learning_rate=self.lr_end, power=1.0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "bnn_optimization/models/binarynet.py": {
        "tensorflow": {
            "Adam_78": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.005",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_15": {
                "layers": {
                    "value": "[lq.layers.QuantConv2D(hparams.filters, hparams.kernel_size, kernel_quantizer=hparams.kernel_quantizer, kernel_constraint=hparams.kernel_constraint, use_bias=False, input_shape=input_shape), tf.keras.layers.LayerNormalization(), lq.layers.QuantConv2D(hparams.filters, hparams.kernel_size, padding='same', **kwhparams), tf.keras.layers.MaxPool2D(pool_size=(2, 2), strides=(2, 2)), tf.keras.layers.LayerNormalization(), lq.layers.QuantConv2D(2 * hparams.filters, hparams.kernel_size, padding='same', **kwhparams), tf.keras.layers.LayerNormalization(), lq.layers.QuantConv2D(2 * hparams.filters, hparams.kernel_size, padding='same', **kwhparams), tf.keras.layers.MaxPool2D(pool_size=(2, 2), strides=(2, 2)), tf.keras.layers.LayerNormalization(), lq.layers.QuantConv2D(4 * hparams.filters, hparams.kernel_size, padding='same', **kwhparams), tf.keras.layers.LayerNormalization(), lq.layers.QuantConv2D(4 * hparams.filters, hparams.kernel_size, padding='same', **kwhparams), tf.keras.layers.MaxPool2D(pool_size=(2, 2), strides=(2, 2)), tf.keras.layers.LayerNormalization(), tf.keras.layers.Flatten(), lq.layers.QuantDense(hparams.dense_units, **kwhparams), tf.keras.layers.LayerNormalization(), lq.layers.QuantDense(hparams.dense_units, **kwhparams), tf.keras.layers.LayerNormalization(), lq.layers.QuantDense(num_classes, **kwhparams), tf.keras.layers.LayerNormalization(), tf.keras.layers.Activation('softmax')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LayerNormalization_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2D_31": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "LayerNormalization_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNormalization_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2D_42": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "LayerNormalization_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNormalization_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2D_53": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "LayerNormalization_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Flatten_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNormalization_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNormalization_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNormalization_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_66": {
                "activation": {
                    "value": "softmax",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_112": {
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_148": {
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_189": {
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ExponentialDecay_183": {
                "initial_learning_rate": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "self.decay_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "self.gamma_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "bnn_optimization/models/birealnet.py": {
        "tensorflow": {
            "Input_42": {
                "variable": {
                    "value": "img_input",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Model_74": {
                "inputs": {
                    "value": "img_input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.layers.Input(shape=input_shape)",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.layers.Conv2D(64, 7, strides=2, kernel_initializer='glorot_normal', padding='same', use_bias=False)(img_input)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.LayerNormalization()(out)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.MaxPool2D(3, strides=2, padding='same')(out)",
                            "Call"
                        ],
                        [
                            "residual_block(out, filters=64)",
                            "Call"
                        ],
                        [
                            "residual_block(out)",
                            "Call"
                        ],
                        [
                            "residual_block(out, double_filters=True)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.GlobalAvgPool2D()(out)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Dense(num_classes, activation='softmax')(out)",
                            "Call"
                        ],
                        [
                            "residual_block(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "PolynomialDecay_94": {
                "variable": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_learning_rate": {
                    "value": "self.lr_start",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "decay_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.epochs * 1281167 // self.batch_size",
                            "BinOp"
                        ],
                        [
                            "self.epochs * 1281167 // self.batch_size",
                            "BinOp"
                        ],
                        [
                            "self.epochs * 1281167 // self.batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "end_learning_rate": {
                    "value": "self.lr_end",
                    "type": "Attribute",
                    "possible_values": []
                },
                "power": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "PolynomialDecay_97": {
                "variable": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_learning_rate": {
                    "value": "self.gamma_start",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "decay_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.epochs * 1281167 // self.batch_size",
                            "BinOp"
                        ],
                        [
                            "self.epochs * 1281167 // self.batch_size",
                            "BinOp"
                        ],
                        [
                            "self.epochs * 1281167 // self.batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "end_learning_rate": {
                    "value": "self.gamma_end",
                    "type": "Attribute",
                    "possible_values": []
                },
                "power": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "PolynomialDecay_139": {
                "variable": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_learning_rate": {
                    "value": "self.lr_start",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "decay_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.epochs * 1281167 // self.batch_size",
                            "BinOp"
                        ],
                        [
                            "self.epochs * 1281167 // self.batch_size",
                            "BinOp"
                        ],
                        [
                            "self.epochs * 1281167 // self.batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "end_learning_rate": {
                    "value": "self.lr_end",
                    "type": "Attribute",
                    "possible_values": []
                },
                "power": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "PolynomialDecay_142": {
                "variable": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_learning_rate": {
                    "value": "self.gamma_start",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "decay_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.epochs * 1281167 // self.batch_size",
                            "BinOp"
                        ],
                        [
                            "self.epochs * 1281167 // self.batch_size",
                            "BinOp"
                        ],
                        [
                            "self.epochs * 1281167 // self.batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "end_learning_rate": {
                    "value": "self.gamma_end",
                    "type": "Attribute",
                    "possible_values": []
                },
                "power": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "PolynomialDecay_145": {
                "variable": {
                    "value": "sigma",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_learning_rate": {
                    "value": "self.sigma_start",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "decay_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.epochs * 1281167 // self.batch_size",
                            "BinOp"
                        ],
                        [
                            "self.epochs * 1281167 // self.batch_size",
                            "BinOp"
                        ],
                        [
                            "self.epochs * 1281167 // self.batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "end_learning_rate": {
                    "value": "self.sigma_end",
                    "type": "Attribute",
                    "possible_values": []
                },
                "power": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "PolynomialDecay_184": {
                "variable": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_learning_rate": {
                    "value": "self.lr_start",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "decay_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.epochs * 1281167 // self.batch_size",
                            "BinOp"
                        ],
                        [
                            "self.epochs * 1281167 // self.batch_size",
                            "BinOp"
                        ],
                        [
                            "self.epochs * 1281167 // self.batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "end_learning_rate": {
                    "value": "self.lr_end",
                    "type": "Attribute",
                    "possible_values": []
                },
                "power": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_40": {
                "x": {
                    "value": "[x, shortcut]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2D_45": {
                "filters": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "glorot_normal",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNormalization_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2D_55": {
                "pool_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_72": {
                "units": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNormalization_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_21": {
                "filters": {
                    "value": "out_filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "filters or in_filters if not double_filters else 2 * in_filters",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "glorot_normal",
                    "type": "Constant",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNormalization_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_115": {
                "learning_rate": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.optimizers.schedules.PolynomialDecay(self.lr_start, decay_step, end_learning_rate=self.lr_end, power=1.0)",
                            "Call"
                        ],
                        [
                            "tf.keras.optimizers.schedules.PolynomialDecay(self.lr_start, decay_step, end_learning_rate=self.lr_end, power=1.0)",
                            "Call"
                        ],
                        [
                            "tf.keras.optimizers.schedules.PolynomialDecay(self.lr_start, decay_step, end_learning_rate=self.lr_end, power=1.0)",
                            "Call"
                        ],
                        [
                            "0.01",
                            "Constant"
                        ]
                    ]
                }
            },
            "Adam_164": {
                "learning_rate": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.optimizers.schedules.PolynomialDecay(self.lr_start, decay_step, end_learning_rate=self.lr_end, power=1.0)",
                            "Call"
                        ],
                        [
                            "tf.keras.optimizers.schedules.PolynomialDecay(self.lr_start, decay_step, end_learning_rate=self.lr_end, power=1.0)",
                            "Call"
                        ],
                        [
                            "tf.keras.optimizers.schedules.PolynomialDecay(self.lr_start, decay_step, end_learning_rate=self.lr_end, power=1.0)",
                            "Call"
                        ],
                        [
                            "0.01",
                            "Constant"
                        ]
                    ]
                }
            },
            "Adam_204": {
                "learning_rate": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.optimizers.schedules.PolynomialDecay(self.lr_start, decay_step, end_learning_rate=self.lr_end, power=1.0)",
                            "Call"
                        ],
                        [
                            "tf.keras.optimizers.schedules.PolynomialDecay(self.lr_start, decay_step, end_learning_rate=self.lr_end, power=1.0)",
                            "Call"
                        ],
                        [
                            "tf.keras.optimizers.schedules.PolynomialDecay(self.lr_start, decay_step, end_learning_rate=self.lr_end, power=1.0)",
                            "Call"
                        ],
                        [
                            "0.01",
                            "Constant"
                        ]
                    ]
                }
            },
            "Adam_241": {
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "bnn_optimization/models/xnor.py": {
        "tensorflow": {
            "Input_16": {
                "variable": {
                    "value": "img_input",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Model_65": {
                "*args": {
                    "value": "img_input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.layers.Input(shape=input_shape)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.layers.Conv2D(96, (11, 11), strides=(4, 4), padding='same', use_bias=False, input_shape=input_shape, kernel_regularizer=hparams.kernel_regularizer)(img_input)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.LayerNormalization()(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Activation('relu')(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.MaxPool2D(pool_size=(3, 3), strides=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.LayerNormalization()(x)",
                            "Call"
                        ],
                        [
                            "lq.layers.QuantConv2D(256, (5, 5), padding='same', **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.MaxPool2D(pool_size=(3, 3), strides=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.LayerNormalization()(x)",
                            "Call"
                        ],
                        [
                            "lq.layers.QuantConv2D(384, (3, 3), padding='same', **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.LayerNormalization()(x)",
                            "Call"
                        ],
                        [
                            "lq.layers.QuantConv2D(384, (3, 3), padding='same', **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.LayerNormalization()(x)",
                            "Call"
                        ],
                        [
                            "lq.layers.QuantConv2D(256, (3, 3), padding='same', **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.MaxPool2D(pool_size=(3, 3), strides=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.LayerNormalization()(x)",
                            "Call"
                        ],
                        [
                            "lq.layers.QuantConv2D(4096, (6, 6), padding='valid', **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.LayerNormalization()(x)",
                            "Call"
                        ],
                        [
                            "lq.layers.QuantConv2D(4096, (1, 1), strides=(1, 1), padding='valid', **kwargs)(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.LayerNormalization()(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Activation('relu')(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Flatten()(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Dense(num_classes, use_bias=False, kernel_regularizer=hparams.kernel_regularizer)(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Activation('softmax')(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "PolynomialDecay_91": {
                "variable": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_learning_rate": {
                    "value": "self.lr_start",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "decay_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.epochs * 1281167 // self.batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "end_learning_rate": {
                    "value": "self.lr_end",
                    "type": "Attribute",
                    "possible_values": []
                },
                "power": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "PolynomialDecay_94": {
                "variable": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_learning_rate": {
                    "value": "self.gamma_start",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "decay_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.epochs * 1281167 // self.batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "end_learning_rate": {
                    "value": "self.gamma_end",
                    "type": "Attribute",
                    "possible_values": []
                },
                "power": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_18": {
                "filters": {
                    "value": "96",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(11, 11)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "input_shape",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "hparams.kernel_regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNormalization_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_30": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2D_31": {
                "pool_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "LayerNormalization_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2D_35": {
                "pool_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "LayerNormalization_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNormalization_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNormalization_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2D_45": {
                "pool_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "LayerNormalization_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNormalization_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNormalization_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_58": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Flatten_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_60": {
                "units": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "hparams.kernel_regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Activation_63": {
                "activation": {
                    "value": "softmax",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_112": {
                "learning_rate": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.optimizers.schedules.PolynomialDecay(self.lr_start, decay_step, end_learning_rate=self.lr_end, power=1.0)",
                            "Call"
                        ],
                        [
                            "0.01",
                            "Constant"
                        ]
                    ]
                }
            },
            "Adam_146": {
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "bnn_optimization/optimizers.py": {
        "tensorflow": {
            "cast_63": {
                "variable": {
                    "value": "local_step",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "self.iterations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "var_dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "var.dtype.base_dtype",
                            "Attribute"
                        ],
                        [
                            "var.dtype.base_dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cast_64": {
                "variable": {
                    "value": "hyper",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "hyper(local_step)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "var_dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "var.dtype.base_dtype",
                            "Attribute"
                        ],
                        [
                            "var.dtype.base_dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cast_142": {
                "variable": {
                    "value": "local_step",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "self.iterations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "var_dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "var.dtype.base_dtype",
                            "Attribute"
                        ],
                        [
                            "var.dtype.base_dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cast_143": {
                "variable": {
                    "value": "hyper",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "hyper(local_step)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "var_dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "var.dtype.base_dtype",
                            "Attribute"
                        ],
                        [
                            "var.dtype.base_dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "deserialize_88": {
                "variable": {
                    "value": "config[hyper]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "config[hyper]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "custom_objects": {
                    "value": "custom_objects",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "deserialize_171": {
                "variable": {
                    "value": "config[hyper]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "config[hyper]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "custom_objects": {
                    "value": "custom_objects",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sign_74": {
                "x": {
                    "value": "var * m_t - threshold",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_155": {
                "x": {
                    "value": "grad",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "sign_156": {
                "x": {
                    "value": "var * (m_t / (tf.math.sqrt(v_t) + 1e-10)) - threshold",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_156": {
                "x": {
                    "value": "v_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "v.assign_add(sigma * (tf.math.square(grad) - v))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "bnn_optimization/train.py": {
        "tensorflow": {
            "device_35": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LearningRateScheduler_21": {
                "schedule": {
                    "value": "hparams.learning_rate_schedule",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorBoard_26": {
                "log_dir": {
                    "value": "output_dir",
                    "type": "Name",
                    "possible_values": []
                },
                "write_graph": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "histogram_freq": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "update_freq": {
                    "value": "250",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "bnn_optimization/utils.py": {
        "tensorflow": {
            "MirroredStrategy_27": {
                "variable": {
                    "value": "strategy",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}