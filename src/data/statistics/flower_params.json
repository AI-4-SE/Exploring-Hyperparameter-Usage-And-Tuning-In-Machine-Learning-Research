{
    "baselines/flwr_baselines/publications/fedbn/convergence_rate/utils/data_preprocess.py": {
        "sklearn": {
            "StratifiedShuffleSplit_22": {
                "variable": {
                    "value": "sss",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "load_46": {
                "variable": {
                    "value": "train",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "mnist_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'./data/MNIST/training.pt'",
                            "Constant"
                        ]
                    ]
                }
            },
            "load_47": {
                "variable": {
                    "value": "test",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "mnist_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'./data/MNIST/test.pt'",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "examples/quickstart_jax/jax_training.py": {
        "sklearn": {
            "make_regression_24": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_25": {
                "variable": {
                    "value": "(X, X_test, y, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "examples/sklearn-logreg-mnist/client.py": {
        "sklearn": {
            "LogisticRegression_19": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "penalty": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "warm_start": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_loss_44": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "model.predict_proba(X_test)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "examples/sklearn-logreg-mnist/server.py": {
        "sklearn": {
            "LogisticRegression_32": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_loss_23": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "model.predict_proba(X_test)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "examples/sklearn-logreg-mnist/utils.py": {
        "sklearn": {}
    },
    "examples/advanced_tensorflow/client.py": {
        "tensorflow": {
            "EfficientNetB0_80": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(32, 32, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weights": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "classes": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_data_101": {
                "variable": {
                    "value": "((x_train, y_train), (x_test, y_test))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/advanced_tensorflow/server.py": {
        "tensorflow": {
            "EfficientNetB0_12": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(32, 32, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weights": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "classes": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_data_47": {
                "variable": {
                    "value": "((x_train, y_train), _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/android/server.py": {
        "tensorflow": {}
    },
    "examples/android/tflite_convertor/convert_to_tflite.py": {
        "tensorflow": {
            "Sequential_17": {
                "variable": {
                    "value": "base",
                    "type": "Variable",
                    "possible_values": []
                },
                "layers": {
                    "value": "[tf.keras.Input(shape=(32, 32, 3)), tf.keras.layers.Lambda(lambda x: x)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_28": {
                "variable": {
                    "value": "head",
                    "type": "Variable",
                    "possible_values": []
                },
                "layers": {
                    "value": "[tf.keras.Input(shape=(32, 32, 3)), tf.keras.layers.Conv2D(6, 5, activation='relu'), tf.keras.layers.MaxPooling2D(pool_size=(2, 2)), tf.keras.layers.Conv2D(16, 5, activation='relu'), tf.keras.layers.Flatten(), tf.keras.layers.Dense(units=120, activation='relu'), tf.keras.layers.Dense(units=84, activation='relu'), tf.keras.layers.Dense(units=10, activation='softmax')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Input_18": {
                "shape": {
                    "value": "(32, 32, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Lambda_18": {
                "function": {
                    "value": "lambda x: x",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Input_30": {
                "shape": {
                    "value": "(32, 32, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_31": {
                "filters": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPooling2D_32": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_33": {
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Flatten_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_35": {
                "units": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_36": {
                "units": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_37": {
                "units": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "examples/android/tflite_convertor/tfltransfer/bases/mobilenetv2_base.py": {
        "tensorflow": {
            "MobileNetV2_56": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(self._image_size, self._image_size, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "alpha": {
                    "value": "self._alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "include_top": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "weights": {
                    "value": "imagenet",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "examples/android/tflite_convertor/tfltransfer/bases/quantizable_base.py": {
        "tensorflow": {}
    },
    "examples/android/tflite_convertor/tfltransfer/bases/saved_model_base.py": {
        "tensorflow": {
            "load_59": {
                "variable": {
                    "value": "loaded_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "export_dir": {
                    "value": "model_dir",
                    "type": "Variable",
                    "possible_values": []
                },
                "tags": {
                    "value": "[tag]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "examples/android/tflite_convertor/tfltransfer/heads/keras_model_head.py": {
        "tensorflow": {
            "GraphDef_224": {
                "variable": {
                    "value": "const_graph_def",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "export_saved_model_43": {
                "model": {
                    "value": "keras_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "saved_model_path": {
                    "value": "saved_model_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tempfile.mkdtemp('tflite-transfer-keras-model')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_47": {
                "variable": {
                    "value": "metagraph",
                    "type": "Variable",
                    "possible_values": []
                },
                "export_dir": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "tags": {
                    "value": "[tf.saved_model.SERVING]",
                    "type": "List",
                    "possible_values": []
                },
                "options": {
                    "value": "saved_model_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tempfile.mkdtemp('tflite-transfer-keras-model')",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_57": {
                "variable": {
                    "value": "variables",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_66": {
                "variable": {
                    "value": "eval_metagraph",
                    "type": "Variable",
                    "possible_values": []
                },
                "export_dir": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "tags": {
                    "value": "['eval']",
                    "type": "List",
                    "possible_values": []
                },
                "options": {
                    "value": "saved_model_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tempfile.mkdtemp('tflite-transfer-keras-model')",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_160": {
                "variable": {
                    "value": "gradients",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.import_graph_def(self._frozen_graph_def, name=scope, input_map=input_map, return_elements=[loss_name])[0]",
                            "Subscript"
                        ]
                    ]
                },
                "xs": {
                    "value": "train_variables",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[tfv1.get_default_graph().get_tensor_by_name(scope + '/' + name) for name in self._trainable_variable_names]",
                            "ListComp"
                        ]
                    ]
                },
                "stop_gradients": {
                    "value": "train_variables",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[tfv1.get_default_graph().get_tensor_by_name(scope + '/' + name) for name in self._trainable_variable_names]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "function_176": {
                "input_signature": {
                    "value": "[tf.TensorSpec(shape=(), dtype=tf.float32)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Session_46": {
                "graph": {
                    "value": "tf.Graph()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_65": {
                "graph": {
                    "value": "tf.Graph()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "import_graph_def_96": {
                "graph_def": {
                    "value": "self._frozen_graph_def",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'head'",
                            "MethodArgument"
                        ],
                        [
                            "'head'",
                            "MethodArgument"
                        ]
                    ]
                },
                "input_map": {
                    "value": "{input_name: bottleneck}",
                    "type": "Dict",
                    "possible_values": []
                },
                "return_elements": {
                    "value": "[output_name]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_default_graph_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_graph_def_145": {
                "graph_def": {
                    "value": "self._frozen_graph_def",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'head'",
                            "MethodArgument"
                        ],
                        [
                            "'head'",
                            "MethodArgument"
                        ]
                    ]
                },
                "input_map": {
                    "value": "input_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{bottleneck_name: bottleneck, labels_name: labels}",
                            "Dict"
                        ]
                    ]
                },
                "return_elements": {
                    "value": "[loss_name]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_default_graph_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_159": {
                "name": {
                    "value": "scope + '/backprop'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_179": {
                "value": {
                    "value": "param",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Graph_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorSpec_176": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "examples/android/tflite_convertor/tfltransfer/heads/logits_saved_model_head.py": {
        "tensorflow": {
            "softmax_80": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GraphDef_179": {
                "variable": {
                    "value": "const_graph_def",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_48": {
                "variable": {
                    "value": "metagraph",
                    "type": "Variable",
                    "possible_values": []
                },
                "export_dir": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "tags": {
                    "value": "[tag]",
                    "type": "List",
                    "possible_values": []
                },
                "options": {
                    "value": "model_dir",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "global_variables_56": {
                "variable": {
                    "value": "variables",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_100": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "onehot_labels": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "tfv1.losses.Reduction.SUM_OVER_BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_104": {
                "variable": {
                    "value": "gradients",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tfv1.losses.softmax_cross_entropy(labels, logits, reduction=tfv1.losses.Reduction.SUM_OVER_BATCH_SIZE)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "variables",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tfv1.global_variables()",
                            "Call"
                        ]
                    ]
                },
                "stop_gradients": {
                    "value": "variables",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tfv1.global_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "function_134": {
                "input_signature": {
                    "value": "[tf.TensorSpec(shape=(), dtype=tf.float32)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Session_47": {
                "graph": {
                    "value": "tf.Graph()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_99": {
                "name": {
                    "value": "scope + '/loss'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_103": {
                "name": {
                    "value": "scope + '/backprop'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "import_graph_def_111": {
                "graph_def": {
                    "value": "self._frozen_graph_def()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'head'",
                            "MethodArgument"
                        ],
                        [
                            "'head'",
                            "MethodArgument"
                        ]
                    ]
                },
                "input_map": {
                    "value": "{input_name: bottleneck}",
                    "type": "Dict",
                    "possible_values": []
                },
                "return_elements": {
                    "value": "[output_name]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_default_graph_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_137": {
                "value": {
                    "value": "param",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Graph_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorSpec_134": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "examples/android/tflite_convertor/tfltransfer/heads/softmax_classifier_head.py": {
        "tensorflow": {
            "softmax_67": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(flat_bottleneck, ws) + bs",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_87": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(flat_bottleneck, ws) + bs",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_89": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cross_entropy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-tf.reduce_sum(labels * tf.math.log(predictions), 1)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "transpose_95": {
                "variable": {
                    "value": "flat_bottleneck_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "flat_bottleneck",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(bottleneck, (-1, self._num_features))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_97": {
                "variable": {
                    "value": "d_bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "d_bs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "predictions - labels",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(d_bs, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_105": {
                "variable": {
                    "value": "flat_bottleneck",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "bottleneck",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, self._num_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_106": {
                "variable": {
                    "value": "ws",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self._num_features, self._num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "placeholder_ws",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_111": {
                "variable": {
                    "value": "bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self._num_classes,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "placeholder_bs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "fill_130": {
                "variable": {
                    "value": "ws",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "(self._num_features, self._num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "fill_131": {
                "variable": {
                    "value": "bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "(self._num_classes,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "function_128": {
                "input_signature": {
                    "value": "[tf.TensorSpec(shape=(), dtype=tf.float32)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_86": {
                "name": {
                    "value": "scope + '/loss'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_92": {
                "name": {
                    "value": "scope + '/backprop'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_104": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'head'",
                            "MethodArgument"
                        ],
                        [
                            "'head'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_88": {
                "input_tensor": {
                    "value": "labels * tf.math.log(predictions)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_96": {
                "a": {
                    "value": "flat_bottleneck_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(flat_bottleneck)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "d_bs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "predictions - labels",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(d_bs, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_114": {
                "a": {
                    "value": "flat_bottleneck",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(bottleneck, (-1, self._num_features))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "ws",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tfv1.placeholder(tf.float32, shape=(self._num_features, self._num_classes), name='placeholder_ws')",
                            "Call"
                        ],
                        [
                            "tf.fill((self._num_features, self._num_classes), zero)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_91": {
                "input_tensor": {
                    "value": "ws ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "TensorSpec_128": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_88": {
                "x": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/android/tflite_convertor/tfltransfer/model_correctness_test.py": {
        "tensorflow": {
            "ImageDataGenerator_53": {
                "variable": {
                    "value": "datagen",
                    "type": "Variable",
                    "possible_values": []
                },
                "rescale": {
                    "value": "1.0 / 255",
                    "type": "BinOp",
                    "possible_values": []
                },
                "validation_split": {
                    "value": "VALIDATION_SPLIT",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Constant"
                        ]
                    ]
                }
            },
            "Interpreter_87": {
                "variable": {
                    "value": "interpreter",
                    "type": "Variable",
                    "possible_values": []
                },
                "model_content": {
                    "value": "self.initialize_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Interpreter_97": {
                "variable": {
                    "value": "interpreter",
                    "type": "Variable",
                    "possible_values": []
                },
                "model_content": {
                    "value": "self.optimizer_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Interpreter_148": {
                "variable": {
                    "value": "interpreter",
                    "type": "Variable",
                    "possible_values": []
                },
                "model_content": {
                    "value": "self.bottleneck_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Interpreter_196": {
                "variable": {
                    "value": "interpreter",
                    "type": "Variable",
                    "possible_values": []
                },
                "model_content": {
                    "value": "self.train_head_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Interpreter_232": {
                "variable": {
                    "value": "interpreter",
                    "type": "Variable",
                    "possible_values": []
                },
                "model_content": {
                    "value": "self.optimizer_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Interpreter_264": {
                "variable": {
                    "value": "interpreter",
                    "type": "Variable",
                    "possible_values": []
                },
                "model_content": {
                    "value": "self.inference_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_file_357": {
                "variable": {
                    "value": "zip_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "origin": {
                    "value": "DATASET_URL",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'https://storage.googleapis.com/download.tensorflow.org/example_images/flower_photos.tgz'",
                            "Constant"
                        ]
                    ]
                },
                "fname": {
                    "value": "flower_photos.tgz",
                    "type": "str",
                    "possible_values": []
                },
                "extract": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MobileNetV2_363": {
                "variable": {
                    "value": "mobilenet_keras",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(IMAGE_SIZE, IMAGE_SIZE, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "include_top": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "weights": {
                    "value": "imagenet",
                    "type": "str",
                    "possible_values": []
                }
            },
            "export_saved_model_368": {
                "model": {
                    "value": "mobilenet_keras",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.applications.MobileNetV2(input_shape=(IMAGE_SIZE, IMAGE_SIZE, 3), include_top=False, weights='imagenet')",
                            "Call"
                        ]
                    ]
                },
                "saved_model_path": {
                    "value": "mobilenet_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tempfile.mkdtemp('tflite-transfer-test')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/android/tflite_convertor/tfltransfer/optimizers/adam.py": {
        "tensorflow": {
            "placeholder_58": {
                "variable": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Session_49": {
                "graph": {
                    "value": "tf.Graph()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_51": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "placeholder_54": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "placeholder_56": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "placeholder_57": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Graph_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_69": {
                "x": {
                    "value": "vhat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "v / (1 - self._beta2 ** (step + 1))",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "examples/android/tflite_convertor/tfltransfer/optimizers/sgd.py": {
        "tensorflow": {
            "Session_42": {
                "graph": {
                    "value": "tf.Graph()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_44": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "placeholder_47": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Graph_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/android/tflite_convertor/tfltransfer/tflite_transfer_converter.py": {
        "tensorflow": {
            "Interpreter_93": {
                "variable": {
                    "value": "interpreter",
                    "type": "Variable",
                    "possible_values": []
                },
                "model_content": {
                    "value": "inference_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "placeholder_130": {
                "variable": {
                    "value": "bottleneck",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "bottleneck_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(self.train_batch_size,) + self.head_model.input_shape()",
                            "BinOp"
                        ],
                        [
                            "(1,) + self.head_model.input_shape()",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "placeholder_bottleneck",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_135": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.train_batch_size, self.num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "placeholder_labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_163": {
                "variable": {
                    "value": "bottleneck",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "bottleneck_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(self.train_batch_size,) + self.head_model.input_shape()",
                            "BinOp"
                        ],
                        [
                            "(1,) + self.head_model.input_shape()",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "placeholder_bottleneck",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Graph_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/android/tflite_convertor/tfltransfer/tflite_transfer_converter_test.py": {
        "tensorflow": {
            "Sequential_46": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "layers": {
                    "value": "[layers.Dense(units=DEFAULT_INPUT_SIZE, input_shape=(DEFAULT_INPUT_SIZE,))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "variable": {
                    "value": "head_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "layers": {
                    "value": "[layers.Dense(units=32, input_shape=(input_size,), activation='relu', kernel_regularizer=l2(0.01), bias_regularizer=l2(0.01)), layers.Dense(units=output_size, kernel_regularizer=l2(0.01), bias_regularizer=l2(0.01))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Interpreter_196": {
                "variable": {
                    "value": "interpreter",
                    "type": "Variable",
                    "possible_values": []
                },
                "model_content": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.Sequential([layers.Dense(units=DEFAULT_INPUT_SIZE, input_shape=(DEFAULT_INPUT_SIZE,))])",
                            "Call"
                        ]
                    ]
                }
            },
            "export_saved_model_50": {
                "model": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.Sequential([layers.Dense(units=DEFAULT_INPUT_SIZE, input_shape=(DEFAULT_INPUT_SIZE,))])",
                            "Call"
                        ]
                    ]
                },
                "saved_model_path": {
                    "value": "cls._default_base_model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_47": {
                "units": {
                    "value": "DEFAULT_INPUT_SIZE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "input_shape": {
                    "value": "(DEFAULT_INPUT_SIZE,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_64": {
                "units": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(input_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "l2(0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_regularizer": {
                    "value": "l2(0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_71": {
                "units": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "l2(0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_regularizer": {
                    "value": "l2(0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "examples/android/tflite_convertor/tfltransfer/utils.py": {
        "tensorflow": {
            "GraphDef_41": {
                "variable": {
                    "value": "output_graph_def",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "NodeDef_43": {
                "variable": {
                    "value": "output_node",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/dp-sgd-mnist/client.py": {
        "tensorflow": {
            "CategoricalCrossentropy_44": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "from_logits": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "reduction": {
                    "value": "tf.losses.Reduction.NONE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_48": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CategoricalCrossentropy_49": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "from_logits": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "examples/dp-sgd-mnist/common.py": {
        "tensorflow": {
            "to_categorical_82": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(y, dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "tf.keras.utils.to_categorical(y, num_classes=10)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_data_100": {
                "variable": {
                    "value": "(xy_train, xy_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "layers": {
                    "value": "[tf.keras.layers.Conv2D(16, 8, strides=2, padding='same', activation='relu', input_shape=(28, 28, 1)), tf.keras.layers.MaxPool2D(2, 1), tf.keras.layers.Conv2D(32, 4, strides=2, padding='valid', activation='relu'), tf.keras.layers.MaxPool2D(2, 1), tf.keras.layers.Flatten(), tf.keras.layers.Dense(32, activation='relu'), tf.keras.layers.Dense(10)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2D_42": {
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(28, 28, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPool2D_50": {
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2D_51": {
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPool2D_54": {
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Flatten_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_56": {
                "units": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_57": {
                "units": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/dp-sgd-mnist/server.py": {
        "tensorflow": {
            "load_data_18": {
                "variable": {
                    "value": "(_, test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CategoricalCrossentropy_35": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "from_logits": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "examples/quickstart_mlcube/mlcube_utils.py": {
        "tensorflow": {
            "load_model_65": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "filepath",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "workspace_path(workspace, 'model_in/mnist_model', False)",
                            "Call"
                        ],
                        [
                            "workspace_path(workspace, 'model/mnist_model', False)",
                            "Call"
                        ],
                        [
                            "workspace_path(workspace, 'metrics/train_metrics.json')",
                            "Call"
                        ],
                        [
                            "workspace_path(workspace, 'metrics/evaluate_metrics.json')",
                            "Call"
                        ],
                        [
                            "workspace_path(workspace, 'parameters/default.parameters.yaml')",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_111": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "layers": {
                    "value": "[tf.keras.layers.Flatten(input_shape=(28, 28)), tf.keras.layers.Dense(128, activation='relu'), tf.keras.layers.Dropout(0.2), tf.keras.layers.Dense(10, activation='softmax')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Flatten_113": {
                "input_shape": {
                    "value": "(28, 28)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_114": {
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_115": {
                "rate": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dense_116": {
                "units": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "examples/quickstart_tensorflow/client.py": {
        "tensorflow": {
            "MobileNetV2_11": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(32, 32, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "classes": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "weights": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "load_data_13": {
                "variable": {
                    "value": "((x_train, y_train), (x_test, y_test))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/simulation_tensorflow/sim.py": {
        "tensorflow": {
            "Sequential_38": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "layers": {
                    "value": "[tf.keras.layers.Flatten(input_shape=(28, 28)), tf.keras.layers.Dense(128, activation='relu'), tf.keras.layers.Dropout(0.2), tf.keras.layers.Dense(10, activation='softmax')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_data_49": {
                "variable": {
                    "value": "((x_train, y_train), _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Flatten_40": {
                "input_shape": {
                    "value": "(28, 28)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_41": {
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_42": {
                "rate": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dense_43": {
                "units": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/py/flwr/server/utils/tensorboard.py": {
        "tensorflow": {
            "create_file_writer_97": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(logdir_run, 'server')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "create_file_writer_121": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(logdir_run, 'clients', client.cid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_105": {
                "name": {
                    "value": "server/loss_aggregated",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss_aggregated",
                    "type": "Variable",
                    "possible_values": []
                },
                "step": {
                    "value": "server_round",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_127": {
                "name": {
                    "value": "clients/loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_128": {
                "name": {
                    "value": "clients/num_examples",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "num_examples",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_132": {
                "name": {
                    "value": "f'clients/{key}'",
                    "type": "JoinedStr",
                    "possible_values": []
                },
                "data": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/py/flwr_example/quickstart_tensorflow/client.py": {
        "tensorflow": {
            "Sequential_11": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "layers": {
                    "value": "[tf.keras.layers.Flatten(input_shape=(28, 28)), tf.keras.layers.Dense(128, activation='relu'), tf.keras.layers.Dropout(0.2), tf.keras.layers.Dense(10, activation='softmax')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_data_55": {
                "variable": {
                    "value": "((x_train, y_train), (x_test, y_test))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Flatten_13": {
                "input_shape": {
                    "value": "(28, 28)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_14": {
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_15": {
                "rate": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dense_16": {
                "units": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/py/flwr_example/tensorflow_fashion_mnist/client.py": {
        "tensorflow": {}
    },
    "src/py/flwr_example/tensorflow_fashion_mnist/download.py": {
        "tensorflow": {
            "get_logger_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_data_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/py/flwr_example/tensorflow_fashion_mnist/fashion_mnist.py": {
        "tensorflow": {
            "get_logger_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "glorot_uniform_31": {
                "variable": {
                    "value": "kernel_initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "SEED",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2020",
                            "Constant"
                        ]
                    ]
                }
            },
            "Input_34": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Model_62": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Input(shape=input_shape)",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Dense(10, kernel_initializer=kernel_initializer, activation='softmax')(layers)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_data_78": {
                "variable": {
                    "value": "((x_train, y_train), (x_test, y_test))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "to_categorical_96": {
                "variable": {
                    "value": "y_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "y_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.utils.to_categorical(y_train, 10)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_categorical_97": {
                "variable": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.utils.to_categorical(y_test, 10)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2D_35": {
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "kernel_initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.initializers.glorot_uniform(seed=SEED)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPool2D_43": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_44": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "kernel_initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.initializers.glorot_uniform(seed=SEED)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPool2D_52": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Flatten_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_54": {
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "kernel_initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.initializers.glorot_uniform(seed=SEED)",
                            "Call"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_58": {
                "units": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "kernel_initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.initializers.glorot_uniform(seed=SEED)",
                            "Call"
                        ]
                    ]
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/py/flwr_example/tensorflow_minimal/client.py": {
        "tensorflow": {
            "MobileNetV2_7": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(32, 32, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "classes": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "weights": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "load_data_11": {
                "variable": {
                    "value": "((x_train, y_train), (x_test, y_test))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/py/flwr_experimental/baseline/common/client.py": {
        "tensorflow": {
            "get_logger_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/py/flwr_experimental/baseline/common/common.py": {
        "tensorflow": {
            "Adam_50": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CategoricalCrossentropy_119": {
                "variable": {
                    "value": "loss_object",
                    "type": "Variable",
                    "possible_values": []
                },
                "from_logits": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Mean_57": {
                "variable": {
                    "value": "epoch_loss_avg",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CategoricalAccuracy_58": {
                "variable": {
                    "value": "epoch_accuracy",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientTape_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/py/flwr_experimental/baseline/common/data.py": {
        "tensorflow": {
            "pad_to_bounding_box_154": {
                "variable": {
                    "value": "img_padded",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.random_hue(img, 0.08, seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(img, 0.6, 1.6, seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(img, 0.05, seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(img, 0.7, 1.3, seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(img, seed=seed)",
                            "Call"
                        ]
                    ]
                },
                "offset_height": {
                    "value": "offset",
                    "type": "Variable",
                    "possible_values": []
                },
                "offset_width": {
                    "value": "offset",
                    "type": "Variable",
                    "possible_values": []
                },
                "target_height": {
                    "value": "height + 2 * offset",
                    "type": "BinOp",
                    "possible_values": []
                },
                "target_width": {
                    "value": "width + 2 * offset",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_hue_144": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.random_hue(img, 0.08, seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(img, 0.6, 1.6, seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(img, 0.05, seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(img, 0.7, 1.3, seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(img, seed=seed)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.08",
                    "type": "float",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "random_saturation_145": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.random_hue(img, 0.08, seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(img, 0.6, 1.6, seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(img, 0.05, seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(img, 0.7, 1.3, seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(img, seed=seed)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.6",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.6",
                    "type": "float",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "random_brightness_146": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.random_hue(img, 0.08, seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(img, 0.6, 1.6, seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(img, 0.05, seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(img, 0.7, 1.3, seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(img, seed=seed)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "random_contrast_147": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.random_hue(img, 0.08, seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(img, 0.6, 1.6, seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(img, 0.05, seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(img, 0.7, 1.3, seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(img, seed=seed)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.7",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.3",
                    "type": "float",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "random_flip_left_right_149": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.random_hue(img, 0.08, seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(img, 0.6, 1.6, seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(img, 0.05, seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(img, 0.7, 1.3, seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(img, seed=seed)",
                            "Call"
                        ]
                    ]
                },
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "random_crop_157": {
                "value": {
                    "value": "img_padded",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.pad_to_bounding_box(img, offset, offset, height + 2 * offset, width + 2 * offset)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "img.shape.as_list()",
                            "Call"
                        ]
                    ]
                },
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "one_hot_108": {
                "indices": {
                    "value": "tf.cast(y, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_107": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_109": {
                "x": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/py/flwr_experimental/baseline/dataset/dataset_test.py": {
        "tensorflow": {
            "load_data_53": {
                "variable": {
                    "value": "((x, y), (_, _))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/py/flwr_experimental/baseline/dataset/tf_cifar_partitioned.py": {
        "tensorflow": {}
    },
    "src/py/flwr_experimental/baseline/dataset/tf_fashion_mnist_partitioned.py": {
        "tensorflow": {
            "load_data_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/py/flwr_experimental/baseline/model/cnn.py": {
        "tensorflow": {
            "glorot_uniform_31": {
                "variable": {
                    "value": "kernel_initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Input_34": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Model_72": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Input(shape=input_shape)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Input(shape=input_shape)",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Dense(10, kernel_initializer=kernel_initializer, activation='softmax', kernel_regularizer=tf.keras.regularizers.l2(DENSE_REG), bias_regularizer=tf.keras.regularizers.l2(DENSE_REG))(layers)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Dense(10, kernel_initializer=kernel_initializer, activation='softmax')(layers)",
                            "Call"
                        ]
                    ]
                }
            },
            "ExponentialDecay_75": {
                "variable": {
                    "value": "lr_schedule",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_learning_rate": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "glorot_uniform_93": {
                "variable": {
                    "value": "kernel_initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Input_96": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Model_135": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Input(shape=input_shape)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Input(shape=input_shape)",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Dense(10, kernel_initializer=kernel_initializer, activation='softmax', kernel_regularizer=tf.keras.regularizers.l2(DENSE_REG), bias_regularizer=tf.keras.regularizers.l2(DENSE_REG))(layers)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Dense(10, kernel_initializer=kernel_initializer, activation='softmax')(layers)",
                            "Call"
                        ]
                    ]
                }
            },
            "ExponentialDecay_138": {
                "variable": {
                    "value": "lr_schedule",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_learning_rate": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2D_35": {
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "kernel_initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.initializers.glorot_uniform(seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.keras.initializers.glorot_uniform(seed=seed)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.keras.regularizers.l2(CNN_REG)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2D_44": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_45": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "kernel_initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.initializers.glorot_uniform(seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.keras.initializers.glorot_uniform(seed=seed)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.keras.regularizers.l2(CNN_REG)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2D_54": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Flatten_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_56": {
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "kernel_initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.initializers.glorot_uniform(seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.keras.initializers.glorot_uniform(seed=seed)",
                            "Call"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.keras.regularizers.l2(DENSE_REG)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_regularizer": {
                    "value": "tf.keras.regularizers.l2(DENSE_REG)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_64": {
                "units": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "kernel_initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.initializers.glorot_uniform(seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.keras.initializers.glorot_uniform(seed=seed)",
                            "Call"
                        ]
                    ]
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.keras.regularizers.l2(DENSE_REG)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_regularizer": {
                    "value": "tf.keras.regularizers.l2(DENSE_REG)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2D_97": {
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(20, 8)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "kernel_initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.initializers.glorot_uniform(seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.keras.initializers.glorot_uniform(seed=seed)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPool2D_105": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout_106": {
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2D_107": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(10, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "kernel_initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.initializers.glorot_uniform(seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.keras.initializers.glorot_uniform(seed=seed)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPool2D_115": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_117": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "kernel_initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.initializers.glorot_uniform(seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.keras.initializers.glorot_uniform(seed=seed)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GlobalAveragePooling2D_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_127": {
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "kernel_initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.initializers.glorot_uniform(seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.keras.initializers.glorot_uniform(seed=seed)",
                            "Call"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_131": {
                "units": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "kernel_initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.initializers.glorot_uniform(seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.keras.initializers.glorot_uniform(seed=seed)",
                            "Call"
                        ]
                    ]
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SGD_81": {
                "learning_rate": {
                    "value": "lr_schedule",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.optimizers.schedules.ExponentialDecay(initial_learning_rate=0.001, decay_steps=10000, decay_rate=0.9)",
                            "Call"
                        ],
                        [
                            "tf.keras.optimizers.schedules.ExponentialDecay(initial_learning_rate=0.001, decay_steps=10000, decay_rate=0.9)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_144": {
                "learning_rate": {
                    "value": "lr_schedule",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.optimizers.schedules.ExponentialDecay(initial_learning_rate=0.001, decay_steps=10000, decay_rate=0.9)",
                            "Call"
                        ],
                        [
                            "tf.keras.optimizers.schedules.ExponentialDecay(initial_learning_rate=0.001, decay_steps=10000, decay_rate=0.9)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/py/flwr_experimental/baseline/model/resnet.py": {
        "tensorflow": {
            "ResNet50V2_29": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "weights": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "include_top": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "classes": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ExponentialDecay_34": {
                "variable": {
                    "value": "lr_schedule",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_learning_rate": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_40": {
                "learning_rate": {
                    "value": "lr_schedule",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.optimizers.schedules.ExponentialDecay(initial_learning_rate=0.001, decay_steps=10000, decay_rate=0.9)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/py/flwr_experimental/baseline/tf_cifar/client.py": {
        "tensorflow": {
            "get_logger_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/py/flwr_experimental/baseline/tf_cifar/download.py": {
        "tensorflow": {
            "get_logger_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/py/flwr_experimental/baseline/tf_fashion_mnist/client.py": {
        "tensorflow": {
            "get_logger_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/py/flwr_experimental/baseline/tf_fashion_mnist/download.py": {
        "tensorflow": {
            "get_logger_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_data_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/py/flwr_experimental/baseline/tf_hotkey/client.py": {
        "tensorflow": {
            "get_logger_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "baselines/flwr_baselines/publications/adaptive_federated_optimization/cifar/client.py": {
        "torch": {
            "device_30": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_78": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ClientDataset(path_to_data=Path(self.fed_dir) / f'{self.cid}' / 'train.pt', transform=get_transforms(self.num_classes)['train'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "int(config['batch_size'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_105": {
                "variable": {
                    "value": "valloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validationset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ClientDataset(path_to_data=Path(self.fed_dir) / self.cid / 'test.pt', transform=get_transforms(self.num_classes)['test'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_129": {
                "ndarray": {
                    "value": "np.copy(v)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/flwr_baselines/publications/adaptive_federated_optimization/cifar/utils.py": {
        "torch": {
            "CrossEntropyLoss_412": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_413": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_426": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_126": {
                "variable": {
                    "value": "(self.inputs, self.labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "path_to_data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_490": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_501": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "CIFAR(root=path_original_dataset, train=False, download=True, transform=transforms['test'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_166": {
                "obj": {
                    "value": "partition",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path_dir / f'{partition_type}.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_429": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_434": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GroupNorm_108": {
                "num_groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_available_490": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_494": {
                "data": {
                    "value": "np.atleast_1d(v)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/flwr_baselines/publications/fedbn/convergence_rate/client.py": {
        "torch": {
            "device_24": {
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_281": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DigitsDataset(data_path='data/MNIST', channels=1, percent=0.1, train=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "DigitsDataset(data_path='data/SVHN', channels=3, percent=0.1, train=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "DigitsDataset(data_path='data/USPS', channels=1, percent=0.1, train=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "DigitsDataset(data_path='data/SynthDigits/', channels=3, percent=0.1, train=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "DigitsDataset(data_path='data/MNIST_M/', channels=3, percent=0.1, train=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_282": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DigitsDataset(data_path='data/MNIST', channels=1, percent=0.1, train=False, transform=transform)",
                            "Call"
                        ],
                        [
                            "DigitsDataset(data_path='data/SVHN', channels=3, percent=0.1, train=False, transform=transform)",
                            "Call"
                        ],
                        [
                            "DigitsDataset(data_path='data/USPS', channels=1, percent=0.1, train=False, transform=transform)",
                            "Call"
                        ],
                        [
                            "DigitsDataset(data_path='data/SynthDigits/', channels=3, percent=0.1, train=False, transform=transform)",
                            "Call"
                        ],
                        [
                            "DigitsDataset(data_path='data/MNIST_M/', channels=3, percent=0.1, train=False, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_290": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_291": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_338": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_318": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_346": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_351": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_70": {
                "data": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_74": {
                "data": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/flwr_baselines/publications/fedbn/convergence_rate/utils/cnn_model.py": {
        "torch": {
            "Conv2d_12": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_13": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_15": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "6272",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_20": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_22": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_28": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_29": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nn.functional.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "nn.functional.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "nn.functional.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.bn4(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.bn5(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_31": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_32": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nn.functional.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "nn.functional.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "nn.functional.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.bn4(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.bn5(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_34": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_40": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nn.functional.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "nn.functional.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "nn.functional.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.bn4(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.bn5(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_44": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nn.functional.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "nn.functional.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "nn.functional.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.bn4(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.bn5(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "baselines/flwr_baselines/publications/fedbn/convergence_rate/utils/data_download_raw.py": {
        "torch": {
            "load_77": {
                "variable": {
                    "value": "train",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "./data/MNIST/training.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_78": {
                "variable": {
                    "value": "test",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "./data/MNIST/test.pt",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/flwr_baselines/publications/fedbn/convergence_rate/utils/data_utils.py": {
        "torch": {}
    },
    "examples/advanced_pytorch/client.py": {
        "torch": {
            "Subset_83": {
                "variable": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.utils.data.Subset(trainset, range(10))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(trainset, range(10))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(self.trainset, range(n_valset, len(self.trainset)))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "range(10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Subset_84": {
                "variable": {
                    "value": "testset",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.utils.data.Subset(testset, range(10))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(testset, range(10))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "range(10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_133": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() and args.use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Subset_47": {
                "variable": {
                    "value": "valset",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.trainset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "range(0, n_valset)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Subset_48": {
                "variable": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.trainset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "range(n_valset, len(self.trainset))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_52": {
                "variable": {
                    "value": "trainLoader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.utils.data.Subset(trainset, range(10))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(trainset, range(10))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(self.trainset, range(n_valset, len(self.trainset)))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_53": {
                "variable": {
                    "value": "valLoader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.utils.data.Subset(self.trainset, range(0, n_valset))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config['batch_size']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataLoader_71": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.testset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Subset_144": {
                "variable": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.utils.data.Subset(trainset, range(10))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(trainset, range(10))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(self.trainset, range(n_valset, len(self.trainset)))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "range(10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Subset_145": {
                "variable": {
                    "value": "testset",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.utils.data.Subset(testset, range(10))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(testset, range(10))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "range(10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_31": {
                "data": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_available_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/advanced_pytorch/server.py": {
        "torch": {
            "DataLoader_54": {
                "variable": {
                    "value": "valLoader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.utils.data.Subset(trainset, range(n_train - 10, n_train))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(trainset, range(n_train - 5000, n_train))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Subset_49": {
                "variable": {
                    "value": "valset",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "range(n_train - 10, n_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Subset_52": {
                "variable": {
                    "value": "valset",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "range(n_train - 5000, n_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_63": {
                "data": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "examples/advanced_pytorch/utils.py": {
        "torch": {
            "Subset_37": {
                "variable": {
                    "value": "train_parition",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "CIFAR10('./dataset', train=True, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "range(idx * n_train, (idx + 1) * n_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Subset_40": {
                "variable": {
                    "value": "test_parition",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "CIFAR10('./dataset', train=False, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "range(idx * n_test, (idx + 1) * n_test)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_50": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_51": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_81": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_106": {
                "variable": {
                    "value": "efficientnet_model.classifier.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "efficientnet_model.classifier.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_124": {
                "variable": {
                    "value": "efficientnet",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "NVIDIA/DeepLearningExamples:torchhub",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "entrypoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "pretrained": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_89": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "examples/embedded_devices/client.py": {
        "torch": {
            "device_32": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_108": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.trainset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(config['batch_size'])",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_131": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.testset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_45": {
                "data": {
                    "value": "np.atleast_1d(v)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "examples/embedded_devices/server.py": {
        "torch": {
            "device_30": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_161": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_142": {
                "data": {
                    "value": "np.atleast_1d(v)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "examples/embedded_devices/utils.py": {
        "torch": {
            "Conv2d_87": {
                "variable": {
                    "value": "model.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Identity_90": {
                "variable": {
                    "value": "model.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_131": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_132": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_166": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_52": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "16 * 5 * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_64": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_65": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_175": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_61": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_62": {
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_76": {
                "data": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "examples/opacus/dp_cifar_client.py": {
        "torch": {
            "Subset_21": {
                "variable": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "CIFAR10('./data', train=True, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "list(range(0, split))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Subset_22": {
                "variable": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "CIFAR10('./data', train=True, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "list(range(split, len(data)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_23": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.utils.data.Subset(data, list(range(0, split)))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(data, list(range(split, len(data))))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "PARAMS['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_24": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.utils.data.Subset(data, list(range(0, split)))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(data, list(range(split, len(data))))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "PARAMS['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "examples/opacus/dp_cifar_main.py": {
        "torch": {
            "device_25": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_50": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_51": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_67": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_33": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "16 * 5 * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_43": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_44": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_74": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_40": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_41": {
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_102": {
                "data": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "examples/opacus/dp_cifar_simulation.py": {
        "torch": {
            "Subset_41": {
                "variable": {
                    "value": "client_trainset",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "client_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "partitioned_data[int(cid)]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "list(range(0, split))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Subset_42": {
                "variable": {
                    "value": "client_testset",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "client_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "partitioned_data[int(cid)]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "list(range(split, len(client_data)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_45": {
                "variable": {
                    "value": "client_trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "client_trainset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.utils.data.Subset(client_data, list(range(0, split)))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "PARAMS['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_46": {
                "variable": {
                    "value": "client_testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "client_testset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.utils.data.Subset(client_data, list(range(split, len(client_data))))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "PARAMS['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_73": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "CIFAR10(root='./data', train=False, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "PARAMS['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Generator_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_37": {
                "seed": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_67": {
                "data": {
                    "value": "np.atleast_1d(v)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "examples/pytorch_federated_variational_autoencoder/client.py": {
        "torch": {
            "device_12": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_22": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "CIFAR10('.', train=True, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_23": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "CIFAR10('.', train=False, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_29": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "randn_58": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_34": {
                "variable": {
                    "value": "recon_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recon_images",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data[0].to(DEVICE)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_48": {
                "variable": {
                    "value": "recon_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recon_images",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data[0].to(DEVICE)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_35": {
                "input": {
                    "value": "1 + logvar - mu.pow(2) - logvar.exp()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_49": {
                "input": {
                    "value": "1 + logvar - mu.pow(2) - logvar.exp()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_81": {
                "data": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "examples/pytorch_federated_variational_autoencoder/models.py": {
        "torch": {
            "Sequential_22": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=3, out_channels=6, kernel_size=4, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "576",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "576",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "h_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "576",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "UnFlatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_49": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logvar / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_50": {
                "variable": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(logvar / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_40": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_42": {
                "in_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/pytorch_from_centralized_to_federated/cifar.py": {
        "torch": {
            "DataLoader_63": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "CIFAR10(DATA_ROOT, train=True, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_65": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "CIFAR10(DATA_ROOT, train=False, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_78": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_79": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_114": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_135": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_34": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_36": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "16 * 5 * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_38": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_40": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_49": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.fc1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_50": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4(self.fc2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_127": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_46": {
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_47": {
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/pytorch_from_centralized_to_federated/client.py": {
        "torch": {
            "device_19": {
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_58": {
                "data": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_62": {
                "data": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "examples/quickstart_huggingface/client.py": {
        "torch": {
            "device_18": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_46": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "tokenized_datasets['train']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "data_collator",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DataCollatorWithPadding(tokenizer=tokenizer)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_53": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "tokenized_datasets['test']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "data_collator",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DataCollatorWithPadding(tokenizer=tokenizer)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_83": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs.logits",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_available_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/quickstart_pytorch/client.py": {
        "torch": {
            "device_19": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_45": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_46": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_56": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_28": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "16 * 5 * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_38": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_39": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_73": {
                "dataset": {
                    "value": "testset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "CIFAR10('./data', train=False, download=True, transform=trf)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_35": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_36": {
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_91": {
                "data": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_64": {
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "examples/quickstart_pytorch_lightning/client.py": {
        "torch": {
            "tensor_48": {
                "data": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "examples/quickstart_pytorch_lightning/mnist.py": {
        "torch": {
            "DataLoader_67": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "mnist_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_68": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "mnist_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_72": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MNIST('', train=False, download=True, transform=transforms.ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_19": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(28 * 28, 64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_24": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(3, 64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_35": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mse_loss_43": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_hat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.decoder(z)",
                            "Call"
                        ],
                        [
                            "self.decoder(z)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_58": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_hat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.decoder(z)",
                            "Call"
                        ],
                        [
                            "self.decoder(z)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_20": {
                "in_features": {
                    "value": "28 * 28",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_22": {
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "in_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_27": {
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "28 * 28",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "examples/simulation_pytorch/dataset_utils.py": {
        "torch": {
            "load_57": {
                "variable": {
                    "value": "(images, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "path_to_dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_31": {
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_dataset(Path(path_to_data), cid, partition)",
                            "Call"
                        ],
                        [
                            "[idx, labels]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_176": {
                "obj": {
                    "value": "[train_set.data, np.array(train_set.targets)]",
                    "type": "List",
                    "possible_values": []
                },
                "f": {
                    "value": "training_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data_loc / 'training.pt'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_137": {
                "variable": {
                    "value": "(self.data, self.targets)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "path_to_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "path_to_data / cid / (partition + '.pt')",
                            "BinOp"
                        ],
                        [
                            "'./data'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "save_101": {
                "obj": {
                    "value": "[imgs, labels]",
                    "type": "List",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_94": {
                "obj": {
                    "value": "[val_imgs, val_labels]",
                    "type": "List",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "examples/simulation_pytorch/main.py": {
        "torch": {
            "device_32": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_110": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_116": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_95": {
                "ndarray": {
                    "value": "np.copy(v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/simulation_pytorch/utils.py": {
        "torch": {
            "CrossEntropyLoss_31": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_32": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_46": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_11": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_12": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "16 * 5 * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_22": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_23": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_54": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_19": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_20": {
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/py/flwr_example/pytorch_cifar/cifar.py": {
        "torch": {
            "CrossEntropyLoss_106": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_107": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_139": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_49": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_51": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "16 * 5 * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_61": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_62": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_148": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_58": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_59": {
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_73": {
                "data": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/py/flwr_example/pytorch_cifar/client.py": {
        "torch": {
            "device_30": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_71": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.trainset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(config['batch_size'])",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_97": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.testset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/py/flwr_example/pytorch_cifar/server.py": {
        "torch": {
            "device_29": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_114": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/py/flwr_example/pytorch_imagenet/client.py": {
        "torch": {
            "device_33": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_103": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "dataset_indices[start_ind:end_ind]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_108": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.trainset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(config['batch_size'])",
                            "Call"
                        ],
                        [
                            "int(config['batch_size'])",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.utils.data.SubsetRandomSampler(dataset_indices[start_ind:end_ind])",
                            "Call"
                        ]
                    ]
                }
            },
            "SubsetRandomSampler_151": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "dataset_indices[start_ind:end_ind]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_156": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.testset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(config['batch_size'])",
                            "Call"
                        ],
                        [
                            "int(config['batch_size'])",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.utils.data.SubsetRandomSampler(dataset_indices[start_ind:end_ind])",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_46": {
                "data": {
                    "value": "np.atleast_1d(v)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/py/flwr_example/pytorch_imagenet/imagenet.py": {
        "torch": {
            "CrossEntropyLoss_90": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adadelta_91": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_136": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_147": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/py/flwr_example/pytorch_imagenet/server.py": {
        "torch": {
            "device_33": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_125": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/py/flwr_example/pytorch_minimal/cifar.py": {
        "torch": {
            "DataLoader_75": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root=DATA_ROOT, train=True, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_81": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root=DATA_ROOT, train=False, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_94": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_95": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_127": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_144": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_46": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "16 * 5 * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_58": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_59": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_136": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_55": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_56": {
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/py/flwr_example/pytorch_minimal/client.py": {
        "torch": {
            "device_32": {
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_56": {
                "data": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/py/flwr_example/pytorch_save_weights/cifar.py": {
        "torch": {
            "DataLoader_89": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root=DATA_ROOT, train=True, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_95": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root=DATA_ROOT, train=False, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_108": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_109": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_141": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_49": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_51": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "16 * 5 * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_61": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_62": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_150": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_58": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_59": {
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_73": {
                "data": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/py/flwr_example/pytorch_save_weights/client.py": {
        "torch": {
            "device_32": {
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/py/flwr_example/pytorch_save_weights/server.py": {
        "torch": {
            "device_87": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/py/flwr_example/quickstart_pytorch/client.py": {
        "torch": {
            "device_83": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/py/flwr_example/quickstart_pytorch/mnist.py": {
        "torch": {
            "SubsetRandomSampler_87": {
                "variable": {
                    "value": "data_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "dataset_indices[start_ind:end_ind]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_88": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "data_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(dataset_indices[start_ind:end_ind])",
                            "Call"
                        ]
                    ]
                }
            },
            "Adadelta_228": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StepLR_229": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.Adadelta(model.parameters(), lr=1.0)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.7",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_160": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_161": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_162": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout2d_163": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_164": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "9216",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_165": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_184": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_186": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool2d_187": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_189": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_191": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_194": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_202": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_271": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "nll_loss_244": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_296": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_323": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "nll_loss_301": {
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_351": {
                "data": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    }
}