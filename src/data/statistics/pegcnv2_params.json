{
    "baselinetest.py": {
        "torch": {
            "tensor_19": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "graph.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_23": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "./models/baseline_NTUcset.pth.tar",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/database.py": {
        "torch": {
            "from_numpy_140": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.transpose(s, [0, 4, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "np.zeros((self.maxC, 300, self.maxV, self.maxM))",
                            "Call"
                        ],
                        [
                            "data[:, :self.maxT, :, :]",
                            "Subscript"
                        ],
                        [
                            "np.expand_dims(data, 0)",
                            "Call"
                        ],
                        [
                            "self.pre_normalization(data)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(data).float()",
                            "Call"
                        ],
                        [
                            "new_data",
                            "Name"
                        ]
                    ]
                }
            },
            "from_numpy_141": {
                "variable": {
                    "value": "location",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "location",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((2, self.maxT, self.maxV, self.maxM))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(location).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_142": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(label)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/mask.py": {
        "torch": {
            "cat_23": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mask.unsqueeze(1)] * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_54": {
                "input": {
                    "value": "result",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(weight * feature).sum(dim=1)",
                            "Call"
                        ],
                        [
                            "result.mean(dim=0)",
                            "Call"
                        ],
                        [
                            "result.view(-1)",
                            "Call"
                        ],
                        [
                            "1 - F.softmax(result, dim=0)",
                            "BinOp"
                        ],
                        [
                            "result.view(T, V, M)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/nets.py": {
        "torch": {
            "ModuleList_16": {
                "variable": {
                    "value": "self.stgcn_stream",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "(ST_GCN(data_shape, num_class, A, drop_prob, gcn_kernel_size) for _ in range(model_stream))",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "ParameterList_29": {
                "variable": {
                    "value": "self.mask_stream",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[nn.Parameter(torch.ones(T * V * M)) for _ in range(model_stream)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_72": {
                "variable": {
                    "value": "self.data_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "C * V * M",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_75": {
                "variable": {
                    "value": "self.st_gcn_networks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "(st_gcn_layer(C, 64, gcn_kernel_size, 1, A, drop_prob, residual=False), st_gcn_layer(64, 64, gcn_kernel_size, 1, A, drop_prob), st_gcn_layer(64, 64, gcn_kernel_size, 1, A, drop_prob), st_gcn_layer(64, 64, gcn_kernel_size, 1, A, drop_prob), st_gcn_layer(64, 128, gcn_kernel_size, 2, A, drop_prob), st_gcn_layer(128, 128, gcn_kernel_size, 1, A, drop_prob), st_gcn_layer(128, 128, gcn_kernel_size, 1, A, drop_prob), st_gcn_layer(128, 256, gcn_kernel_size, 2, A, drop_prob), st_gcn_layer(256, 256, gcn_kernel_size, 1, A, drop_prob), st_gcn_layer(256, 256, gcn_kernel_size, 1, A, drop_prob))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ParameterList_89": {
                "variable": {
                    "value": "self.edge_importance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[nn.Parameter(torch.ones(A.shape)) for _ in self.st_gcn_networks]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "variable": {
                    "value": "self.fcn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_class",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_115": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "x.view(N, C, -1)",
                            "Call"
                        ],
                        [
                            "x * mask[None, None, :]",
                            "BinOp"
                        ],
                        [
                            "x.view(N, C, T, V, M)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 4, 3, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(N, M * V * C, T)",
                            "Call"
                        ],
                        [
                            "self.data_bn(x)",
                            "Call"
                        ],
                        [
                            "x.view(N, M, V, C, T)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 3, 4, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(N * M, C, T, V)",
                            "Call"
                        ],
                        [
                            "gcn(x, self.A * importance)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.shape[2:])",
                            "Call"
                        ],
                        [
                            "x.view(N, M, -1, 1, 1).mean(dim=1)",
                            "Call"
                        ],
                        [
                            "self.fcn(x)",
                            "Call"
                        ],
                        [
                            "x.view(N, -1)",
                            "Call"
                        ],
                        [
                            "self.gcn(x, A)",
                            "Call"
                        ],
                        [
                            "self.tcn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x + res)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "x.view(n, self.s_kernel_size, kc // self.s_kernel_size, t, v)",
                            "Call"
                        ],
                        [
                            "torch.einsum('nkctv,kvw->nctw', (x, A[:self.s_kernel_size])).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "x.shape[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_137": {
                "variable": {
                    "value": "self.tcn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm2d(out_channels)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_154": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_180": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels * s_kernel_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "einsum_192": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nkctv,kvw->nctw",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(x, A[:self.s_kernel_size])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_138": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_140": {
                "p": {
                    "value": "drop_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_141": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernel_size[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "((kernel_size[0] - 1) // 2, 0)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "BatchNorm2d_142": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_151": {
                "variable": {
                    "value": "self.residual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, kernel_size=1, stride=(stride, 1))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_30": {
                "data": {
                    "value": "torch.ones(T * V * M)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_89": {
                "data": {
                    "value": "torch.ones(A.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_30": {
                "*size": {
                    "value": "T * V * M",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_89": {
                "*size": {
                    "value": "A.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_151": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "(stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_151": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/processor.py": {
        "torch": {
            "DataLoader_57": {
                "variable": {
                    "value": "self.train_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "NTU('train', args.subset, data_shape, transform=transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_worker",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ],
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_60": {
                "variable": {
                    "value": "self.eval_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "NTU('eval', args.subset, data_shape, transform=transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_worker",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ],
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_68": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "graph.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataParallel_75": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_78": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_82": {
                "variable": {
                    "value": "self.loss_func",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_283": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(out_stream, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_284": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(torch.cat(out_stream, dim=-1), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.cat(out_stream, dim=-1), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.cat(out_stream, dim=-1), dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(out, dim=1).detach().cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_31": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_32": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_122": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(out_stream, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_170": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(out_stream, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_283": {
                "tensors": {
                    "value": "out_stream",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_122": {
                "tensors": {
                    "value": "out_stream",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_170": {
                "tensors": {
                    "value": "out_stream",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/processor_bs.py": {
        "torch": {
            "DataLoader_53": {
                "variable": {
                    "value": "self.train_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "NTU('train', args.subset, data_shape, transform=transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2 * len(args.gpus)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_56": {
                "variable": {
                    "value": "self.eval_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "NTU('eval', args.subset, data_shape, transform=transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2 * len(args.gpus)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_64": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "graph.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataParallel_69": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_72": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_76": {
                "variable": {
                    "value": "self.loss_func",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_31": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_32": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/utils.py": {
        "torch": {
            "load_33": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fpath",
                    "type": "Name",
                    "possible_values": [
                        [
                            "f'./models/{tag}/' + fname + '.pth.tar'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_76": {
                "obj": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.load(fpath)",
                            "Call"
                        ],
                        [
                            "{'model': model, 'optimizer': optimizer, 'epoch': epoch, 'best': best}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "export_path + '/checkpoint.pth.tar'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_23": {
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_26": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}