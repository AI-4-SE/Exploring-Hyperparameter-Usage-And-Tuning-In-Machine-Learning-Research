{
    "data/data_loader_multigraph.py": {
        "torch": {
            "DataLoader_193": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collate_fn",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fix if fix_seed else worker_init_rand",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "initial_seed_188": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initial_seed_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_84": {
                "data": {
                    "value": "p_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(points_gt, n_points_gt)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_97": {
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pad_141": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next(it)",
                            "Call"
                        ],
                        [
                            "next(it)",
                            "Call"
                        ],
                        [
                            "inp",
                            "variable"
                        ]
                    ]
                },
                "pad": {
                    "value": "pad_pattern",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(2 * len(max_shape), dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "tuple(pad_pattern.tolist())",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_159": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_tensor(inp)",
                            "Call"
                        ],
                        [
                            "pad_tensor([torch.from_numpy(x) for x in inp])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_87": {
                "data": {
                    "value": "edge_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_graphs(p_gt, n_p_gt)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_88": {
                "data": {
                    "value": "edge_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_graphs(p_gt, n_p_gt)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_162": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_tensor(inp)",
                            "Call"
                        ],
                        [
                            "pad_tensor([torch.from_numpy(x) for x in inp])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_161": {
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "eval.py": {
        "torch": {
            "zeros_29": {
                "variable": {
                    "value": "accs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(classes)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_30": {
                "variable": {
                    "value": "f1_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(classes)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_41": {
                "variable": {
                    "value": "acc_match_num",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_42": {
                "variable": {
                    "value": "acc_total_num",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_43": {
                "variable": {
                    "value": "tp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_44": {
                "variable": {
                    "value": "fp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_45": {
                "variable": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "load_19": {
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "str(Path(config.result_dir) / 'params' / 'params_{:04}.pt'.format(eval_epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_107": {
                "input": {
                    "value": "f1_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(len(classes), device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_grad_enabled_60": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/DIP/affinity_layer.py": {
        "torch": {
            "Linear_9": {
                "variable": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_13": {
                "variable": {
                    "value": "coefficients",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.A(weights)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_14": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X * coefficients",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "Y.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_15": {
                "input": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(X * coefficients, Y.transpose(0, 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softplus(res) - 0.5",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "models/DIP/mip.py": {
        "torch": {
            "from_numpy_121": {
                "variable": {
                    "value": "costs_paid",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "costs_paid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gm_solver(costs=costs.cpu().detach().numpy(), quadratic_costs=quadratic_costs.cpu().detach().numpy(), edges_src=params['edges_left'].cpu().detach().numpy(), edges_dst=params['edges_right'].cpu().detach().numpy(), solver_params=params['solver_params'])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(costs_paid).to(torch.float32).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_122": {
                "variable": {
                    "value": "quadratic_costs_paid",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "quadratic_costs_paid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gm_solver(costs=costs.cpu().detach().numpy(), quadratic_costs=quadratic_costs.cpu().detach().numpy(), edges_src=params['edges_left'].cpu().detach().numpy(), edges_dst=params['edges_right'].cpu().detach().numpy(), solver_params=params['solver_params'])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(quadratic_costs_paid).to(torch.float32).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_155": {
                "variable": {
                    "value": "costs_paid_prime",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "costs_paid_prime",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gm_solver(costs=costs_prime.cpu().detach().numpy(), quadratic_costs=quadratic_costs_prime.cpu().detach().numpy(), edges_src=ctx.params['edges_left'].cpu().detach().numpy(), edges_dst=ctx.params['edges_right'].cpu().detach().numpy(), solver_params=ctx.params['solver_params'])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(costs_paid_prime).to(torch.float32).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_156": {
                "variable": {
                    "value": "quadratic_costs_paid_prime",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "quadratic_costs_paid_prime",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gm_solver(costs=costs_prime.cpu().detach().numpy(), quadratic_costs=quadratic_costs_prime.cpu().detach().numpy(), edges_src=ctx.params['edges_left'].cpu().detach().numpy(), edges_dst=ctx.params['edges_right'].cpu().detach().numpy(), solver_params=ctx.params['solver_params'])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(quadratic_costs_paid_prime).to(torch.float32).to(device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/SH/sinkhorn_layer.py": {
        "torch": {
            "tensor_345": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[1.0, 0, 1.0], [1.0, 0, 3.0], [2.0, 0, 1.0], [4.0, 0, 2.0]]]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_352": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bs(inp, (3, 4))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_356": {
                "variable": {
                    "value": "outp2",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.1, 0.1, 1], [2, 3, 4.0]]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_359": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outp2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[0.1, 0.1, 1], [2, 3, 4.0]], requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_216": {
                "variable": {
                    "value": "ret_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "s.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "s / self.tau",
                            "BinOp"
                        ],
                        [
                            "torch.cat((s, torch.full(dummy_shape, -float('inf')).to(s.device)), dim=1)",
                            "Call"
                        ],
                        [
                            "s.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "ret_s",
                            "variable"
                        ],
                        [
                            "torch.cat((s, torch.full(dummy_shape, 0.0).to(s.device)), dim=1)",
                            "Call"
                        ],
                        [
                            "s + self.epsilon",
                            "BinOp"
                        ],
                        [
                            "s[:, :-dummy_shape[1]]",
                            "Subscript"
                        ],
                        [
                            "s * tmp",
                            "BinOp"
                        ],
                        [
                            "s",
                            "Method Argument"
                        ],
                        [
                            "s",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_234": {
                "variable": {
                    "value": "row_norm_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s.shape[0]",
                            "Subscript"
                        ],
                        [
                            "s.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "s.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "s.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "s.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_236": {
                "variable": {
                    "value": "col_norm_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s.shape[0]",
                            "Subscript"
                        ],
                        [
                            "s.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "s.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "s.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "s.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "repeat_interleave_334": {
                "variable": {
                    "value": "s_rep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "s.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "s / self.tau",
                            "BinOp"
                        ],
                        [
                            "torch.cat((s, torch.full(dummy_shape, -float('inf')).to(s.device)), dim=1)",
                            "Call"
                        ],
                        [
                            "s.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "ret_s",
                            "variable"
                        ],
                        [
                            "torch.cat((s, torch.full(dummy_shape, 0.0).to(s.device)), dim=1)",
                            "Call"
                        ],
                        [
                            "s + self.epsilon",
                            "BinOp"
                        ],
                        [
                            "s[:, :-dummy_shape[1]]",
                            "Subscript"
                        ],
                        [
                            "s * tmp",
                            "BinOp"
                        ],
                        [
                            "s",
                            "Method Argument"
                        ],
                        [
                            "s",
                            "Method Argument"
                        ]
                    ]
                },
                "repeats": {
                    "value": "sample_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "repeat_interleave_336": {
                "variable": {
                    "value": "nrows_rep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nrows",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ncols",
                            "variable"
                        ],
                        [
                            "[s.shape[1] for _ in range(batch_size)]",
                            "ListComp"
                        ],
                        [
                            "ncols",
                            "variable"
                        ],
                        [
                            "[s.shape[1] for _ in range(batch_size)]",
                            "ListComp"
                        ],
                        [
                            "ncols",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "repeats": {
                    "value": "sample_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "repeat_interleave_337": {
                "variable": {
                    "value": "ncols_rep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ncols",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nrows",
                            "variable"
                        ],
                        [
                            "[s.shape[2] for _ in range(batch_size)]",
                            "ListComp"
                        ],
                        [
                            "[s.shape[2] for _ in range(batch_size)]",
                            "ListComp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "repeats": {
                    "value": "sample_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_122": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(s, torch.full(dummy_shape, -float('inf')).to(s.device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_153": {
                "variable": {
                    "value": "ret_log_s",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, s.shape[1], s.shape[2])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-float('inf')",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "device": {
                    "value": "s.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "s.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_219": {
                "variable": {
                    "value": "ret_s[b, 0:n, 0:ncols[b]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "s[b, 0:n, 0:ncols[b]] / self.tau",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_228": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(s, torch.full(dummy_shape, 0.0).to(s.device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_256": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "s.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "s / self.tau",
                            "BinOp"
                        ],
                        [
                            "torch.cat((s, torch.full(dummy_shape, -float('inf')).to(s.device)), dim=1)",
                            "Call"
                        ],
                        [
                            "s.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "ret_s",
                            "variable"
                        ],
                        [
                            "torch.cat((s, torch.full(dummy_shape, 0.0).to(s.device)), dim=1)",
                            "Call"
                        ],
                        [
                            "s + self.epsilon",
                            "BinOp"
                        ],
                        [
                            "s[:, :-dummy_shape[1]]",
                            "Subscript"
                        ],
                        [
                            "s * tmp",
                            "BinOp"
                        ],
                        [
                            "s",
                            "Method Argument"
                        ],
                        [
                            "s",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_like_331": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t_like",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t_like",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_151": {
                "input": {
                    "value": "log_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s",
                            "variable"
                        ],
                        [
                            "s[b, row_slice, col_slice]",
                            "Subscript"
                        ],
                        [
                            "log_s - log_sum",
                            "BinOp"
                        ],
                        [
                            "log_s - log_sum",
                            "BinOp"
                        ],
                        [
                            "log_s[:, :-dummy_shape[1]]",
                            "Subscript"
                        ],
                        [
                            "log_s - log_sum",
                            "BinOp"
                        ],
                        [
                            "log_s - log_sum",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_181": {
                "input": {
                    "value": "ret_log_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.full((batch_size, s.shape[1], s.shape[2]), -float('inf'), device=s.device, dtype=s.dtype)",
                            "Call"
                        ],
                        [
                            "ret_log_s[:, :-dummy_shape[1]]",
                            "Subscript"
                        ],
                        [
                            "ret_log_s.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_250": {
                "variable": {
                    "value": "sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(s.unsqueeze(3), col_norm_ones.unsqueeze(1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_254": {
                "variable": {
                    "value": "sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(row_norm_ones.unsqueeze(3), s.unsqueeze(1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logsumexp_133": {
                "variable": {
                    "value": "log_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s",
                            "variable"
                        ],
                        [
                            "s[b, row_slice, col_slice]",
                            "Subscript"
                        ],
                        [
                            "log_s - log_sum",
                            "BinOp"
                        ],
                        [
                            "log_s - log_sum",
                            "BinOp"
                        ],
                        [
                            "log_s[:, :-dummy_shape[1]]",
                            "Subscript"
                        ],
                        [
                            "log_s - log_sum",
                            "BinOp"
                        ],
                        [
                            "log_s - log_sum",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "logsumexp_137": {
                "variable": {
                    "value": "log_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s",
                            "variable"
                        ],
                        [
                            "s[b, row_slice, col_slice]",
                            "Subscript"
                        ],
                        [
                            "log_s - log_sum",
                            "BinOp"
                        ],
                        [
                            "log_s - log_sum",
                            "BinOp"
                        ],
                        [
                            "log_s[:, :-dummy_shape[1]]",
                            "Subscript"
                        ],
                        [
                            "log_s - log_sum",
                            "BinOp"
                        ],
                        [
                            "log_s - log_sum",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_332": {
                "input": {
                    "value": "u + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "full_122": {
                "size": {
                    "value": "dummy_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(s.shape)",
                            "Call"
                        ],
                        [
                            "list(s.shape)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "-float('inf')",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "logsumexp_162": {
                "variable": {
                    "value": "log_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s",
                            "variable"
                        ],
                        [
                            "s[b, row_slice, col_slice]",
                            "Subscript"
                        ],
                        [
                            "log_s - log_sum",
                            "BinOp"
                        ],
                        [
                            "log_s - log_sum",
                            "BinOp"
                        ],
                        [
                            "log_s[:, :-dummy_shape[1]]",
                            "Subscript"
                        ],
                        [
                            "log_s - log_sum",
                            "BinOp"
                        ],
                        [
                            "log_s - log_sum",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "logsumexp_165": {
                "variable": {
                    "value": "log_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s",
                            "variable"
                        ],
                        [
                            "s[b, row_slice, col_slice]",
                            "Subscript"
                        ],
                        [
                            "log_s - log_sum",
                            "BinOp"
                        ],
                        [
                            "log_s - log_sum",
                            "BinOp"
                        ],
                        [
                            "log_s[:, :-dummy_shape[1]]",
                            "Subscript"
                        ],
                        [
                            "log_s - log_sum",
                            "BinOp"
                        ],
                        [
                            "log_s - log_sum",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "full_228": {
                "size": {
                    "value": "dummy_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(s.shape)",
                            "Call"
                        ],
                        [
                            "list(s.shape)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mul_250": {
                "input": {
                    "value": "s.unsqueeze(3)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "col_norm_ones.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_254": {
                "input": {
                    "value": "row_norm_ones.unsqueeze(3)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "s.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isnan_135": {
                "input": {
                    "value": "log_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s",
                            "variable"
                        ],
                        [
                            "s[b, row_slice, col_slice]",
                            "Subscript"
                        ],
                        [
                            "log_s - log_sum",
                            "BinOp"
                        ],
                        [
                            "log_s - log_sum",
                            "BinOp"
                        ],
                        [
                            "log_s[:, :-dummy_shape[1]]",
                            "Subscript"
                        ],
                        [
                            "log_s - log_sum",
                            "BinOp"
                        ],
                        [
                            "log_s - log_sum",
                            "BinOp"
                        ]
                    ]
                }
            },
            "isnan_139": {
                "input": {
                    "value": "log_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s",
                            "variable"
                        ],
                        [
                            "s[b, row_slice, col_slice]",
                            "Subscript"
                        ],
                        [
                            "log_s - log_sum",
                            "BinOp"
                        ],
                        [
                            "log_s - log_sum",
                            "BinOp"
                        ],
                        [
                            "log_s[:, :-dummy_shape[1]]",
                            "Subscript"
                        ],
                        [
                            "log_s - log_sum",
                            "BinOp"
                        ],
                        [
                            "log_s - log_sum",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "models/helper.py": {
        "torch": {
            "norm_10": {
                "variable": {
                    "value": "channel_norms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_15": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embedding[:, :num_v] for (embedding, num_v) in zip(embeddings, num_vertices)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_23": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, max_dimension_x, max_dimension_y)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_71": {
                "variable": {
                    "value": "perm_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "perm_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s.cpu().detach().numpy() * -1",
                            "BinOp"
                        ],
                        [
                            "np.stack([_hung_kernel(perm_mat[b], n1[b], n2[b]) for b in range(batch_num)])",
                            "Call"
                        ],
                        [
                            "np.stack(mapresult.get())",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(perm_mat).to(device)",
                            "Call"
                        ],
                        [
                            "np.zeros_like(s)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/lossfunction.py": {
        "torch": {
            "tensor_42": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_like_43": {
                "variable": {
                    "value": "n_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(0.0).to(pred_perm.device)",
                            "Call"
                        ],
                        [
                            "loss + F.binary_cross_entropy(pred_perm[b, :ns_src[b], :ns_dst[b]], gt_perm[b, :ns_src[b], :ns_dst[b]], reduction='sum')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "all_36": {
                "input": {
                    "value": "(pred_perm >= 0) * (pred_perm <= 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "all_37": {
                "input": {
                    "value": "(gt_perm >= 0) * (gt_perm <= 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_45": {
                "input": {
                    "value": "pred_perm[b, :ns_src[b], :ns_dst[b]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "gt_perm[b, :ns_src[b], :ns_dst[b]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "models/power_iteration/affinity_layer.py": {
        "torch": {
            "Linear_14": {
                "variable": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_19": {
                "variable": {
                    "value": "coefficients",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.A(global_weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_20": {
                "variable": {
                    "value": "aff_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X * coefficients",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "Y.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_36": {
                "variable": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph.num_nodes",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "num_edges",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph.num_edges",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_37": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph.num_nodes",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "num_edges",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph.num_edges",
                            "Attribute"
                        ]
                    ]
                }
            },
            "kron_52": {
                "variable": {
                    "value": "Kg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "G2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.construct_edge_incidence_mat(graph_list[1])",
                            "Call"
                        ],
                        [
                            "G2",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "G1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.construct_edge_incidence_mat(graph_list[0])",
                            "Call"
                        ],
                        [
                            "G1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "kron_53": {
                "variable": {
                    "value": "Kh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.construct_edge_incidence_mat(graph_list[1])",
                            "Call"
                        ],
                        [
                            "H2",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "H1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.construct_edge_incidence_mat(graph_list[0])",
                            "Call"
                        ],
                        [
                            "H1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "numel_55": {
                "variable": {
                    "value": "total_num_Mp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Mp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.vertex_affinity_layer(node_feats[0], node_feats[1], global_weight)",
                            "Call"
                        ],
                        [
                            "torch.relu(Mp)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Ux.transpose(1, 2), Uy)",
                            "Call"
                        ],
                        [
                            "Mp",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_56": {
                "variable": {
                    "value": "vec_Mp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Mp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.vertex_affinity_layer(node_feats[0], node_feats[1], global_weight)",
                            "Call"
                        ],
                        [
                            "torch.relu(Mp)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Ux.transpose(1, 2), Uy)",
                            "Call"
                        ],
                        [
                            "Mp",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(total_num_Mp, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "eye_57": {
                "variable": {
                    "value": "diagonal_mat_Mp",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "total_num_Mp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.numel(Mp)",
                            "Call"
                        ]
                    ]
                },
                "m": {
                    "value": "total_num_Mp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.numel(Mp)",
                            "Call"
                        ]
                    ]
                }
            },
            "numel_60": {
                "variable": {
                    "value": "total_num_Me",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Me",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.edge_affinity_layer(edge_feats[0], edge_feats[1], global_weight)",
                            "Call"
                        ],
                        [
                            "torch.relu(Me)",
                            "Call"
                        ],
                        [
                            "torch.matmul(X.transpose(1, 2), weight)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Me, Y)",
                            "Call"
                        ],
                        [
                            "Me",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_61": {
                "variable": {
                    "value": "vec_Me",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Me",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.edge_affinity_layer(edge_feats[0], edge_feats[1], global_weight)",
                            "Call"
                        ],
                        [
                            "torch.relu(Me)",
                            "Call"
                        ],
                        [
                            "torch.matmul(X.transpose(1, 2), weight)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Me, Y)",
                            "Call"
                        ],
                        [
                            "Me",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(total_num_Me, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "eye_62": {
                "variable": {
                    "value": "diagonal_mat_Me",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "total_num_Me",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.numel(Me)",
                            "Call"
                        ]
                    ]
                },
                "m": {
                    "value": "total_num_Me",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.numel(Me)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_65": {
                "variable": {
                    "value": "refactor_Me",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diagonal_mat_Me * vec_Me",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "Kh.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_66": {
                "variable": {
                    "value": "refactor_Me",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Kg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.kron(G2, G1).to(Mp.device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "refactor_Me",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(diagonal_mat_Me * vec_Me, Kh.T)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Kg, refactor_Me)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_86": {
                "variable": {
                    "value": "Mp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Mp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.vertex_affinity_layer(node_feats[0], node_feats[1], global_weight)",
                            "Call"
                        ],
                        [
                            "torch.relu(Mp)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Ux.transpose(1, 2), Uy)",
                            "Call"
                        ],
                        [
                            "Mp",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_90": {
                "variable": {
                    "value": "Me",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Me",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.edge_affinity_layer(edge_feats[0], edge_feats[1], global_weight)",
                            "Call"
                        ],
                        [
                            "torch.relu(Me)",
                            "Call"
                        ],
                        [
                            "torch.matmul(X.transpose(1, 2), weight)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Me, Y)",
                            "Call"
                        ],
                        [
                            "Me",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_120": {
                "variable": {
                    "value": "self.lambda1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "Tensor(self.d, self.d)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_121": {
                "variable": {
                    "value": "self.lambda2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "Tensor(self.d, self.d)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_122": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_136": {
                "tensors": {
                    "value": "(lambda1, lambda2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_138": {
                "variable": {
                    "value": "Me",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((torch.cat((lambda1, lambda2)), torch.cat((lambda2, lambda1))), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_139": {
                "variable": {
                    "value": "Me",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Me",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.edge_affinity_layer(edge_feats[0], edge_feats[1], global_weight)",
                            "Call"
                        ],
                        [
                            "torch.relu(Me)",
                            "Call"
                        ],
                        [
                            "torch.matmul(X.transpose(1, 2), weight)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Me, Y)",
                            "Call"
                        ],
                        [
                            "Me",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_140": {
                "variable": {
                    "value": "Mp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Ux.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "Uy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Uy",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softplus_21": {
                "input": {
                    "value": "aff_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(X * coefficients, Y.transpose(0, 1))",
                            "Call"
                        ],
                        [
                            "F.softplus(aff_mat) - 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "eye_129": {
                "n": {
                    "value": "self.d",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_130": {
                "n": {
                    "value": "self.d",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_137": {
                "tensors": {
                    "value": "(lambda2, lambda1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "models/power_iteration/gm_solver.py": {
        "torch": {
            "ones_29": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "M.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Softmax_53": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_70": {
                "variable": {
                    "value": "s0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(M.shape[-1]).to(M.device)",
                            "Call"
                        ],
                        [
                            "res / torch.linalg.vector_norm(res)",
                            "BinOp"
                        ],
                        [
                            "self.power_iteration(affinity_matrix)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_src, num_dst]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_31": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "M",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(M.shape[-1]).to(M.device)",
                            "Call"
                        ],
                        [
                            "res / torch.linalg.vector_norm(res)",
                            "BinOp"
                        ],
                        [
                            "self.power_iteration(affinity_matrix)",
                            "Call"
                        ]
                    ]
                }
            },
            "all_73": {
                "input": {
                    "value": "s0 >= 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "vector_norm_32": {
                "A": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(M, v)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/sconv_archs.py": {
        "torch": {
            "ModuleList_13": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "index_select_67": {
                "variable": {
                    "value": "vertex_attrs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "graph.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "flat_edges",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph.edge_index.transpose(0, 1).reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_34": {
                "input": {
                    "value": "conv(xs[-1], edge_index, edge_attr)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "train_eval.py": {
        "torch": {
            "MultiStepLR_84": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(opt_params)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "milestones": {
                    "value": "lr_params['lr_milestones']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config.TRAIN.lr_schedule",
                            "Attribute"
                        ]
                    ]
                },
                "gamma": {
                    "value": "lr_params['lr_decay']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config.TRAIN.lr_schedule",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Adam_251": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "opt_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[dict(params=backbone_params, lr=config.TRAIN.LR * 0.01), dict(params=new_params, lr=config.TRAIN.LR)]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "utils/backbone.py": {
        "torch": {
            "Sequential_24": {
                "variable": {
                    "value": "conv_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(model.features.children())",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "node_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*node_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "edge_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*edge_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "variable": {
                    "value": "final_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AdaptiveMaxPool2d_50": {
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "return_indices": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/build_graphs.py": {
        "torch": {
            "zeros_89": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "2 * feat_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_90": {
                "variable": {
                    "value": "X[:, 0:feat_dim, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_91": {
                "variable": {
                    "value": "X[:, feat_dim:2 * feat_dim, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "utils/decorators.py": {
        "torch": {}
    },
    "utils/evaluation_metric.py": {
        "torch": {
            "tensor_14": {
                "variable": {
                    "value": "const",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1e-07",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tp.device",
                            "Attribute"
                        ],
                        [
                            "pmat_pred.device",
                            "Attribute"
                        ],
                        [
                            "pmat_pred_list[0].device",
                            "Attribute"
                        ],
                        [
                            "pmat_pred_list[0].device",
                            "Attribute"
                        ],
                        [
                            "pmat_pred.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "sum_31": {
                "variable": {
                    "value": "tp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pmat_pred * pmat_gt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_32": {
                "variable": {
                    "value": "fp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pmat_pred * (1 - pmat_gt)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_33": {
                "variable": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1 - pmat_pred) * pmat_gt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_39": {
                "variable": {
                    "value": "tp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tp.device",
                            "Attribute"
                        ],
                        [
                            "pmat_pred.device",
                            "Attribute"
                        ],
                        [
                            "pmat_pred_list[0].device",
                            "Attribute"
                        ],
                        [
                            "pmat_pred_list[0].device",
                            "Attribute"
                        ],
                        [
                            "pmat_pred.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_40": {
                "variable": {
                    "value": "fp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tp.device",
                            "Attribute"
                        ],
                        [
                            "pmat_pred.device",
                            "Attribute"
                        ],
                        [
                            "pmat_pred_list[0].device",
                            "Attribute"
                        ],
                        [
                            "pmat_pred_list[0].device",
                            "Attribute"
                        ],
                        [
                            "pmat_pred.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_41": {
                "variable": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tp.device",
                            "Attribute"
                        ],
                        [
                            "pmat_pred.device",
                            "Attribute"
                        ],
                        [
                            "pmat_pred_list[0].device",
                            "Attribute"
                        ],
                        [
                            "pmat_pred_list[0].device",
                            "Attribute"
                        ],
                        [
                            "pmat_pred.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_52": {
                "variable": {
                    "value": "match_num",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tp.device",
                            "Attribute"
                        ],
                        [
                            "pmat_pred.device",
                            "Attribute"
                        ],
                        [
                            "pmat_pred_list[0].device",
                            "Attribute"
                        ],
                        [
                            "pmat_pred_list[0].device",
                            "Attribute"
                        ],
                        [
                            "pmat_pred.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_53": {
                "variable": {
                    "value": "total_num",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tp.device",
                            "Attribute"
                        ],
                        [
                            "pmat_pred.device",
                            "Attribute"
                        ],
                        [
                            "pmat_pred_list[0].device",
                            "Attribute"
                        ],
                        [
                            "pmat_pred_list[0].device",
                            "Attribute"
                        ],
                        [
                            "pmat_pred.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "all_75": {
                "input": {
                    "value": "(pmat_pred == 0) + (pmat_pred == 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "all_76": {
                "input": {
                    "value": "(pmat_gt == 0) + (pmat_gt == 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_88": {
                "input": {
                    "value": "pmat_pred[b] * pmat_gt[b]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_89": {
                "input": {
                    "value": "pmat_gt[b]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "all_77": {
                "input": {
                    "value": "torch.sum(pmat_pred, dim=-2) <= 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_78": {
                "input": {
                    "value": "torch.sum(pmat_gt, dim=-2) <= 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_77": {
                "input": {
                    "value": "pmat_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(pmat_pred_list, pmat_gt_list)",
                            "Call"
                        ],
                        [
                            "zip(pmat_pred_list, pmat_gt_list)",
                            "Call"
                        ],
                        [
                            "pmat_pred",
                            "Method Argument"
                        ],
                        [
                            "pmat_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_78": {
                "input": {
                    "value": "pmat_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pmat_gt.to(device)",
                            "Call"
                        ],
                        [
                            "zip(pmat_pred_list, pmat_gt_list)",
                            "Call"
                        ],
                        [
                            "zip(pmat_pred_list, pmat_gt_list)",
                            "Call"
                        ],
                        [
                            "pmat_gt.to(device)",
                            "Call"
                        ],
                        [
                            "pmat_gt",
                            "Method Argument"
                        ],
                        [
                            "pmat_gt",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils/feature_align.py": {
        "torch": {
            "tensor_20": {
                "variable": {
                    "value": "ori_size_t",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ori_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "raw_feature.device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_29": {
                "variable": {
                    "value": "shifts",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 0], [0, 1], [1, 0], [1, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "raw_feature.device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_30": {
                "variable": {
                    "value": "p_shifted",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p_floor + shift for shift in shifts]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_41": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "raw_feature.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "n_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "P.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "raw_feature.device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_50": {
                "input": {
                    "value": "features * w_exp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/utils.py": {
        "torch": {
            "from_numpy_47": {
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "utils/visualization.py": {
        "torch": {
            "cat_249": {
                "variable": {
                    "value": "merged_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[graph1.x, graph2.x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_273": {
                "variable": {
                    "value": "new_edges",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "edge_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[], []]",
                            "List"
                        ]
                    ]
                },
                "device": {
                    "value": "graph1.edge_index.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_274": {
                "variable": {
                    "value": "true_edges",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "true_edge_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[], []]",
                            "List"
                        ]
                    ]
                },
                "device": {
                    "value": "graph1.edge_index.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}