{
    "net.py": {
        "torch": {
            "spectral_norm_14": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(in_planes, out_planes, kernel_size, stride, padding, groups=groups, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_23": {
                "variable": {
                    "value": "self.bn_normal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "variable": {
                    "value": "self.bn_adversial",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "spectral_norm_40": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(3, 64, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_41": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(64, 64, 4, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_43": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(64, 128, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_44": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(128, 128, 4, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_46": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(128, 256, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_47": {
                "variable": {
                    "value": "self.conv6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(256, 256, 4, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_49": {
                "variable": {
                    "value": "self.conv7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(256, 512, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_51": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_52": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "spectral_norm_53": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(512 * 4 * 4, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_84": {
                "variable": {
                    "value": "self.max_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_85": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "spectral_norm_86": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(512, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_103": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn_adversial(x)",
                            "Call"
                        ],
                        [
                            "self.bn_normal(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.act(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.act(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.act(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "self.act(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "self.act(self.conv5(x))",
                            "Call"
                        ],
                        [
                            "self.act(self.conv6(x))",
                            "Call"
                        ],
                        [
                            "self.act(self.conv7(x))",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv1(x, adversial)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, adversial)",
                            "Call"
                        ],
                        [
                            "self.max_pool(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x, adversial)",
                            "Call"
                        ],
                        [
                            "self.conv4(x, adversial)",
                            "Call"
                        ],
                        [
                            "self.max_pool(x)",
                            "Call"
                        ],
                        [
                            "self.conv5(x, adversial)",
                            "Call"
                        ],
                        [
                            "self.conv6(x, adversial)",
                            "Call"
                        ],
                        [
                            "self.max_pool(x)",
                            "Call"
                        ],
                        [
                            "self.conv7(x, adversial)",
                            "Call"
                        ],
                        [
                            "self.conv8(x, adversial)",
                            "Call"
                        ],
                        [
                            "self.avg_pool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(max(kernel_size) - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "in_features": {
                    "value": "512 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_86": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "sample_replay_buffer.py": {
        "torch": {
            "rand_8": {
                "variable": {
                    "value": "self.buffer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.buffer_length,) + self.data_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_11": {
                "variable": {
                    "value": "self.cpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_12": {
                "variable": {
                    "value": "self.gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "randint_15": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "self.buffer_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "trainer.py": {
        "torch": {
            "DataLoader_24": {
                "variable": {
                    "value": "self.trainloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_34": {
                "variable": {
                    "value": "self.testloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_41": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_44": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "[0.0, 0.999]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "SGD_117": {
                "variable": {
                    "value": "sample_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[sample.requires_grad_()]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.step_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "std_mean_153": {
                "variable": {
                    "value": "(std, mean)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "data['positive_energy']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "std_mean_157": {
                "variable": {
                    "value": "(std, mean)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "data['negative_energy']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "empty_like_127": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_sample()",
                            "Call"
                        ],
                        [
                            "self.get_initial_sample()",
                            "Call"
                        ],
                        [
                            "sample.detach()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_78": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f'./model{epoch}.pt'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "clip_grad_value__124": {
                "parameters": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_sample()",
                            "Call"
                        ],
                        [
                            "self.get_initial_sample()",
                            "Call"
                        ],
                        [
                            "sample.detach()",
                            "Call"
                        ]
                    ]
                },
                "clip_value": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "rand_143": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_144": {
                "*size": {
                    "value": "(self.batch_size,) + self.data_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_123": {
                "input": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(sample)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "std_mean_134": {
                "input": {
                    "value": "sample.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}