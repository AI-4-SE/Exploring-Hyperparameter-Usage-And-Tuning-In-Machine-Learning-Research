{
    "NRoLL/attention_network_def.py": {
        "torch": {
            "norm_14": {
                "variable": {
                    "value": "norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.start_branch[i](x)",
                            "Call"
                        ],
                        [
                            "self.trunk_branch[i](x)",
                            "Call"
                        ],
                        [
                            "self.input_layer(x)",
                            "Call"
                        ],
                        [
                            "self.body(x)",
                            "Call"
                        ],
                        [
                            "self.output_layer(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_22": {
                "variable": {
                    "value": "self.global_avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_26": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "variable": {
                    "value": "self.res_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BatchNorm2d(in_channels)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_75": {
                "variable": {
                    "value": "self.res_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BatchNorm2d(in_channels)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_101": {
                "variable": {
                    "value": "self.res_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channels, out_channels, (3, 3), (1, 1), 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_119": {
                "variable": {
                    "value": "self.max_pool_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_123": {
                "variable": {
                    "value": "self.prev_res_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_182": {
                "variable": {
                    "value": "self.start_branch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_188": {
                "variable": {
                    "value": "self.trunk_branch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_202": {
                "variable": {
                    "value": "self.mask_helper",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(out_channels, out_channels, 1, 1, 0, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_209": {
                "variable": {
                    "value": "self.out_branch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_237": {
                "variable": {
                    "value": "self.input_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channels, 64, 3, 1, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_268": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_269": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Flatten()",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channels, out_channels, (1, 1), stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_73": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channels, out_channels, (1, 1), stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_99": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channels, out_channels, 1, stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_133": {
                "variable": {
                    "value": "self.mid_res_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_137": {
                "variable": {
                    "value": "self.post_res_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_46": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_50": {
                "num_features": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_51": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_52": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "PReLU_53": {
                "num_parameters": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_55": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "BatchNorm2d_75": {
                "num_features": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_76": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_77": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "PReLU_78": {
                "num_parameters": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_80": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "MaxPool2d_97": {
                "variable": {
                    "value": "self.shortcut_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_101": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_102": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ReLU_103": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_104": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_105": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_202": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_203": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ReLU_204": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_205": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_206": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Sigmoid_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_237": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_238": {
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_239": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_270": {
                "in_features": {
                    "value": "512 * input_spatial_dim * input_spatial_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_271": {
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_49": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_74": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_99": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_100": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "MaxPool2d_121": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_128": {
                "*args": {
                    "value": "*tmp_prev_res_block_layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_158": {
                "input": {
                    "value": "cur_layers[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_168": {
                "input": {
                    "value": "cur_layers[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_142": {
                "*args": {
                    "value": "*tmp_post_res_block_layers",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "NRoLL/baseline.py": {
        "torch": {
            "device_41": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_94": {
                "variable": {
                    "value": "data_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lmdb_utils.MultiLMDBDataset_noise(conf.source_lmdb_list, conf.source_file_list, conf.num_class, conf.noise_rate, conf.key)",
                            "Call"
                        ],
                        [
                            "lmdb_utils.MultiLMDBDataset(conf.source_lmdb_list, conf.source_file_list, conf.key)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "conf.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataParallel_97": {
                "variable": {
                    "value": "model1",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "model1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MobileFaceNet(conf.feat_dim)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model1).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_98": {
                "variable": {
                    "value": "fc_net1_w",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(conf.feat_dim, conf.num_class).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_103": {
                "variable": {
                    "value": "optimizer1",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[p for p in model1.parameters() if p.requires_grad]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "conf.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "conf.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "Constant",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MultiStepLR_105": {
                "variable": {
                    "value": "lr_schedule1",
                    "type": "Name",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optim.SGD(parameters1, lr=conf.lr, momentum=conf.momentum, weight_decay=0.0005, nesterov=True)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "conf.milestones",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_entropy_56": {
                "variable": {
                    "value": "loss1",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "pred1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mix_fc(t, feat1_norm, fc_net1_w, label, fc_type=conf.loss_type, margin=0.5, easy_margin=True)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": [
                        [
                            "label.squeeze()",
                            "Call"
                        ],
                        [
                            "label.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_84": {
                "obj": {
                    "value": "{'state_dict': model1.module.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(saved_dir, saved_name1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_71": {
                "obj": {
                    "value": "{'state_dict': model1.module.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(saved_dir, saved_name)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "NRoLL/group_mining.py": {
        "torch": {
            "stack_19": {
                "variable": {
                    "value": "labels_hc_ms",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels_hc_ms",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(labels_hc_ms, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_20": {
                "variable": {
                    "value": "hc_score",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "labels_hc_ms",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(labels_hc_ms, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "nonzero_22": {
                "variable": {
                    "value": "ind_hc",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "(r1 * M < hc_score) & (hc_score <= r2 * M)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "nonzero_23": {
                "variable": {
                    "value": "ind_clean",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "hc_score > r2 * M",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "mean_48": {
                "variable": {
                    "value": "mean_sm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(loss_ms, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_91": {
                "variable": {
                    "value": "model_seq",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "M",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(logit_list)",
                            "Call"
                        ],
                        [
                            "len(logit_list)",
                            "Call"
                        ],
                        [
                            "len(logit_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_11": {
                "variable": {
                    "value": "loss_m",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logit_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argsort_12": {
                "variable": {
                    "value": "ind_sorted_m",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_m",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.cross_entropy(logit_list[i], target, reduction='none')",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(logit_list[i], target, reduction='none')",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(logit_list[i], target, reduction='none')",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_15": {
                "variable": {
                    "value": "labels_hc_m",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "target.size(0)",
                            "Call"
                        ],
                        [
                            "target.size(0)",
                            "Call"
                        ],
                        [
                            "target.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_43": {
                "variable": {
                    "value": "loss_m",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logit_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_entropy_70": {
                "variable": {
                    "value": "loss_m",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logit_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_99": {
                "variable": {
                    "value": "source_m_ind",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(fron_ind, end_ind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_48": {
                "tensors": {
                    "value": "loss_ms",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argsort_49": {
                "input": {
                    "value": "mean_sm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mean(torch.stack(loss_ms, 0), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "argsort_45": {
                "input": {
                    "value": "loss_m",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.cross_entropy(logit_list[i], target, reduction='none')",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(logit_list[i], target, reduction='none')",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(logit_list[i], target, reduction='none')",
                            "Call"
                        ]
                    ]
                }
            },
            "argsort_72": {
                "input": {
                    "value": "loss_m",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.cross_entropy(logit_list[i], target, reduction='none')",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(logit_list[i], target, reduction='none')",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(logit_list[i], target, reduction='none')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "NRoLL/lmdb_utils.py": {
        "torch": {
            "zeros_97": {
                "variable": {
                    "value": "label_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_163": {
                "variable": {
                    "value": "label_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_92": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_158": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "NRoLL/loss.py": {
        "torch": {
            "cross_entropy_7": {
                "variable": {
                    "value": "loss1",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "Name",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argsort_8": {
                "variable": {
                    "value": "ind_1_sorted",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "loss1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.cross_entropy(x1, target, reduction='none')",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_10": {
                "variable": {
                    "value": "loss2",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x2",
                    "type": "Name",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argsort_11": {
                "variable": {
                    "value": "ind_2_sorted",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "loss2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.cross_entropy(x2, target, reduction='none')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "NRoLL/metric.py": {
        "torch": {
            "normalize_20": {
                "variable": {
                    "value": "kernel_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_23": {
                "variable": {
                    "value": "cos_theta",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "mat2": {
                    "value": "kernel_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.normalize(w, dim=0)",
                            "Call"
                        ],
                        [
                            "F.normalize(w, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_77": {
                "variable": {
                    "value": "kernel_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_80": {
                "variable": {
                    "value": "cos_theta",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "mat2": {
                    "value": "kernel_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.normalize(w, dim=0)",
                            "Call"
                        ],
                        [
                            "F.normalize(w, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_42": {
                "variable": {
                    "value": "final_gt",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "gt > margin",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "gt - margin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "gt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cos_theta[torch.arange(0, batch_size), label].view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_44": {
                "variable": {
                    "value": "sin_theta",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0 - torch.pow(gt, 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_47": {
                "variable": {
                    "value": "final_gt",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "gt > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "cos_theta_m",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cos_theta * cos_m - sin_theta * sin_m",
                            "BinOp"
                        ],
                        [
                            "gt * cos_m - sin_theta * sin_m",
                            "BinOp"
                        ],
                        [
                            "torch.where(cos_theta > 0, cos_theta_m, cos_theta)",
                            "Call"
                        ],
                        [
                            "torch.where(cos_theta > threshold, cos_theta_m, cos_theta - mm)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "gt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cos_theta[torch.arange(0, batch_size), label].view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_58": {
                "variable": {
                    "value": "sin_theta",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0 - torch.pow(cos_theta, 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_63": {
                "variable": {
                    "value": "cos_theta_m",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "cos_theta > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "cos_theta_m",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cos_theta * cos_m - sin_theta * sin_m",
                            "BinOp"
                        ],
                        [
                            "gt * cos_m - sin_theta * sin_m",
                            "BinOp"
                        ],
                        [
                            "torch.where(cos_theta > 0, cos_theta_m, cos_theta)",
                            "Call"
                        ],
                        [
                            "torch.where(cos_theta > threshold, cos_theta_m, cos_theta - mm)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "cos_theta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(x, kernel_norm)",
                            "Call"
                        ],
                        [
                            "cos_theta.clamp(-1, 1)",
                            "Call"
                        ],
                        [
                            "cos_theta * scale",
                            "BinOp"
                        ],
                        [
                            "torch.mm(x, kernel_norm)",
                            "Call"
                        ],
                        [
                            "cos_theta.clamp(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_66": {
                "variable": {
                    "value": "cos_theta_m",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "cos_theta > threshold",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "cos_theta_m",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cos_theta * cos_m - sin_theta * sin_m",
                            "BinOp"
                        ],
                        [
                            "gt * cos_m - sin_theta * sin_m",
                            "BinOp"
                        ],
                        [
                            "torch.where(cos_theta > 0, cos_theta_m, cos_theta)",
                            "Call"
                        ],
                        [
                            "torch.where(cos_theta > threshold, cos_theta_m, cos_theta - mm)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "cos_theta - mm",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_44": {
                "input": {
                    "value": "gt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cos_theta[torch.arange(0, batch_size), label].view(-1, 1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_58": {
                "input": {
                    "value": "cos_theta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(x, kernel_norm)",
                            "Call"
                        ],
                        [
                            "cos_theta.clamp(-1, 1)",
                            "Call"
                        ],
                        [
                            "cos_theta * scale",
                            "BinOp"
                        ],
                        [
                            "torch.mm(x, kernel_norm)",
                            "Call"
                        ],
                        [
                            "cos_theta.clamp(-1, 1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_68": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "label.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_38": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "label.size(0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "NRoLL/mobilefacenet.py": {
        "torch": {
            "norm_18": {
                "variable": {
                    "value": "norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.dw_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.blocks(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.linear7(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_27": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inp, inp * expansion, 1, 1, 0, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_59": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "oup",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Parameter_120": {
                "variable": {
                    "value": "self.Parameter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(feat_dim, num_class)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inp",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oup",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": []
                },
                "stride": {
                    "value": "s",
                    "type": "Name",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": []
                },
                "groups": {
                    "value": "inp",
                    "type": "Name",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inp",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oup",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": []
                },
                "stride": {
                    "value": "s",
                    "type": "Name",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "PReLU_61": {
                "variable": {
                    "value": "self.prelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "oup",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Sequential_104": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "inp",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inp * expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_30": {
                "num_features": {
                    "value": "inp * expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "PReLU_31": {
                "num_parameters": {
                    "value": "inp * expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "inp * expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inp * expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "inp * expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "num_features": {
                    "value": "inp * expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "PReLU_36": {
                "num_parameters": {
                    "value": "inp * expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "inp * expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oup",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_40": {
                "num_features": {
                    "value": "oup",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "NRoLL/model.py": {
        "torch": {
            "norm_16": {
                "variable": {
                    "value": "norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "div_17": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": []
                },
                "other": {
                    "value": "norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.norm(input, 2, axis, True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_23": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_c",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_c",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(3",
                            "MethodArgument"
                        ],
                        [
                            "(3",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(2",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(0",
                            "MethodArgument"
                        ],
                        [
                            "(0",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_c",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "PReLU_25": {
                "variable": {
                    "value": "self.prelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "out_c",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_c",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_c",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(3",
                            "MethodArgument"
                        ],
                        [
                            "(3",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(2",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(0",
                            "MethodArgument"
                        ],
                        [
                            "(0",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_36": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_c",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Sequential_67": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_85": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "Name",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_86": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "embedding_size",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "NRoLL/semi_labeling.py": {
        "torch": {
            "device_41": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_175": {
                "variable": {
                    "value": "data_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lmdb_utils.MultiLMDBDataset_noise(conf.source_lmdb_list, conf.source_file_list, conf.num_class, conf.noise_rate, conf.key)",
                            "Call"
                        ],
                        [
                            "lmdb_utils.MultiLMDBDataset(conf.source_lmdb_list, conf.source_file_list, conf.key)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "conf.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MSELoss_193": {
                "variable": {
                    "value": "loss_fn",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_182": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MobileFaceNet(conf.feat_dim)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_183": {
                "variable": {
                    "value": "fc_m",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(conf.feat_dim, conf.num_class).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_188": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "parameter",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[p for p in model.parameters() if p.requires_grad]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "conf.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "conf.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "Constant",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MultiStepLR_197": {
                "variable": {
                    "value": "lr_schedule",
                    "type": "Name",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizers[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "milestones": {
                    "value": "conf.milestones",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_111": {
                "variable": {
                    "value": "loss_clean",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_clean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mix_fc(t, feat_clean_norm, fc_ms[i], label_clean, fc_type=conf.loss_type, margin=0.5, is_am=False)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label_clean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "label[clean_ind]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cross_entropy_120": {
                "variable": {
                    "value": "loss_hc",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_hc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mix_fc(1.0, feat_hc_norm, fc_ms[i], label_hc, fc_type='arcfc', margin=0.5, easy_margin=True)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label_hc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "label[hc_ind]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "save_165": {
                "obj": {
                    "value": "{'state_dict': models[i].module.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(saved_dir, saved_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_152": {
                "obj": {
                    "value": "{'state_dict': models[i].module.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(saved_dir, saved_name)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "NRoLL/semi_train.py": {
        "torch": {
            "device_43": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_246": {
                "variable": {
                    "value": "loader_full",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "full_db",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lmdb_utils.MultiLMDBDataset(conf.source_lmdb_list, conf.source_file_list, conf.key)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "conf.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MSELoss_274": {
                "variable": {
                    "value": "loss_fn",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_218": {
                "variable": {
                    "value": "max_cos",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(lmdb_keys)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_219": {
                "variable": {
                    "value": "pred_label",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(lmdb_keys)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_263": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MobileFaceNet(conf.feat_dim)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_264": {
                "variable": {
                    "value": "fc_m",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(conf.feat_dim, conf.num_class).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_269": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "parameter",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[p for p in model.parameters() if p.requires_grad]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "conf.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "conf.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "Constant",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MultiStepLR_279": {
                "variable": {
                    "value": "lr_schedule",
                    "type": "Name",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizers[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "milestones": {
                    "value": "conf.milestones",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_298": {
                "variable": {
                    "value": "loader_labeled",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db_labeled",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lmdb_utils.MultiLMDBDataset(conf.source_lmdb_list, new_file_list, conf.key)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "conf.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_194": {
                "obj": {
                    "value": "{'state_dict': models[i].module.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(saved_dir, saved_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_224": {
                "variable": {
                    "value": "(pred_max_m, label_max_m)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mix_fc(1.0, feat_norm, fc_ms[i], label.detach(), fc_type='arcfc', margin=0.5, easy_margin=True)",
                            "Call"
                        ],
                        [
                            "cos_value(feat_norm, fc_ms[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_313": {
                "variable": {
                    "value": "loader_unlabeled",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db_unlabeled",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lmdb_utils.MultiLMDBData_semi(conf.source_lmdb_list, conf.source_file_list, indexs_unlabeled[split_id], conf.key)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "conf.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_139": {
                "variable": {
                    "value": "loss_clean",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_clean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mix_fc(t, feat_clean_norm, fc_ms[i], label_clean, fc_type=conf.loss_type, margin=0.5, is_am=False)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label_clean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "label[clean_ind]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cross_entropy_148": {
                "variable": {
                    "value": "loss_hc",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_hc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mix_fc(1.0, feat_hc_norm, fc_ms[i], label_hc, fc_type='arcfc', margin=0.5, easy_margin=True)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label_hc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "label[hc_ind]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "save_180": {
                "obj": {
                    "value": "{'state_dict': models[i].module.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(saved_dir, saved_name)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "NRoLL/test_lfw.py": {
        "torch": {
            "device_325": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_377": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_447": {
                "variable": {
                    "value": "test_data_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "LFWDataset(lfw_filename, lfw_root_dir)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_318": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "image.to(device)",
                            "Call"
                        ],
                        [
                            "image.to(device)",
                            "Call"
                        ],
                        [
                            "load_image(os.path.join(self.lfw_root_dir, filename))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_483": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MobileFaceNet(512)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_326": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_378": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_481": {
                "f": {
                    "value": "model_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(trained_model_dir, model_name)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "NRoLL/train.py": {
        "torch": {
            "device_44": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_196": {
                "variable": {
                    "value": "data_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lmdb_utils.MultiLMDBDataset(conf.source_lmdb_list, conf.source_file_list, conf.key)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "conf.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MSELoss_215": {
                "variable": {
                    "value": "loss_fn",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_204": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MobileFaceNet(conf.feat_dim)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_205": {
                "variable": {
                    "value": "fc_m",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(conf.feat_dim, conf.num_class).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_210": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "parameter",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[p for p in model.parameters() if p.requires_grad]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "conf.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "conf.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "Constant",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MultiStepLR_219": {
                "variable": {
                    "value": "lr_schedule",
                    "type": "Name",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizers[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "milestones": {
                    "value": "conf.milestones",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_132": {
                "variable": {
                    "value": "loss_clean",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_clean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mix_fc(t, feat_clean_norm, fc_ms[i], label_clean, fc_type='arcfc', margin=0.5, is_am=False)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label_clean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "label[clean_ind]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cross_entropy_142": {
                "variable": {
                    "value": "loss_hc",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_hc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mix_fc(1.0, feat_hc_norm, fc_ms[i], label_hc, fc_type=conf.loss_type, margin=0.5, easy_margin=True)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label_hc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "label[hc_ind]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "save_188": {
                "obj": {
                    "value": "{'state_dict': models[i].module.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(saved_dir, saved_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_174": {
                "obj": {
                    "value": "{'state_dict': models[i].module.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(saved_dir, saved_name)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "find_noise/denoise.py": {
        "torch": {
            "from_numpy_28": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_39": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "AttentionNet(3, p, t, r, net_mode, (2, 4, 2))",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "device_41": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_211": {
                "variable": {
                    "value": "denoise_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "denoise_db",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DenoiseLMDBDataset(db_file, filelist_file)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_214": {
                "variable": {
                    "value": "multiFace_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "multiFace_db",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DenoiseLMDBDataset(db_file, multiFaceKey_file)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_38": {
                "f": {
                    "value": "pretrained_model_path",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "find_noise/extract_feat_as_dict.py": {
        "torch": {
            "DataParallel_20": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "AttentionNet(3, p, t, r, net_mode, (2, 4, 2))",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "device_22": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_99": {
                "variable": {
                    "value": "data_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lmdb_utils.SingleLMDBDataset(train_db, train_file, key=None)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_19": {
                "f": {
                    "value": "pretrained_model_path",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "find_noise/find_noise.py": {
        "torch": {
            "DataLoader_104": {
                "variable": {
                    "value": "data_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lmdb_utils.SingleLMDBDataset(train_db, train_file, key=None)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}