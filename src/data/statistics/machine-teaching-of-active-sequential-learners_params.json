{
    "active_learning/example.py": {
        "sklearn": {
            "LogisticRegression_32": {
                "C": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "solver": {
                    "value": "liblinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "fit_intercept": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "active_learning/experiment.py": {
        "sklearn": {
            "scale_133": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.load('data/X_wine.npy')",
                            "Call"
                        ],
                        [
                            "preprocessing.scale(X)",
                            "Call"
                        ],
                        [
                            "np.append(X, np.ones((X.shape[0], 1)), axis=1)",
                            "Call"
                        ],
                        [
                            "teacher_meta['X']",
                            "Subscript"
                        ],
                        [
                            "np.append(X, x_new[np.newaxis, :], axis=0)",
                            "Call"
                        ],
                        [
                            "X0.copy()",
                            "Call"
                        ],
                        [
                            "np.append(X, x_new[np.newaxis, :], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "LogisticRegression_86": {
                "C": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "solver": {
                    "value": "liblinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "fit_intercept": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "multi-armed_bandits/acquisition_functions.py": {
        "torch": {
            "sqrt_19": {
                "variable": {
                    "value": "z_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.diag(x_arms @ w_cov @ x_arms.t())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_21": {
                "variable": {
                    "value": "qj",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "z_mean",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "x_arms @ w_mean",
                            "BinOp"
                        ],
                        [
                            "x_arms @ w_mean",
                            "BinOp"
                        ],
                        [
                            "x_arms @ w_mean",
                            "BinOp"
                        ]
                    ]
                },
                "scale": {
                    "value": "z_std",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sqrt(torch.diag(x_arms @ w_cov @ x_arms.t()))",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_25": {
                "variable": {
                    "value": "j",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qj + torch.randn(qj.size(0), dtype=qj.dtype) * 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cholesky_42": {
                "variable": {
                    "value": "z_chol",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_cov",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x_arms @ w_cov @ x_arms.t() + torch.diag(1e-06 * x_arms.new_ones(N))",
                            "BinOp"
                        ]
                    ]
                },
                "upper": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_48": {
                "variable": {
                    "value": "qj",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z_chol @ torch.randn(z_mean.numel(), dtype=z_mean.dtype) + z_mean",
                            "BinOp"
                        ]
                    ]
                }
            },
            "argmax_57": {
                "variable": {
                    "value": "j",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_mean",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "x_arms @ w_mean",
                            "BinOp"
                        ],
                        [
                            "x_arms @ w_mean",
                            "BinOp"
                        ],
                        [
                            "x_arms @ w_mean",
                            "BinOp"
                        ]
                    ]
                }
            },
            "diag_19": {
                "input": {
                    "value": "x_arms @ w_cov @ x_arms.t()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "any_22": {
                "input": {
                    "value": "torch.isnan(qj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_41": {
                "input": {
                    "value": "1e-06 * x_arms.new_ones(N)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "isnan_22": {
                "input": {
                    "value": "qj",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.distributions.Normal(z_mean, z_std).icdf(qa)",
                            "Call"
                        ],
                        [
                            "torch.argmax(z)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_44": {
                "*size": {
                    "value": "z_mean.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "z_mean.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_25": {
                "*size": {
                    "value": "qj.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "qj.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "multi-armed_bandits/dependent_arms_bandits.py": {
        "torch": {
            "zeros_31": {
                "variable": {
                    "value": "draws",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_horizon",
                    "type": "Name",
                    "possible_values": [
                        [
                            "task_params['n_horizon']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_32": {
                "variable": {
                    "value": "a0s",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_horizon",
                    "type": "Name",
                    "possible_values": [
                        [
                            "task_params['n_horizon']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_33": {
                "variable": {
                    "value": "a1s",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_horizon",
                    "type": "Name",
                    "possible_values": [
                        [
                            "task_params['n_horizon']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_37": {
                "variable": {
                    "value": "direct_feedbacks",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_horizon",
                    "type": "Name",
                    "possible_values": [
                        [
                            "task_params['n_horizon']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_68": {
                "variable": {
                    "value": "w_mean_series",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(n_horizon, data['M'])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_75": {
                "variable": {
                    "value": "w_covar_series",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(n_horizon, data['M'], data['M'])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "bernoulli_127": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reward_prob[j]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_156": {
                "variable": {
                    "value": "P_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "P",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "argmax_236": {
                "input": {
                    "value": "reward_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "task_params['reward_probs']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "diag_111": {
                "input": {
                    "value": "w_cov",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lrf['w_chol'] @ lrf['w_chol'].t()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_205": {
                "input": {
                    "value": "x_arms @ w_mean_series[t, :].double()",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "multi-armed_bandits/logistic_regression_mla_pyro.py": {
        "torch": {
            "no_grad_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_41": {
                "variable": {
                    "value": "i0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P[i][inds_0,] @ logits",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_42": {
                "variable": {
                    "value": "i1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P[i][inds_1,] @ logits",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_70": {
                "*size": {
                    "value": "latent_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data['M']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_21": {
                "*size": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "multi-armed_bandits/logistic_regression_pyro.py": {
        "torch": {
            "any_86": {
                "input": {
                    "value": "torch.isnan(res['w_chol'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "any_87": {
                "input": {
                    "value": "torch.isnan(res['w_mean'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_52": {
                "*size": {
                    "value": "latent_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data['M']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isnan_86": {
                "input": {
                    "value": "res['w_chol']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "isnan_87": {
                "input": {
                    "value": "res['w_mean']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_21": {
                "*size": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "multi-armed_bandits/mixture_type_logistic_regression_pyro.py": {
        "torch": {
            "zeros_184": {
                "variable": {
                    "value": "initvec",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "latent_dim",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "w_dim + 1",
                            "BinOp"
                        ],
                        [
                            "w_dim + 1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_241": {
                "variable": {
                    "value": "initvec",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "latent_dim",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "w_dim + 1",
                            "BinOp"
                        ],
                        [
                            "w_dim + 1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_32": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_33": {
                "variable": {
                    "value": "probs_a0_vs_a1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.logits_a0",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_44": {
                "variable": {
                    "value": "log_alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log1p_45": {
                "variable": {
                    "value": "log_1malpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-self.alpha",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log1p_12": {
                "input": {
                    "value": "torch.exp(val2 - val1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "any_220": {
                "input": {
                    "value": "torch.isnan(res['w_chol'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "any_221": {
                "input": {
                    "value": "torch.isnan(res['w_mean'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isnan_222": {
                "input": {
                    "value": "res['alpha_latent']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "any_279": {
                "input": {
                    "value": "torch.isnan(res['w_chol'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "any_280": {
                "input": {
                    "value": "torch.isnan(res['w_mean'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isnan_281": {
                "input": {
                    "value": "res['alpha_latent']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_12": {
                "input": {
                    "value": "val2 - val1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bernoulli_36": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_47": {
                "input": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "target": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_51": {
                "input": {
                    "value": "self.logits_a0_vs_a1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "target": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log1p_56": {
                "input": {
                    "value": "torch.exp(B - A)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_82": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_103": {
                "variable": {
                    "value": "i0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P[i][inds_0,] @ logits_tmp",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_104": {
                "variable": {
                    "value": "i1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P[i][inds_1,] @ logits_tmp",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_145": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isnan_220": {
                "input": {
                    "value": "res['w_chol']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "isnan_221": {
                "input": {
                    "value": "res['w_mean']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "isnan_279": {
                "input": {
                    "value": "res['w_chol']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "isnan_280": {
                "input": {
                    "value": "res['w_mean']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "bernoulli_38": {
                "variable": {
                    "value": "res[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "probs[n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "bernoulli_40": {
                "variable": {
                    "value": "res[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "probs_a0_vs_a1[n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_56": {
                "input": {
                    "value": "B - A",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_77": {
                "*size": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_140": {
                "*size": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "multi-armed_bandits/target_sim.py": {
        "torch": {
            "zeros_96": {
                "variable": {
                    "value": "rewards",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_methods",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(methods)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "n_reps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(arguments[2])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_97": {
                "variable": {
                    "value": "tbae",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_methods",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(methods)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "n_reps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(arguments[2])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_98": {
                "variable": {
                    "value": "fpma",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_methods",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(methods)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "n_reps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(arguments[2])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_100": {
                "variable": {
                    "value": "draws",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_methods",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(methods)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "n_reps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(arguments[2])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_101": {
                "variable": {
                    "value": "user_actions",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_methods",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(methods)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "n_reps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(arguments[2])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_102": {
                "variable": {
                    "value": "x_arms_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_reps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(arguments[2])",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "n_customers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(arguments[1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dim_customers",
                            "Name"
                        ]
                    ]
                }
            },
            "zeros_103": {
                "variable": {
                    "value": "reward_prob_matrix_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_reps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(arguments[2])",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "n_customers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(arguments[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_26": {
                "seed": {
                    "value": "42",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_115": {
                "variable": {
                    "value": "reward_prob_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "expit(X_n_i_rep @ w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_116": {
                "variable": {
                    "value": "x_arms",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X_n_i_rep",
                    "type": "Name",
                    "possible_values": [
                        [
                            "X_n_i[idx, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "nonzero_155": {
                "variable": {
                    "value": "draws_of_best_arm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "draws[i, rep, :] == target",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "min_157": {
                "input": {
                    "value": "draws_of_best_arm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.nonzero(draws[i, rep, :] == target)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "multi-armed_bandits/target_sim_mla.py": {
        "torch": {
            "zeros_85": {
                "variable": {
                    "value": "rewards",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_methods",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(methods)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "n_reps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(arguments[2])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_86": {
                "variable": {
                    "value": "tbae",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_methods",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(methods)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "n_reps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(arguments[2])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_87": {
                "variable": {
                    "value": "fpma",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_methods",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(methods)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "n_reps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(arguments[2])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_89": {
                "variable": {
                    "value": "draws",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_methods",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(methods)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "n_reps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(arguments[2])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_90": {
                "variable": {
                    "value": "user_actions",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_methods",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(methods)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "n_reps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(arguments[2])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_91": {
                "variable": {
                    "value": "x_arms_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_reps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(arguments[2])",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "n_customers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(arguments[1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dim_customers",
                            "Name"
                        ]
                    ]
                }
            },
            "zeros_92": {
                "variable": {
                    "value": "reward_prob_matrix_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_reps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(arguments[2])",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "n_customers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(arguments[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_24": {
                "seed": {
                    "value": "42",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_104": {
                "variable": {
                    "value": "reward_prob_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "expit(X_n_i_rep @ w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_105": {
                "variable": {
                    "value": "x_arms",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X_n_i_rep",
                    "type": "Name",
                    "possible_values": [
                        [
                            "X_n_i[idx, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "nonzero_151": {
                "variable": {
                    "value": "draws_of_best_arm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "draws[i, rep, :] == target",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "from_numpy_126": {
                "ndarray": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "d_w * X_n_i_rep[target, :]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "min_153": {
                "input": {
                    "value": "draws_of_best_arm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.nonzero(draws[i, rep, :] == target)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "multi-armed_bandits/thompson_sampling_probabilities.py": {
        "torch": {
            "max_16": {
                "variable": {
                    "value": "(x_max, inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "L @ torch.randn(M, n_samples, dtype=dtype) + m.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "L @ torch.randn(M, n_samples, dtype=dtype) + m.unsqueeze(1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_18": {
                "variable": {
                    "value": "(x_2ndmax, inds_2nd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "L @ torch.randn(M, n_samples, dtype=dtype) + m.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "L @ torch.randn(M, n_samples, dtype=dtype) + m.unsqueeze(1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cholesky_inverse_26": {
                "variable": {
                    "value": "Lambda",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": []
                },
                "upper": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cholesky_solve_27": {
                "variable": {
                    "value": "eta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m.view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "input2": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": []
                },
                "upper": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_58": {
                "variable": {
                    "value": "inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "L @ torch.randn(M, n_samples, dtype=dtype) + m.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "L @ torch.randn(M, n_samples, dtype=dtype) + m.unsqueeze(1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_60": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_15": {
                "*size": {
                    "value": "M",
                    "type": "Call",
                    "possible_values": [
                        [
                            "m.numel()",
                            "Call"
                        ],
                        [
                            "m.numel()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "n_samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "m.dtype",
                            "Attribute"
                        ],
                        [
                            "m.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "randn_57": {
                "*size": {
                    "value": "M",
                    "type": "Call",
                    "possible_values": [
                        [
                            "m.numel()",
                            "Call"
                        ],
                        [
                            "m.numel()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "n_samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "m.dtype",
                            "Attribute"
                        ],
                        [
                            "m.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "erf_41": {
                "input": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x_max - m_cond) / (2.0 * s2_cond).sqrt().unsqueeze(1)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "multi-armed_bandits/user_models.py": {
        "torch": {
            "cat_37": {
                "variable": {
                    "value": "data[x]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(data['x'], x_arms[arm:arm + 1,])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_38": {
                "variable": {
                    "value": "data[y]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(data['y'], data['y'].new_zeros(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_94": {
                "variable": {
                    "value": "data[x]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(data['x'], x_arms[arm:arm + 1,])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "data[y]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(data['y'], data['y'].new_zeros(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bernoulli_117": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_a1_vs_a0_",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "1.0 / (1.0 + torch.exp(a1_vs_a0_))",
                            "BinOp"
                        ],
                        [
                            "1.0 / (1.0 + torch.exp(a1_vs_a0_))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_138": {
                "variable": {
                    "value": "data[x]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(data['x'], x_arms[arm:arm + 1,])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_139": {
                "variable": {
                    "value": "data[y]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(data['y'], data['y'].new_zeros(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bernoulli_161": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_a1_vs_a0_",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "1.0 / (1.0 + torch.exp(a1_vs_a0_))",
                            "BinOp"
                        ],
                        [
                            "1.0 / (1.0 + torch.exp(a1_vs_a0_))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_283": {
                "variable": {
                    "value": "q_val0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P[inds_0,] @ logits",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_284": {
                "variable": {
                    "value": "q_val1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P[inds_1,] @ logits",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bernoulli_288": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_a1_vs_a0",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "1.0 / (1.0 + (reward_probs[a0] * (1 - reward_probs[a1]) / (reward_probs[a1] * (1 - reward_probs[a0]))) ** beta)",
                            "BinOp"
                        ],
                        [
                            "1.0 / (1.0 + torch.exp(a1_vs_a0))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "bernoulli_73": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_a1_vs_a0",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "1.0 / (1.0 + (reward_probs[a0] * (1 - reward_probs[a1]) / (reward_probs[a1] * (1 - reward_probs[a0]))) ** beta)",
                            "BinOp"
                        ],
                        [
                            "1.0 / (1.0 + torch.exp(a1_vs_a0))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_223": {
                "variable": {
                    "value": "data_0[x]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(data_0['x'], x_arm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_224": {
                "variable": {
                    "value": "data_1[x]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(data_1['x'], x_arm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_226": {
                "variable": {
                    "value": "data_0[y]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(data_0['y'], data_0['y'].new_zeros(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_227": {
                "variable": {
                    "value": "data_1[y]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(data_1['y'], data_1['y'].new_ones(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_112": {
                "input": {
                    "value": "reward_probs / (1 - reward_probs)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_113": {
                "input": {
                    "value": "reward_probs / (1 - reward_probs)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_156": {
                "input": {
                    "value": "reward_probs / (1 - reward_probs)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_157": {
                "input": {
                    "value": "reward_probs / (1 - reward_probs)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_115": {
                "input": {
                    "value": "a1_vs_a0_",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "beta * (r_a0 - r_a1)",
                            "BinOp"
                        ],
                        [
                            "beta * (r_a0 - r_a1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_159": {
                "input": {
                    "value": "a1_vs_a0_",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "beta * (r_a0 - r_a1)",
                            "BinOp"
                        ],
                        [
                            "beta * (r_a0 - r_a1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_287": {
                "input": {
                    "value": "a1_vs_a0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "beta * (q_val0 - q_val1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_258": {
                "tensors": {
                    "value": "(p_a0 + expand_lookahead(ave_arm_a0, data_0, inds_0, task_params, lr_fit0), p_a1 + expand_lookahead(ave_arm_a1, data_1, inds_1, task_params, lr_fit1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_273": {
                "tensors": {
                    "value": "(p_a0, p_a1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "multi-armed_bandits/user_models_mix_obs.py": {
        "torch": {
            "cat_21": {
                "variable": {
                    "value": "data[x]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(data['x'], x_arms[arm:arm + 1,])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_22": {
                "variable": {
                    "value": "data[y]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(data['y'], data['y'].new_zeros(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bernoulli_44": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_a1_vs_a0",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "1.0 / (1.0 + torch.exp(a1_vs_a0))",
                            "BinOp"
                        ],
                        [
                            "1.0 / (1.0 + torch.exp(a1_vs_a0))",
                            "BinOp"
                        ],
                        [
                            "1.0 / (1.0 + torch.exp(a1_vs_a0))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_66": {
                "variable": {
                    "value": "data[x]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(data['x'], x_arms[arm:arm + 1,])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "data[y]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(data['y'], data['y'].new_zeros(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bernoulli_88": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_a1_vs_a0",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "1.0 / (1.0 + torch.exp(a1_vs_a0))",
                            "BinOp"
                        ],
                        [
                            "1.0 / (1.0 + torch.exp(a1_vs_a0))",
                            "BinOp"
                        ],
                        [
                            "1.0 / (1.0 + torch.exp(a1_vs_a0))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_179": {
                "variable": {
                    "value": "q_val0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P[inds_0,] @ logits",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_180": {
                "variable": {
                    "value": "q_val1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P[inds_1,] @ logits",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bernoulli_184": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_a1_vs_a0",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "1.0 / (1.0 + torch.exp(a1_vs_a0))",
                            "BinOp"
                        ],
                        [
                            "1.0 / (1.0 + torch.exp(a1_vs_a0))",
                            "BinOp"
                        ],
                        [
                            "1.0 / (1.0 + torch.exp(a1_vs_a0))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_119": {
                "variable": {
                    "value": "data_0[x]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(data_0['x'], x_arm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_120": {
                "variable": {
                    "value": "data_1[x]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(data_1['x'], x_arm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_122": {
                "variable": {
                    "value": "data_0[y]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(data_0['y'], data_0['y'].new_zeros(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_123": {
                "variable": {
                    "value": "data_1[y]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(data_1['y'], data_1['y'].new_ones(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_39": {
                "input": {
                    "value": "reward_probs",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "task_params['reward_probs']",
                            "Subscript"
                        ],
                        [
                            "task_params['reward_probs']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log1p_39": {
                "input": {
                    "value": "-reward_probs",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_83": {
                "input": {
                    "value": "reward_probs",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "task_params['reward_probs']",
                            "Subscript"
                        ],
                        [
                            "task_params['reward_probs']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log1p_83": {
                "input": {
                    "value": "-reward_probs",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_43": {
                "input": {
                    "value": "a1_vs_a0",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "beta * (r_a0 - r_a1)",
                            "BinOp"
                        ],
                        [
                            "beta * (r_a0 - r_a1)",
                            "BinOp"
                        ],
                        [
                            "beta * (q_val0 - q_val1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_87": {
                "input": {
                    "value": "a1_vs_a0",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "beta * (r_a0 - r_a1)",
                            "BinOp"
                        ],
                        [
                            "beta * (r_a0 - r_a1)",
                            "BinOp"
                        ],
                        [
                            "beta * (q_val0 - q_val1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_183": {
                "input": {
                    "value": "a1_vs_a0",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "beta * (r_a0 - r_a1)",
                            "BinOp"
                        ],
                        [
                            "beta * (r_a0 - r_a1)",
                            "BinOp"
                        ],
                        [
                            "beta * (q_val0 - q_val1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_154": {
                "tensors": {
                    "value": "(p_a0 + expand_lookahead(ave_arm_a0, data_0, inds_0, task_params, depth + 1, lr_fit0), p_a1 + expand_lookahead(ave_arm_a1, data_1, inds_1, task_params, depth + 1, lr_fit1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_169": {
                "tensors": {
                    "value": "(p_a0, p_a1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "multi-armed_bandits/user_study.py": {
        "torch": {
            "zeros_71": {
                "variable": {
                    "value": "rewards",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_methods",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(methods)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "n_targets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(target_words)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_72": {
                "variable": {
                    "value": "draws",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_methods",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(methods)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "n_targets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(target_words)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_73": {
                "variable": {
                    "value": "user_actions",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_methods",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(methods)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "n_targets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(target_words)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_75": {
                "variable": {
                    "value": "fpma",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_methods",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(methods)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "n_targets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(target_words)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_18": {
                "seed": {
                    "value": "42",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_110": {
                "variable": {
                    "value": "reward_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "reward_prob_matrix[best_arm, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clamp_111": {
                "variable": {
                    "value": "reward_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reward_prob",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.from_numpy(reward_prob_matrix[best_arm, :])",
                            "Call"
                        ],
                        [
                            "torch.clamp(reward_prob, max=0.9999, min=0.0001)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "0.9999",
                    "type": "Constant",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_139": {
                "variable": {
                    "value": "x_arms",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.load('word_search_study/data_rbf_small.npy')",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_173": {
                "variable": {
                    "value": "draws_of_best_arm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "draws[i, target, :] == best_arm",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "min_175": {
                "variable": {
                    "value": "fpma[i, target]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "draws_of_best_arm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.nonzero(draws[i, target, :] == best_arm)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}