{
    "Represented_Value_Function_MARL/examples/battle_model/adjacency_matrix.py": {
        "sklearn": {
            "KDTree_13": {
                "variable": {
                    "value": "tree",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "position_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(position)",
                            "Call"
                        ]
                    ]
                },
                "leaf_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Represented_Value_Function_MARL/battle.py": {
        "tensorflow": {
            "ConfigProto_38": {
                "variable": {
                    "value": "tf_config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_61": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True, log_device_placement=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Represented_Value_Function_MARL/battle_ELO_single.py": {
        "tensorflow": {
            "ConfigProto_36": {
                "variable": {
                    "value": "tf_config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_39": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True, log_device_placement=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Represented_Value_Function_MARL/examples/battle_model/algo/ac.py": {
        "tensorflow": {
            "placeholder_51": {
                "variable": {
                    "value": "input_view",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + view_space",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_52": {
                "variable": {
                    "value": "input_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + feature_space",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_53": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_55": {
                "variable": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_60": {
                "variable": {
                    "value": "flatten_view",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_view",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None,) + view_space)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (None,) + view_space)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, np.prod([v.value for v in input_view.shape[1:]])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_61": {
                "variable": {
                    "value": "h_view",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "flatten_view",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_view, [-1, np.prod([v.value for v in input_view.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_view, [-1, np.prod([v.value for v in input_view.shape[1:]])])",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_size[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[256]",
                            "List"
                        ],
                        [
                            "[256]",
                            "List"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_63": {
                "variable": {
                    "value": "h_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None,) + feature_space)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (None,) + feature_space)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_size[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[256]",
                            "List"
                        ],
                        [
                            "[256]",
                            "List"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_65": {
                "variable": {
                    "value": "dense",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[h_view, h_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_66": {
                "variable": {
                    "value": "dense",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dense",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([h_view, h_emb], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dense, units=hidden_size[0] * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(concat_layer, units=hidden_size[0] * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(concat_layer, units=hidden_size[0], activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_size[0] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_68": {
                "variable": {
                    "value": "policy",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dense / 0.1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "units": {
                    "value": "self.num_actions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.softmax",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_69": {
                "variable": {
                    "value": "policy",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "policy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(dense / 0.1, units=self.num_actions, activation=tf.nn.softmax)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(policy, 1e-10, 1 - 1e-10)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dense / 0.1, units=self.num_actions, activation=tf.nn.softmax)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(policy, 1e-10, 1 - 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1 - 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multinomial_71": {
                "variable": {
                    "value": "self.calc_action",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.log(policy)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_73": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dense",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([h_view, h_emb], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dense, units=hidden_size[0] * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(concat_layer, units=hidden_size[0] * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(concat_layer, units=hidden_size[0], activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_74": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(dense, units=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(value, (-1,))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dense, units=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(value, (-1,))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "one_hot_76": {
                "variable": {
                    "value": "action_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sess.run(self.calc_action, {self.input_view: kwargs['state'][0], self.input_feature: kwargs['state'][1]})",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.int32, [None])",
                            "Call"
                        ],
                        [
                            "self.action_buf",
                            "Attribute"
                        ],
                        [
                            "self.sess.run(self.calc_action, {self.input_view: kwargs['state'][0], self.input_feature: kwargs['state'][1]})",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.int32, [None])",
                            "Call"
                        ],
                        [
                            "self.action_buf",
                            "Attribute"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.num_actions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_77": {
                "variable": {
                    "value": "advantage",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reward - value",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_79": {
                "variable": {
                    "value": "log_policy",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "policy + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_80": {
                "variable": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "log_policy * action_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdamOptimizer_88": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_90": {
                "variable": {
                    "value": "(gradients, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*optimizer.compute_gradients(total_loss))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_global_norm(gradients, 5.0)",
                            "Call"
                        ],
                        [
                            "zip(*optimizer.compute_gradients(total_loss))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_global_norm(gradients, 5.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AdamOptimizer_93": {
                "variable": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_160": {
                "variable": {
                    "value": "model_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_161": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "model_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name_scope)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name_scope)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name_scope)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name_scope)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_169": {
                "variable": {
                    "value": "model_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_170": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "model_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name_scope)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name_scope)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name_scope)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name_scope)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_222": {
                "variable": {
                    "value": "input_view",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + view_space",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_223": {
                "variable": {
                    "value": "input_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + feature_space",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_224": {
                "variable": {
                    "value": "input_act_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, self.num_actions)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_225": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_227": {
                "variable": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_232": {
                "variable": {
                    "value": "flatten_view",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_view",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None,) + view_space)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (None,) + view_space)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, np.prod([v.value for v in input_view.shape[1:]])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_233": {
                "variable": {
                    "value": "h_view",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "flatten_view",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_view, [-1, np.prod([v.value for v in input_view.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_view, [-1, np.prod([v.value for v in input_view.shape[1:]])])",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_size[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[256]",
                            "List"
                        ],
                        [
                            "[256]",
                            "List"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_235": {
                "variable": {
                    "value": "h_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None,) + feature_space)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (None,) + feature_space)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_size[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[256]",
                            "List"
                        ],
                        [
                            "[256]",
                            "List"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_237": {
                "variable": {
                    "value": "concat_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[h_view, h_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_238": {
                "variable": {
                    "value": "dense",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "concat_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([h_view, h_emb], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([concat_layer, dense_prob], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_size[0] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_240": {
                "variable": {
                    "value": "policy",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dense / 0.1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "units": {
                    "value": "self.num_actions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.softmax",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_241": {
                "variable": {
                    "value": "policy",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "policy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(dense / 0.1, units=self.num_actions, activation=tf.nn.softmax)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(policy, 1e-10, 1 - 1e-10)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dense / 0.1, units=self.num_actions, activation=tf.nn.softmax)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(policy, 1e-10, 1 - 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1 - 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multinomial_243": {
                "variable": {
                    "value": "self.calc_action",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.log(policy)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_246": {
                "variable": {
                    "value": "emb_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input_act_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None, self.num_actions))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_247": {
                "variable": {
                    "value": "dense_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "emb_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(input_act_prob, units=64, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_248": {
                "variable": {
                    "value": "concat_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[concat_layer, dense_prob]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_249": {
                "variable": {
                    "value": "dense",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "concat_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([h_view, h_emb], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([concat_layer, dense_prob], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_size[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[256]",
                            "List"
                        ],
                        [
                            "[256]",
                            "List"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_250": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dense",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([h_view, h_emb], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dense, units=hidden_size[0] * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(concat_layer, units=hidden_size[0] * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(concat_layer, units=hidden_size[0], activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_251": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(dense, units=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(value, (-1,))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dense, units=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(value, (-1,))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "one_hot_253": {
                "variable": {
                    "value": "action_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sess.run(self.calc_action, {self.input_view: kwargs['state'][0], self.input_feature: kwargs['state'][1]})",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.int32, [None])",
                            "Call"
                        ],
                        [
                            "self.action_buf",
                            "Attribute"
                        ],
                        [
                            "self.sess.run(self.calc_action, {self.input_view: kwargs['state'][0], self.input_feature: kwargs['state'][1]})",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.int32, [None])",
                            "Call"
                        ],
                        [
                            "self.action_buf",
                            "Attribute"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.num_actions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_254": {
                "variable": {
                    "value": "advantage",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reward - value",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_256": {
                "variable": {
                    "value": "log_policy",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "policy + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_257": {
                "variable": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "log_policy * action_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdamOptimizer_265": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_267": {
                "variable": {
                    "value": "(gradients, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*optimizer.compute_gradients(total_loss))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_global_norm(gradients, 5.0)",
                            "Call"
                        ],
                        [
                            "zip(*optimizer.compute_gradients(total_loss))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_global_norm(gradients, 5.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AdamOptimizer_270": {
                "variable": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_346": {
                "variable": {
                    "value": "model_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_347": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "model_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name_scope)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name_scope)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name_scope)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name_scope)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_355": {
                "variable": {
                    "value": "model_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_356": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "model_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name_scope)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name_scope)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name_scope)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name_scope)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_38": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_208": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_32": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_71": {
                "x": {
                    "value": "policy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(dense / 0.1, units=self.num_actions, activation=tf.nn.softmax)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(policy, 1e-10, 1 - 1e-10)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dense / 0.1, units=self.num_actions, activation=tf.nn.softmax)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(policy, 1e-10, 1 - 1e-10)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_82": {
                "input_tensor": {
                    "value": "advantage * log_prob",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_83": {
                "input_tensor": {
                    "value": "tf.square(reward - value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_84": {
                "input_tensor": {
                    "value": "tf.reduce_sum(policy * log_policy, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_202": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_243": {
                "x": {
                    "value": "policy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(dense / 0.1, units=self.num_actions, activation=tf.nn.softmax)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(policy, 1e-10, 1 - 1e-10)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dense / 0.1, units=self.num_actions, activation=tf.nn.softmax)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(policy, 1e-10, 1 - 1e-10)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_259": {
                "input_tensor": {
                    "value": "advantage * log_prob",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_260": {
                "input_tensor": {
                    "value": "tf.square(reward - value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_261": {
                "input_tensor": {
                    "value": "tf.reduce_sum(policy * log_policy, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_83": {
                "x": {
                    "value": "reward - value",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_84": {
                "input_tensor": {
                    "value": "policy * log_policy",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_scope_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_260": {
                "x": {
                    "value": "reward - value",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_261": {
                "input_tensor": {
                    "value": "policy * log_policy",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Represented_Value_Function_MARL/examples/battle_model/algo/ac_gradient.py": {
        "tensorflow": {
            "placeholder_77": {
                "variable": {
                    "value": "self.input_view",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + view_space",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_78": {
                "variable": {
                    "value": "self.input_feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + feature_space",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_79": {
                "variable": {
                    "value": "self.input_W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_80": {
                "variable": {
                    "value": "self.input_act_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, self.num_actions)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_81": {
                "variable": {
                    "value": "self.input_act_prob_all",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, self.num_actions)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_82": {
                "variable": {
                    "value": "self.reward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_83": {
                "variable": {
                    "value": "self.reward_next",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_84": {
                "variable": {
                    "value": "self.reward_original",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_85": {
                "variable": {
                    "value": "self.action",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_86": {
                "variable": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_87": {
                "variable": {
                    "value": "self.N_neighbor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_101": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_view",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input_view",
                            "Attribute"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_102": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(input_view, filters=32, kernel_size=3, activation=tf.nn.relu, name='Conv1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Conv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_103": {
                "variable": {
                    "value": "flatten_obs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv1, filters=32, kernel_size=3, activation=tf.nn.relu, name='Conv2')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, np.prod([v.value for v in conv2.shape[1:]])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_104": {
                "variable": {
                    "value": "h_view",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "flatten_obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(conv2, [-1, np.prod([v.value for v in conv2.shape[1:]])])",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Dense-Obs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_112": {
                "variable": {
                    "value": "h_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input_feature",
                            "Attribute"
                        ]
                    ]
                },
                "units": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_114": {
                "variable": {
                    "value": "concat_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[h_view, h_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_174": {
                "variable": {
                    "value": "emb_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "graph_attention_out_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_act_prob",
                            "variable"
                        ],
                        [
                            "tf.matmul(graph_attention_coefs, input_act_prob_all)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_175": {
                "variable": {
                    "value": "dense_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "emb_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(graph_attention_out_t, units=64, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_normalize_176": {
                "variable": {
                    "value": "dense_prob_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dense_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(emb_prob, units=32, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "l2_normalize_177": {
                "variable": {
                    "value": "graph_attention_fea_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "graph_attention_fea",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "concat_178": {
                "variable": {
                    "value": "graph_attention_out_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[graph_attention_fea_norm, dense_prob_norm]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_180": {
                "variable": {
                    "value": "concat_layer_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "concat_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([h_view, h_emb], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "concat_181": {
                "variable": {
                    "value": "concat_layer_out2_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[concat_layer_norm, input_act_prob_all]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_183": {
                "variable": {
                    "value": "concat_layer3",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[concat_layer_out2_norm, graph_attention_out_norm]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_185": {
                "variable": {
                    "value": "dense",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "concat_layer3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([concat_layer_out2_norm, graph_attention_out_norm], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_size[0] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_186": {
                "variable": {
                    "value": "policy",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dense / 0.1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "units": {
                    "value": "self.num_actions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.softmax",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_187": {
                "variable": {
                    "value": "policy",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "policy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(dense / 0.1, units=self.num_actions, activation=tf.nn.softmax)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(policy, 1e-10, 1 - 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1 - 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multinomial_189": {
                "variable": {
                    "value": "self.calc_action",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.log(policy)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_192": {
                "variable": {
                    "value": "dense",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "concat_layer3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([concat_layer_out2_norm, graph_attention_out_norm], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_size[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[256]",
                            "List"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_193": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dense",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(concat_layer3, units=hidden_size[0] * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(concat_layer3, units=hidden_size[0], activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_194": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(dense, units=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(value, (-1,))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "one_hot_197": {
                "variable": {
                    "value": "action_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sess.run(self.calc_action, {self.input_view: kwargs['state'][0], self.input_feature: kwargs['state'][1], self.input_act_prob_all: kwargs['prob'], self.input_W: kwargs['W']})",
                            "Call"
                        ],
                        [
                            "self.action",
                            "Attribute"
                        ],
                        [
                            "self.action_buf",
                            "Attribute"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.num_actions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_198": {
                "variable": {
                    "value": "advantage",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reward - value",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_199": {
                "variable": {
                    "value": "log_policy",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "policy + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_200": {
                "variable": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "log_policy * action_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_collection_404": {
                "variable": {
                    "value": "model_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_405": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "model_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name_scope)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name_scope)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_413": {
                "variable": {
                    "value": "model_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_414": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "model_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name_scope)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name_scope)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_49": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_61": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_134": {
                "variable": {
                    "value": "concat_layer_out1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[concat_layer, input_act_prob_all]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_140": {
                "variable": {
                    "value": "h_1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "attns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_165": {
                "variable": {
                    "value": "graph_attention_out_t",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "graph_attention_coefs",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "input_act_prob_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input_act_prob_all",
                            "Attribute"
                        ]
                    ]
                }
            },
            "variable_scope_45": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_150": {
                "variable": {
                    "value": "h_1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "attns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_189": {
                "x": {
                    "value": "policy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(dense / 0.1, units=self.num_actions, activation=tf.nn.softmax)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(policy, 1e-10, 1 - 1e-10)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_204": {
                "input_tensor": {
                    "value": "advantage * log_prob",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_205": {
                "input_tensor": {
                    "value": "tf.square(reward - value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_209": {
                "input_tensor": {
                    "value": "tf.reduce_sum(policy * log_policy, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_205": {
                "x": {
                    "value": "reward - value",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_209": {
                "input_tensor": {
                    "value": "policy * log_policy",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_54": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "g.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "Represented_Value_Function_MARL/examples/battle_model/algo/base.py": {
        "tensorflow": {
            "conv2d_69": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.obs_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "active_func",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "Conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_71": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(self.obs_input, filters=32, kernel_size=3, activation=active_func, name='Conv1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "active_func",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "Conv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_73": {
                "variable": {
                    "value": "flatten_obs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv1, filters=32, kernel_size=3, activation=active_func, name='Conv2')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, np.prod([v.value for v in conv2.shape[1:]])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_75": {
                "variable": {
                    "value": "h_obs",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "flatten_obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(conv2, [-1, np.prod([v.value for v in conv2.shape[1:]])])",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "active_func",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "Dense-Obs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_77": {
                "variable": {
                    "value": "h_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.feat_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "active_func",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "Dense-Emb",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_80": {
                "variable": {
                    "value": "concat_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[h_obs, h_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_126": {
                "variable": {
                    "value": "prob_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "graph_attention_out_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(graph_attention_coefs, self.act_prob_input)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "active_func",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "Prob-Emb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_127": {
                "variable": {
                    "value": "h_act_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "prob_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(graph_attention_out_x, units=64, activation=active_func, name='Prob-Emb')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "active_func",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "Dense-Act-Prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_normalize_128": {
                "variable": {
                    "value": "dense_prob_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_act_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(prob_emb, units=32, activation=active_func, name='Dense-Act-Prob')",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "l2_normalize_129": {
                "variable": {
                    "value": "graph_attention_fea_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "graph_attention_fea",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "concat_130": {
                "variable": {
                    "value": "graph_attention_out",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[graph_attention_fea_norm, dense_prob_norm]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_133": {
                "variable": {
                    "value": "concat_layer_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "concat_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([h_obs, h_emb], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "concat_134": {
                "variable": {
                    "value": "concat_layer_first",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[concat_layer_norm, self.act_prob_input]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_135": {
                "variable": {
                    "value": "concat_layer_final",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[concat_layer_first, graph_attention_out]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_138": {
                "variable": {
                    "value": "dense2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "concat_layer_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([concat_layer_first, graph_attention_out], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "active_func",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "Dense2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_139": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dense2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(concat_layer_final, units=128, activation=active_func, name='Dense2')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "active_func",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "Dense-Out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_141": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(dense2, units=64, activation=active_func, name='Dense-Out')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.num_actions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Q-Value",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_34": {
                "variable": {
                    "value": "self.obs_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + self.view_space",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "Obs-Input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_35": {
                "variable": {
                    "value": "self.feat_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + self.feature_space",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "Feat-Input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_36": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "Terminate-Mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_37": {
                "variable": {
                    "value": "self.W_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "W-Input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_43": {
                "variable": {
                    "value": "self.act_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "Act",
                    "type": "str",
                    "possible_values": []
                }
            },
            "one_hot_44": {
                "variable": {
                    "value": "self.act_one_hot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.act_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_actions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "concat_95": {
                "variable": {
                    "value": "concat_layer_out",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[concat_layer, self.act_prob_input]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_100": {
                "variable": {
                    "value": "h_1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "attns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_123": {
                "variable": {
                    "value": "graph_attention_out_x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "graph_attention_coefs",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.act_prob_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_147": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_32": {
                "name_or_scope": {
                    "value": "name or 'ValueNet'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "self.act_prob_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, self.num_actions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "Act-Prob-Input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_49": {
                "variable": {
                    "value": "self.predict",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.e_q / self.temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_collection_50": {
                "variable": {
                    "value": "self.e_variables",
                    "type": "Attribute",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.eval_name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_55": {
                "variable": {
                    "value": "self.t_variables",
                    "type": "Attribute",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.target_name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_63": {
                "variable": {
                    "value": "self.target_q_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "Q-Input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_64": {
                "variable": {
                    "value": "self.e_q_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(self.act_one_hot, self.e_q)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdamOptimizer_66": {
                "variable": {
                    "value": "self.train_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_109": {
                "variable": {
                    "value": "h_1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "attns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "get_variable_scope_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_46": {
                "name_or_scope": {
                    "value": "Eval-Net",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_52": {
                "name_or_scope": {
                    "value": "Target-Net",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_57": {
                "name_or_scope": {
                    "value": "Update",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_62": {
                "name_or_scope": {
                    "value": "Optimization",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_scope_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_58": {
                "ref": {
                    "value": "self.t_variables[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "self.tau * self.e_variables[i] + (1.0 - self.tau) * self.t_variables[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_64": {
                "x": {
                    "value": "self.act_one_hot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.e_q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_65": {
                "input_tensor": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_65": {
                "x": {
                    "value": "self.target_q_input - self.e_q_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Represented_Value_Function_MARL/examples/battle_model/algo/base_original.py": {
        "tensorflow": {
            "conv2d_64": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.obs_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "active_func",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "Conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_66": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(self.obs_input, filters=32, kernel_size=3, activation=active_func, name='Conv1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "active_func",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "Conv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_68": {
                "variable": {
                    "value": "flatten_obs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv1, filters=32, kernel_size=3, activation=active_func, name='Conv2')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, np.prod([v.value for v in conv2.shape[1:]])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_70": {
                "variable": {
                    "value": "h_obs",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "flatten_obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(conv2, [-1, np.prod([v.value for v in conv2.shape[1:]])])",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "active_func",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "Dense-Obs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_72": {
                "variable": {
                    "value": "h_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.feat_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "active_func",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "Dense-Emb",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_75": {
                "variable": {
                    "value": "concat_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[h_obs, h_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_82": {
                "variable": {
                    "value": "dense2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "concat_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([h_obs, h_emb], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([concat_layer, h_act_prob], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "active_func",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "Dense2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_83": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dense2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(concat_layer, units=128, activation=active_func, name='Dense2')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "active_func",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "Dense-Out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_85": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(dense2, units=64, activation=active_func, name='Dense-Out')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.num_actions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Q-Value",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_30": {
                "variable": {
                    "value": "self.obs_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + self.view_space",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "Obs-Input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_31": {
                "variable": {
                    "value": "self.feat_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + self.feature_space",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "Feat-Input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_32": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "Terminate-Mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_38": {
                "variable": {
                    "value": "self.act_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "Act",
                    "type": "str",
                    "possible_values": []
                }
            },
            "one_hot_39": {
                "variable": {
                    "value": "self.act_one_hot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.act_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_actions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "dense_78": {
                "variable": {
                    "value": "prob_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.act_prob_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "active_func",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "Prob-Emb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_79": {
                "variable": {
                    "value": "h_act_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "prob_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(self.act_prob_input, units=64, activation=active_func, name='Prob-Emb')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "active_func",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "Dense-Act-Prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_80": {
                "variable": {
                    "value": "concat_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[concat_layer, h_act_prob]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_collection_91": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_28": {
                "name_or_scope": {
                    "value": "name or 'ValueNet'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "placeholder_35": {
                "variable": {
                    "value": "self.act_prob_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, self.num_actions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "Act-Prob-Input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_44": {
                "variable": {
                    "value": "self.predict",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.e_q / self.temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_collection_45": {
                "variable": {
                    "value": "self.e_variables",
                    "type": "Attribute",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.eval_name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_50": {
                "variable": {
                    "value": "self.t_variables",
                    "type": "Attribute",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.target_name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_58": {
                "variable": {
                    "value": "self.target_q_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "Q-Input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_59": {
                "variable": {
                    "value": "self.e_q_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(self.act_one_hot, self.e_q)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdamOptimizer_61": {
                "variable": {
                    "value": "self.train_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_scope_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_41": {
                "name_or_scope": {
                    "value": "Eval-Net",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_47": {
                "name_or_scope": {
                    "value": "Target-Net",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_52": {
                "name_or_scope": {
                    "value": "Update",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_57": {
                "name_or_scope": {
                    "value": "Optimization",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_scope_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_53": {
                "ref": {
                    "value": "self.t_variables[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "self.tau * self.e_variables[i] + (1.0 - self.tau) * self.t_variables[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_59": {
                "x": {
                    "value": "self.act_one_hot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.e_q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_60": {
                "input_tensor": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_60": {
                "x": {
                    "value": "self.target_q_input - self.e_q_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Represented_Value_Function_MARL/examples/battle_model/algo/q_learning.py": {
        "tensorflow": {
            "get_collection_39": {
                "variable": {
                    "value": "model_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_40": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "model_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name_scope)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name_scope)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name_scope)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name_scope)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name_scope)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name_scope)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_48": {
                "variable": {
                    "value": "model_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_49": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "model_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name_scope)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name_scope)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name_scope)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name_scope)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name_scope)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name_scope)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_95": {
                "variable": {
                    "value": "model_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_96": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "model_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name_scope)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name_scope)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name_scope)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name_scope)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name_scope)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name_scope)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_104": {
                "variable": {
                    "value": "model_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_105": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "model_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name_scope)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name_scope)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name_scope)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name_scope)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name_scope)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name_scope)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_163": {
                "variable": {
                    "value": "model_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_164": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "model_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name_scope)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name_scope)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name_scope)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name_scope)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name_scope)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name_scope)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_172": {
                "variable": {
                    "value": "model_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_173": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "model_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name_scope)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name_scope)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name_scope)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name_scope)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name_scope)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name_scope)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Represented_Value_Function_MARL/examples/battle_model/algo/tools.py": {
        "tensorflow": {
            "Graph_259": {
                "variable": {
                    "value": "self.gra",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_265": {
                "variable": {
                    "value": "sess_config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_269": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "self.gra",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "sess_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True, log_device_placement=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "FileWriter_270": {
                "variable": {
                    "value": "self.train_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_dir + '/' + log_name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "graph": {
                    "value": "tf.get_default_graph()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_271": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_373": {
                "ref": {
                    "value": "r_vars[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "(1.0 - tau) * l_vars[i] + tau * r_vars[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_default_graph_270": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_286": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "'Agent_{}_{}'.format(i, name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_288": {
                "name": {
                    "value": "'Agent_{}_{}_op'.format(i, name)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "getattr(self, name)[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "Represented_Value_Function_MARL/examples/battle_model/algo/tools_new.py": {
        "tensorflow": {
            "Graph_474": {
                "variable": {
                    "value": "self.gra",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_480": {
                "variable": {
                    "value": "sess_config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_484": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "self.gra",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "sess_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True, log_device_placement=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "FileWriter_485": {
                "variable": {
                    "value": "self.train_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_dir + '/' + log_name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "graph": {
                    "value": "tf.get_default_graph()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_486": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_594": {
                "ref": {
                    "value": "r_vars[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "(1.0 - tau) * l_vars[i] + tau * r_vars[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_default_graph_485": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_501": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "'Agent_{}_{}'.format(i, name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_503": {
                "name": {
                    "value": "'Agent_{}_{}_op'.format(i, name)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "getattr(self, name)[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "Represented_Value_Function_MARL/examples/battle_model/python/magent/builtin/tf_model/a2c.py": {
        "tensorflow": {
            "ConfigProto_69": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_71": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True, log_device_placement=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_97": {
                "variable": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_C'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "(hidden_size, hidden_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "get_variable_98": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_H'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "(hidden_size, hidden_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_100": {
                "variable": {
                    "value": "message",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones((n, n)) - tf.eye(n)",
                            "BinOp"
                        ],
                        [
                            "mask * tf.where(n > 1, 1.0 / (tf.cast(n, tf.float32) - 1.0), 0)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_138": {
                "variable": {
                    "value": "input_view",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + view_space",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_139": {
                "variable": {
                    "value": "input_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + feature_space",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_140": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_141": {
                "variable": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_142": {
                "variable": {
                    "value": "num_agent",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_148": {
                "variable": {
                    "value": "flatten_view",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_view",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None,) + view_space)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, np.prod([v.value for v in input_view.shape[1:]])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_149": {
                "variable": {
                    "value": "h_view",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "flatten_view",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_view, [-1, np.prod([v.value for v in input_view.shape[1:]])])",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_size[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[256]",
                            "List"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_151": {
                "variable": {
                    "value": "h_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None,) + feature_space)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_size[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[256]",
                            "List"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_153": {
                "variable": {
                    "value": "dense",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[h_view, h_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_154": {
                "variable": {
                    "value": "dense",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dense",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([h_view, h_emb], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dense, units=hidden_size[0] * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "self._commnet(num_agent, dense, dense.shape[-1].value)",
                            "Call"
                        ],
                        [
                            "dense",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_size[0] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_159": {
                "variable": {
                    "value": "policy",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dense",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([h_view, h_emb], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dense, units=hidden_size[0] * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "self._commnet(num_agent, dense, dense.shape[-1].value)",
                            "Call"
                        ],
                        [
                            "dense",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "self.num_actions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.softmax",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_160": {
                "variable": {
                    "value": "policy",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "policy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(dense, units=self.num_actions, activation=tf.nn.softmax)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(policy, 1e-10, 1 - 1e-10)",
                            "Call"
                        ],
                        [
                            "self.sess.run(self.policy, {self.input_view: view, self.input_feature: feature, self.num_agent: n})",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1 - 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_161": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dense",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([h_view, h_emb], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(dense, units=hidden_size[0] * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "self._commnet(num_agent, dense, dense.shape[-1].value)",
                            "Call"
                        ],
                        [
                            "dense",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_162": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(dense, units=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(value, (-1,))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stop_gradient_163": {
                "variable": {
                    "value": "advantage",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reward - value",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "one_hot_165": {
                "variable": {
                    "value": "action_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [None])",
                            "Call"
                        ],
                        [
                            "self.action_buf",
                            "Attribute"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.num_actions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_167": {
                "variable": {
                    "value": "log_policy",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "policy + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_168": {
                "variable": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "log_policy * action_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdamOptimizer_175": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_177": {
                "variable": {
                    "value": "(gradients, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*optimizer.compute_gradients(total_loss))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_global_norm(gradients, 5.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AdamOptimizer_180": {
                "variable": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_95": {
                "condition": {
                    "value": "n > 1",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0 / (tf.cast(n, tf.float32) - 1.0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_102": {
                "x": {
                    "value": "tf.matmul(message, C) + tf.matmul(hidden, H) + skip",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_65": {
                "name": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_94": {
                "shape": {
                    "value": "(n, n)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "eye_94": {
                "num_rows": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(view)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "n + len(episode.rewards)",
                            "BinOp"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_169": {
                "input_tensor": {
                    "value": "advantage * log_prob",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_170": {
                "input_tensor": {
                    "value": "tf.square(reward - value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_171": {
                "input_tensor": {
                    "value": "tf.reduce_sum(policy * log_policy, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_170": {
                "x": {
                    "value": "reward - value",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_171": {
                "input_tensor": {
                    "value": "policy * log_policy",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_95": {
                "x": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(view)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "n + len(episode.rewards)",
                            "BinOp"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_102": {
                "a": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name + '_H', shape=(hidden_size, hidden_size))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Represented_Value_Function_MARL/examples/battle_model/python/magent/builtin/tf_model/base.py": {
        "tensorflow": {
            "get_collection_38": {
                "variable": {
                    "value": "model_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_39": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "model_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, name)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_53": {
                "variable": {
                    "value": "model_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_54": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "model_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, name)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_default_graph_57": {
                "variable": {
                    "value": "backup_graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_73": {
                "variable": {
                    "value": "model_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_64": {
                "variable": {
                    "value": "model_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Saver_66": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "model_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, name)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, self.name)",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_meta_graph_62": {
                "meta_graph_or_file": {
                    "value": "os.path.join(dir_name, name, (self.subclass_name + '_%d') % epoch + '.meta')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_76": {
                "ref": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.global_variables()",
                            "Call"
                        ],
                        [
                            "model_vars",
                            "variable"
                        ]
                    ]
                },
                "value": {
                    "value": "kv_dict[old_name]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "Represented_Value_Function_MARL/examples/battle_model/python/magent/builtin/tf_model/dqn.py": {
        "tensorflow": {
            "placeholder_81": {
                "variable": {
                    "value": "self.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_82": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_84": {
                "variable": {
                    "value": "self.input_view",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + self.view_space",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_85": {
                "variable": {
                    "value": "self.input_feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + self.feature_space",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_86": {
                "variable": {
                    "value": "self.action",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_87": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_88": {
                "variable": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_105": {
                "variable": {
                    "value": "self.actions_onehot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.action",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_actions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_106": {
                "variable": {
                    "value": "td_error",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.target - tf.reduce_sum(tf.multiply(self.actions_onehot, self.qvalues), axis=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AdamOptimizer_110": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_112": {
                "variable": {
                    "value": "(gradients, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*optimizer.compute_gradients(self.loss))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_global_norm(gradients, 5.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_collection_129": {
                "variable": {
                    "value": "t_params",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.target_scope_name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_130": {
                "variable": {
                    "value": "e_params",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.eval_scope_name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_135": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_137": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True, log_device_placement=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_175": {
                "variable": {
                    "value": "h_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_feature",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_size[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[256]",
                            "List"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dense_emb",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_178": {
                "variable": {
                    "value": "dense",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[h_view, h_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_117": {
                "variable": {
                    "value": "best_action",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qvalues",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value + advantage - tf.reduce_mean(advantage, axis=1, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(dense, units=self.num_actions, name='value', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "self.sess.run([self.target_qvalues, self.qvalues], feed_dict={self.input_view: next_view, self.input_feature: next_feature})",
                            "Call"
                        ],
                        [
                            "qvalues",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_int32_118": {
                "variable": {
                    "value": "best_action",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "best_action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(qvalues, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(best_action)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_164": {
                "variable": {
                    "value": "h_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_view",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_view",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel_num[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[32, 32]",
                            "List"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_166": {
                "variable": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(input_view, filters=kernel_num[0], kernel_size=3, activation=tf.nn.relu, name='conv1', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel_num[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[32, 32]",
                            "List"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_168": {
                "variable": {
                    "value": "flatten_view",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(h_conv1, filters=kernel_num[1], kernel_size=3, activation=tf.nn.relu, name='conv2', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, np.prod([v.value for v in h_conv2.shape[1:]])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_169": {
                "variable": {
                    "value": "h_view",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "flatten_view",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(h_conv2, [-1, np.prod([v.value for v in h_conv2.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_view, [-1, np.prod([v.value for v in input_view.shape[1:]])])",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_size[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[256]",
                            "List"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dense_view",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_172": {
                "variable": {
                    "value": "flatten_view",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_view",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_view",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, np.prod([v.value for v in input_view.shape[1:]])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_173": {
                "variable": {
                    "value": "h_view",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "flatten_view",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(h_conv2, [-1, np.prod([v.value for v in h_conv2.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_view, [-1, np.prod([v.value for v in input_view.shape[1:]])])",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_size[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[256]",
                            "List"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_181": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dense",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([h_view, h_emb], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "value",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_182": {
                "variable": {
                    "value": "advantage",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dense",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([h_view, h_emb], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.num_actions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "advantage",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_187": {
                "variable": {
                    "value": "qvalues",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dense",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([h_view, h_emb], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.num_actions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "value",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_91": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_107": {
                "input_tensor": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_121": {
                "condition": {
                    "value": "should_explore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.shape(best_action), 0, 1) < self.eps",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "random_action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.shape(best_action), 0, self.num_actions, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "best_action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(qvalues, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(best_action)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_92": {
                "name_or_scope": {
                    "value": "eval_net_scope",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_99": {
                "name_or_scope": {
                    "value": "target_net_scope",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_106": {
                "input_tensor": {
                    "value": "tf.multiply(self.actions_onehot, self.qvalues)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_119": {
                "input": {
                    "value": "best_action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(qvalues, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(best_action)",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_132": {
                "ref": {
                    "value": "t_params[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "e_params[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_185": {
                "input_tensor": {
                    "value": "advantage",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(dense, units=self.num_actions, use_bias=False, name='advantage', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_374": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + self.view_space",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_375": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + self.feature_space",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_376": {
                "name_or_scope": {
                    "value": "eval_net_scope",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_376": {
                "device_name": {
                    "value": "'/gpu:%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_scope_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "multiply_106": {
                "x": {
                    "value": "self.actions_onehot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.qvalues",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_120": {
                "input": {
                    "value": "best_action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(qvalues, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(best_action)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Represented_Value_Function_MARL/examples/battle_model/python/magent/builtin/tf_model/drqn.py": {
        "tensorflow": {
            "placeholder_78": {
                "variable": {
                    "value": "self.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_80": {
                "variable": {
                    "value": "self.input_view",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + self.view_space",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "input_view",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_81": {
                "variable": {
                    "value": "self.input_feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + self.feature_space",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "input_feature",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_82": {
                "variable": {
                    "value": "self.action",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "action",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_83": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_85": {
                "variable": {
                    "value": "self.batch_size_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_86": {
                "variable": {
                    "value": "self.unroll_step_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_102": {
                "variable": {
                    "value": "self.actions_onehot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.action",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_actions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_103": {
                "variable": {
                    "value": "self.td_error",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.target - tf.reduce_sum(tf.multiply(self.actions_onehot, self.qvalues), axis=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AdamOptimizer_110": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_112": {
                "variable": {
                    "value": "(gradients, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*optimizer.compute_gradients(self.loss))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_global_norm(gradients, 10.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_collection_117": {
                "variable": {
                    "value": "t_params",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.target_scope_name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_118": {
                "variable": {
                    "value": "e_params",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.eval_scope_name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_123": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_125": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True, log_device_placement=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_153": {
                "variable": {
                    "value": "h_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_view",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_view",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel_num[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[32, 32]",
                            "List"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_155": {
                "variable": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(input_view, filters=kernel_num[0], kernel_size=3, activation=tf.nn.relu, name='conv1', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel_num[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[32, 32]",
                            "List"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_157": {
                "variable": {
                    "value": "flatten_view",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(h_conv1, filters=kernel_num[1], kernel_size=3, activation=tf.nn.relu, name='conv2', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, np.prod([v.value for v in h_conv2.shape[1:]])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_158": {
                "variable": {
                    "value": "h_view",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "flatten_view",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(h_conv2, [-1, np.prod([v.value for v in h_conv2.shape[1:]])])",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_size[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[256]",
                            "List"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dense_view",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_161": {
                "variable": {
                    "value": "h_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_feature",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_size[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[256]",
                            "List"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dense_emb",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_164": {
                "variable": {
                    "value": "dense",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[h_view, h_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GRUCell_168": {
                "variable": {
                    "value": "rnn_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "state_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size[0] * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_170": {
                "variable": {
                    "value": "rnn_in",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "dense",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([h_view, h_emb], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size_ph, self.unroll_step_ph, state_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dynamic_rnn_172": {
                "variable": {
                    "value": "(rnn, rnn_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "rnn_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.GRUCell(num_units=state_size)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "rnn_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(dense, shape=[self.batch_size_ph, self.unroll_step_ph, state_size])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_state": {
                    "value": "state_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_cell.zero_state(self.batch_size_ph, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_175": {
                "variable": {
                    "value": "rnn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "rnn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dynamic_rnn(cell=rnn_cell, inputs=rnn_in, dtype=tf.float32, initial_state=state_in)",
                            "Call"
                        ],
                        [
                            "tf.reshape(rnn, shape=[-1, state_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, state_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_178": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dense",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([h_view, h_emb], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "dense_value",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_179": {
                "variable": {
                    "value": "advantage",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dense",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([h_view, h_emb], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.num_actions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "dense_advantage",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_184": {
                "variable": {
                    "value": "qvalues",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "rnn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dynamic_rnn(cell=rnn_cell, inputs=rnn_in, dtype=tf.float32, initial_state=state_in)",
                            "Call"
                        ],
                        [
                            "tf.reshape(rnn, shape=[-1, state_size])",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.num_actions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_89": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_107": {
                "input_tensor": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_90": {
                "name_or_scope": {
                    "value": "eval_net_scope",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_95": {
                "name_or_scope": {
                    "value": "target_net_scope",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_104": {
                "input_tensor": {
                    "value": "tf.multiply(self.actions_onehot, self.qvalues)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "assign_120": {
                "ref": {
                    "value": "t_params[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "e_params[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_182": {
                "input_tensor": {
                    "value": "advantage",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(dense, units=self.num_actions, use_bias=False, name='dense_advantage', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_scope_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "multiply_104": {
                "x": {
                    "value": "self.actions_onehot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.qvalues",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Represented_Value_Function_MARL/examples/battle_model/python/utils/layers_atten.py": {
        "tensorflow": {
            "dense_10": {
                "variable": {
                    "value": "seq_fts",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(seq, 1.0 - in_drop)",
                            "Call"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "out_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_sz",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dense_13": {
                "variable": {
                    "value": "f_1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "seq_fts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(seq, out_sz, activation=None, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(seq_fts, 1.0 - in_drop)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "dense_14": {
                "variable": {
                    "value": "f_2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "seq_fts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(seq, out_sz, activation=None, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(seq_fts, 1.0 - in_drop)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "matmul_31": {
                "variable": {
                    "value": "vals",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "coefs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.nn.leaky_relu(logits) + bias_mat)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(tf.nn.leaky_relu(logits))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(coefs, 1.0 - coef_drop)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "seq_fts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(seq, out_sz, activation=None, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(seq_fts, 1.0 - in_drop)",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_32": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(coefs, seq_fts)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_6": {
                "name": {
                    "value": "my_attn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_8": {
                "variable": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(seq, 1.0 - in_drop)",
                            "Call"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "1.0 - in_drop",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_22": {
                "variable": {
                    "value": "coefs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.nn.leaky_relu(logits) + bias_mat",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_24": {
                "variable": {
                    "value": "coefs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.nn.leaky_relu(logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_27": {
                "variable": {
                    "value": "coefs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "coefs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.nn.leaky_relu(logits) + bias_mat)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(tf.nn.leaky_relu(logits))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(coefs, 1.0 - coef_drop)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1.0 - coef_drop",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_29": {
                "variable": {
                    "value": "seq_fts",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "seq_fts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(seq, out_sz, activation=None, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(seq_fts, 1.0 - in_drop)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1.0 - in_drop",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_17": {
                "a": {
                    "value": "f_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(seq_fts, 1, activation=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_19": {
                "a": {
                    "value": "f_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(seq_fts, 1, activation=None)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "leaky_relu_24": {
                "features": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f_1 + tf.transpose(f_2)",
                            "BinOp"
                        ],
                        [
                            "f_1 + tf.transpose(f_2, [0, 2, 1])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "leaky_relu_22": {
                "features": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f_1 + tf.transpose(f_2)",
                            "BinOp"
                        ],
                        [
                            "f_1 + tf.transpose(f_2, [0, 2, 1])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "dense_37": {
                "inputs": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(seq, 1.0 - in_drop)",
                            "Call"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "ret.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Represented_Value_Function_MARL/train_battle.py": {
        "tensorflow": {
            "ConfigProto_56": {
                "variable": {
                    "value": "tf_config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_85": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True, log_device_placement=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Represented_Value_Function_MARL/wild_war.py": {
        "tensorflow": {
            "ConfigProto_38": {
                "variable": {
                    "value": "tf_config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_61": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True, log_device_placement=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Represented_Value_Function_MARL/wildwar_ELO_single.py": {
        "tensorflow": {
            "ConfigProto_36": {
                "variable": {
                    "value": "tf_config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_39": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True, log_device_placement=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}