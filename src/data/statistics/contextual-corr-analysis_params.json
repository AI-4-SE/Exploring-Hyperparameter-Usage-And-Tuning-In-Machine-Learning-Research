{
    "attention_corr_methods.py": {
        "torch": {
            "norm_233": {
                "variable": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t1 - t2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "fro",
                    "type": "str",
                    "possible_values": []
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sqrt_341": {
                "variable": {
                    "value": "denom",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(x11 - x1 * x1 / n) * (x22 - x2 * x2 / n)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_395": {
                "variable": {
                    "value": "kl1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kl1s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t1 * (torch.log(t1) - torch.log(m))",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_398": {
                "variable": {
                    "value": "kl2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kl2s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t2 * (torch.log(t2) - torch.log(m))",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_431": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "fal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.flatten(at, start_dim=1).t() for at in al]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "norm_477": {
                "variable": {
                    "value": "XtX_F",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mm(X.t(), X)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "fro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "norm_478": {
                "variable": {
                    "value": "YtY_F",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mm(Y.t(), Y)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "fro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "norm_479": {
                "variable": {
                    "value": "YtX_F",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mm(Y.t(), X)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "fro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "svd_530": {
                "variable": {
                    "value": "(U, S, V)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.representations_d[network].to(self.device)",
                            "Call"
                        ],
                        [
                            "self.nrepresentations_d[network]",
                            "Subscript"
                        ],
                        [
                            "pca_directions[network]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cumsum_532": {
                "variable": {
                    "value": "var_sums",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "S.pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_533": {
                "variable": {
                    "value": "wanted_size",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "var_sums.lt(var_sums[-1] * self.percent_variance)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "svd_577": {
                "variable": {
                    "value": "(u, s, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mm(X.t(), Y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_594": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.representations_d[network].to(self.device)",
                            "Call"
                        ],
                        [
                            "self.nrepresentations_d[network]",
                            "Subscript"
                        ],
                        [
                            "pca_directions[network]",
                            "Subscript"
                        ]
                    ]
                },
                "mat2": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_596": {
                "variable": {
                    "value": "align",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mm(H.t(), Z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_597": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "align",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(torch.mm(H.t(), Z))",
                            "Call"
                        ],
                        [
                            "torch.abs(torch.mm(H.t(), Z))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mm_603": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.representations_d[other_network].to(self.device)",
                            "Call"
                        ],
                        [
                            "pca_directions[other_network]",
                            "Subscript"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_605": {
                "variable": {
                    "value": "align",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mm(H.t(), Z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_606": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "align",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(torch.mm(H.t(), Z))",
                            "Call"
                        ],
                        [
                            "torch.abs(torch.mm(H.t(), Z))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mm_539": {
                "variable": {
                    "value": "whitening_transform",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.diag(1 / S)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_581": {
                "variable": {
                    "value": "self.transforms[network][other_network]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "whitening_transforms[network]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mm_582": {
                "variable": {
                    "value": "self.transforms[other_network][network]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "whitening_transforms[other_network]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "isnan_394": {
                "input": {
                    "value": "kl1s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t1 * (torch.log(t1) - torch.log(m))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "isnan_397": {
                "input": {
                    "value": "kl2s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t2 * (torch.log(t2) - torch.log(m))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "flatten_430": {
                "input": {
                    "value": "at",
                    "type": "variable",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_430": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "prod_436": {
                "variable": {
                    "value": "self.unmask_ix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "t != 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_577": {
                "input": {
                    "value": "X.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.representations_d[other_network].to(self.device)",
                            "Call"
                        ],
                        [
                            "pca_directions[other_network]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mm_596": {
                "input": {
                    "value": "H.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.representations_d[network]",
                            "Subscript"
                        ],
                        [
                            "self.representations_d[other_network]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mm_605": {
                "input": {
                    "value": "H.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.representations_d[network]",
                            "Subscript"
                        ],
                        [
                            "self.representations_d[other_network]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "std_290": {
                "input": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "o_attns.to(device)",
                            "Call"
                        ],
                        [
                            "t2.reshape(1, t21, t22, t23)",
                            "Call"
                        ],
                        [
                            "o_attns.to(device)",
                            "Call"
                        ],
                        [
                            "t2.reshape(1, t21, t22, t23)",
                            "Call"
                        ],
                        [
                            "o_attns.to(device)",
                            "Call"
                        ],
                        [
                            "t2.reshape(1, t21, t22, t23)",
                            "Call"
                        ],
                        [
                            "o_attns.to(device)",
                            "Call"
                        ],
                        [
                            "t2.reshape(1, t21, t22, t23)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_393": {
                "input": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(t1 + t2) / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_396": {
                "input": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(t1 + t2) / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "diag_539": {
                "input": {
                    "value": "1 / S",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_477": {
                "input": {
                    "value": "X.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.representations_d[network].to(self.device)",
                            "Call"
                        ],
                        [
                            "self.nrepresentations_d[network]",
                            "Subscript"
                        ],
                        [
                            "pca_directions[network]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mm_478": {
                "input": {
                    "value": "Y.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.representations_d[other_network].to(self.device)",
                            "Call"
                        ],
                        [
                            "pca_directions[other_network]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mm_479": {
                "input": {
                    "value": "Y.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.representations_d[network].to(self.device)",
                            "Call"
                        ],
                        [
                            "self.nrepresentations_d[network]",
                            "Subscript"
                        ],
                        [
                            "pca_directions[network]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_600": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(align, dim=1, keepdim=False)",
                            "Call"
                        ],
                        [
                            "torch.sum(align, dim=1, keepdim=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_609": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(align, dim=1, keepdim=False)",
                            "Call"
                        ],
                        [
                            "torch.sum(align, dim=1, keepdim=False)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "corr_methods.py": {
        "torch": {
            "svd_309": {
                "variable": {
                    "value": "(self.lsingularv_d[network], _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self.nrepresentations_d[network]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mm_330": {
                "variable": {
                    "value": "UtY",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "U.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.nrepresentations_d[network].to(self.device)",
                            "Call"
                        ],
                        [
                            "pca_directions[other_network]",
                            "Subscript"
                        ],
                        [
                            "self.representations_d[other_network].to(self.device)",
                            "Call"
                        ],
                        [
                            "da.from_array(np.asarray(self.representations_d[other_network]), chunks=(c, c))",
                            "Call"
                        ],
                        [
                            "self.representations_d[other_network].to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_332": {
                "variable": {
                    "value": "bnorms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "UtY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(U.t(), Y)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_333": {
                "variable": {
                    "value": "ynorms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.nrepresentations_d[network].to(self.device)",
                            "Call"
                        ],
                        [
                            "pca_directions[other_network]",
                            "Subscript"
                        ],
                        [
                            "self.representations_d[other_network].to(self.device)",
                            "Call"
                        ],
                        [
                            "da.from_array(np.asarray(self.representations_d[other_network]), chunks=(c, c))",
                            "Call"
                        ],
                        [
                            "self.representations_d[other_network].to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "svd_439": {
                "variable": {
                    "value": "(U, S, V)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.nrepresentations_d[network]",
                            "Subscript"
                        ],
                        [
                            "pca_directions[network]",
                            "Subscript"
                        ],
                        [
                            "self.representations_d[network].to(self.device)",
                            "Call"
                        ],
                        [
                            "da.from_array(np.asarray(self.representations_d[network]), chunks=(c, c))",
                            "Call"
                        ],
                        [
                            "self.representations_d[network].to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "cumsum_441": {
                "variable": {
                    "value": "var_sums",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "S.pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_442": {
                "variable": {
                    "value": "wanted_size",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "var_sums.lt(var_sums[-1] * self.percent_variance)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "svd_486": {
                "variable": {
                    "value": "(u, s, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mm(X.t(), Y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_503": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.nrepresentations_d[network]",
                            "Subscript"
                        ],
                        [
                            "pca_directions[network]",
                            "Subscript"
                        ],
                        [
                            "self.representations_d[network].to(self.device)",
                            "Call"
                        ],
                        [
                            "da.from_array(np.asarray(self.representations_d[network]), chunks=(c, c))",
                            "Call"
                        ],
                        [
                            "self.representations_d[network].to(device)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_505": {
                "variable": {
                    "value": "align",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mm(H.t(), Z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_506": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "align",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(torch.mm(H.t(), Z))",
                            "Call"
                        ],
                        [
                            "torch.abs(torch.mm(H.t(), Z))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mm_512": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.nrepresentations_d[network].to(self.device)",
                            "Call"
                        ],
                        [
                            "pca_directions[other_network]",
                            "Subscript"
                        ],
                        [
                            "self.representations_d[other_network].to(self.device)",
                            "Call"
                        ],
                        [
                            "da.from_array(np.asarray(self.representations_d[other_network]), chunks=(c, c))",
                            "Call"
                        ],
                        [
                            "self.representations_d[other_network].to(device)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_514": {
                "variable": {
                    "value": "align",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mm(H.t(), Z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_515": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "align",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(torch.mm(H.t(), Z))",
                            "Call"
                        ],
                        [
                            "torch.abs(torch.mm(H.t(), Z))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_584": {
                "variable": {
                    "value": "XtX_F",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mm(X.t(), X)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "fro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "norm_585": {
                "variable": {
                    "value": "YtY_F",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mm(Y.t(), Y)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "fro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "norm_586": {
                "variable": {
                    "value": "YtX_F",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mm(Y.t(), X)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "fro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mm_448": {
                "variable": {
                    "value": "whitening_transform",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.diag(1 / S)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_490": {
                "variable": {
                    "value": "self.transforms[network][other_network]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "whitening_transforms[network]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mm_491": {
                "variable": {
                    "value": "self.transforms[other_network][network]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "whitening_transforms[other_network]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dot_678": {
                "variable": {
                    "value": "scaled_hsic",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Gx.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "Gy.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_679": {
                "variable": {
                    "value": "norm_gx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Gx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "center_gram(gram_rbf(X))",
                            "Call"
                        ],
                        [
                            "center_gram(gram_rbf(X))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "fro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "norm_680": {
                "variable": {
                    "value": "norm_gy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Gy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "center_gram(gram_rbf(Y))",
                            "Call"
                        ],
                        [
                            "center_gram(gram_rbf(Y))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "fro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_139": {
                "tensors": {
                    "value": "representations_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mm_213": {
                "input": {
                    "value": "m1.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "m2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "means_d[other_network].to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_214": {
                "input": {
                    "value": "s1.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "s2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stdevs_d[other_network].to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_486": {
                "input": {
                    "value": "X.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.nrepresentations_d[network].to(self.device)",
                            "Call"
                        ],
                        [
                            "pca_directions[other_network]",
                            "Subscript"
                        ],
                        [
                            "self.representations_d[other_network].to(self.device)",
                            "Call"
                        ],
                        [
                            "da.from_array(np.asarray(self.representations_d[other_network]), chunks=(c, c))",
                            "Call"
                        ],
                        [
                            "self.representations_d[other_network].to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_505": {
                "input": {
                    "value": "H.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.representations_d[network]",
                            "Subscript"
                        ],
                        [
                            "self.representations_d[other_network]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mm_514": {
                "input": {
                    "value": "H.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.representations_d[network]",
                            "Subscript"
                        ],
                        [
                            "self.representations_d[other_network]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "exp_628": {
                "input": {
                    "value": "-sq_distances / (2 * threshold ** 2 * sq_median_distance)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_639": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mm_212": {
                "input": {
                    "value": "t1.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.representations_d[other_network].to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_448": {
                "input": {
                    "value": "1 / S",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "chunk_122": {
                "input": {
                    "value": "representations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "activations",
                            "variable"
                        ],
                        [
                            "torch.chunk(representations, chunks=2, dim=-1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.chunk(representations, chunks=2, dim=-1)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_509": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(align, dim=1, keepdim=False)",
                            "Call"
                        ],
                        [
                            "torch.sum(align, dim=1, keepdim=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_518": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(align, dim=1, keepdim=False)",
                            "Call"
                        ],
                        [
                            "torch.sum(align, dim=1, keepdim=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_584": {
                "input": {
                    "value": "X.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.nrepresentations_d[network]",
                            "Subscript"
                        ],
                        [
                            "pca_directions[network]",
                            "Subscript"
                        ],
                        [
                            "self.representations_d[network].to(self.device)",
                            "Call"
                        ],
                        [
                            "da.from_array(np.asarray(self.representations_d[network]), chunks=(c, c))",
                            "Call"
                        ],
                        [
                            "self.representations_d[network].to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_585": {
                "input": {
                    "value": "Y.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.nrepresentations_d[network].to(self.device)",
                            "Call"
                        ],
                        [
                            "pca_directions[other_network]",
                            "Subscript"
                        ],
                        [
                            "self.representations_d[other_network].to(self.device)",
                            "Call"
                        ],
                        [
                            "da.from_array(np.asarray(self.representations_d[other_network]), chunks=(c, c))",
                            "Call"
                        ],
                        [
                            "self.representations_d[other_network].to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_586": {
                "input": {
                    "value": "Y.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.nrepresentations_d[network]",
                            "Subscript"
                        ],
                        [
                            "pca_directions[network]",
                            "Subscript"
                        ],
                        [
                            "self.representations_d[network].to(self.device)",
                            "Call"
                        ],
                        [
                            "da.from_array(np.asarray(self.representations_d[network]), chunks=(c, c))",
                            "Call"
                        ],
                        [
                            "self.representations_d[network].to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "chunk_125": {
                "input": {
                    "value": "representations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "activations",
                            "variable"
                        ],
                        [
                            "torch.chunk(representations, chunks=2, dim=-1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.chunk(representations, chunks=2, dim=-1)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "device_76": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_78": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "main_attn.py": {
        "torch": {
            "device_79": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_81": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "slurm/mk_stats.py": {
        "torch": {
            "cat_83": {
                "variable": {
                    "value": "representations",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "representations_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_93": {
                "variable": {
                    "value": "stats[mean][mname]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "activations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(activations_h5[sentence_ix])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "std_95": {
                "variable": {
                    "value": "stats[std][mname]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "activations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(activations_h5[sentence_ix])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_89": {
                "input": {
                    "value": "activations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(activations_h5[sentence_ix])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_91": {
                "input": {
                    "value": "activations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(activations_h5[sentence_ix])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "slurm/old/mk_maxmin.py": {
        "torch": {
            "cat_43": {
                "variable": {
                    "value": "activations",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.tensor(activations_h5[str_ix]) for str_ix in sentence_d]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0 if dim == 2 else 1",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "save_60": {
                "obj": {
                    "value": "max_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "max_fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_file + '_max'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_61": {
                "obj": {
                    "value": "min_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "min_fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_file + '_min'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_43": {
                "data": {
                    "value": "activations_h5[str_ix]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_49": {
                "input": {
                    "value": "activations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.tensor(activations_h5[str_ix]) for str_ix in sentence_d], dim=0 if dim == 2 else 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "min_50": {
                "input": {
                    "value": "activations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.tensor(activations_h5[str_ix]) for str_ix in sentence_d], dim=0 if dim == 2 else 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_52": {
                "input": {
                    "value": "activations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.tensor(activations_h5[str_ix]) for str_ix in sentence_d], dim=0 if dim == 2 else 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "min_53": {
                "input": {
                    "value": "activations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.tensor(activations_h5[str_ix]) for str_ix in sentence_d], dim=0 if dim == 2 else 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "slurm/old/mk_meanstd.py": {
        "torch": {
            "cat_43": {
                "variable": {
                    "value": "activations",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.tensor(activations_h5[str_ix]) for str_ix in sentence_d]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0 if dim == 2 else 1",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "save_62": {
                "obj": {
                    "value": "means_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "means_fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_file + '_means'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_63": {
                "obj": {
                    "value": "stdevs_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "stdevs_fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_file + '_stdevs'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_49": {
                "variable": {
                    "value": "means_d[fname]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "activations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.tensor(activations_h5[str_ix]) for str_ix in sentence_d], dim=0 if dim == 2 else 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "std_50": {
                "variable": {
                    "value": "stdevs_d[fname]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "activations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.tensor(activations_h5[str_ix]) for str_ix in sentence_d], dim=0 if dim == 2 else 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "unbiased": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_53": {
                "variable": {
                    "value": "means_d[fname]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "activations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.tensor(activations_h5[str_ix]) for str_ix in sentence_d], dim=0 if dim == 2 else 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "std_54": {
                "variable": {
                    "value": "stdevs_d[fname]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "activations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.tensor(activations_h5[str_ix]) for str_ix in sentence_d], dim=0 if dim == 2 else 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "unbiased": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_43": {
                "data": {
                    "value": "activations_h5[str_ix]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}