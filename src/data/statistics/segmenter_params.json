{
    "segm/data/base.py": {
        "torch": {}
    },
    "segm/data/imagenet.py": {
        "torch": {}
    },
    "segm/data/loader.py": {
        "torch": {
            "DistributedSampler_10": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "segm/data/utils.py": {
        "torch": {
            "zeros_15": {
                "variable": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(seg.shape[0], seg.shape[1], seg.shape[2], 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unique_16": {
                "variable": {
                    "value": "cls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_35": {
                "variable": {
                    "value": "colors[IGNORE_LABEL]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 0.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_52": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "stats['mean']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_53": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "stats['std']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_34": {
                "variable": {
                    "value": "colors[cat[id]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "cmap[cat['id']]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_32": {
                "data": {
                    "value": "cat['color']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "segm/engine.py": {
        "torch": {
            "CrossEntropyLoss_20": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "IGNORE_LABEL",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "segm/eval/accuracy.py": {
        "torch": {
            "no_grad_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "segm/eval/miou.py": {
        "torch": {
            "interpolate_80": {
                "variable": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ims[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "ori_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ims_metas[0]['ori_shape']",
                            "Subscript"
                        ],
                        [
                            "(ori_shape[0].item(), ori_shape[1].item())",
                            "Tuple"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_150": {
                "data": {
                    "value": "seg_gt_maps[name]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "segm/metrics.py": {
        "torch": {
            "full_58": {
                "variable": {
                    "value": "dir_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(MAX_LEN,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "ptu.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_93": {
                "variable": {
                    "value": "ret_metrics_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "ptu.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_61": {
                "variable": {
                    "value": "tmpdir",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "bytearray(tmpdir.encode())",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "ptu.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "broadcast_66": {
                "tensor": {
                    "value": "dir_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.full((MAX_LEN,), 32, dtype=torch.uint8, device=ptu.device)",
                            "Call"
                        ]
                    ]
                },
                "devices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_108": {
                "variable": {
                    "value": "ret_metrics_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[np.round(np.nanmean(ret_metric.astype(np.float)) * 100, 2) for ret_metric in ret_metrics]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "ptu.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "broadcast_119": {
                "tensor": {
                    "value": "ret_metrics_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(3, dtype=float, device=ptu.device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([np.round(np.nanmean(ret_metric.astype(np.float)) * 100, 2) for ret_metric in ret_metrics], dtype=float, device=ptu.device)",
                            "Call"
                        ]
                    ]
                },
                "devices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "segm/model/blocks.py": {
        "torch": {
            "Linear_19": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GELU_20": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_24": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_47": {
                "variable": {
                    "value": "self.qkv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim * 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_48": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_50": {
                "variable": {
                    "value": "self.proj_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LayerNorm_83": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LayerNorm_84": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Identity_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "segm/model/decoder.py": {
        "torch": {
            "Linear_21": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.d_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_cls",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_60": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block(d_model, n_heads, d_ff, dropout, dpr[i]) for i in range(n_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Parameter_64": {
                "variable": {
                    "value": "self.cls_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, n_cls, d_model)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_65": {
                "variable": {
                    "value": "self.proj_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_67": {
                "variable": {
                    "value": "self.proj_patch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.scale * torch.randn(d_model, d_model)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_68": {
                "variable": {
                    "value": "self.proj_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.scale * torch.randn(d_model, d_model)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LayerNorm_70": {
                "variable": {
                    "value": "self.decoder_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LayerNorm_71": {
                "variable": {
                    "value": "self.mask_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "n_cls",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_86": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, cls_emb)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_111": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, cls_emb)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_64": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "n_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "linspace_59": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "n_layers",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_67": {
                "*size": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_68": {
                "*size": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "segm/model/factory.py": {
        "torch": {
            "load_120": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "ptu.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_70": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.expandvars('$TORCH_HOME/hub/checkpoints/vit_base_patch8_384.pth')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "segm/model/segmenter.py": {
        "torch": {
            "interpolate_45": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder(x, (H, W))",
                            "Call"
                        ],
                        [
                            "F.interpolate(masks, size=(H, W), mode='bilinear')",
                            "Call"
                        ],
                        [
                            "unpadding(masks, (H_ori, W_ori))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "segm/model/utils.py": {
        "torch": {
            "interpolate_37": {
                "variable": {
                    "value": "posemb_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "posemb_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "posemb_grid.reshape(1, gs_old_h, gs_old_w, -1).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "F.interpolate(posemb_grid, size=(gs_h, gs_w), mode='bilinear')",
                            "Call"
                        ],
                        [
                            "posemb_grid.permute(0, 2, 3, 1).reshape(1, gs_h * gs_w, -1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(gs_h, gs_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_39": {
                "variable": {
                    "value": "posemb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[posemb_tok, posemb_grid]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_112": {
                "variable": {
                    "value": "h_anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "step": {
                    "value": "window_stride",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_113": {
                "variable": {
                    "value": "w_anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "step": {
                    "value": "window_stride",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_134": {
                "variable": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(C, H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "im_windows.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_135": {
                "variable": {
                    "value": "count",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "im_windows.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_147": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((C, H, W), device=im_windows.device)",
                            "Call"
                        ],
                        [
                            "logit / count",
                            "BinOp"
                        ],
                        [
                            "F.interpolate(logit.unsqueeze(0), ori_shape, mode='bilinear')[0]",
                            "Subscript"
                        ],
                        [
                            "torch.flip(logit, (2,))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_161": {
                "variable": {
                    "value": "seg_map",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(C, ori_shape[0], ori_shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "ptu.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_75": {
                "variable": {
                    "value": "im_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im.to(ptu.device)",
                            "Call"
                        ],
                        [
                            "resize(im, window_size)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, pad_w, 0, pad_h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "fill_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "interpolate_101": {
                "variable": {
                    "value": "im_res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im.to(ptu.device)",
                            "Call"
                        ],
                        [
                            "resize(im, window_size)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(int(h_res), int(w_res))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "flip_146": {
                "variable": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((C, H, W), device=im_windows.device)",
                            "Call"
                        ],
                        [
                            "logit / count",
                            "BinOp"
                        ],
                        [
                            "F.interpolate(logit.unsqueeze(0), ori_shape, mode='bilinear')[0]",
                            "Subscript"
                        ],
                        [
                            "torch.flip(logit, (2,))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_170": {
                "variable": {
                    "value": "seg_maps",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, C, window_size, window_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "im.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_140": {
                "input": {
                    "value": "logit.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "ori_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_167": {
                "tensors": {
                    "value": "windows.pop('crop')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "prod_183": {
                "input": {
                    "value": "torch.tensor(p.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_183": {
                "data": {
                    "value": "p.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "segm/model/vit.py": {
        "torch": {
            "Conv2d_28": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "patch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "patch_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_65": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_69": {
                "variable": {
                    "value": "self.cls_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 1, d_model)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_84": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block(d_model, n_heads, d_ff, dropout, dpr[i]) for i in range(n_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LayerNorm_89": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_90": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_cls",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Identity_96": {
                "variable": {
                    "value": "self.pre_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ignore_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_72": {
                "variable": {
                    "value": "self.dist_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 1, d_model)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_73": {
                "variable": {
                    "value": "self.pos_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, self.patch_embed.num_patches + 2, d_model)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "variable": {
                    "value": "self.head_dist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_cls",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_78": {
                "variable": {
                    "value": "self.pos_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, self.patch_embed.num_patches + 1, d_model)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_116": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cls_tokens, dist_tokens, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_118": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cls_tokens, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_161": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cls_tokens, dist_tokens, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_163": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cls_tokens, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_69": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_72": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_74": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.patch_embed.num_patches + 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_79": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.patch_embed.num_patches + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "linspace_83": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "steps": {
                    "value": "n_layers",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "segm/optim/scheduler.py": {
        "torch": {}
    },
    "segm/scripts/prepare_pcontext.py": {
        "torch": {
            "load_76": {
                "variable": {
                    "value": "train_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "str(train_torch_path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_89": {
                "variable": {
                    "value": "val_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "str(val_torch_path)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "segm/scripts/show_attn_map.py": {
        "torch": {
            "interpolate_150": {
                "variable": {
                    "value": "attentions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attentions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_attention_map_enc(img.to(ptu.device), layer_id)",
                            "Call"
                        ],
                        [
                            "model.get_attention_map_dec(img.to(ptu.device), layer_id)",
                            "Call"
                        ],
                        [
                            "attentions[0, :, 0, num_extra_tokens:]",
                            "Subscript"
                        ],
                        [
                            "attentions[0, :, num_patch + num_extra_tokens, num_extra_tokens:]",
                            "Subscript"
                        ],
                        [
                            "attentions[0, :, -n_cls:, :-n_cls]",
                            "Subscript"
                        ],
                        [
                            "attentions[0, :, num_patch, :-n_cls]",
                            "Subscript"
                        ],
                        [
                            "attentions.reshape(nh, -1)",
                            "Call"
                        ],
                        [
                            "attentions.reshape(nh, n_cls, w_featmap, h_featmap)",
                            "Call"
                        ],
                        [
                            "attentions.reshape(nh, 1, w_featmap, h_featmap)",
                            "Call"
                        ],
                        [
                            "F.interpolate(attentions, scale_factor=patch_size, mode='nearest').cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "patch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.patch_size",
                            "Attribute"
                        ]
                    ]
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_187": {
                "data": {
                    "value": "[1, 0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "segm/train.py": {
        "torch": {
            "load_200": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_dir / 'checkpoint.pth'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_261": {
                "obj": {
                    "value": "snapshot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dict(model=model_without_ddp.state_dict(), optimizer=optimizer.state_dict(), n_cls=model_without_ddp.n_cls, lr_scheduler=lr_scheduler.state_dict())",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_dir / 'checkpoint.pth'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "segm/utils/distributed.py": {
        "torch": {
            "save_58": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "sync_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Path(sync_dir).resolve() / 'sync_model.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_61": {
                "f": {
                    "value": "sync_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Path(sync_dir).resolve() / 'sync_model.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "segm/utils/logger.py": {
        "torch": {
            "tensor_41": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.count, self.total]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "ptu.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_52": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_183": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "segm/utils/torch.py": {
        "torch": {
            "device_31": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{gpu_id}' if use_gpu else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            }
        }
    }
}