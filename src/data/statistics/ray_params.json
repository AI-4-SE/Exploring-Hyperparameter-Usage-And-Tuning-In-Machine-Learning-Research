{
    "doc/source/ray-air/doc_code/air_key_concepts.py": {
        "sklearn": {},
        "tensorflow": {
            "Sequential_84": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "layers": {
                    "value": "[tf.keras.layers.InputLayer(input_shape=(1,)), tf.keras.layers.Dense(1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "InputLayer_86": {
                "input_shape": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_87": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "doc/source/ray-air/doc_code/checkpoint_mlflow.py": {
        "sklearn": {
            "RandomForestClassifier_10": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "doc/source/ray-air/doc_code/sklearn_trainer.py": {
        "sklearn": {
            "RandomForestRegressor_8": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "doc/source/ray-core/_examples/datasets_train/datasets_train.py": {
        "sklearn": {},
        "torch": {
            "device_407": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{session.get_local_rank()}' if use_gpu and torch.cuda.is_available() else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_433": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_434": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_303": {
                "variable": {
                    "value": "self.fc_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['num_hidden']",
                            "Subscript"
                        ],
                        [
                            "config['num_hidden']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_304": {
                "variable": {
                    "value": "self.relu_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_320": {
                "variable": {
                    "value": "self.fc_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['num_hidden']",
                            "Subscript"
                        ],
                        [
                            "config['num_hidden']",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_307": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['num_hidden']",
                            "Subscript"
                        ],
                        [
                            "config['num_hidden']",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['num_hidden']",
                            "Subscript"
                        ],
                        [
                            "config['num_hidden']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_308": {
                "variable": {
                    "value": "relu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_309": {
                "variable": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "self.drop_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_372": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_682": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_409": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_355": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(inputs.float())",
                            "Call"
                        ],
                        [
                            "model(inputs.float())",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_682": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_382": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(inputs.float())",
                            "Call"
                        ],
                        [
                            "model(inputs.float())",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "doc/source/serve/doc_code/sklearn_quickstart.py": {
        "sklearn": {
            "load_iris_15": {
                "variable": {
                    "value": "iris_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientBoostingClassifier_16": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "doc/source/serve/doc_code/tutorial_sklearn.py": {
        "sklearn": {
            "GradientBoostingClassifier_18": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_iris_22": {
                "variable": {
                    "value": "iris_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_squared_error_36": {
                "y_true": {
                    "value": "model.predict(val_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "val_y",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/air/tests/test_resource_changing.py": {
        "sklearn": {
            "load_breast_cancer_104": {
                "variable": {
                    "value": "data_raw",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/tests/lightgbm/simple_example.py": {
        "sklearn": {
            "load_breast_cancer_10": {
                "variable": {
                    "value": "(data, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "train_test_split_12": {
                "variable": {
                    "value": "(train_x, test_x, train_y, test_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/tests/lightgbm/simple_tune.py": {
        "sklearn": {
            "load_breast_cancer_13": {
                "variable": {
                    "value": "(data, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "train_test_split_15": {
                "variable": {
                    "value": "(train_x, test_x, train_y, test_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/tests/test_joblib.py": {
        "sklearn": {
            "load_digits_43": {
                "variable": {
                    "value": "digits",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SVC_58": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel": {
                    "value": "rbf",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_digits_68": {
                "variable": {
                    "value": "digits",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SVC_83": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel": {
                    "value": "rbf",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_iris_171": {
                "variable": {
                    "value": "iris",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SVC_172": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                },
                "C": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RandomizedSearchCV_60": {
                "variable": {
                    "value": "search",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SVC(kernel='rbf')",
                            "Call"
                        ],
                        [
                            "SVC(kernel='rbf')",
                            "Call"
                        ]
                    ]
                },
                "param_distributions": {
                    "value": "param_space",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'C': np.logspace(-6, 6, 10), 'gamma': np.logspace(-8, 8, 10), 'tol': np.logspace(-4, -1, 3), 'class_weight': [None, 'balanced']}",
                            "Dict"
                        ],
                        [
                            "{'C': np.logspace(-6, 6, 30), 'gamma': np.logspace(-8, 8, 30), 'tol': np.logspace(-4, -1, 30), 'class_weight': [None, 'balanced']}",
                            "Dict"
                        ]
                    ]
                },
                "cv": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "n_iter": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RandomizedSearchCV_85": {
                "variable": {
                    "value": "search",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SVC(kernel='rbf')",
                            "Call"
                        ],
                        [
                            "SVC(kernel='rbf')",
                            "Call"
                        ]
                    ]
                },
                "param_distributions": {
                    "value": "param_space",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'C': np.logspace(-6, 6, 10), 'gamma': np.logspace(-8, 8, 10), 'tol': np.logspace(-4, -1, 3), 'class_weight': [None, 'balanced']}",
                            "Dict"
                        ],
                        [
                            "{'C': np.logspace(-6, 6, 30), 'gamma': np.logspace(-8, 8, 30), 'tol': np.logspace(-4, -1, 30), 'class_weight': [None, 'balanced']}",
                            "Dict"
                        ]
                    ]
                },
                "cv": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "n_iter": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_val_score_174": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SVC(kernel='linear', C=1, random_state=0)",
                            "Call"
                        ]
                    ]
                },
                "X": {
                    "value": "iris.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "iris.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "cv": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DecisionTreeClassifier_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ExtraTreesClassifier_103": {
                "n_estimators": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RandomForestClassifier_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "make_pipeline_105": {
                "*steps": {
                    "value": "Nystroem(gamma=0.015, n_components=1000)",
                    "type": "Call",
                    "possible_values": []
                },
                "memory": {
                    "value": "LinearSVC(C=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "make_pipeline_108": {
                "*steps": {
                    "value": "RBFSampler(gamma=0.015, n_components=1000)",
                    "type": "Call",
                    "possible_values": []
                },
                "memory": {
                    "value": "LinearSVC(C=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LogisticRegression_111": {
                "solver": {
                    "value": "sag",
                    "type": "str",
                    "possible_values": []
                },
                "tol": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "C": {
                    "value": "10000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LogisticRegression_112": {
                "solver": {
                    "value": "saga",
                    "type": "str",
                    "possible_values": []
                },
                "tol": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "C": {
                    "value": "10000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MLPClassifier_113": {
                "hidden_layer_sizes": {
                    "value": "(32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "solver": {
                    "value": "sgd",
                    "type": "str",
                    "possible_values": []
                },
                "learning_rate_init": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "verbose": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "tol": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MLPClassifier_124": {
                "hidden_layer_sizes": {
                    "value": "(32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "solver": {
                    "value": "adam",
                    "type": "str",
                    "possible_values": []
                },
                "learning_rate_init": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "verbose": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "tol": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Nystroem_106": {
                "gamma": {
                    "value": "0.015",
                    "type": "float",
                    "possible_values": []
                },
                "n_components": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LinearSVC_106": {
                "C": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RBFSampler_109": {
                "gamma": {
                    "value": "0.015",
                    "type": "float",
                    "possible_values": []
                },
                "n_components": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LinearSVC_109": {
                "C": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/tests/xgboost/simple_example.py": {
        "sklearn": {
            "load_breast_cancer_10": {
                "variable": {
                    "value": "(data, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "train_test_split_12": {
                "variable": {
                    "value": "(train_x, test_x, train_y, test_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/tests/xgboost/simple_tune.py": {
        "sklearn": {
            "load_breast_cancer_14": {
                "variable": {
                    "value": "(data, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "train_test_split_16": {
                "variable": {
                    "value": "(train_x, test_x, train_y, test_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/train/sklearn/_sklearn_utils.py": {
        "sklearn": {}
    },
    "python/ray/train/sklearn/sklearn_checkpoint.py": {
        "sklearn": {}
    },
    "python/ray/train/sklearn/sklearn_predictor.py": {
        "sklearn": {}
    },
    "python/ray/train/sklearn/sklearn_trainer.py": {
        "sklearn": {
            "clone_181": {
                "variable": {
                    "value": "self.estimator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "estimator": {
                    "value": "estimator",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cross_validate_312": {
                "variable": {
                    "value": "cv_results",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "estimator",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "X_train['cv_groups']",
                            "Subscript"
                        ]
                    ]
                },
                "scoring": {
                    "value": "self.scoring",
                    "type": "Attribute",
                    "possible_values": []
                },
                "cv": {
                    "value": "self.cv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "n_jobs",
                    "type": "variable",
                    "possible_values": []
                },
                "fit_params": {
                    "value": "self.fit_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "return_train_score": {
                    "value": "self.return_train_score_cv",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "check_scoring_273": {
                "variable": {
                    "value": "scorers",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "estimator",
                    "type": "variable",
                    "possible_values": []
                },
                "scoring": {
                    "value": "self.scoring",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/train/tests/test_lightgbm_trainer.py": {
        "sklearn": {
            "load_breast_cancer_30": {
                "variable": {
                    "value": "data_raw",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "train_test_split_33": {
                "variable": {
                    "value": "(train_df, test_df)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "dataset_df",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/train/tests/test_sklearn_predictor.py": {
        "sklearn": {
            "RandomForestClassifier_39": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RandomForestClassifier_145": {
                "variable": {
                    "value": "pandas_model",
                    "type": "variable",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/train/tests/test_sklearn_trainer.py": {
        "sklearn": {
            "load_breast_cancer_28": {
                "variable": {
                    "value": "data_raw",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "train_test_split_31": {
                "variable": {
                    "value": "(train_df, test_df)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "dataset_df",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "RandomForestClassifier_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomForestClassifier_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomForestClassifier_86": {
                "n_jobs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RandomForestClassifier_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomForestClassifier_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomForestClassifier_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomForestClassifier_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomForestClassifier_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomForestClassifier_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/train/tests/test_xgboost_trainer.py": {
        "sklearn": {
            "load_breast_cancer_30": {
                "variable": {
                    "value": "data_raw",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "train_test_split_33": {
                "variable": {
                    "value": "(train_df, test_df)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "dataset_df",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/tune/examples/lightgbm_example.py": {
        "sklearn": {
            "train_test_split_21": {
                "variable": {
                    "value": "(train_x, test_x, train_y, test_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/tune/examples/utils.py": {
        "sklearn": {
            "load_iris_8": {
                "variable": {
                    "value": "iris_data",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "OneHotEncoder_11": {
                "variable": {
                    "value": "encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "sparse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "train_test_split_13": {
                "variable": {
                    "value": "(train_x, test_x, train_y, test_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "set_inter_op_parallelism_threads_20": {
                "num_threads": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "set_intra_op_parallelism_threads_21": {
                "num_threads": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/tune/examples/xgboost_dynamic_resources_example.py": {
        "sklearn": {
            "train_test_split_53": {
                "variable": {
                    "value": "(train_x, test_x, train_y, test_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "train_test_split_96": {
                "variable": {
                    "value": "(train_x, test_x, train_y, test_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "train_test_split_139": {
                "variable": {
                    "value": "(train_x, test_x, train_y, test_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/tune/examples/xgboost_example.py": {
        "sklearn": {
            "train_test_split_25": {
                "variable": {
                    "value": "(train_x, test_x, train_y, test_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/tune/impl/test_utils.py": {
        "sklearn": {
            "load_breast_cancer_15": {
                "variable": {
                    "value": "data_raw",
                    "type": "variable",
                    "possible_values": []
                },
                "as_frame": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/tune/schedulers/pb2.py": {
        "sklearn": {}
    },
    "python/ray/tune/schedulers/pb2_utils.py": {
        "sklearn": {
            "pairwise_distances_34": {
                "variable": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "T1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X[:, 0].reshape(-1, 1)",
                            "Call"
                        ],
                        [
                            "X[:, 0].reshape(-1, 1)",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "T2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X2[:, 0].reshape(-1, 1)",
                            "Call"
                        ],
                        [
                            "X2[:, 0].reshape(-1, 1)",
                            "Call"
                        ]
                    ]
                },
                "metric": {
                    "value": "cityblock",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pairwise_distances_63": {
                "X": {
                    "value": "T1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X[:, 0].reshape(-1, 1)",
                            "Call"
                        ],
                        [
                            "X[:, 0].reshape(-1, 1)",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "T2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X2[:, 0].reshape(-1, 1)",
                            "Call"
                        ],
                        [
                            "X2[:, 0].reshape(-1, 1)",
                            "Call"
                        ]
                    ]
                },
                "metric": {
                    "value": "cityblock",
                    "type": "str",
                    "possible_values": []
                }
            },
            "euclidean_distances_57": {
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalize(X_len, limits)",
                            "Call"
                        ],
                        [
                            "X[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "X[:, 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "Y": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.copy(X)",
                            "Call"
                        ],
                        [
                            "X2[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "np.copy(X)",
                            "Call"
                        ],
                        [
                            "X2[:, 1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "euclidean_distances_59": {
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalize(X_len, limits)",
                            "Call"
                        ],
                        [
                            "X[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "X[:, 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "Y": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.copy(X)",
                            "Call"
                        ],
                        [
                            "X2[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "np.copy(X)",
                            "Call"
                        ],
                        [
                            "X2[:, 1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "euclidean_distances_41": {
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalize(X_len, limits)",
                            "Call"
                        ],
                        [
                            "X[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "X[:, 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "Y": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.copy(X)",
                            "Call"
                        ],
                        [
                            "X2[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "np.copy(X)",
                            "Call"
                        ],
                        [
                            "X2[:, 1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "euclidean_distances_61": {
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalize(X_len, limits)",
                            "Call"
                        ],
                        [
                            "X[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "X[:, 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "Y": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.copy(X)",
                            "Call"
                        ],
                        [
                            "X2[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "np.copy(X)",
                            "Call"
                        ],
                        [
                            "X2[:, 1:]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "python/ray/tune/tests/test_tune_restore.py": {
        "sklearn": {
            "fetch_olivetti_faces_562": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "load_data_466": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/tune/tests/test_tuner.py": {
        "sklearn": {
            "load_breast_cancer_82": {
                "variable": {
                    "value": "data_raw",
                    "type": "variable",
                    "possible_values": []
                },
                "as_frame": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_breast_cancer_59": {
                "variable": {
                    "value": "data_raw",
                    "type": "variable",
                    "possible_values": []
                },
                "as_frame": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shuffle_63": {
                "variable": {
                    "value": "dataset_df",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "dataset_df",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "release/nightly_tests/decision_tree/cart_with_tree.py": {
        "sklearn": {
            "fetch_covtype_336": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "data_home": {
                    "value": "tempfile.mkdtemp()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "accuracy_score_345": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y[training_size:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clf.predict(X[training_size:])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "doc/source/data/doc_code/accessing_datasets.py": {
        "tensorflow": {
            "TensorSpec_157": {
                "shape": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorSpec_190": {
                "shape": {
                    "value": "(None, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorSpec_191": {
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {}
    },
    "doc/source/ray-air/doc_code/predictors.py": {
        "tensorflow": {
            "Sequential_17": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "layers": {
                    "value": "[tf.keras.layers.InputLayer(input_shape=()), tf.keras.layers.Flatten(), tf.keras.layers.Dense(1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "InputLayer_19": {
                "input_shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Flatten_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_22": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "doc/source/ray-air/doc_code/report_metrics_and_save_checkpoints.py": {
        "tensorflow": {
            "Sequential_14": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "layers": {
                    "value": "[tf.keras.layers.InputLayer(input_shape=(1,)), tf.keras.layers.Dense(10), tf.keras.layers.Dense(1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_model_30": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "loaded_checkpoint_dir",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "InputLayer_16": {
                "input_shape": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_17": {
                "units": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_18": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "doc/source/ray-air/doc_code/tf_starter.py": {
        "tensorflow": {
            "Sequential_27": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "layers": {
                    "value": "[tf.keras.layers.InputLayer(input_shape=()), tf.keras.layers.Flatten(), tf.keras.layers.Dense(10), tf.keras.layers.Dense(1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MultiWorkerMirroredStrategy_43": {
                "variable": {
                    "value": "strategy",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InputLayer_29": {
                "input_shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Flatten_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_32": {
                "units": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_33": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_48": {
                "learning_rate": {
                    "value": "config.get('lr', 0.001)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorSpec_61": {
                "shape": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorSpec_62": {
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "doc/source/ray-air/examples/tf_tabular_batch_prediction.py": {
        "tensorflow": {
            "Sequential_14": {
                "layers": {
                    "value": "[keras.Input(shape=(input_features,)), layers.Dense(16, activation='relu'), layers.Dense(16, activation='relu'), layers.Dense(1, activation='sigmoid')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Input_16": {
                "shape": {
                    "value": "(input_features,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_17": {
                "units": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_18": {
                "units": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_19": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "doc/source/ray-air/examples/tf_tabular_starter.py": {
        "tensorflow": {
            "MultiWorkerMirroredStrategy_92": {
                "variable": {
                    "value": "strategy",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "layers": {
                    "value": "[keras.Input(shape=(input_features,)), layers.Dense(16, activation='relu'), layers.Dense(16, activation='relu'), layers.Dense(1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorSpec_73": {
                "shape": {
                    "value": "(None, num_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorSpec_74": {
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Input_52": {
                "shape": {
                    "value": "(input_features,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_53": {
                "units": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_54": {
                "units": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_55": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_97": {
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['lr']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "BinaryCrossentropy_98": {
                "from_logits": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "convert_to_tensor_68": {
                "value": {
                    "value": "d['concat_out']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_69": {
                "value": {
                    "value": "d['target']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BinaryCrossentropy_100": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "doc/source/ray-core/examples/lbfgs/driver.py": {
        "tensorflow": {
            "placeholder_39": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_40": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_41": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(shape[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_45": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.matmul(x, w) + b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_46": {
                "variable": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, shape[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_48": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "-tf.reduce_sum(y_ * tf.log(y), reduction_indices=[1])",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gradients_52": {
                "variable": {
                    "value": "self.cross_entropy_grads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ys": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(-tf.reduce_sum(y_ * tf.log(y), reduction_indices=[1]))",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[w, b]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Session_53": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_40": {
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_41": {
                "shape": {
                    "value": "shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "device_78": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_45": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, shape[0]])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros(shape))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_49": {
                "input_tensor": {
                    "value": "y_ * tf.log(y)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_49": {
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.matmul(x, w) + b)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "doc/source/serve/doc_code/tutorial_tensorflow.py": {
        "tensorflow": {
            "Sequential_24": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "layers": {
                    "value": "[tf.keras.layers.Flatten(input_shape=(28, 28)), tf.keras.layers.Dense(128, activation='relu'), tf.keras.layers.Dropout(0.2), tf.keras.layers.Dense(10)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "SparseCategoricalCrossentropy_32": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "from_logits": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_model_55": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filepath": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Flatten_26": {
                "input_shape": {
                    "value": "(28, 28)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_27": {
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_28": {
                "rate": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dense_29": {
                "units": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "doc/source/tune/doc_code/faq.py": {
        "tensorflow": {
            "set_seed_167": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "manual_seed_163": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/air/_internal/tensorflow_utils.py": {
        "tensorflow": {
            "concat_80": {
                "variable": {
                    "value": "concatenated_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[tf.expand_dims(tensor, axis=1) for tensor in tensors]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convert_to_tensor_102": {
                "value": {
                    "value": "ndarray",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_unwrap_ndarray_object_type_if_needed(ndarray)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.find_common_type(df.dtypes, [])",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "expand_dims_83": {
                "input": {
                    "value": "concatenated_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(tensors, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convert_to_tensor_67": {
                "value": {
                    "value": "series",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df[column]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.find_common_type(df.dtypes, [])",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "expand_dims_78": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensorize(series)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_69": {
                "values": {
                    "value": "[tensorize(element) for element in series]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/air/callbacks/keras.py": {
        "tensorflow": {}
    },
    "python/ray/air/examples/tf/tensorflow_autoencoder_example.py": {
        "tensorflow": {
            "Sequential_56": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "layers": {
                    "value": "[tf.keras.Input(shape=(784,)), tf.keras.layers.Dense(128, activation='relu'), tf.keras.layers.Dense(64, activation='relu'), tf.keras.layers.Dense(32, activation='relu'), tf.keras.layers.Dense(64, activation='relu'), tf.keras.layers.Dense(128, activation='relu'), tf.keras.layers.Dense(784, activation='sigmoid')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MultiWorkerMirroredStrategy_79": {
                "variable": {
                    "value": "strategy",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Input_58": {
                "shape": {
                    "value": "(784,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_60": {
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_61": {
                "units": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_62": {
                "units": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_64": {
                "units": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_65": {
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_66": {
                "units": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BinaryCrossentropy_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_87": {
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.get('lr', 0.001)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorSpec_100": {
                "shape": {
                    "value": "(None, 784)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorSpec_101": {
                "shape": {
                    "value": "(None, 784)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/air/examples/tf/tensorflow_mnist_example.py": {
        "tensorflow": {
            "load_data_18": {
                "variable": {
                    "value": "((x_train, y_train), _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shuffle_24": {
                "variable": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "60000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "repeat_24": {
                "variable": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "batch_24": {
                "variable": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_33": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "layers": {
                    "value": "[tf.keras.Input(shape=(28, 28)), tf.keras.layers.Reshape(target_shape=(28, 28, 1)), tf.keras.layers.Conv2D(32, 3, activation='relu'), tf.keras.layers.Flatten(), tf.keras.layers.Dense(128, activation='relu'), tf.keras.layers.Dense(10)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MultiWorkerMirroredStrategy_54": {
                "variable": {
                    "value": "strategy",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Input_35": {
                "shape": {
                    "value": "(28, 28)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Reshape_36": {
                "target_shape": {
                    "value": "(28, 28, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_37": {
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Flatten_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_39": {
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_40": {
                "units": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SparseCategoricalCrossentropy_64": {
                "from_logits": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_65": {
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.get('lr', 0.001)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "python/ray/air/examples/tf/tensorflow_regression_example.py": {
        "tensorflow": {
            "Sequential_37": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "layers": {
                    "value": "[tf.keras.layers.InputLayer(input_shape=(100,)), tf.keras.layers.Flatten(), tf.keras.layers.Dense(10), tf.keras.layers.Dense(1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MultiWorkerMirroredStrategy_53": {
                "variable": {
                    "value": "strategy",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InputLayer_39": {
                "input_shape": {
                    "value": "(100,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Flatten_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_42": {
                "units": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_43": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_58": {
                "learning_rate": {
                    "value": "config.get('lr', 0.001)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorSpec_71": {
                "shape": {
                    "value": "(None, 100)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorSpec_72": {
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/air/tests/test_keras_callback.py": {
        "tensorflow": {
            "Sequential_24": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "layers": {
                    "value": "[tf.keras.layers.InputLayer(input_shape=()), tf.keras.layers.Flatten(), tf.keras.layers.Dense(10), tf.keras.layers.Dense(1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MultiWorkerMirroredStrategy_37": {
                "variable": {
                    "value": "strategy",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InputLayer_26": {
                "input_shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Flatten_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_29": {
                "units": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_30": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_42": {
                "learning_rate": {
                    "value": "config.get('lr', 0.001)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorSpec_54": {
                "shape": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorSpec_55": {
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/data/dataset.py": {
        "tensorflow": {
            "squeeze_2797": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convert_pandas_to_tf_tensor(batch[[label_column]])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(targets, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {}
    },
    "python/ray/data/dataset_pipeline.py": {
        "tensorflow": {},
        "torch": {}
    },
    "python/ray/data/datasource/tensorflow_datasource.py": {
        "tensorflow": {}
    },
    "python/ray/data/tests/test_dataset.py": {
        "tensorflow": {
            "TensorSpec_2658": {
                "shape": {
                    "value": "(None, len(feature_columns))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "TensorSpec_2659": {
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "TensorSpec_2687": {
                "shape": {
                    "value": "(None, len(feature_columns[0]))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "TensorSpec_2688": {
                "shape": {
                    "value": "(None, len(feature_columns[1]))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "TensorSpec_2714": {
                "shape": {
                    "value": "(None, len(feature_columns['A']))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "TensorSpec_2715": {
                "shape": {
                    "value": "(None, len(feature_columns['B']))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "TensorSpec_2742": {
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "TensorSpec_2640": {
                "shape": {
                    "value": "(None, len(feature_columns))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "TensorSpec_2740": {
                "shape": {
                    "value": "(None, len(feature_columns['A']))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "TensorSpec_1290": {
                "shape": {
                    "value": "(None, 2, 2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorSpec_1291": {
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorSpec_1340": {
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorSpec_2578": {
                "shape": {
                    "value": "(None, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorSpec_2579": {
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorSpec_1337": {
                "shape": {
                    "value": "(None, 2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorSpec_1338": {
                "shape": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "cat_2930": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(data, label)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_381": {
                "data": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_2911": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple(features)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2787": {
                "tensors": {
                    "value": "(batch[0], batch[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_2812": {
                "tensors": {
                    "value": "(batch['one'], batch['two'], batch['label'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2917": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple(features.values())",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/data/tests/test_dataset_formats.py": {
        "tensorflow": {
            "assert_equal_2787": {
                "x": {
                    "value": "expected_features",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "actual_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "assert_equal_2788": {
                "x": {
                    "value": "expected_label",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "actual_label",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/tests/ludwig/test_ludwig.py": {
        "tensorflow": {
            "experimental_run_functions_eagerly_107": {
                "run_eagerly": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/train/examples/tensorflow_mnist_example.py": {
        "tensorflow": {
            "load_data_17": {
                "variable": {
                    "value": "((x_train, y_train), _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shuffle_23": {
                "variable": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "60000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "repeat_23": {
                "variable": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "batch_23": {
                "variable": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_33": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "layers": {
                    "value": "[tf.keras.Input(shape=(28, 28)), tf.keras.layers.Reshape(target_shape=(28, 28, 1)), tf.keras.layers.Conv2D(32, 3, activation='relu'), tf.keras.layers.Flatten(), tf.keras.layers.Dense(128, activation='relu'), tf.keras.layers.Dense(10)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MultiWorkerMirroredStrategy_59": {
                "variable": {
                    "value": "strategy",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Input_35": {
                "shape": {
                    "value": "(28, 28)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Reshape_36": {
                "target_shape": {
                    "value": "(28, 28, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_37": {
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Flatten_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_39": {
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_40": {
                "units": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SparseCategoricalCrossentropy_44": {
                "from_logits": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_45": {
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.get('lr', 0.001)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "python/ray/train/examples/tensorflow_quick_start.py": {
        "tensorflow": {
            "load_data_11": {
                "variable": {
                    "value": "((x_train, y_train), _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shuffle_16": {
                "variable": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "60000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "repeat_16": {
                "variable": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "batch_16": {
                "variable": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                }
            },
            "Sequential_22": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "layers": {
                    "value": "[tf.keras.layers.InputLayer(input_shape=(28, 28)), tf.keras.layers.Reshape(target_shape=(28, 28, 1)), tf.keras.layers.Conv2D(32, 3, activation='relu'), tf.keras.layers.Flatten(), tf.keras.layers.Dense(128, activation='relu'), tf.keras.layers.Dense(10)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MultiWorkerMirroredStrategy_59": {
                "variable": {
                    "value": "strategy",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InputLayer_23": {
                "input_shape": {
                    "value": "(28, 28)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Reshape_24": {
                "target_shape": {
                    "value": "(28, 28, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_25": {
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Flatten_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_27": {
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_28": {
                "units": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SparseCategoricalCrossentropy_31": {
                "from_logits": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_32": {
                "learning_rate": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/train/tensorflow/__init__.py": {
        "tensorflow": {}
    },
    "python/ray/train/tensorflow/tensorflow_checkpoint.py": {
        "tensorflow": {}
    },
    "python/ray/train/tensorflow/tensorflow_predictor.py": {
        "tensorflow": {
            "device_55": {
                "device_name": {
                    "value": "GPU:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_157": {
                "device_name": {
                    "value": "GPU:0",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/train/tensorflow/train_loop_utils.py": {
        "tensorflow": {
            "Options_20": {
                "variable": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/train/tests/test_callbacks.py": {
        "tensorflow": {
            "summary_iterator_191": {
                "path": {
                    "value": "events_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(glob.glob(f'{events_dir}/events*'))[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "profile_285": {
                "activities": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "schedule": {
                    "value": "schedule(wait=0, warmup=0, active=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "on_trace_ready": {
                    "value": "twp.trace_handler",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/train/tests/test_minimal.py": {
        "tensorflow": {},
        "torch": {}
    },
    "python/ray/train/tests/test_tensorflow_predictor.py": {
        "tensorflow": {
            "Sequential_37": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "layers": {
                    "value": "[tf.keras.layers.InputLayer(input_shape=()), tf.keras.layers.Flatten(), tf.keras.layers.Dense(1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Input_49": {
                "variable": {
                    "value": "input1",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "A",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_50": {
                "variable": {
                    "value": "input2",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "B",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Model_52": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[input1, input2]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Add()([input1, input2])",
                            "Call"
                        ]
                    ]
                }
            },
            "Input_57": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Model_58": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Input(shape=1)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Input(shape=1)",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "{'a': input, 'b': input}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Input_64": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Model_65": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Input(shape=1)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Input(shape=1)",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "[input, input]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Add_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InputLayer_39": {
                "input_shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Flatten_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_42": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/train/tests/test_tensorflow_trainer.py": {
        "tensorflow": {
            "Sequential_29": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "layers": {
                    "value": "[tf.keras.layers.InputLayer(input_shape=()), tf.keras.layers.Flatten(), tf.keras.layers.Dense(1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "InputLayer_31": {
                "input_shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Flatten_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_34": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_model_100": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "checkpoint_dir",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/train/tests/test_tensorflow_utils.py": {
        "tensorflow": {
            "constant_13": {
                "variable": {
                    "value": "expected_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 2], [3, 4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.dtypes.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_17": {
                "variable": {
                    "value": "expected_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1], [3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.dtypes.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_26": {
                "variable": {
                    "value": "expected_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 2], [3, 4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.dtypes.float16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_36": {
                "variable": {
                    "value": "expected_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, 3, 32, 32]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "images.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assert_equal_14": {
                "x": {
                    "value": "actual_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convert_pandas_to_tf_tensor(df)",
                            "Call"
                        ],
                        [
                            "convert_pandas_to_tf_tensor(df[['X1']])",
                            "Call"
                        ],
                        [
                            "convert_pandas_to_tf_tensor(df, dtype=tf.dtypes.float16)",
                            "Call"
                        ],
                        [
                            "convert_pandas_to_tf_tensor(df)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "expected_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[1, 2], [3, 4]], dtype=tf.dtypes.int64)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1], [3]], dtype=tf.dtypes.int64)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2], [3, 4]], dtype=tf.dtypes.float16)",
                            "Call"
                        ],
                        [
                            "tf.zeros([4, 3, 32, 32], dtype=images.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "assert_equal_18": {
                "x": {
                    "value": "actual_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convert_pandas_to_tf_tensor(df)",
                            "Call"
                        ],
                        [
                            "convert_pandas_to_tf_tensor(df[['X1']])",
                            "Call"
                        ],
                        [
                            "convert_pandas_to_tf_tensor(df, dtype=tf.dtypes.float16)",
                            "Call"
                        ],
                        [
                            "convert_pandas_to_tf_tensor(df)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "expected_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[1, 2], [3, 4]], dtype=tf.dtypes.int64)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1], [3]], dtype=tf.dtypes.int64)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2], [3, 4]], dtype=tf.dtypes.float16)",
                            "Call"
                        ],
                        [
                            "tf.zeros([4, 3, 32, 32], dtype=images.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "assert_equal_27": {
                "x": {
                    "value": "actual_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convert_pandas_to_tf_tensor(df)",
                            "Call"
                        ],
                        [
                            "convert_pandas_to_tf_tensor(df[['X1']])",
                            "Call"
                        ],
                        [
                            "convert_pandas_to_tf_tensor(df, dtype=tf.dtypes.float16)",
                            "Call"
                        ],
                        [
                            "convert_pandas_to_tf_tensor(df)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "expected_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[1, 2], [3, 4]], dtype=tf.dtypes.int64)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1], [3]], dtype=tf.dtypes.int64)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2], [3, 4]], dtype=tf.dtypes.float16)",
                            "Call"
                        ],
                        [
                            "tf.zeros([4, 3, 32, 32], dtype=images.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "assert_equal_37": {
                "x": {
                    "value": "actual_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convert_pandas_to_tf_tensor(df)",
                            "Call"
                        ],
                        [
                            "convert_pandas_to_tf_tensor(df[['X1']])",
                            "Call"
                        ],
                        [
                            "convert_pandas_to_tf_tensor(df, dtype=tf.dtypes.float16)",
                            "Call"
                        ],
                        [
                            "convert_pandas_to_tf_tensor(df)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "expected_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[1, 2], [3, 4]], dtype=tf.dtypes.int64)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1], [3]], dtype=tf.dtypes.int64)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 2], [3, 4]], dtype=tf.dtypes.float16)",
                            "Call"
                        ],
                        [
                            "tf.zeros([4, 3, 32, 32], dtype=images.dtype)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "python/ray/tune/examples/pbt_memnn_example.py": {
        "tensorflow": {
            "get_file_105": {
                "variable": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                },
                "fname": {
                    "value": "babi-tasks-v1-2.tar.gz",
                    "type": "str",
                    "possible_values": []
                },
                "origin": {
                    "value": "https://s3.amazonaws.com/text-datasets/babi_tasks_1-20_v1-2.tar.gz",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_162": {
                "variable": {
                    "value": "input_sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(story_maxlen,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Input_163": {
                "variable": {
                    "value": "question",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(query_maxlen,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_167": {
                "variable": {
                    "value": "input_encoder_m",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_173": {
                "variable": {
                    "value": "input_encoder_c",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_179": {
                "variable": {
                    "value": "question_encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dot_195": {
                "variable": {
                    "value": "match",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "[input_encoded_m, question_encoded]",
                    "type": "List",
                    "possible_values": []
                },
                "axes": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "add_199": {
                "variable": {
                    "value": "response",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[match, input_encoded_c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concatenate_205": {
                "variable": {
                    "value": "answer",
                    "type": "variable",
                    "possible_values": []
                },
                "arys": {
                    "value": "[response, question_encoded]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Model_218": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "[input_sequence, question]",
                    "type": "List",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "answer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "concatenate([response, question_encoded])",
                            "Call"
                        ],
                        [
                            "LSTM(32)(answer)",
                            "Call"
                        ],
                        [
                            "Dropout(self.config.get('dropout', 0.3))(answer)",
                            "Call"
                        ],
                        [
                            "Dense(vocab_size)(answer)",
                            "Call"
                        ],
                        [
                            "Activation('softmax')(answer)",
                            "Call"
                        ]
                    ]
                }
            },
            "RMSprop_225": {
                "variable": {
                    "value": "rmsprop",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.get('lr', 0.001)",
                    "type": "Call",
                    "possible_values": []
                },
                "rho": {
                    "value": "self.config.get('rho', 0.9)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_model_258": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filepath": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_file('babi-tasks-v1-2.tar.gz', origin='https://s3.amazonaws.com/text-datasets/babi_tasks_1-20_v1-2.tar.gz')",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_sequences_96": {
                "sequences": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "story_maxlen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max((len(x) for (x, _, _) in self.train_stories + self.test_stories))",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_sequences_97": {
                "sequences": {
                    "value": "queries",
                    "type": "variable",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "query_maxlen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max((len(x) for (_, x, _) in self.train_stories + self.test_stories))",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_168": {
                "input_dim": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(vocab) + 1",
                            "BinOp"
                        ]
                    ]
                },
                "output_dim": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_169": {
                "rate": {
                    "value": "self.config.get('dropout', 0.3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_174": {
                "input_dim": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(vocab) + 1",
                            "BinOp"
                        ]
                    ]
                },
                "output_dim": {
                    "value": "query_maxlen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max((len(x) for (_, x, _) in self.train_stories + self.test_stories))",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_175": {
                "rate": {
                    "value": "self.config.get('dropout', 0.3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_181": {
                "input_dim": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(vocab) + 1",
                            "BinOp"
                        ]
                    ]
                },
                "output_dim": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "input_length": {
                    "value": "query_maxlen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max((len(x) for (_, x, _) in self.train_stories + self.test_stories))",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_183": {
                "rate": {
                    "value": "self.config.get('dropout', 0.3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Activation_196": {
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Permute_202": {
                "dims": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "LSTM_209": {
                "units": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_212": {
                "rate": {
                    "value": "self.config.get('dropout', 0.3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_213": {
                "units": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(vocab) + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Activation_215": {
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/tune/examples/pbt_tune_cifar10_with_keras.py": {
        "tensorflow": {
            "load_data_36": {
                "variable": {
                    "value": "((x_train, y_train), (x_test, y_test))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "to_categorical_39": {
                "variable": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.utils.to_categorical(y_train, num_classes)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                }
            },
            "to_categorical_40": {
                "variable": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.utils.to_categorical(y_test, num_classes)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                }
            },
            "Input_50": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(32, 32, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Model_110": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Input(shape=(32, 32, 3))",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "Convolution2D(filters=64, kernel_size=3, strides=1, padding='same', activation='relu', kernel_initializer='he_normal')(y)",
                            "Call"
                        ],
                        [
                            "Convolution2D(filters=64, kernel_size=3, strides=1, padding='same', activation='relu', kernel_initializer='he_normal')(y)",
                            "Call"
                        ],
                        [
                            "MaxPooling2D(pool_size=2, strides=2, padding='same')(y)",
                            "Call"
                        ],
                        [
                            "Convolution2D(filters=128, kernel_size=3, strides=1, padding='same', activation='relu', kernel_initializer='he_normal')(y)",
                            "Call"
                        ],
                        [
                            "Convolution2D(filters=128, kernel_size=3, strides=1, padding='same', activation='relu', kernel_initializer='he_normal')(y)",
                            "Call"
                        ],
                        [
                            "MaxPooling2D(pool_size=2, strides=2, padding='same')(y)",
                            "Call"
                        ],
                        [
                            "Convolution2D(filters=256, kernel_size=3, strides=1, padding='same', activation='relu', kernel_initializer='he_normal')(y)",
                            "Call"
                        ],
                        [
                            "Convolution2D(filters=256, kernel_size=3, strides=1, padding='same', activation='relu', kernel_initializer='he_normal')(y)",
                            "Call"
                        ],
                        [
                            "MaxPooling2D(pool_size=2, strides=2, padding='same')(y)",
                            "Call"
                        ],
                        [
                            "Flatten()(y)",
                            "Call"
                        ],
                        [
                            "Dropout(self.config.get('dropout', 0.5))(y)",
                            "Call"
                        ],
                        [
                            "Dense(units=10, activation='softmax', kernel_initializer='he_normal')(y)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "model1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adadelta_118": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.get('lr', 0.0001)",
                    "type": "Call",
                    "possible_values": []
                },
                "decay": {
                    "value": "self.config.get('decay', 0.0001)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ImageDataGenerator_132": {
                "variable": {
                    "value": "aug_gen",
                    "type": "variable",
                    "possible_values": []
                },
                "featurewise_center": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "samplewise_center": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "featurewise_std_normalization": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "samplewise_std_normalization": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "zca_whitening": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "rotation_range": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "width_shift_range": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "height_shift_range": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "horizontal_flip": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "vertical_flip": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_model_174": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filepath": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "MaxPooling2D_68": {
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPooling2D_86": {
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPooling2D_104": {
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Flatten_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_107": {
                "rate": {
                    "value": "self.config.get('dropout', 0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_108": {
                "units": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/tune/examples/tf_mnist_example.py": {
        "tensorflow": {
            "Conv2D_28": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Flatten_29": {
                "variable": {
                    "value": "self.flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_30": {
                "variable": {
                    "value": "self.d1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "hiddens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_31": {
                "variable": {
                    "value": "self.d2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_56": {
                "variable": {
                    "value": "self.test_ds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SparseCategoricalCrossentropy_59": {
                "variable": {
                    "value": "self.loss_object",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_60": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_61": {
                "variable": {
                    "value": "self.train_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "train_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SparseCategoricalAccuracy_62": {
                "variable": {
                    "value": "self.train_accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "train_accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Mean_66": {
                "variable": {
                    "value": "self.test_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "test_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SparseCategoricalAccuracy_67": {
                "variable": {
                    "value": "self.test_accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "test_accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_data_47": {
                "variable": {
                    "value": "((x_train, y_train), (x_test, y_test))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientTape_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/tune/examples/tune_mnist_keras.py": {
        "tensorflow": {
            "Sequential_24": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "layers": {
                    "value": "[tf.keras.layers.Flatten(input_shape=(28, 28)), tf.keras.layers.Dense(config['hidden'], activation='relu'), tf.keras.layers.Dropout(0.2), tf.keras.layers.Dense(num_classes, activation='softmax')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_data_22": {
                "variable": {
                    "value": "((x_train, y_train), (x_test, y_test))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Flatten_26": {
                "input_shape": {
                    "value": "(28, 28)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_27": {
                "units": {
                    "value": "config['hidden']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_28": {
                "rate": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dense_29": {
                "units": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SGD_35": {
                "lr": {
                    "value": "config['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "config['momentum']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/tune/tests/test_logger.py": {
        "tensorflow": {
            "summary_iterator_225": {
                "path": {
                    "value": "events_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(glob.glob(f'{self.test_dir}/events*'))[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "release/air_tests/air_benchmarks/workloads/_tensorflow_prepare.py": {
        "tensorflow": {
            "load_data_3": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "release/air_tests/air_benchmarks/workloads/tensorflow_benchmark.py": {
        "tensorflow": {
            "load_data_15": {
                "variable": {
                    "value": "((x_train, y_train), _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shuffle_21": {
                "variable": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "60000",
                    "type": "int",
                    "possible_values": []
                },
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "batch_21": {
                "variable": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_29": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "layers": {
                    "value": "[tf.keras.Input(shape=(28, 28)), tf.keras.layers.Flatten(), tf.keras.layers.Dense(512, activation='relu'), tf.keras.layers.Dense(512, activation='relu'), tf.keras.layers.Dense(10)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MultiWorkerMirroredStrategy_58": {
                "variable": {
                    "value": "strategy",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Input_31": {
                "shape": {
                    "value": "(28, 28)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Flatten_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_33": {
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_34": {
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_35": {
                "units": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SparseCategoricalCrossentropy_67": {
                "from_logits": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_68": {
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.get('lr', 0.001)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "rllib/utils/framework.py": {
        "tensorflow": {
            "get_variable_254": {
                "name": {
                    "value": "tf_name",
                    "type": "variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype or getattr(value, 'dtype', tf.float32 if isinstance(value, float) else tf.int32 if isinstance(value, int) else None)",
                            "BoolOp"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "executing_eagerly_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "from_numpy_263": {
                "variable": {
                    "value": "var_",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "rllib/utils/test_utils.py": {
        "tensorflow": {}
    },
    "rllib/utils/tf_run_builder.py": {
        "tensorflow": {}
    },
    "rllib/utils/tf_utils.py": {
        "tensorflow": {}
    },
    "doc/source/ray-air/doc_code/hvd_trainer.py": {
        "torch": {
            "MSELoss_34": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_36": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1 * lr_scaler",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "layer_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "15",
                            "Constant"
                        ]
                    ]
                }
            },
            "ReLU_21": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "layer_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "15",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "doc/source/ray-air/doc_code/pytorch_starter.py": {
        "torch": {
            "DataLoader_102": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "training_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.FashionMNIST(root='~/data', train=True, download=True, transform=ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "worker_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size // session.get_world_size()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataLoader_103": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.FashionMNIST(root='~/data', train=False, download=True, transform=ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "worker_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size // session.get_world_size()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_112": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_113": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['lr']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Flatten_40": {
                "variable": {
                    "value": "self.flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.linear_relu_stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(28 * 28, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_42": {
                "in_features": {
                    "value": "28 * 28",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_44": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_46": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "doc/source/ray-air/doc_code/torch_trainer.py": {
        "torch": {
            "MSELoss_30": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_31": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "layer_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "15",
                            "Constant"
                        ]
                    ]
                }
            },
            "ReLU_20": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "layer_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "15",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "unsqueeze_39": {
                "input": {
                    "value": "batches['x']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "doc/source/ray-air/examples/pytorch_tabular_batch_prediction.py": {
        "torch": {
            "Sequential_12": {
                "*args": {
                    "value": "nn.Linear(in_features=input_features, out_features=16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_13": {
                "in_features": {
                    "value": "input_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_15": {
                "in_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_17": {
                "in_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "doc/source/ray-air/examples/pytorch_tabular_starter.py": {
        "torch": {
            "BCELoss_79": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_80": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['lr']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Sequential_44": {
                "*args": {
                    "value": "nn.Linear(in_features=input_features, out_features=16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "in_features": {
                    "value": "input_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_47": {
                "in_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_49": {
                "in_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "doc/source/ray-overview/doc_test/ray_train.py": {
        "torch": {
            "Linear_9": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MSELoss_11": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_12": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "randn_15": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TensorDataset_17": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_18": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.TensorDataset(input, labels)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "doc/source/serve/doc_code/tutorial_pytorch.py": {
        "torch": {
            "cat_38": {
                "variable": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.preprocessor(i).unsqueeze(0) for i in pil_images]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "no_grad_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_46": {
                "input": {
                    "value": "output_tensor[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "doc/source/tune/doc_code/pytorch_optuna.py": {
        "torch": {
            "SGD_92": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "config['momentum']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "nll_loss_22": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_50": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('~/data', train=True, download=True, transform=mnist_transforms)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_57": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('~/data', train=False, download=True, transform=mnist_transforms)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_71": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_74": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.max_pool2d(self.conv1(x), 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_14": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_28": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_38": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_77": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 3))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 192)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_74": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/air/_internal/torch_utils.py": {
        "torch": {
            "as_tensor_122": {
                "data": {
                    "value": "ndarray",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_unwrap_ndarray_object_type_if_needed(ndarray)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_91": {
                "variable": {
                    "value": "feature_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feature_tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "as_tensor_67": {
                "data": {
                    "value": "vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vals.to_numpy()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_73": {
                "tensors": {
                    "value": "[tensorize(x, dtype) for x in vals]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/air/examples/custom_trainer.py": {
        "torch": {
            "Linear_14": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_15": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MSELoss_24": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/air/examples/horovod/horovod_cifar_pbt_example.py": {
        "torch": {
            "device_33": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SGD_35": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config['lr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_50": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_59": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ray.get(config['data'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "int(config['batch_size'])",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_53": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/air/examples/horovod/horovod_pytorch_example.py": {
        "torch": {
            "SGD_96": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr * lr_scaler",
                    "type": "BinOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.get('momentum', 0.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_29": {
                "variable": {
                    "value": "self.conv2_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_34": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.max_pool2d(self.conv1(x), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_35": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.max_pool2d(self.conv2_drop(self.conv2(x)), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_37": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_38": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nll_loss_120": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_softmax_40": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool2d_34": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_35": {
                "input": {
                    "value": "self.conv2_drop(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/air/examples/horovod/horovod_tune_example.py": {
        "torch": {
            "device_55": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SGD_58": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config['lr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_67": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_75": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_35": {
                "variable": {
                    "value": "self.param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([1.0, -1.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_38": {
                "variable": {
                    "value": "self.param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([1.0, -1.0, 1.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/air/examples/huggingface/huggingface_basic_language_modeling_example.py": {
        "torch": {
            "is_available_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/air/examples/pytorch/torch_fashion_mnist_example.py": {
        "torch": {
            "DataLoader_98": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "training_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.FashionMNIST(root='~/data', train=True, download=True, transform=ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "worker_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size // session.get_world_size()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataLoader_99": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.FashionMNIST(root='~/data', train=False, download=True, transform=ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "worker_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size // session.get_world_size()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_108": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_109": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['lr']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Flatten_36": {
                "variable": {
                    "value": "self.flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.linear_relu_stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(28 * 28, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_38": {
                "in_features": {
                    "value": "28 * 28",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_40": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_42": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/air/examples/pytorch/torch_linear_example.py": {
        "torch": {
            "DataLoader_65": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LinearDataset(2, 5, size=data_size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.get('batch_size', 32)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_66": {
                "variable": {
                    "value": "validation_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LinearDataset(2, 5, size=val_size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.get('batch_size', 32)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_71": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.get('hidden_size', 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "MSELoss_74": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_76": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.get('lr', 0.01)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_17": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(0, 10, 10 / size, dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_18": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "a * x + b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/air/examples/pytorch/torch_regression_example.py": {
        "torch": {
            "Sequential_80": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(100, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "L1Loss_85": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_87": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.get('lr', 0.01)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_81": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.get('hidden_size', 10)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/air/examples/pytorch_geometric/distributed_sage_example.py": {
        "torch": {
            "Adam_94": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ModuleList_27": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_56": {
                "variable": {
                    "value": "x_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_113": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x[n_id], adjs)",
                            "Call"
                        ],
                        [
                            "model.module.test(x, subgraph_loader)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y[n_id[:batch_size]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_38": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.convs[i]((x, x_target), edge_index)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "x_all[n_id].to(train.torch.get_device())",
                            "Call"
                        ],
                        [
                            "self.convs[i]((x, x_target), edge_index)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_39": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.convs[i]((x, x_target), edge_index)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "x_all[n_id].to(train.torch.get_device())",
                            "Call"
                        ],
                        [
                            "self.convs[i]((x, x_target), edge_index)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_53": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.convs[i]((x, x_target), edge_index)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "x_all[n_id].to(train.torch.get_device())",
                            "Call"
                        ],
                        [
                            "self.convs[i]((x, x_target), edge_index)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/data/_internal/torch_iterable_dataset.py": {
        "torch": {}
    },
    "python/ray/data/datasource/torch_datasource.py": {
        "torch": {}
    },
    "python/ray/tests/horovod/horovod_example.py": {
        "torch": {
            "SGD_96": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr * lr_scaler",
                    "type": "BinOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_25": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_27": {
                "variable": {
                    "value": "self.conv2_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_32": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.max_pool2d(self.conv1(x), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_33": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.max_pool2d(self.conv2_drop(self.conv2(x)), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_35": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_36": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_38": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "nll_loss_114": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_pool2d_32": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_33": {
                "input": {
                    "value": "self.conv2_drop(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/tests/horovod/test_horovod.py": {
        "torch": {
            "randn_39": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(2, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_43": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cross_entropy_57": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.LongTensor(batch_size).random_() % 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_42": {
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/tests/ray_lightning/simple_example.py": {
        "torch": {
            "Sequential_18": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(28 * 28, 128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_21": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(3, 128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mse_loss_36": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder(z)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_41": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataLoader_54": {
                "dataset": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_22": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "28 * 28",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/tests/ray_lightning/simple_tune.py": {
        "torch": {
            "Sequential_20": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(28 * 28, 128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_23": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(3, 128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mse_loss_39": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder(z)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_44": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_59": {
                "dataset": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_24": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "28 * 28",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/train/examples/horovod/horovod_example.py": {
        "torch": {
            "SGD_96": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr * lr_scaler",
                    "type": "BinOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.get('momentum', 0.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_29": {
                "variable": {
                    "value": "self.conv2_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_34": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.max_pool2d(self.conv1(x), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_35": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.max_pool2d(self.conv2_drop(self.conv2(x)), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_37": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_38": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nll_loss_120": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_softmax_40": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool2d_34": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_35": {
                "input": {
                    "value": "self.conv2_drop(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/train/examples/torch_data_prefetch_benchmark/auto_pipeline_for_host_to_device_data_transfer.py": {
        "torch": {
            "DataLoader_65": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BenchmarkDataset(4096, size=data_size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.get('batch_size', 4096)",
                            "Call"
                        ]
                    ]
                }
            },
            "MSELoss_74": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_75": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.get('lr', 0.01)",
                            "Call"
                        ]
                    ]
                }
            },
            "Event_77": {
                "variable": {
                    "value": "start",
                    "type": "variable",
                    "possible_values": []
                },
                "enable_timing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Event_78": {
                "variable": {
                    "value": "end",
                    "type": "variable",
                    "possible_values": []
                },
                "enable_timing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_19": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(dims[i - 1], dims[i]) for i in range(len(dims))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "from_numpy_33": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.normal(size=(size, dim))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_34": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.normal(size=(size, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "synchronize_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_20": {
                "in_features": {
                    "value": "dims[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dims[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/train/examples/torch_fashion_mnist_example.py": {
        "torch": {
            "DataLoader_98": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "training_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.FashionMNIST(root='~/data', train=True, download=True, transform=ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "worker_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size // session.get_world_size()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataLoader_99": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.FashionMNIST(root='~/data', train=False, download=True, transform=ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "worker_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size // session.get_world_size()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_108": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_109": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['lr']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Flatten_36": {
                "variable": {
                    "value": "self.flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.linear_relu_stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(28 * 28, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_38": {
                "in_features": {
                    "value": "28 * 28",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_40": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_42": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/train/examples/torch_linear_example.py": {
        "torch": {
            "DataLoader_66": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LinearDataset(2, 5, size=data_size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.get('batch_size', 32)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_67": {
                "variable": {
                    "value": "validation_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LinearDataset(2, 5, size=val_size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.get('batch_size', 32)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_72": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.get('hidden_size', 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "MSELoss_75": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_77": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.get('lr', 0.01)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_18": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(0, 10, 10 / size, dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_19": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "a * x + b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/train/examples/torch_quick_start.py": {
        "torch": {
            "randn_25": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                }
            },
            "randn_26": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                }
            },
            "MSELoss_37": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_38": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MSELoss_58": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_59": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "layer_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "15",
                            "Constant"
                        ]
                    ]
                }
            },
            "ReLU_18": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "layer_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "15",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "python/ray/train/examples/transformers/transformers_example.py": {
        "torch": {
            "DataLoader_449": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "processed_datasets['train']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "data_collator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "default_data_collator",
                            "Name"
                        ],
                        [
                            "DataCollatorWithPadding(tokenizer, pad_to_multiple_of=8 if accelerator.use_fp16 else None)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.per_device_train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_455": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "processed_datasets['validation_matched' if args.task_name == 'mnli' else 'validation']",
                            "Subscript"
                        ],
                        [
                            "processed_datasets['validation_mismatched']",
                            "Subscript"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "data_collator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "default_data_collator",
                            "Name"
                        ],
                        [
                            "DataCollatorWithPadding(tokenizer, pad_to_multiple_of=8 if accelerator.use_fp16 else None)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.per_device_eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_586": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "processed_datasets['validation_matched' if args.task_name == 'mnli' else 'validation']",
                            "Subscript"
                        ],
                        [
                            "processed_datasets['validation_mismatched']",
                            "Subscript"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "data_collator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "default_data_collator",
                            "Name"
                        ],
                        [
                            "DataCollatorWithPadding(tokenizer, pad_to_multiple_of=8 if accelerator.use_fp16 else None)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.per_device_eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/train/examples/tune_cifar_torch_pbt_example.py": {
        "torch": {
            "SGD_67": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.get('lr', 0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "momentum": {
                    "value": "config.get('momentum', 0.9)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_104": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CIFAR10(root='~/data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "Subset(train_dataset, list(range(64)))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "worker_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['batch_size'] // session.get_world_size()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataLoader_105": {
                "variable": {
                    "value": "validation_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CIFAR10(root='~/data', train=False, download=False, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "Subset(validation_dataset, list(range(64)))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "worker_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['batch_size'] // session.get_world_size()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_111": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Subset_99": {
                "variable": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CIFAR10(root='~/data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "Subset(train_dataset, list(range(64)))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "list(range(64))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Subset_100": {
                "variable": {
                    "value": "validation_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CIFAR10(root='~/data', train=False, download=False, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "Subset(validation_dataset, list(range(64)))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "list(range(64))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/train/huggingface/_huggingface_utils.py": {
        "torch": {}
    },
    "python/ray/train/huggingface/huggingface_checkpoint.py": {
        "torch": {
            "save_53": {
                "obj": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.state_dict()",
                            "Call"
                        ],
                        [
                            "torch.load(os.path.join(checkpoint_path, WEIGHTS_NAME), map_location='cpu')",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(path, WEIGHTS_NAME)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_77": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(checkpoint_path, WEIGHTS_NAME)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_102": {
                "variable": {
                    "value": "training_args",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/train/huggingface/huggingface_trainer.py": {
        "torch": {}
    },
    "python/ray/train/tests/test_backend.py": {
        "torch": {
            "is_initialized_254": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/train/tests/test_gpu.py": {
        "torch": {
            "DataLoader_183": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset(a=1, b=2, size=10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_529": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Linear_161": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TensorDataset_235": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.randn(dataset_length, 3, 32, 32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_239": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.TensorDataset(torch.randn(dataset_length, 3, 32, 32), torch.randint(low=0, high=1000, size=(dataset_length,)))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.TensorDataset(torch.randn(dataset_length, 3, 224, 224), torch.randint(low=0, high=1000, size=(dataset_length,)))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_242": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "TensorDataset_275": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.randn(dataset_length, 3, 224, 224)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_279": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.TensorDataset(torch.randn(dataset_length, 3, 32, 32), torch.randint(low=0, high=1000, size=(dataset_length,)))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.TensorDataset(torch.randn(dataset_length, 3, 224, 224), torch.randint(low=0, high=1000, size=(dataset_length,)))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_282": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_343": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_370": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_480": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "device_choice",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Event_481": {
                "variable": {
                    "value": "start",
                    "type": "variable",
                    "possible_values": []
                },
                "enable_timing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Event_482": {
                "variable": {
                    "value": "end",
                    "type": "variable",
                    "possible_values": []
                },
                "enable_timing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_236": {
                "*size": {
                    "value": "dataset_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_237": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(dataset_length,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cross_entropy_250": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(images)",
                            "Call"
                        ],
                        [
                            "model(images)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_276": {
                "*size": {
                    "value": "dataset_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_277": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(dataset_length,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cross_entropy_291": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(images)",
                            "Call"
                        ],
                        [
                            "model(images)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "synchronize_485": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_489": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_494": {
                "*size": {
                    "value": "(1024 * 4, 1024 * 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_500": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch[0]",
                            "Subscript"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch[0]",
                            "Subscript"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_507": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch[0]",
                            "Subscript"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch[0]",
                            "Subscript"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_530": {
                "*size": {
                    "value": "(1024 * 4, 1024 * 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/train/tests/test_horovod_trainer.py": {
        "torch": {
            "DataLoader_60": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.MNIST('./data', train=False, download=True, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))]))",
                            "Call"
                        ],
                        [
                            "datasets.MNIST('./data', train=False, download=True, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_97": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.MNIST('./data', train=False, download=True, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))]))",
                            "Call"
                        ],
                        [
                            "datasets.MNIST('./data', train=False, download=True, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_66": {
                "input": {
                    "value": "predicted_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_image_prediction(predictor.model, images)",
                            "Call"
                        ],
                        [
                            "run_image_prediction(predictor.model, images)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_103": {
                "input": {
                    "value": "predicted_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_image_prediction(predictor.model, images)",
                            "Call"
                        ],
                        [
                            "run_image_prediction(predictor.model, images)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_29": {
                "input": {
                    "value": "model(images)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_29": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/train/tests/test_torch_predictor.py": {
        "torch": {
            "Linear_247": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_260": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_261": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/train/tests/test_torch_trainer.py": {
        "torch": {
            "Linear_62": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_88": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_104": {
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/train/tests/test_torch_utils.py": {
        "torch": {
            "Linear_78": {
                "variable": {
                    "value": "torch_module",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_87": {
                "variable": {
                    "value": "model_definition",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/train/tests/test_trainer.py": {
        "torch": {
            "Linear_623": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_660": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/train/torch/__init__.py": {
        "torch": {}
    },
    "python/ray/train/torch/config.py": {
        "torch": {
            "is_available_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_185": {
                "variable": {
                    "value": "checkpoint_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "_buffer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "io.BytesIO()",
                            "Call"
                        ],
                        [
                            "io.BytesIO(encoded_data)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "empty_cache_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_178": {
                "obj": {
                    "value": "data_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "_buffer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "io.BytesIO()",
                            "Call"
                        ],
                        [
                            "io.BytesIO(encoded_data)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "python/ray/train/torch/torch_checkpoint.py": {
        "torch": {}
    },
    "python/ray/train/torch/torch_predictor.py": {
        "torch": {
            "no_grad_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_46": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_count_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/train/torch/train_loop_utils.py": {
        "torch": {
            "current_stream_621": {
                "variable": {
                    "value": "curr_stream",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_295": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_494": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_522": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{device_id}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "device_524": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_554": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "use_deterministic_algorithms_558": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GradScaler_259": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_296": {
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_device()",
                            "Call"
                        ],
                        [
                            "self.get_device()",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device(f'cuda:{device_id}')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_350": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DistributedDataParallel_351": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "DistributedDataParallel(model, device_ids=[rank], output_device=rank, **ddp_kwargs)",
                            "Call"
                        ],
                        [
                            "DistributedDataParallel(model, **ddp_kwargs)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "session.get_local_rank()",
                            "Call"
                        ],
                        [
                            "train.local_rank()",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_355": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "DistributedDataParallel(model, device_ids=[rank], output_device=rank, **ddp_kwargs)",
                            "Call"
                        ],
                        [
                            "DistributedDataParallel(model, **ddp_kwargs)",
                            "Call"
                        ]
                    ]
                }
            },
            "Stream_580": {
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_device()",
                            "Call"
                        ],
                        [
                            "self.get_device()",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device(f'cuda:{device_id}')",
                            "Call"
                        ]
                    ]
                }
            },
            "autocast_327": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Generator_436": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DistributedSampler_460": {
                "dataset": {
                    "value": "loader.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "not isinstance(loader.sampler, SequentialSampler)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "initial_seed_425": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/tune/examples/cifar10_pytorch.py": {
        "torch": {
            "CrossEntropyLoss_79": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_80": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config['lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'l1': tune.sample_from(lambda _: 2 ** np.random.randint(2, 9)), 'l2': tune.sample_from(lambda _: 2 ** np.random.randint(2, 9)), 'lr': tune.loguniform(0.0001, 0.1), 'batch_size': tune.choice([2, 4, 8, 16])}",
                            "Dict"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataLoader_97": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_subset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "int(config['batch_size'])",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_102": {
                "variable": {
                    "value": "valloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_subset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "int(config['batch_size'])",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_180": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root=data_dir, train=False, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_51": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "16 * 5 * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "l1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "120",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "l1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "120",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "l2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "84",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "l2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "84",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_61": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_62": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_175": {
                "variable": {
                    "value": "(model_state, optimizer_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, 'checkpoint.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_76": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Net(config['l1'], config['l2'])",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(net)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_86": {
                "variable": {
                    "value": "(model_state, optimizer_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(loaded_checkpoint_dir, 'checkpoint.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_159": {
                "obj": {
                    "value": "(net.state_dict(), optimizer.state_dict())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join('my_model', 'checkpoint.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_190": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_58": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_59": {
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_count_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_144": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/tune/examples/mnist_ptl_mini.py": {
        "torch": {
            "Linear_25": {
                "variable": {
                    "value": "self.layer_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "28 * 28",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.layer_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.layer_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_34": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "self.layer_1(x)",
                            "Call"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "self.layer_2(x)",
                            "Call"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "self.layer_3(x)",
                            "Call"
                        ],
                        [
                            "torch.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_36": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "self.layer_1(x)",
                            "Call"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "self.layer_2(x)",
                            "Call"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "self.layer_3(x)",
                            "Call"
                        ],
                        [
                            "torch.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_38": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "self.layer_1(x)",
                            "Call"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "self.layer_2(x)",
                            "Call"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "self.layer_3(x)",
                            "Call"
                        ],
                        [
                            "torch.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_47": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(x)",
                            "Call"
                        ],
                        [
                            "self.forward(x)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "nll_loss_56": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(x)",
                            "Call"
                        ],
                        [
                            "self.forward(x)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_61": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['val_loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_61": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_62": {
                "variable": {
                    "value": "avg_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['val_accuracy'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_62": {
                "variable": {
                    "value": "avg_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_42": {
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/tune/examples/mnist_pytorch.py": {
        "torch": {
            "is_available_94": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_95": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SGD_99": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "config['momentum']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_29": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.max_pool2d(self.conv1(x), 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nll_loss_44": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_76": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('~/data', train=True, download=True, transform=mnist_transforms)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_83": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('~/data', train=False, download=True, transform=mnist_transforms)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_softmax_32": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 3))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 192)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_36": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_50": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_60": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pool2d_29": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/tune/examples/mnist_pytorch_lightning.py": {
        "torch": {
            "Linear_45": {
                "variable": {
                    "value": "self.layer_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "28 * 28",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.layer_1_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_46": {
                "variable": {
                    "value": "self.layer_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.layer_1_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.layer_2_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_47": {
                "variable": {
                    "value": "self.layer_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.layer_2_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_54": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "self.layer_1(x)",
                            "Call"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "self.layer_2(x)",
                            "Call"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "self.layer_3(x)",
                            "Call"
                        ],
                        [
                            "torch.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_57": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "self.layer_1(x)",
                            "Call"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "self.layer_2(x)",
                            "Call"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "self.layer_3(x)",
                            "Call"
                        ],
                        [
                            "torch.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_60": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "self.layer_1(x)",
                            "Call"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "self.layer_2(x)",
                            "Call"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "self.layer_3(x)",
                            "Call"
                        ],
                        [
                            "torch.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_68": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_91": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['val_loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_91": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_92": {
                "variable": {
                    "value": "avg_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['val_accuracy'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_92": {
                "variable": {
                    "value": "avg_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_118": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nll_loss_65": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(x)",
                            "Call"
                        ],
                        [
                            "self.forward(x)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_71": {
                "data": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "correct / len(labels)",
                            "BinOp"
                        ],
                        [
                            "self.accuracy(logits, y)",
                            "Call"
                        ],
                        [
                            "self.accuracy(logits, y)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_112": {
                "dataset": {
                    "value": "self.mnist_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "int(self.batch_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_115": {
                "dataset": {
                    "value": "self.mnist_val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "int(self.batch_size)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/tune/examples/mnist_pytorch_trainable.py": {
        "torch": {
            "device_36": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SGD_39": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.get('lr', 0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "momentum": {
                    "value": "config.get('momentum', 0.9)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_52": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, 'model.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_56": {
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, 'model.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "python/ray/tune/examples/pbt_convnet_example.py": {
        "torch": {
            "SGD_34": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.get('lr', 0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "momentum": {
                    "value": "config.get('momentum', 0.9)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_46": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, 'model.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_50": {
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, 'model.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "python/ray/tune/examples/pbt_convnet_function_example.py": {
        "torch": {
            "SGD_25": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.get('lr', 0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "momentum": {
                    "value": "config.get('momentum', 0.9)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_72": {
                "variable": {
                    "value": "best_checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(best_checkpoint_path, 'checkpoint.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_38": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(loaded_checkpoint_dir, 'checkpoint.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_52": {
                "obj": {
                    "value": "{'step': step, 'model_state_dict': model.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "my_model/checkpoint.pt",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/tune/examples/pbt_dcgan_mnist/common.py": {
        "torch": {
            "DataLoader_60": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dset.MNIST(root=data_dir, download=True, transform=transforms.Compose([transforms.Resize(image_size), transforms.ToTensor(), transforms.Normalize((0.5,), (0.5,))]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_151": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Upsample_153": {
                "variable": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(28, 28)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "randn_269": {
                "variable": {
                    "value": "fixed_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "nz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_82": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(nz, ngf * 4, 4, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_104": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(nc, ndf, 4, 2, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_132": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_133": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_134": {
                "variable": {
                    "value": "self.conv2_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_135": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_136": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_139": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.max_pool2d(self.conv1(x), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_140": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.max_pool2d(self.conv2_drop(self.conv2(x)), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_142": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_143": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "up(x)",
                            "Call"
                        ],
                        [
                            "cm(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_205": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(b_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "real_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_211": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "b_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "real_cpu.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_softmax_145": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "up(x)",
                            "Call"
                        ],
                        [
                            "cm(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_84": {
                "in_channels": {
                    "value": "nz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_85": {
                "num_features": {
                    "value": "ngf * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_86": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_87": {
                "in_channels": {
                    "value": "ngf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_88": {
                "num_features": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_89": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_90": {
                "in_channels": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_91": {
                "num_features": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                }
            },
            "ReLU_92": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_93": {
                "in_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_105": {
                "in_channels": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_106": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_107": {
                "in_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_108": {
                "num_features": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_109": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_110": {
                "in_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_111": {
                "num_features": {
                    "value": "ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_112": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_113": {
                "in_channels": {
                    "value": "ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_pool2d_139": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_140": {
                "input": {
                    "value": "self.conv2_drop(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_274": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_273": {
                "f": {
                    "value": "netG_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(path, 'checkpoint.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_158": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "up(x)",
                            "Call"
                        ],
                        [
                            "cm(x)",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "python/ray/tune/examples/pbt_dcgan_mnist/pbt_dcgan_mnist_func.py": {
        "torch": {
            "device_30": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "BCELoss_35": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_36": {
                "variable": {
                    "value": "optimizerD",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.get('lr', 0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "betas": {
                    "value": "(beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_39": {
                "variable": {
                    "value": "optimizerG",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.get('lr', 0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "betas": {
                    "value": "(beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_49": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(loaded_checkpoint_dir, 'checkpoint.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_77": {
                "obj": {
                    "value": "{'netDmodel': netD.state_dict(), 'netGmodel': netG.state_dict(), 'optimD': optimizerD.state_dict(), 'optimG': optimizerG.state_dict(), 'step': step}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "my_model/checkpoint.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_128": {
                "f": {
                    "value": "MODEL_PATH",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/tune/examples/pbt_dcgan_mnist/pbt_dcgan_mnist_trainable.py": {
        "torch": {
            "device_30": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "BCELoss_35": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_36": {
                "variable": {
                    "value": "self.optimizerD",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.get('lr', 0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "betas": {
                    "value": "(beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_39": {
                "variable": {
                    "value": "self.optimizerG",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.get('lr', 0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "betas": {
                    "value": "(beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "load_76": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, 'checkpoint.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_dir, 'checkpoint')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_62": {
                "obj": {
                    "value": "{'netDmodel': self.netD.state_dict(), 'netGmodel': self.netG.state_dict(), 'optimD': self.optimizerD.state_dict(), 'optimG': self.optimizerG.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, 'checkpoint.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_dir, 'checkpoint')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_126": {
                "f": {
                    "value": "MODEL_PATH",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/tune/search/hebo/hebo_search.py": {
        "torch": {
            "get_rng_state_354": {
                "variable": {
                    "value": "torch_random_state",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_233": {
                "seed": {
                    "value": "self._random_state_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_rng_state_393": {
                "new_state": {
                    "value": "torch_random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.get_rng_state()",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "python/ray/tune/tests/ext_pytorch.py": {
        "torch": {
            "CrossEntropyLoss_218": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_219": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config['lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'l1': tune.sample_from(lambda _: 2 ** np.random.randint(2, 9)), 'l2': tune.sample_from(lambda _: 2 ** np.random.randint(2, 9)), 'lr': tune.loguniform(0.0001, 0.1), 'batch_size': tune.choice([2, 4, 8, 16])}",
                            "Dict"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataLoader_233": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_subset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "int(config['batch_size'])",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_238": {
                "variable": {
                    "value": "valloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_subset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "int(config['batch_size'])",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_308": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root=data_dir, train=False, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_428": {
                "variable": {
                    "value": "(model_state, optimizer_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(best_checkpoint_dir, 'checkpoint')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_100": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_101": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_102": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_103": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "16 * 5 * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "l1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "120",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_104": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "l1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "120",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "l2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "84",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_105": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "l2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "84",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_111": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_112": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_222": {
                "variable": {
                    "value": "(model_state, optimizer_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(checkpoint_dir, 'checkpoint')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_421": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_215": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Net(config['l1'], config['l2'])",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(net)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_313": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_318": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_424": {
                "variable": {
                    "value": "best_trained_model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "best_trained_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Net(best_trial.config['l1'], best_trial.config['l2'])",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(best_trained_model)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_108": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_109": {
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_count_214": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_280": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_290": {
                "obj": {
                    "value": "(net.state_dict(), optimizer.state_dict())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, 'checkpoint')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_275": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/tune/tests/test_integration_pytorch_lightning.py": {
        "torch": {
            "tensor_34": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_35": {
                "variable": {
                    "value": "self.acc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_50": {
                "variable": {
                    "value": "avg_val_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['val_loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_50": {
                "variable": {
                    "value": "avg_val_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_51": {
                "variable": {
                    "value": "avg_val_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['val_acc'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_51": {
                "variable": {
                    "value": "avg_val_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_59": {
                "dataset": {
                    "value": "_MockDataset(list(range(10)))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_62": {
                "dataset": {
                    "value": "_MockDataset(list(range(10)))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/tune/tests/test_sample.py": {
        "torch": {
            "manual_seed_887": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_890": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/tune/tests/tutorial.py": {
        "torch": {
            "load_194": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(logdir, 'model.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_46": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_61": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_87": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('~/data', train=True, download=True, transform=mnist_transforms)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_91": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('~/data', train=False, transform=mnist_transforms)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_96": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SGD_101": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "config['momentum']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_31": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.max_pool2d(self.conv1(x), 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nll_loss_55": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_softmax_34": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 3))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 192)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_72": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pool2d_31": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_112": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./model.pth",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/util/collective/collective_group/gloo_util.py": {
        "torch": {
            "numel_163": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_221": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/util/collective/collective_group/nccl_util.py": {
        "torch": {
            "numel_181": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/util/collective/tests/cpu_util.py": {
        "torch": {
            "ones_133": {
                "*size": {
                    "value": "array_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_125": {
                "*size": {
                    "value": "array_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/util/collective/tests/distributed_cpu_tests/test_distributed_allgather.py": {
        "torch": {
            "ones_91": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_105": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_122": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_112": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_38": {
                "*size": {
                    "value": "array_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_131": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/util/collective/tests/distributed_cpu_tests/test_distributed_allreduce.py": {
        "torch": {
            "ones_154": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_166": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/util/collective/tests/distributed_cpu_tests/test_distributed_broadcast.py": {
        "torch": {
            "ones_67": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_77": {
                "*size": {
                    "value": "(10,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_80": {
                "*size": {
                    "value": "(10,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/util/collective/tests/distributed_cpu_tests/test_distributed_reduce.py": {
        "torch": {
            "ones_119": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_128": {
                "*size": {
                    "value": "(10,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_131": {
                "*size": {
                    "value": "(10,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/util/collective/tests/distributed_cpu_tests/test_distributed_reducescatter.py": {
        "torch": {
            "ones_60": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_73": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_83": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_106": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_90": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_115": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_66": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_36": {
                "*size": {
                    "value": "array_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_98": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_121": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/util/collective/tests/distributed_gpu_tests/test_distributed_allgather.py": {
        "torch": {
            "ones_85": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_99": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_116": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_106": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_36": {
                "*size": {
                    "value": "array_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_126": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/util/collective/tests/distributed_gpu_tests/test_distributed_allreduce.py": {
        "torch": {
            "ones_143": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_155": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/util/collective/tests/distributed_gpu_tests/test_distributed_broadcast.py": {
        "torch": {
            "ones_61": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_71": {
                "*size": {
                    "value": "(10,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_74": {
                "*size": {
                    "value": "(10,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/util/collective/tests/distributed_gpu_tests/test_distributed_reduce.py": {
        "torch": {
            "ones_108": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_117": {
                "*size": {
                    "value": "(10,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_120": {
                "*size": {
                    "value": "(10,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/util/collective/tests/distributed_gpu_tests/test_distributed_reducescatter.py": {
        "torch": {
            "ones_57": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_72": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_82": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_105": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_89": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_114": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_64": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_35": {
                "*size": {
                    "value": "array_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_97": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_120": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/util/collective/tests/distributed_multigpu_tests/test_distributed_multigpu_allgather.py": {
        "torch": {
            "ones_79": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_39": {
                "*size": {
                    "value": "array_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/util/collective/tests/distributed_multigpu_tests/test_distributed_multigpu_broadcast.py": {
        "torch": {
            "ones_94": {
                "*size": {
                    "value": "[10]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/util/collective/tests/distributed_multigpu_tests/test_distributed_multigpu_reduce.py": {
        "torch": {
            "ones_169": {
                "*size": {
                    "value": "[10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_176": {
                "*size": {
                    "value": "[10]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/util/collective/tests/distributed_multigpu_tests/test_distributed_multigpu_reducescatter.py": {
        "torch": {
            "ones_65": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_40": {
                "*size": {
                    "value": "array_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/util/collective/tests/single_node_cpu_tests/test_allgather.py": {
        "torch": {
            "ones_89": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_103": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_120": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_110": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_36": {
                "*size": {
                    "value": "array_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_129": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/util/collective/tests/single_node_cpu_tests/test_allreduce.py": {
        "torch": {
            "ones_138": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_150": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/util/collective/tests/single_node_cpu_tests/test_broadcast.py": {
        "torch": {
            "ones_65": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_75": {
                "*size": {
                    "value": "(10,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_78": {
                "*size": {
                    "value": "(10,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/util/collective/tests/single_node_cpu_tests/test_reduce.py": {
        "torch": {
            "ones_139": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_148": {
                "*size": {
                    "value": "(10,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_151": {
                "*size": {
                    "value": "(10,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/util/collective/tests/single_node_cpu_tests/test_reducescatter.py": {
        "torch": {
            "ones_60": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_73": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_83": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_106": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_90": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_115": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_66": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_36": {
                "*size": {
                    "value": "array_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_98": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_121": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/util/collective/tests/single_node_cpu_tests/test_sendrecv.py": {
        "torch": {
            "ones_54": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_76": {
                "*size": {
                    "value": "(10,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_73": {
                "*size": {
                    "value": "(10,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/util/collective/tests/single_node_gpu_tests/test_allgather.py": {
        "torch": {
            "ones_85": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_99": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_116": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_106": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_36": {
                "*size": {
                    "value": "array_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_126": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/util/collective/tests/single_node_gpu_tests/test_allreduce.py": {
        "torch": {
            "ones_133": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_145": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/util/collective/tests/single_node_gpu_tests/test_broadcast.py": {
        "torch": {
            "ones_59": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_69": {
                "*size": {
                    "value": "(10,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_72": {
                "*size": {
                    "value": "(10,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/util/collective/tests/single_node_gpu_tests/test_reduce.py": {
        "torch": {
            "ones_132": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_141": {
                "*size": {
                    "value": "(10,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_144": {
                "*size": {
                    "value": "(10,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/util/collective/tests/single_node_gpu_tests/test_reducescatter.py": {
        "torch": {
            "ones_57": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_72": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_82": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_105": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_89": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_114": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_64": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_35": {
                "*size": {
                    "value": "array_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_97": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_120": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 10]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/util/collective/tests/single_node_gpu_tests/test_sendrecv.py": {
        "torch": {
            "ones_49": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_71": {
                "*size": {
                    "value": "(10,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_68": {
                "*size": {
                    "value": "(10,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/util/collective/tests/util.py": {
        "torch": {
            "ones_126": {
                "*size": {
                    "value": "array_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_118": {
                "*size": {
                    "value": "array_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_175": {
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_183": {
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_207": {
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_219": {
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "python/ray/util/collective/types.py": {
        "torch": {}
    },
    "release/air_tests/air_benchmarks/workloads/pytorch_training_e2e.py": {
        "torch": {
            "CrossEntropyLoss_43": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_44": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "release/air_tests/air_benchmarks/workloads/torch_benchmark.py": {
        "torch": {
            "DataLoader_145": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "training_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.FashionMNIST(root='/tmp/data_fashion_mnist', train=True, download=False, transform=ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.get('shuffle', False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "worker_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size // world_size",
                            "BinOp"
                        ]
                    ]
                },
                "sampler": {
                    "value": "training_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "DistributedSampler(training_data, shuffle=shuffle)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_152": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.FashionMNIST(root='/tmp/data_fashion_mnist', train=False, download=False, transform=ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.get('shuffle', False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "worker_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size // world_size",
                            "BinOp"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "DistributedSampler(test_data, shuffle=shuffle)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_181": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_182": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['lr']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Flatten_24": {
                "variable": {
                    "value": "self.flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "self.linear_relu_stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(28 * 28, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DistributedSampler_121": {
                "variable": {
                    "value": "training_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "training_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.FashionMNIST(root='/tmp/data_fashion_mnist', train=True, download=False, transform=ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.get('shuffle', False)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_122": {
                "variable": {
                    "value": "test_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.FashionMNIST(root='/tmp/data_fashion_mnist', train=False, download=False, transform=ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.get('shuffle', False)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_127": {
                "variable": {
                    "value": "vanilla_device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{gpu_id}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "device_141": {
                "variable": {
                    "value": "vanilla_device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_128": {
                "device": {
                    "value": "vanilla_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device(f'cuda:{gpu_id}')",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_175": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NeuralNetwork()",
                            "Call"
                        ],
                        [
                            "train.torch.prepare_model(model)",
                            "Call"
                        ],
                        [
                            "model.to(vanilla_device)",
                            "Call"
                        ],
                        [
                            "nn.parallel.DistributedDataParallel(model, device_ids=[gpu_id], output_device=gpu_id)",
                            "Call"
                        ],
                        [
                            "nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[gpu_id]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "gpu_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.get('gpu_id', 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_179": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NeuralNetwork()",
                            "Call"
                        ],
                        [
                            "train.torch.prepare_model(model)",
                            "Call"
                        ],
                        [
                            "model.to(vanilla_device)",
                            "Call"
                        ],
                        [
                            "nn.parallel.DistributedDataParallel(model, device_ids=[gpu_id], output_device=gpu_id)",
                            "Call"
                        ],
                        [
                            "nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_26": {
                "in_features": {
                    "value": "28 * 28",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_28": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_30": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "release/air_tests/horovod/workloads/horovod_tune_test.py": {
        "torch": {
            "device_33": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SGD_35": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config['lr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_50": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_59": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ray.get(config['data'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "int(config['batch_size'])",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_53": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "release/golden_notebook_tests/workloads/torch_tune_serve_test.py": {
        "torch": {
            "Conv2d_59": {
                "variable": {
                    "value": "model.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_63": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.get('lr', 0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "momentum": {
                    "value": "config.get('momentum', 0.9)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_77": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_mnist_data(True, True)",
                            "Call"
                        ],
                        [
                            "Subset(train_dataset, list(range(64)))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_80": {
                "variable": {
                    "value": "validation_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_mnist_data(False, False)",
                            "Call"
                        ],
                        [
                            "Subset(validation_dataset, list(range(64)))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_88": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_133": {
                "variable": {
                    "value": "model.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Subset_74": {
                "variable": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_mnist_data(True, True)",
                            "Call"
                        ],
                        [
                            "Subset(train_dataset, list(range(64)))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "list(range(64))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Subset_75": {
                "variable": {
                    "value": "validation_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_mnist_data(False, False)",
                            "Call"
                        ],
                        [
                            "Subset(validation_dataset, list(range(64)))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "list(range(64))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_142": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_143": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_155": {
                "variable": {
                    "value": "image_tensors",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_158": {
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "release/ml_user_tests/horovod/horovod_example.py": {
        "torch": {
            "SGD_96": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr * lr_scaler",
                    "type": "BinOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_25": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_27": {
                "variable": {
                    "value": "self.conv2_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_32": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.max_pool2d(self.conv1(x), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_33": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.max_pool2d(self.conv2_drop(self.conv2(x)), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_35": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_36": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_38": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(F.max_pool2d(self.conv1(x), 2))",
                            "Call"
                        ],
                        [
                            "F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 320)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "nll_loss_114": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_pool2d_32": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_33": {
                "input": {
                    "value": "self.conv2_drop(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "release/ml_user_tests/ray-lightning/simple_example.py": {
        "torch": {
            "Sequential_28": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(28 * 28, 128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_31": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(3, 128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mse_loss_46": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder(z)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_51": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataLoader_70": {
                "dataset": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_32": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "28 * 28",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "release/nightly_tests/dataset/dataset_shuffle_data_loader.py": {
        "torch": {}
    },
    "release/nightly_tests/dataset/inference.py": {
        "torch": {
            "from_numpy_45": {
                "variable": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_tensor_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([img.numpy() for img in ndarr_obj.reshape(-1)])",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_48": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(input_tensor)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "release/nightly_tests/dataset/pipelined_training.py": {
        "torch": {
            "Adam_70": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[v for (_, v) in dense_params]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SparseAdam_74": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[v for (_, v) in sparse_params]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_87": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_num_threads_95": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_91": {
                "device": {
                    "value": "hvd.local_rank()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_92": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "release/nightly_tests/dataset/ray_sgd_runner.py": {
        "torch": {
            "device_139": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{train.local_rank()}' if use_gpu and torch.cuda.is_available() else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_159": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Net(n_layers=num_layers, n_features=num_features, num_hidden=num_hidden, dropout_every=dropout_every, drop_prob=dropout_prob).to(device)",
                            "Call"
                        ],
                        [
                            "DistributedDataParallel(net)",
                            "Call"
                        ]
                    ]
                }
            },
            "BCEWithLogitsLoss_161": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_162": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.fc_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['num_hidden']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_26": {
                "variable": {
                    "value": "self.relu_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self.fc_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['num_hidden']",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['num_hidden']",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['num_hidden']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_30": {
                "variable": {
                    "value": "relu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_31": {
                "variable": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "self.drop_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_82": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(inputs.float())",
                            "Call"
                        ],
                        [
                            "model(inputs.float())",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_115": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(inputs.float())",
                            "Call"
                        ],
                        [
                            "model(inputs.float())",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "release/nightly_tests/dataset/ray_sgd_training.py": {
        "torch": {
            "device_314": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{train.local_rank()}' if use_gpu and torch.cuda.is_available() else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_338": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_339": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_205": {
                "variable": {
                    "value": "self.fc_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['num_hidden']",
                            "Subscript"
                        ],
                        [
                            "config['num_hidden']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_206": {
                "variable": {
                    "value": "self.relu_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_223": {
                "variable": {
                    "value": "self.fc_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['num_hidden']",
                            "Subscript"
                        ],
                        [
                            "config['num_hidden']",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_209": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['num_hidden']",
                            "Subscript"
                        ],
                        [
                            "config['num_hidden']",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['num_hidden']",
                            "Subscript"
                        ],
                        [
                            "config['num_hidden']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_210": {
                "variable": {
                    "value": "relu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_211": {
                "variable": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "self.drop_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_279": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_657": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_315": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_262": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(inputs.float())",
                            "Call"
                        ],
                        [
                            "model(inputs.float())",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_657": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_289": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(inputs.float())",
                            "Call"
                        ],
                        [
                            "model(inputs.float())",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "rllib/algorithms/dreamer/dreamer_model.py": {
        "torch": {
            "Independent_124": {
                "base_distribution": {
                    "value": "td.Normal(mean, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reinterpreted_batch_ndims": {
                    "value": "len(self.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_176": {
                "variable": {
                    "value": "output_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(-1, *orig_shape[-3:])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(*new_shape)",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x)",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([prior[3], embed], dim=-1)",
                            "Call"
                        ],
                        [
                            "self.obs1(x)",
                            "Call"
                        ],
                        [
                            "self.act()(x)",
                            "Call"
                        ],
                        [
                            "self.obs2(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([prev_state[2], prev_action], dim=-1)",
                            "Call"
                        ],
                        [
                            "self.img1(x)",
                            "Call"
                        ],
                        [
                            "self.act()(x)",
                            "Call"
                        ],
                        [
                            "deter",
                            "Name"
                        ],
                        [
                            "self.img2(x)",
                            "Call"
                        ],
                        [
                            "self.act()(x)",
                            "Call"
                        ],
                        [
                            "self.img3(x)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Independent_181": {
                "base_distribution": {
                    "value": "output_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "td.Normal(x, 1)",
                            "Call"
                        ],
                        [
                            "td.Bernoulli(logits=x)",
                            "Call"
                        ]
                    ]
                },
                "reinterpreted_batch_ndims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Normal_251": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(*reshape_size)",
                            "Call"
                        ],
                        [
                            "self.mean_scale * torch.tanh(mean / self.mean_scale)",
                            "BinOp"
                        ]
                    ]
                },
                "scale": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.softplus(std + raw_init_std) + self.min_std",
                            "BinOp"
                        ],
                        [
                            "self.softplus()(std) + 0.1",
                            "BinOp"
                        ],
                        [
                            "self.softplus()(std) + 0.1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "TransformedDistribution_253": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "base_distribution": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "td.Normal(mean, std)",
                            "Call"
                        ],
                        [
                            "td.transformed_distribution.TransformedDistribution(dist, transforms)",
                            "Call"
                        ],
                        [
                            "td.Independent(dist, 1)",
                            "Call"
                        ],
                        [
                            "td.OneHotCategorical(logits=x)",
                            "Call"
                        ]
                    ]
                },
                "transforms": {
                    "value": "transforms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[TanhBijector()]",
                            "List"
                        ]
                    ]
                }
            },
            "Independent_254": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "base_distribution": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "td.Normal(mean, std)",
                            "Call"
                        ],
                        [
                            "td.transformed_distribution.TransformedDistribution(dist, transforms)",
                            "Call"
                        ],
                        [
                            "td.Independent(dist, 1)",
                            "Call"
                        ],
                        [
                            "td.OneHotCategorical(logits=x)",
                            "Call"
                        ]
                    ]
                },
                "reinterpreted_batch_ndims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Normal_459": {
                "loc": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(*reshape_size)",
                            "Call"
                        ],
                        [
                            "self.mean_scale * torch.tanh(mean / self.mean_scale)",
                            "BinOp"
                        ]
                    ]
                },
                "scale": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.softplus(std + raw_init_std) + self.min_std",
                            "BinOp"
                        ],
                        [
                            "self.softplus()(std) + 0.1",
                            "BinOp"
                        ],
                        [
                            "self.softplus()(std) + 0.1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Normal_124": {
                "loc": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(*reshape_size)",
                            "Call"
                        ],
                        [
                            "self.mean_scale * torch.tanh(mean / self.mean_scale)",
                            "BinOp"
                        ]
                    ]
                },
                "scale": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Bernoulli_178": {
                "variable": {
                    "value": "output_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(-1, *orig_shape[-3:])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(*new_shape)",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x)",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([prior[3], embed], dim=-1)",
                            "Call"
                        ],
                        [
                            "self.obs1(x)",
                            "Call"
                        ],
                        [
                            "self.act()(x)",
                            "Call"
                        ],
                        [
                            "self.obs2(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([prev_state[2], prev_action], dim=-1)",
                            "Call"
                        ],
                        [
                            "self.img1(x)",
                            "Call"
                        ],
                        [
                            "self.act()(x)",
                            "Call"
                        ],
                        [
                            "deter",
                            "Name"
                        ],
                        [
                            "self.img2(x)",
                            "Call"
                        ],
                        [
                            "self.act()(x)",
                            "Call"
                        ],
                        [
                            "self.img3(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "OneHotCategorical_256": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(-1, *orig_shape[-3:])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(*new_shape)",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x)",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([prior[3], embed], dim=-1)",
                            "Call"
                        ],
                        [
                            "self.obs1(x)",
                            "Call"
                        ],
                        [
                            "self.act()(x)",
                            "Call"
                        ],
                        [
                            "self.obs2(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([prev_state[2], prev_action], dim=-1)",
                            "Call"
                        ],
                        [
                            "self.img1(x)",
                            "Call"
                        ],
                        [
                            "self.act()(x)",
                            "Call"
                        ],
                        [
                            "deter",
                            "Name"
                        ],
                        [
                            "self.img2(x)",
                            "Call"
                        ],
                        [
                            "self.act()(x)",
                            "Call"
                        ],
                        [
                            "self.img3(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "rllib/algorithms/dreamer/dreamer_torch_policy.py": {
        "torch": {
            "Normal_246": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_batch[SampleBatch.ACTIONS]",
                            "Subscript"
                        ],
                        [
                            "2.0 * eps - 1.0",
                            "BinOp"
                        ],
                        [
                            "td.Normal(action, policy.config['explore_noise']).sample()",
                            "Call"
                        ],
                        [
                            "torch.clamp(action, min=-1.0, max=1.0)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "policy.config['explore_noise']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "rllib/algorithms/qmix/qmix_policy.py": {
        "torch": {
            "RMSprop_270": {
                "variable": {
                    "value": "self.rmsprop_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "config['lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "dict(ray.rllib.algorithms.qmix.qmix.DEFAULT_CONFIG, **config)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "config['optim_alpha']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "dict(ray.rllib.algorithms.qmix.qmix.DEFAULT_CONFIG, **config)",
                            "Call"
                        ]
                    ]
                },
                "eps": {
                    "value": "config['optim_eps']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "dict(ray.rllib.algorithms.qmix.qmix.DEFAULT_CONFIG, **config)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "rllib/examples/export/onnx_torch.py": {
        "torch": {
            "tensor_40": {
                "data": {
                    "value": "test_data['obs']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "rllib/models/torch/modules/convtranspose2d_stack.py": {
        "torch": {
            "Independent_82": {
                "base_distribution": {
                    "value": "td.Normal(mean, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "reinterpreted_batch_ndims": {
                    "value": "len(self.output_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_82": {
                "loc": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_out.view(*reshape_size)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "rllib/policy/tests/test_compute_log_likelihoods.py": {
        "torch": {}
    }
}