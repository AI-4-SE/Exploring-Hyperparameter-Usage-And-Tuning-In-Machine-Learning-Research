{
    "TSNE_plot.py": {
        "sklearn": {
            "TSNE_47": {
                "variable": {
                    "value": "tsne",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "tensorflow": {}
    },
    "load_mnist.py": {
        "sklearn": {
            "LabelBinarizer_28": {
                "variable": {
                    "value": "le",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "load_data_14": {
                "variable": {
                    "value": "((x_train, y_train), (x_test, y_test))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_routines/center_loss.py": {
        "sklearn": {},
        "tensorflow": {
            "Input_31": {
                "variable": {
                    "value": "x_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(28, 28, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Input_35": {
                "variable": {
                    "value": "target_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "target_input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Model_41": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[x_input, target_input]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "[softmax, l2_loss]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Model_52": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[x_input, target_input]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "[softmax, l2_loss, pre_logits]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Embedding_37": {
                "input_dim": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Lambda_38": {
                "function": {
                    "value": "lambda x: K.sum(K.square(x[0] - x[1][:, 0]), 1, keepdims=True)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "l2_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_44": {
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_38": {
                "a": {
                    "value": "K.square(x[0] - x[1][:, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorBoard_48": {
                "log_dir": {
                    "value": "outdir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outdir + '/center_loss/'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "square_38": {
                "x": {
                    "value": "x[0] - x[1][:, 0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "train_routines/triplet_center_loss.py": {
        "sklearn": {},
        "tensorflow": {
            "Input_27": {
                "variable": {
                    "value": "x_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(28, 28, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Input_31": {
                "variable": {
                    "value": "target_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "target_input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Model_37": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[x_input, target_input]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "[softmax, l2_loss]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Model_48": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[x_input, target_input]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "[softmax, l2_loss, pre_logits]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Embedding_33": {
                "input_dim": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Lambda_34": {
                "function": {
                    "value": "lambda x: K.sum(K.square(x[0] - x[1][:, 0]), 1, keepdims=True)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "l2_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_40": {
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_34": {
                "a": {
                    "value": "K.square(x[0] - x[1][:, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorBoard_44": {
                "log_dir": {
                    "value": "outdir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outdir + '/triplet_center_loss/'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "square_34": {
                "x": {
                    "value": "x[0] - x[1][:, 0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "train_routines/triplet_loss.py": {
        "sklearn": {
            "LabelBinarizer_60": {
                "variable": {
                    "value": "le",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "Input_33": {
                "variable": {
                    "value": "model_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(28, 28, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Model_41": {
                "variable": {
                    "value": "shared_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[model_input]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "[softmax, pre_logits]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Input_43": {
                "variable": {
                    "value": "anchor_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(28, 28, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "anchor_input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_44": {
                "variable": {
                    "value": "positive_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(28, 28, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "positive_input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_45": {
                "variable": {
                    "value": "negative_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(28, 28, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "negative_input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concatenate_51": {
                "variable": {
                    "value": "merged_pre",
                    "type": "Variable",
                    "possible_values": []
                },
                "arys": {
                    "value": "[pre_logits_anchor, pre_logits_pos, pre_logits_neg]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "merged_pre",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concatenate_53": {
                "variable": {
                    "value": "merged_soft",
                    "type": "Variable",
                    "possible_values": []
                },
                "arys": {
                    "value": "[soft_anchor, soft_pos, soft_neg]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "merged_soft",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Model_55": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[anchor_input, positive_input, negative_input]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "[merged_soft, merged_pre]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Model_77": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[anchor_input]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "[soft_anchor, pre_logits_anchor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Adam_57": {
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "TensorBoard_73": {
                "log_dir": {
                    "value": "outdir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outdir + '/triplet_loss/'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "train_routines/xentropy.py": {
        "sklearn": {},
        "tensorflow": {
            "Input_27": {
                "variable": {
                    "value": "x_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(28, 28, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Model_31": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[x_input]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "[softmax]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Model_42": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[x_input]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "[softmax, pre_logits]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Adam_34": {
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "TensorBoard_38": {
                "log_dir": {
                    "value": "outdir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outdir + '/xentropy_only_loss/'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "base_network.py": {
        "tensorflow": {
            "Conv2D_9": {
                "filters": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNormalization_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_16": {
                "filters": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNormalization_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Flatten_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_23": {
                "units": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNormalization_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_26": {
                "units": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "triplet.py": {
        "tensorflow": {
            "sum_65": {
                "variable": {
                    "value": "pos_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "K.square(anchor - positive)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_68": {
                "variable": {
                    "value": "neg_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "K.square(anchor - negative)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_72": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "basic_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pos_dist - neg_dist + alpha",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "range_99": {
                "variable": {
                    "value": "classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_100": {
                "variable": {
                    "value": "y_pred_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(tf.shape(y_pred)[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "repeat_101": {
                "variable": {
                    "value": "y_pred_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred_r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(y_pred, (tf.shape(y_pred)[0], 1))",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.repeat(y_pred_r, n_classes)",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "n_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_103": {
                "variable": {
                    "value": "y_true_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(tf.shape(y_true)[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "repeat_104": {
                "variable": {
                    "value": "y_true_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_true_r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(y_true, (tf.shape(y_true)[0], 1))",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.repeat(y_true_r, n_classes)",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "n_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "equal_106": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_true_r[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(0, n_classes, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_113": {
                "variable": {
                    "value": "masked",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(masked, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "np.inf * tf.ones_like(masked)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "masked",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y_pred_r[:, :, 0] * tf.cast(mask, tf.float32)",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.equal(masked, 0.0), np.inf * tf.ones_like(masked), masked)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_min_115": {
                "variable": {
                    "value": "minimums",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "masked",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y_pred_r[:, :, 0] * tf.cast(mask, tf.float32)",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.equal(masked, 0.0), np.inf * tf.ones_like(masked), masked)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_117": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "y_pred - minimums + alpha",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_65": {
                "x": {
                    "value": "anchor - positive",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_68": {
                "x": {
                    "value": "anchor - negative",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_112": {
                "x": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(y_true_r[:, :, 0], classes)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_113": {
                "x": {
                    "value": "masked",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y_pred_r[:, :, 0] * tf.cast(mask, tf.float32)",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.equal(masked, 0.0), np.inf * tf.ones_like(masked), masked)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_like_113": {
                "input": {
                    "value": "masked",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y_pred_r[:, :, 0] * tf.cast(mask, tf.float32)",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.equal(masked, 0.0), np.inf * tf.ones_like(masked), masked)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_100": {
                "input": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_103": {
                "input": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    }
}