{
    "datasets.py": {
        "torch": {}
    },
    "demo_eval.py": {
        "torch": {
            "MSELoss_30": {
                "variable": {
                    "value": "criterion_pixelwise",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_49": {
                "variable": {
                    "value": "LUTs",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/LUTs.pth' % opt.model_dir",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_60": {
                "f": {
                    "value": "'%s/classifier.pth' % opt.model_dir",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "image_adaptive_lut_evaluation.py": {
        "torch": {
            "MSELoss_25": {
                "variable": {
                    "value": "criterion_pixelwise",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_44": {
                "variable": {
                    "value": "LUTs",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "'saved_models/%s/LUTs_%d.pth' % (opt.model_dir, opt.epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataLoader_59": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ImageDataset_sRGB('../data/%s' % opt.dataset_name, mode='test')",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_55": {
                "f": {
                    "value": "'saved_models/%s/classifier_%d.pth' % (opt.model_dir, opt.epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataLoader_66": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ImageDataset_XYZ('../data/%s' % opt.dataset_name, mode='test')",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_104": {
                "variable": {
                    "value": "img_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "TF.to_tensor(TF.resize(img_input, (4000, 6000)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "synchronize_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "image_adaptive_lut_train_paired.py": {
        "torch": {
            "MSELoss_50": {
                "variable": {
                    "value": "criterion_pixelwise",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_91": {
                "variable": {
                    "value": "optimizer_G",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "itertools.chain(classifier.parameters(), LUT0.parameters(), LUT1.parameters(), LUT2.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.b1, opt.b2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "load_77": {
                "variable": {
                    "value": "LUTs",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "'saved_models/%s/LUTs_%d.pth' % (opt.output_dir, opt.epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataLoader_94": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ImageDataset_sRGB('../data/%s' % opt.dataset_name, mode='train')",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.n_cpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_101": {
                "variable": {
                    "value": "psnr_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ImageDataset_sRGB('../data/%s' % opt.dataset_name, mode='test')",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_133": {
                "variable": {
                    "value": "weights_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_147": {
                "variable": {
                    "value": "weights_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_108": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ImageDataset_XYZ('../data/%s' % opt.dataset_name, mode='train')",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.n_cpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_115": {
                "variable": {
                    "value": "psnr_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ImageDataset_XYZ('../data/%s' % opt.dataset_name, mode='test')",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "round_161": {
                "variable": {
                    "value": "fake_B",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_B * 255",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_162": {
                "variable": {
                    "value": "real_B",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real_B * 255",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_179": {
                "variable": {
                    "value": "img_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(real_A.data, fake_B.data, real_B.data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "round_180": {
                "variable": {
                    "value": "fake_B",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_B * 255",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_181": {
                "variable": {
                    "value": "real_B",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real_B * 255",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_83": {
                "f": {
                    "value": "'saved_models/%s/classifier_%d.pth' % (opt.output_dir, opt.epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_262": {
                "obj": {
                    "value": "LUTs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load('saved_models/%s/LUTs_%d.pth' % (opt.output_dir, opt.epoch))",
                            "Call"
                        ],
                        [
                            "{'0': LUT0.state_dict(), '1': LUT1.state_dict(), '2': LUT2.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "'saved_models/%s/LUTs_%d.pth' % (opt.output_dir, epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_263": {
                "obj": {
                    "value": "classifier.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'saved_models/%s/classifier_%d.pth' % (opt.output_dir, epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "image_adaptive_lut_train_unpaired.py": {
        "torch": {
            "MSELoss_52": {
                "variable": {
                    "value": "criterion_GAN",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_53": {
                "variable": {
                    "value": "criterion_pixelwise",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_96": {
                "variable": {
                    "value": "optimizer_G",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "itertools.chain(classifier.parameters(), LUT0.parameters(), LUT1.parameters(), LUT2.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.b1, opt.b2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_97": {
                "variable": {
                    "value": "optimizer_D",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.b1, opt.b2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "load_82": {
                "variable": {
                    "value": "LUTs",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "'saved_models/%s/LUTs_%d.pth' % (opt.output_dir, opt.epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataLoader_100": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ImageDataset_sRGB_unpaired('../data/%s' % opt.dataset_name, mode='train')",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.n_cpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_107": {
                "variable": {
                    "value": "psnr_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ImageDataset_sRGB_unpaired('../data/%s' % opt.dataset_name, mode='test')",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_185": {
                "variable": {
                    "value": "weights_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_114": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ImageDataset_XYZ_unpaired('../data/%s' % opt.dataset_name, mode='train')",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.n_cpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_121": {
                "variable": {
                    "value": "psnr_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ImageDataset_XYZ_unpaired('../data/%s' % opt.dataset_name, mode='test')",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "round_135": {
                "variable": {
                    "value": "fake_B",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_B * 255",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_136": {
                "variable": {
                    "value": "real_B",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real_B * 255",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_152": {
                "variable": {
                    "value": "img_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(real_A.data, fake_B.data, real_B.data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "round_153": {
                "variable": {
                    "value": "fake_B",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_B * 255",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_154": {
                "variable": {
                    "value": "real_B",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real_B * 255",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_88": {
                "f": {
                    "value": "'saved_models/%s/classifier_%d.pth' % (opt.output_dir, opt.epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "grad_169": {
                "outputs": {
                    "value": "d_interpolates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D(interpolates)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "interpolates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(alpha * real_samples + (1 - alpha) * fake_samples).requires_grad_(True)",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(Tensor(real_samples.shape[0], 1, 1, 1).fill_(1.0), requires_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_307": {
                "obj": {
                    "value": "LUTs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load('saved_models/%s/LUTs_%d.pth' % (opt.output_dir, opt.epoch))",
                            "Call"
                        ],
                        [
                            "{'0': LUT0.state_dict(), '1': LUT1.state_dict(), '2': LUT2.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "'saved_models/%s/LUTs_%d.pth' % (opt.output_dir, epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_308": {
                "obj": {
                    "value": "classifier.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'saved_models/%s/classifier_%d.pth' % (opt.output_dir, epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_227": {
                "input": {
                    "value": "pred_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator(real_B)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_232": {
                "input": {
                    "value": "pred_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator(real_B)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_262": {
                "input": {
                    "value": "pred_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator(fake_B)",
                            "Call"
                        ],
                        [
                            "discriminator(fake_B)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_255": {
                "input": {
                    "value": "pred_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator(fake_B)",
                            "Call"
                        ],
                        [
                            "discriminator(fake_B)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models.py": {
        "torch": {
            "Upsample_30": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "net.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_82": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_86": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, skip_input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_95": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 16, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_107": {
                "variable": {
                    "value": "self.down7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(128, 128, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Upsample_113": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_114": {
                "variable": {
                    "value": "self.conv1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_121": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(48, 16, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_144": {
                "variable": {
                    "value": "d9",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(d4, d8)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_159": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 16, 3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_193": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Upsample(size=(256, 256), mode='bilinear')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_213": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Upsample(size=(256, 256), mode='bilinear')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_234": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Upsample(size=(256, 256), mode='bilinear')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_259": {
                "variable": {
                    "value": "self.LUT",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LUT.size()[-1]",
                            "Subscript"
                        ],
                        [
                            "33",
                            "Method Argument"
                        ],
                        [
                            "33",
                            "Method Argument"
                        ],
                        [
                            "33",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LUT.size()[-1]",
                            "Subscript"
                        ],
                        [
                            "33",
                            "Method Argument"
                        ],
                        [
                            "33",
                            "Method Argument"
                        ],
                        [
                            "33",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_269": {
                "variable": {
                    "value": "self.LUT",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(self.LUT)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_281": {
                "variable": {
                    "value": "self.LUT",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LUT.size()[-1]",
                            "Subscript"
                        ],
                        [
                            "33",
                            "Method Argument"
                        ],
                        [
                            "33",
                            "Method Argument"
                        ],
                        [
                            "33",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LUT.size()[-1]",
                            "Subscript"
                        ],
                        [
                            "33",
                            "Method Argument"
                        ],
                        [
                            "33",
                            "Method Argument"
                        ],
                        [
                            "33",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_282": {
                "variable": {
                    "value": "self.LUT",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(self.LUT)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_326": {
                "variable": {
                    "value": "grad_LUT",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_344": {
                "variable": {
                    "value": "self.weight_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LUT.size()[-1]",
                            "Subscript"
                        ],
                        [
                            "33",
                            "Method Argument"
                        ],
                        [
                            "33",
                            "Method Argument"
                        ],
                        [
                            "33",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "dim - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_346": {
                "variable": {
                    "value": "self.weight_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LUT.size()[-1]",
                            "Subscript"
                        ],
                        [
                            "33",
                            "Method Argument"
                        ],
                        [
                            "33",
                            "Method Argument"
                        ],
                        [
                            "33",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LUT.size()[-1]",
                            "Subscript"
                        ],
                        [
                            "33",
                            "Method Argument"
                        ],
                        [
                            "33",
                            "Method Argument"
                        ],
                        [
                            "33",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_348": {
                "variable": {
                    "value": "self.weight_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "dim - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LUT.size()[-1]",
                            "Subscript"
                        ],
                        [
                            "33",
                            "Method Argument"
                        ],
                        [
                            "33",
                            "Method Argument"
                        ],
                        [
                            "33",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_350": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_40": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, torch.flip(x, [3]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_152": {
                "input": {
                    "value": "self.final(u4)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.flip(x, [3])), 0)",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, skip_input), 1)",
                            "Call"
                        ],
                        [
                            "LUT[n].split()",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_181": {
                "in_channels": {
                    "value": "in_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_182": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "in_channels": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SELU_54": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_57": {
                "num_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Upsample_70": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "in_channels": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SELU_72": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_77": {
                "num_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_96": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SELU_97": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_99": {
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_108": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SELU_109": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_110": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_122": {
                "in_channels": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SELU_123": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_126": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_160": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_161": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_162": {
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_168": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_184": {
                "num_features": {
                    "value": "out_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Upsample_194": {
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_195": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_196": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_197": {
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_203": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_214": {
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_215": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_216": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_217": {
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_223": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_224": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_235": {
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_236": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_237": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_238": {
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_244": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_269": {
                "data": {
                    "value": "self.LUT",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_282": {
                "data": {
                    "value": "self.LUT",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_357": {
                "input": {
                    "value": "torch.mul(dif_g ** 2, self.weight_g)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_359": {
                "input": {
                    "value": "self.relu(dif_g)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_59": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_80": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mul_357": {
                "input": {
                    "value": "dif_g ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "self.weight_g",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flip_40": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.flip(x, [3])), 0)",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, skip_input), 1)",
                            "Call"
                        ],
                        [
                            "LUT[n].split()",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "models_x.py": {
        "torch": {
            "Upsample_30": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "net.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Upsample(size=(256, 256), mode='bilinear')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Upsample(size=(256, 256), mode='bilinear')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_105": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Upsample(size=(256, 256), mode='bilinear')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_140": {
                "variable": {
                    "value": "self.LUT",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(buffer).requires_grad_(True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_152": {
                "variable": {
                    "value": "self.LUT",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lut.size()[-1]",
                            "Subscript"
                        ],
                        [
                            "33",
                            "Method Argument"
                        ],
                        [
                            "33",
                            "Method Argument"
                        ],
                        [
                            "33",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lut.size()[-1]",
                            "Subscript"
                        ],
                        [
                            "33",
                            "Method Argument"
                        ],
                        [
                            "33",
                            "Method Argument"
                        ],
                        [
                            "33",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_153": {
                "variable": {
                    "value": "self.LUT",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(self.LUT)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_224": {
                "variable": {
                    "value": "self.weight_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lut.size()[-1]",
                            "Subscript"
                        ],
                        [
                            "33",
                            "Method Argument"
                        ],
                        [
                            "33",
                            "Method Argument"
                        ],
                        [
                            "33",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "dim - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_226": {
                "variable": {
                    "value": "self.weight_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lut.size()[-1]",
                            "Subscript"
                        ],
                        [
                            "33",
                            "Method Argument"
                        ],
                        [
                            "33",
                            "Method Argument"
                        ],
                        [
                            "33",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lut.size()[-1]",
                            "Subscript"
                        ],
                        [
                            "33",
                            "Method Argument"
                        ],
                        [
                            "33",
                            "Method Argument"
                        ],
                        [
                            "33",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_228": {
                "variable": {
                    "value": "self.weight_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "dim - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lut.size()[-1]",
                            "Subscript"
                        ],
                        [
                            "33",
                            "Method Argument"
                        ],
                        [
                            "33",
                            "Method Argument"
                        ],
                        [
                            "33",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_230": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_40": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, torch.flip(x, [3]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "in_channels": {
                    "value": "in_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_53": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_55": {
                "num_features": {
                    "value": "out_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Upsample_65": {
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_67": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_68": {
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_85": {
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_86": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_87": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_88": {
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_94": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_95": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_106": {
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_107": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_108": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_109": {
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_115": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_140": {
                "ndarray": {
                    "value": "buffer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((3, dim, dim, dim), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_153": {
                "data": {
                    "value": "self.LUT",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_237": {
                "input": {
                    "value": "torch.mul(dif_g ** 2, self.weight_g)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_239": {
                "input": {
                    "value": "self.relu(dif_g)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_237": {
                "input": {
                    "value": "dif_g ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "self.weight_g",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flip_40": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.flip(x, [3])), 0)",
                            "Call"
                        ],
                        [
                            "lines[n].split()",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "torchvision_x_functional.py": {
        "torch": {
            "from_numpy_75": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img.transpose((2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_112": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(mean, dtype=tensor.dtype, device=tensor.device)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tensor.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_113": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(std, dtype=tensor.dtype, device=tensor.device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tensor.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_tensor_44": {
                "obj": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img[:, :, None]",
                            "Subscript"
                        ],
                        [
                            "img.astype(np.float32) / 255",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(img.transpose((2, 0, 1)))",
                            "Call"
                        ],
                        [
                            "img.astype(np.float32) / 65535",
                            "BinOp"
                        ],
                        [
                            "img.astype(np.float32) / 1",
                            "BinOp"
                        ],
                        [
                            "np.clip(img.astype(np.float) + gauss, 0, np.iinfo(img.dtype).max)",
                            "Call"
                        ],
                        [
                            "np.clip(img.astype(np.float) + gauss, 0, 1)",
                            "Call"
                        ],
                        [
                            "np.pad(img, ((pad_top, pad_bottom), (pad_left, pad_right)), mode=padding_mode, constant_values=fill)",
                            "Call"
                        ],
                        [
                            "np.pad(img, ((pad_top, pad_bottom), (pad_left, pad_right)), mode=padding_mode)",
                            "Call"
                        ],
                        [
                            "np.pad(img, ((pad_top, pad_bottom), (pad_left, pad_right), (0, 0)), mode=padding_mode, constant_values=fill)",
                            "Call"
                        ],
                        [
                            "np.pad(img, ((pad_top, pad_bottom), (pad_left, pad_right), (0, 0)), mode=padding_mode)",
                            "Call"
                        ],
                        [
                            "crop(img, top, left, height, width)",
                            "Call"
                        ],
                        [
                            "resize(img, size, interpolation)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "trilinear_c/build.py": {
        "torch": {
            "is_available_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "trilinear_cpp/setup.py": {
        "torch": {
            "is_available_5": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/visualize_lut.py": {
        "torch": {
            "load_43": {
                "variable": {
                    "value": "lut",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.lut_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "visualization_lut/save_trained_luts.py": {
        "torch": {
            "MSELoss_15": {
                "variable": {
                    "value": "criterion_pixelwise",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_25": {
                "variable": {
                    "value": "LUTs",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "'saved_models/%s/LUTs_%d.pth' % (opt.model_dir, opt.epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}