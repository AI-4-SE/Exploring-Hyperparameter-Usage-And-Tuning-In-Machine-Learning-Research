{
    "mbv1_cifar100/compute_flops.py": {
        "torch": {
            "rand_111": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "input_res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "224",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "input_res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "224",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_111": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mbv1_cifar100/dataloader.py": {
        "torch": {
            "DataLoader_15": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST(os.path.join(base_data_dir, './data_mnist'), train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "train_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_22": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST(os.path.join(base_data_dir, './data_mnist'), train=False, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "test_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_30": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.FashionMNIST(os.path.join(base_data_dir, './data_fashion_mnist'), train=True, download=True, transform=transforms.Compose([transforms.ToTensor()]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "train_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_36": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST(os.path.joinn(base_data_dir, './data_fashion_mnist'), train=False, transform=transforms.Compose([transforms.ToTensor()]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "test_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_43": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR10(os.path.join(base_data_dir, './data.cifar10'), train=True, download=True, transform=transforms.Compose([transforms.Pad(4), transforms.RandomCrop(32), transforms.RandomHorizontalFlip(), transforms.ToTensor(), transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.201))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "train_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_53": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR10(os.path.join(base_data_dir, './data.cifar10'), train=False, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.201))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "test_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_61": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR100(os.path.join(base_data_dir, './data.cifar100'), train=True, download=True, transform=transforms.Compose([transforms.Pad(4), transforms.RandomCrop(32), transforms.RandomHorizontalFlip(), transforms.ToTensor(), transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.201))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "train_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_71": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR100(os.path.join(base_data_dir, './data.cifar100'), train=False, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.201))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "test_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mbv1_cifar100/main.py": {
        "torch": {
            "SGD_113": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_60": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_105": {
                "variable": {
                    "value": "pre_check",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.save, model_save_path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_58": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_62": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_145": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_180": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_201": {
                "obj": {
                    "value": "{'epoch': epoch + 1, 'cfg': model.cfg, 's': args.s, 'state_dict': model.state_dict(), 'best_prec1': best_prec1, 'optimizer': optimizer.state_dict(), 'acc': prec1}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.save, model_save_path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_168": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sign_130": {
                "input": {
                    "value": "m.bn2.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_132": {
                "input": {
                    "value": "m.bn.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mbv1_cifar100/main_finetune.py": {
        "torch": {
            "load_72": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.load",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_123": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_66": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_68": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_136": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_179": {
                "obj": {
                    "value": "{'epoch': epoch + 1, 'state_dict': model.state_dict(), 'cfg': model.cfg, 'acc': prec1, 'optimizer': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "model_save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.load",
                            "Attribute"
                        ],
                        [
                            "os.path.join(args.save, os.path.basename(args.load))",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_157": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mbv1_cifar100/main_split.py": {
        "torch": {
            "load_117": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.load",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSprop_141": {
                "variable": {
                    "value": "optimizer_v",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.v_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_443": {
                "variable": {
                    "value": "start_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_69": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_145": {
                "variable": {
                    "value": "min_v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_146": {
                "variable": {
                    "value": "max_v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_298": {
                "variable": {
                    "value": "all_lambda",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "min_eig_vals",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_382": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "sort_383": {
                "variable": {
                    "value": "(y, i)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_536": {
                "obj": {
                    "value": "{'cfg': newmodel.cfg, 'split_index': args.split_index, 'grow': args.grow, 'min_eig_vals': min_eig_vals, 'state_dict': newmodel.state_dict(), 'args': args}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.save, model_save_path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_66": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_71": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_147": {
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cross_entropy_162": {
                "variable": {
                    "value": "ce",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.sp_forward(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "grad_163": {
                "variable": {
                    "value": "y_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "ce",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.cross_entropy(output, target)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "model.y_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_488": {
                "variable": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(conv_weight, conv_weight[:, idx0.tolist(), :, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_489": {
                "variable": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(w1.clone(), w1[idx1.tolist(), :, :, :].clone())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_492": {
                "variable": {
                    "value": "eig_v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(eig_v, eig_v[:, idx0.tolist(), :, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_501": {
                "variable": {
                    "value": "m1_bn.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bn_weight.clone(), bn_weight[idx1.tolist()].clone())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_504": {
                "variable": {
                    "value": "m1_bn.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bn_bias.clone(), bn_bias[idx1.tolist()].clone())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_507": {
                "variable": {
                    "value": "m1_bn.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bn_running_mean.clone(), bn_running_mean[idx1.tolist()].clone())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_510": {
                "variable": {
                    "value": "m1_bn.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bn_running_var.clone(), bn_running_var[idx1.tolist()].clone())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_354": {
                "data": {
                    "value": "thre",
                    "type": "variable",
                    "possible_values": [
                        [
                            "global_thre",
                            "variable"
                        ],
                        [
                            "0.99",
                            "float"
                        ]
                    ]
                }
            },
            "ge_354": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(thre).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_400": {
                "data": {
                    "value": "thre",
                    "type": "variable",
                    "possible_values": [
                        [
                            "global_thre",
                            "variable"
                        ],
                        [
                            "0.99",
                            "float"
                        ]
                    ]
                }
            },
            "lt_400": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(thre).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_466": {
                "variable": {
                    "value": "m1.conv1.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(conv_weight, conv_weight[idx0.tolist(), :, :, :].clone())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_469": {
                "variable": {
                    "value": "m1.bn1.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(m0.bn1.weight.data.clone(), m0.bn1.weight.data[idx0.tolist()].clone())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_470": {
                "variable": {
                    "value": "m1.bn1.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(m0.bn1.bias.data.clone(), m0.bn1.bias.data[idx0.tolist()].clone())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_471": {
                "variable": {
                    "value": "m1.bn1.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(m0.bn1.running_mean.clone(), m0.bn1.running_mean[idx0.tolist()].clone())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_472": {
                "variable": {
                    "value": "m1.bn1.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(m0.bn1.running_var.clone(), m0.bn1.running_var[idx0.tolist()].clone())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_525": {
                "variable": {
                    "value": "m1.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(fc_weight, fc_weight[:, idx0.tolist()])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_222": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.sp_forward(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_366": {
                "input": {
                    "value": "conv_w ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_366": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_356": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(weight_copy).lt(torch.tensor(thre).to(device)).float().to(device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(betas).float().ge(torch.tensor(thre).float()).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_401": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(weight_copy).lt(torch.tensor(thre).to(device)).float().to(device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(betas).float().ge(torch.tensor(thre).float()).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_408": {
                "input": {
                    "value": "m.conv2d.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_408": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_410": {
                "input": {
                    "value": "m.sp_conv.conv2d.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_410": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_360": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(weight_copy).lt(torch.tensor(thre).to(device)).float().to(device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(betas).float().ge(torch.tensor(thre).float()).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_405": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(weight_copy).lt(torch.tensor(thre).to(device)).float().to(device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(betas).float().ge(torch.tensor(thre).float()).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mbv1_cifar100/mobilenetv1.py": {
        "torch": {
            "Conv2d_18": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 if isinstance(x, int) else x[1]",
                            "IfExp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "variable"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_19": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "variable"
                        ]
                    ]
                }
            },
            "Conv2d_20": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x if isinstance(x, int) else x[0]",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x if isinstance(x, int) else x[0]",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Conv2d_35": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x if isinstance(x, int) else x[0]",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 if isinstance(x, int) else x[1]",
                            "IfExp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_36": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x if isinstance(x, int) else x[0]",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Linear_73": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cfg[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ],
                        [
                            "100",
                            "int"
                        ]
                    ]
                }
            },
            "avg_pool2d_88": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.nn_act(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.nn_act(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.nn_act(self.bn(self.conv(x)))",
                            "Call"
                        ],
                        [
                            "self.conv_block(x)",
                            "Call"
                        ],
                        [
                            "self.layers(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_83": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_23": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_38": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mbv1_cifar100/sp_conv.py": {
        "torch": {
            "Conv2d_37": {
                "variable": {
                    "value": "self.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(self.kh, self.kw)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(self.dh, self.dw)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(self.ph, self.pw)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_40": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_42": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.conv2d.weight.size())",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_43": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.conv2d.weight.size())",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_60": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input[0].view(1, *input.size()[1:])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(self.pw, self.pw, self.ph, self.ph)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sigmoid_71": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.randn(16, 3, 32, 32))",
                            "Call"
                        ],
                        [
                            "F.pad(input, (self.pw, self.pw, self.ph, self.ph))",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_75": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.randn(16, 3, 32, 32))",
                            "Call"
                        ],
                        [
                            "F.pad(input, (self.pw, self.pw, self.ph, self.ph))",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_81": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * beta",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softplus_167": {
                "variable": {
                    "value": "bn_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn(conv_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_174": {
                "variable": {
                    "value": "bn_d_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn(conv_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_111": {
                "variable": {
                    "value": "act_sec_ord_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bn(self.conv2d(input))",
                            "Call"
                        ],
                        [
                            "self.bn(conv_out)",
                            "Call"
                        ],
                        [
                            "F.softplus(self.bn(conv_out))",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_188": {
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_42": {
                "*size": {
                    "value": "self.conv2d.weight.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_43": {
                "*size": {
                    "value": "self.conv2d.weight.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_68": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.randn(16, 3, 32, 32))",
                            "Call"
                        ],
                        [
                            "F.pad(input, (self.pw, self.pw, self.ph, self.ph))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_95": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bn(self.conv2d(input))",
                            "Call"
                        ],
                        [
                            "self.bn(conv_out)",
                            "Call"
                        ],
                        [
                            "F.softplus(self.bn(conv_out))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_128": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.y.reshape(n_out, dim)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "dw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "patches.reshape(batch_size, h, w, dim).permute(3, 0, 1, 2).reshape(dim, batch_size * h * w)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_128": {
                "input": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.out_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_channels",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "permute_128": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_129": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v.reshape(n_out, dim)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "dw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "patches.reshape(batch_size, h, w, dim).permute(3, 0, 1, 2).reshape(dim, batch_size * h * w)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_129": {
                "input": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.out_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_channels",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "permute_129": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_169": {
                "outputs": {
                    "value": "bn_out.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.conv2d.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_107": {
                "input": {
                    "value": "self.bn.running_var + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_165": {
                "input": {
                    "value": "self.bn.running_var + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_138": {
                "input": {
                    "value": "bn_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bn(self.conv2d(input))",
                            "Call"
                        ],
                        [
                            "self.bn(conv_out)",
                            "Call"
                        ],
                        [
                            "F.softplus(self.bn(conv_out))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mbv1_cifar100/sp_mbnet.py": {
        "torch": {
            "randn_113": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cfg[0]",
                            "Subscript"
                        ],
                        [
                            "out_planes",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cfg[0]",
                            "Subscript"
                        ],
                        [
                            "out_planes",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 if isinstance(x, int) else x[1]",
                            "IfExp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cfg[0]",
                            "Subscript"
                        ],
                        [
                            "out_planes",
                            "variable"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cfg[0]",
                            "Subscript"
                        ],
                        [
                            "out_planes",
                            "variable"
                        ]
                    ]
                }
            },
            "Linear_65": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cfg[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ],
                        [
                            "100",
                            "int"
                        ]
                    ]
                }
            },
            "ParameterList_77": {
                "variable": {
                    "value": "self.net_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "net_params",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ParameterList_78": {
                "variable": {
                    "value": "self.y_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "y_params",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ParameterList_79": {
                "variable": {
                    "value": "self.v_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "v_params",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "avg_pool2d_97": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.nn_act(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.sp_conv(out)",
                            "Call"
                        ],
                        [
                            "self.nn_act(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.sp_conv.sp_forward(out)",
                            "Call"
                        ],
                        [
                            "self.layers(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "l.sp_forward(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_106": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.nn_act(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.sp_conv(out)",
                            "Call"
                        ],
                        [
                            "self.nn_act(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.sp_conv.sp_forward(out)",
                            "Call"
                        ],
                        [
                            "self.layers(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "l.sp_forward(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_93": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mbv1_cifar100/summary.py": {
        "torch": {
            "load_54": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.load",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_41": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_39": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_43": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_75": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mbv1_cifar100/utils.py": {
        "torch": {
            "sigmoid_11": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * F.sigmoid(x)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "mbv1_imagenet/compute_flops.py": {
        "torch": {
            "rand_110": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "input_res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "224",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "input_res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "224",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_110": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mbv1_imagenet/dataloader.py": {
        "torch": {
            "DataLoader_31": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(traindir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "train_sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "DataLoader_35": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.ImageFolder(valdir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "test_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedSampler_27": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(traindir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mbv1_imagenet/main.py": {
        "torch": {
            "is_available_173": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_222": {
                "variable": {
                    "value": "no_wd_params",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "no_wd_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.ParameterList(no_wd_params)",
                            "Call"
                        ]
                    ]
                }
            },
            "ParameterList_223": {
                "variable": {
                    "value": "wd_params",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "wd_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.ParameterList(wd_params)",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_225": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': no_wd_params, 'weight_decay': 0.0}, {'params': wd_params, 'weight_decay': args.weight_decay}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LogSoftmax_102": {
                "variable": {
                    "value": "self.logsoftmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_106": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logsoftmax(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_178": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_203": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mbnet(default=args.sp_cfg)",
                            "Call"
                        ],
                        [
                            "mbnet(amc=args.amc, m=args.m)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_206": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mbnet(default=args.sp_cfg)",
                            "Call"
                        ],
                        [
                            "mbnet(amc=args.amc, m=args.m)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_212": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_408": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_180": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_235": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_save_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_284": {
                "input": {
                    "value": "m.bn2.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_286": {
                "input": {
                    "value": "m.bn.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mbv1_imagenet/main_finetune.py": {
        "torch": {
            "is_available_149": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_168": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.load",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ParameterList_206": {
                "variable": {
                    "value": "no_wd_params",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "no_wd_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.ParameterList(no_wd_params)",
                            "Call"
                        ]
                    ]
                }
            },
            "ParameterList_207": {
                "variable": {
                    "value": "wd_params",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "wd_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.ParameterList(wd_params)",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_209": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': no_wd_params, 'weight_decay': 0.0}, {'params': wd_params, 'weight_decay': args.weight_decay}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LogSoftmax_83": {
                "variable": {
                    "value": "self.logsoftmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_87": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logsoftmax(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_154": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_183": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mobilenetv1(cfg=checkpoint['cfg'])",
                            "Call"
                        ],
                        [
                            "sp_mbnet(cfg=checkpoint['cfg'])",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_186": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mobilenetv1(cfg=checkpoint['cfg'])",
                            "Call"
                        ],
                        [
                            "sp_mbnet(cfg=checkpoint['cfg'])",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_196": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_371": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_156": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_219": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_save_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mbv1_imagenet/main_split.py": {
        "torch": {
            "is_available_76": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_122": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.load",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_355": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RMSprop_356": {
                "variable": {
                    "value": "optimizer_v",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.v_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_608": {
                "variable": {
                    "value": "start_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_81": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_111": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_477": {
                "variable": {
                    "value": "all_lambda",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "min_eig_vals",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_559": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "sort_560": {
                "variable": {
                    "value": "(y, i)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_687": {
                "variable": {
                    "value": "newmodel",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "newmodel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mbnet(cfg=cfg)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(newmodel).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "save_692": {
                "obj": {
                    "value": "{'cfg': cfg, 'split_index': args.split_index, 'state_dict': newmodel.state_dict(), 'load': args.load, 'grow': args.grow, 'split_groups': split_groups, 'min_eig_vals': min_eig_vals, 'args': args}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "model_save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.save, 'fast_grow_{}_split_{}.pth.tar'.format(args.grow, args.split_index))",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_all_83": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogSoftmax_96": {
                "variable": {
                    "value": "self.logsoftmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_100": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logsoftmax(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_226": {
                "variable": {
                    "value": "y_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "ce",
                    "type": "variable",
                    "possible_values": [
                        [
                            "criterion(output, target_var)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "model.y_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_645": {
                "variable": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(conv_weight, conv_weight[:, idx0.tolist(), :, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_646": {
                "variable": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(w1.clone(), w1[idx1.tolist(), :, :, :].clone())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_649": {
                "variable": {
                    "value": "eig_v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(eig_v, eig_v[:, idx0.tolist(), :, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_658": {
                "variable": {
                    "value": "m1_bn.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bn_weight.clone(), bn_weight[idx1.tolist()].clone())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_661": {
                "variable": {
                    "value": "m1_bn.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bn_bias.clone(), bn_bias[idx1.tolist()].clone())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_664": {
                "variable": {
                    "value": "m1_bn.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bn_running_mean.clone(), bn_running_mean[idx1.tolist()].clone())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_667": {
                "variable": {
                    "value": "m1_bn.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bn_running_var.clone(), bn_running_var[idx1.tolist()].clone())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_538": {
                "data": {
                    "value": "thre",
                    "type": "variable",
                    "possible_values": [
                        [
                            "global_thre",
                            "variable"
                        ],
                        [
                            "0.9",
                            "float"
                        ]
                    ]
                }
            },
            "ge_538": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(thre).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_577": {
                "data": {
                    "value": "thre",
                    "type": "variable",
                    "possible_values": [
                        [
                            "global_thre",
                            "variable"
                        ],
                        [
                            "0.9",
                            "float"
                        ]
                    ]
                }
            },
            "lt_577": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(thre).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_623": {
                "variable": {
                    "value": "m1.conv1.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(conv_weight, conv_weight[idx0.tolist(), :, :, :].clone())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_626": {
                "variable": {
                    "value": "m1.bn1.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(m0.bn1.weight.data.clone(), m0.bn1.weight.data[idx0.tolist()].clone())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_627": {
                "variable": {
                    "value": "m1.bn1.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(m0.bn1.bias.data.clone(), m0.bn1.bias.data[idx0.tolist()].clone())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_628": {
                "variable": {
                    "value": "m1.bn1.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(m0.bn1.running_mean.clone(), m0.bn1.running_mean[idx0.tolist()].clone())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_629": {
                "variable": {
                    "value": "m1.bn1.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(m0.bn1.running_var.clone(), m0.bn1.running_var[idx0.tolist()].clone())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_682": {
                "variable": {
                    "value": "m1.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(fc_weight, fc_weight[:, idx0.tolist()])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_540": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(weight_copy).lt(torch.tensor(thre).to(device)).float().to(device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(betas).float().ge(torch.tensor(thre).float()).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_578": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(weight_copy).lt(torch.tensor(thre).to(device)).float().to(device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(betas).float().ge(torch.tensor(thre).float()).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_544": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(weight_copy).lt(torch.tensor(thre).to(device)).float().to(device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(betas).float().ge(torch.tensor(thre).float()).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_582": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(weight_copy).lt(torch.tensor(thre).to(device)).float().to(device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(betas).float().ge(torch.tensor(thre).float()).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mbv1_imagenet/mobilenetv1.py": {
        "torch": {
            "Parameter_32": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1).fill_(init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cfg[0]",
                            "Subscript"
                        ],
                        [
                            "out_planes",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cfg[0]",
                            "Subscript"
                        ],
                        [
                            "out_planes",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 if isinstance(x, int) else x[1]",
                            "IfExp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cfg[0]",
                            "Subscript"
                        ],
                        [
                            "out_planes",
                            "variable"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_43": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cfg[0]",
                            "Subscript"
                        ],
                        [
                            "out_planes",
                            "variable"
                        ]
                    ]
                }
            },
            "Conv2d_44": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cfg[0]",
                            "Subscript"
                        ],
                        [
                            "out_planes",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x if isinstance(x, int) else x[0]",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_45": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x if isinstance(x, int) else x[0]",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Conv2d_60": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cfg[0]",
                            "Subscript"
                        ],
                        [
                            "out_planes",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x if isinstance(x, int) else x[0]",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 if isinstance(x, int) else x[1]",
                            "IfExp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_61": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x if isinstance(x, int) else x[0]",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Linear_88": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cfg[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "avg_pool2d_111": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.swish(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.swish(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.nn_act(self.bn(self.conv(x)))",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 7)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_106": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "sigmoid_35": {
                "input": {
                    "value": "self.weight * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_63": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mbv1_imagenet/sp_conv.py": {
        "torch": {
            "sigmoid_12": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.randn(16, 3, 32, 32))",
                            "Call"
                        ],
                        [
                            "F.pad(input, (self.pw, self.pw, self.ph, self.ph))",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_16": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.randn(16, 3, 32, 32))",
                            "Call"
                        ],
                        [
                            "F.pad(input, (self.pw, self.pw, self.ph, self.ph))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_48": {
                "variable": {
                    "value": "self.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(self.kh, self.kw)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(self.dh, self.dw)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(self.ph, self.pw)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_51": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_53": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.conv2d.weight.size())",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_54": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.conv2d.weight.size())",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_71": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input[0].view(1, *input.size()[1:])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(self.pw, self.pw, self.ph, self.ph)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sigmoid_80": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.randn(16, 3, 32, 32))",
                            "Call"
                        ],
                        [
                            "F.pad(input, (self.pw, self.pw, self.ph, self.ph))",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_163": {
                "variable": {
                    "value": "bn_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn(conv_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_170": {
                "variable": {
                    "value": "bn_d_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn(conv_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_9": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.randn(16, 3, 32, 32))",
                            "Call"
                        ],
                        [
                            "F.pad(input, (self.pw, self.pw, self.ph, self.ph))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_95": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bn(self.conv2d(input))",
                            "Call"
                        ],
                        [
                            "self.bn(conv_out)",
                            "Call"
                        ],
                        [
                            "F.softplus(self.bn(conv_out))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_111": {
                "variable": {
                    "value": "act_sec_ord_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bn(self.conv2d(input))",
                            "Call"
                        ],
                        [
                            "self.bn(conv_out)",
                            "Call"
                        ],
                        [
                            "F.softplus(self.bn(conv_out))",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_184": {
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_53": {
                "*size": {
                    "value": "self.conv2d.weight.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_54": {
                "*size": {
                    "value": "self.conv2d.weight.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_128": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.y.reshape(n_out, dim)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "dw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "patches.reshape(batch_size, h, w, dim).permute(3, 0, 1, 2).reshape(dim, batch_size * h * w)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_128": {
                "input": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.out_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_channels",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "permute_128": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_129": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v.reshape(n_out, dim)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "dw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "patches.reshape(batch_size, h, w, dim).permute(3, 0, 1, 2).reshape(dim, batch_size * h * w)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_129": {
                "input": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.out_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_channels",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "permute_129": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_165": {
                "outputs": {
                    "value": "bn_out.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.conv2d.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_107": {
                "input": {
                    "value": "self.bn.running_var + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_161": {
                "input": {
                    "value": "self.bn.running_var + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "mbv1_imagenet/sp_mbnet.py": {
        "torch": {
            "Conv2d_18": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cfg[0]",
                            "Subscript"
                        ],
                        [
                            "out_planes",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cfg[0]",
                            "Subscript"
                        ],
                        [
                            "out_planes",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 if isinstance(x, int) else x[1]",
                            "IfExp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cfg[0]",
                            "Subscript"
                        ],
                        [
                            "out_planes",
                            "variable"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_19": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cfg[0]",
                            "Subscript"
                        ],
                        [
                            "out_planes",
                            "variable"
                        ]
                    ]
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cfg[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ParameterList_62": {
                "variable": {
                    "value": "self.net_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "net_params",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ParameterList_63": {
                "variable": {
                    "value": "self.y_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "y_params",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ParameterList_64": {
                "variable": {
                    "value": "self.v_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "v_params",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "avg_pool2d_84": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "swish(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.sp_conv(out)",
                            "Call"
                        ],
                        [
                            "swish(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.sp_conv.sp_forward(out)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 7)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "l.sp_forward(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 7)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_93": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "swish(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.sp_conv(out)",
                            "Call"
                        ],
                        [
                            "swish(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.sp_conv.sp_forward(out)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 7)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "l.sp_forward(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 7)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_80": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "mbv1_imagenet/summary.py": {
        "torch": {
            "is_available_52": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_77": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.load",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_190": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_57": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_all_59": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mbv2_imagenet/compute_flops.py": {
        "torch": {
            "rand_112": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "input_res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "224",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "input_res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "224",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_112": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mbv2_imagenet/dataloader.py": {
        "torch": {
            "DataLoader_33": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(traindir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "train_sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "DataLoader_37": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.ImageFolder(valdir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "test_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedSampler_29": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(traindir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mbv2_imagenet/main.py": {
        "torch": {
            "ParameterList_197": {
                "variable": {
                    "value": "no_wd_params",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "no_wd_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.ParameterList(no_wd_params)",
                            "Call"
                        ]
                    ]
                }
            },
            "ParameterList_198": {
                "variable": {
                    "value": "wd_params",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "wd_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.ParameterList(wd_params)",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_200": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': no_wd_params, 'weight_decay': 0.0}, {'params': wd_params, 'weight_decay': args.weight_decay}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LogSoftmax_90": {
                "variable": {
                    "value": "self.logsoftmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_94": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logsoftmax(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_157": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_178": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mobilenetv2()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).to(device)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_181": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mobilenetv2()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).to(device)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_187": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_372": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_159": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_210": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_save_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mbv2_imagenet/main_finetune.py": {
        "torch": {
            "load_160": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.load",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ParameterList_193": {
                "variable": {
                    "value": "no_wd_params",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "no_wd_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.ParameterList(no_wd_params)",
                            "Call"
                        ]
                    ]
                }
            },
            "ParameterList_194": {
                "variable": {
                    "value": "wd_params",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "wd_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.ParameterList(wd_params)",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_196": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': no_wd_params, 'weight_decay': 0.0}, {'params': wd_params, 'weight_decay': args.weight_decay}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LogSoftmax_85": {
                "variable": {
                    "value": "self.logsoftmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_89": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logsoftmax(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_145": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_170": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mobilenetv2(cfg=checkpoint['cfg'])",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).to(device)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_173": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mobilenetv2(cfg=checkpoint['cfg'])",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).to(device)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_183": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_361": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_147": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_206": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_save_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mbv2_imagenet/main_split.py": {
        "torch": {
            "is_available_75": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_121": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.load",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_342": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RMSprop_343": {
                "variable": {
                    "value": "optimizer_v",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.v_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_510": {
                "variable": {
                    "value": "start_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_80": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_110": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_353": {
                "variable": {
                    "value": "base_split",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "split_base_save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.save, 'fast_split_{}_base.pth.tar'.format(args.split_index))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_420": {
                "variable": {
                    "value": "all_lambda",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "min_eig_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_split['min_eig_vals']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataParallel_696": {
                "variable": {
                    "value": "newmodel",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "newmodel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mbnet(cfg=cfg)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(newmodel).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "save_702": {
                "obj": {
                    "value": "{'cfg': cfg, 'split_index': args.split_index, 'grow': args.grow, 'min_eig_vals': min_eig_vals, 'min_eig_vecs': min_eig_vecs, 'state_dict': newmodel.state_dict(), 'args': args}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "model_save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.save, 'fast_grow_{}_split_{}.pth.tar'.format(args.grow, args.split_index))",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_all_82": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogSoftmax_95": {
                "variable": {
                    "value": "self.logsoftmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_99": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logsoftmax(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_214": {
                "variable": {
                    "value": "y_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "ce",
                    "type": "variable",
                    "possible_values": [
                        [
                            "criterion(output, target_var)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "model.y_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_364": {
                "obj": {
                    "value": "{'cfg': model.cfg, 'split_index': args.split_index, 'min_eig_vals': min_eig_vals, 'min_eig_vecs': min_eig_vecs, 'state_dict': model.state_dict(), 'load': args.load, 'args': args}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "split_base_save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.save, 'fast_split_{}_base.pth.tar'.format(args.split_index))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_468": {
                "data": {
                    "value": "thre",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.9",
                            "float"
                        ]
                    ]
                }
            },
            "ge_468": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(thre).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_527": {
                "variable": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(conv_weight, conv_weight[:, idx0.tolist(), :, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_528": {
                "variable": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(w1.clone(), w1[idx1.tolist(), :, :, :].clone())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_531": {
                "variable": {
                    "value": "eig_v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(eig_v, eig_v[:, idx0.tolist(), :, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_539": {
                "variable": {
                    "value": "m1.sp_conv.bn.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bn_weight.clone(), bn_weight[idx1.tolist()].clone())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_542": {
                "variable": {
                    "value": "m1.sp_conv.bn.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bn_bias.clone(), bn_bias[idx1.tolist()].clone())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_545": {
                "variable": {
                    "value": "m1.sp_conv.bn.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bn_running_mean.clone(), bn_running_mean[idx1.tolist()].clone())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_548": {
                "variable": {
                    "value": "m1.sp_conv.bn.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bn_running_var.clone(), bn_running_var[idx1.tolist()].clone())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_599": {
                "variable": {
                    "value": "m1.dw_conv.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dw_conv_weight.clone(), dw_conv_weight[idx1.tolist()].clone())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_603": {
                "variable": {
                    "value": "m1.dw_bn.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bn_weight.clone(), bn_weight[idx1.tolist()].clone())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_606": {
                "variable": {
                    "value": "m1.dw_bn.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bn_bias.clone(), bn_bias[idx1.tolist()].clone())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_609": {
                "variable": {
                    "value": "m1.dw_bn.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bn_running_mean.clone(), bn_running_mean[idx1.tolist()].clone())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_612": {
                "variable": {
                    "value": "m1.dw_bn.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bn_running_var.clone(), bn_running_var[idx1.tolist()].clone())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_631": {
                "variable": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(conv_weight, conv_weight[:, idx0.tolist(), :, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_632": {
                "variable": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(w1.clone(), w1[idx1.tolist(), :, :, :].clone())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_635": {
                "variable": {
                    "value": "eig_v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(eig_v, eig_v[:, idx0.tolist(), :, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_642": {
                "variable": {
                    "value": "m1.b_pw_conv.bn.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bn_weight.clone(), bn_weight[idx1.tolist()].clone())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_645": {
                "variable": {
                    "value": "m1.b_pw_conv.bn.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bn_bias.clone(), bn_bias[idx1.tolist()].clone())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_648": {
                "variable": {
                    "value": "m1.b_pw_conv.bn.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bn_running_mean.clone(), bn_running_mean[idx1.tolist()].clone())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_651": {
                "variable": {
                    "value": "m1.b_pw_conv.bn.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bn_running_var.clone(), bn_running_var[idx1.tolist()].clone())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_570": {
                "variable": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(conv_weight, conv_weight[:, idx0.tolist(), :, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_571": {
                "variable": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(w1.clone(), w1[idx1.tolist(), :, :, :].clone())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_574": {
                "variable": {
                    "value": "eig_v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(eig_v, eig_v[:, idx0.tolist(), :, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_581": {
                "variable": {
                    "value": "m1.t_pw_conv.bn.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bn_weight.clone(), bn_weight[idx1.tolist()].clone())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_584": {
                "variable": {
                    "value": "m1.t_pw_conv.bn.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bn_bias.clone(), bn_bias[idx1.tolist()].clone())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_587": {
                "variable": {
                    "value": "m1.t_pw_conv.bn.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bn_running_mean.clone(), bn_running_mean[idx1.tolist()].clone())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_590": {
                "variable": {
                    "value": "m1.t_pw_conv.bn.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bn_running_var.clone(), bn_running_var[idx1.tolist()].clone())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_657": {
                "variable": {
                    "value": "conv_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(conv_weight, conv_weight[:, idx_prev.tolist(), :, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_658": {
                "variable": {
                    "value": "m1.residual.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(conv_weight.clone(), conv_weight[idx1.tolist()].clone())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_686": {
                "variable": {
                    "value": "m1.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(fc_weight, fc_weight[:, idx0.tolist()])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_470": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(betas).float().ge(torch.tensor(thre).float()).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_478": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(betas).float().ge(torch.tensor(thre).float()).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mbv2_imagenet/mobilenetv2.py": {
        "torch": {
            "Sequential_47": {
                "*args": {
                    "value": "nn.Conv2d(inp, oup, 3, stride, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "*args": {
                    "value": "nn.Conv2d(inp, oup, 1, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_174": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AvgPool2d_182": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "input_size // 32",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_183": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "output_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(c)",
                            "Call"
                        ],
                        [
                            "_make_divisible(c * width_mult, 8)",
                            "Call"
                        ],
                        [
                            "last_channel",
                            "variable"
                        ],
                        [
                            "_make_divisible(last_channel * width_mult, 8) if width_mult > 1.0 else last_channel",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_48": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_49": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_57": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "variable": {
                    "value": "self.residual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_74": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(hidden_dim, hidden_dim, 3, stride, 1, groups=hidden_dim, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inp, hidden_dim, 1, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_22": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.FloatTensor(2, 3, 224, 224))",
                            "Call"
                        ],
                        [
                            "x * F.sigmoid(x)",
                            "BinOp"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_76": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(round(inp * expand_ratio))",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(round(inp * expand_ratio))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(round(inp * expand_ratio))",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_77": {
                "num_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(round(inp * expand_ratio))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_80": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(round(inp * expand_ratio))",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_81": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_86": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(round(inp * expand_ratio))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_87": {
                "num_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(round(inp * expand_ratio))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_90": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(round(inp * expand_ratio))",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(round(inp * expand_ratio))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(round(inp * expand_ratio))",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_91": {
                "num_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(round(inp * expand_ratio))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_94": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(round(inp * expand_ratio))",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_95": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "mbv2_imagenet/sp_conv.py": {
        "torch": {
            "Conv2d_40": {
                "variable": {
                    "value": "self.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(self.kh, self.kw)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(self.dh, self.dw)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(self.ph, self.pw)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_43": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_45": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.conv2d.weight.size())",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_46": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.conv2d.weight.size())",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_63": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input[0].view(1, *input.size()[1:])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(self.pw, self.pw, self.ph, self.ph)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sigmoid_74": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(input, (self.pw, self.pw, self.ph, self.ph))",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_78": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(input, (self.pw, self.pw, self.ph, self.ph))",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_84": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * beta",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softplus_170": {
                "variable": {
                    "value": "bn_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn(conv_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_177": {
                "variable": {
                    "value": "bn_d_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn(conv_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_114": {
                "variable": {
                    "value": "act_sec_ord_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bn(self.conv2d(input))",
                            "Call"
                        ],
                        [
                            "self.bn(conv_out)",
                            "Call"
                        ],
                        [
                            "F.softplus(self.bn(conv_out))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_45": {
                "*size": {
                    "value": "self.conv2d.weight.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_46": {
                "*size": {
                    "value": "self.conv2d.weight.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_71": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(input, (self.pw, self.pw, self.ph, self.ph))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_98": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bn(self.conv2d(input))",
                            "Call"
                        ],
                        [
                            "self.bn(conv_out)",
                            "Call"
                        ],
                        [
                            "F.softplus(self.bn(conv_out))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_131": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.y.reshape(n_out, dim)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "dw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "patches.reshape(batch_size, h, w, dim).permute(3, 0, 1, 2).reshape(dim, batch_size * h * w)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_131": {
                "input": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.out_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_channels",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "permute_131": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_132": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v.reshape(n_out, dim)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "dw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "patches.reshape(batch_size, h, w, dim).permute(3, 0, 1, 2).reshape(dim, batch_size * h * w)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_132": {
                "input": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.out_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_channels",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "permute_132": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_172": {
                "outputs": {
                    "value": "bn_out.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.conv2d.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_110": {
                "input": {
                    "value": "self.bn.running_var + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_168": {
                "input": {
                    "value": "self.bn.running_var + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_141": {
                "input": {
                    "value": "bn_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bn(self.conv2d(input))",
                            "Call"
                        ],
                        [
                            "self.bn(conv_out)",
                            "Call"
                        ],
                        [
                            "F.softplus(self.bn(conv_out))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mbv2_imagenet/sp_mbnetv2.py": {
        "torch": {
            "Conv2d_65": {
                "variable": {
                    "value": "self.dw_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dw_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dw_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "dw_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "variable"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "variable": {
                    "value": "self.dw_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dw_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "variable"
                        ]
                    ]
                }
            },
            "Sequential_142": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AvgPool2d_143": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_145": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "last_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cfg[-1][0]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "int"
                        ]
                    ]
                }
            },
            "ParameterList_157": {
                "variable": {
                    "value": "self.net_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "net_params",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ParameterList_158": {
                "variable": {
                    "value": "self.y_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "y_params",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ParameterList_159": {
                "variable": {
                    "value": "self.v_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "v_params",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "variable": {
                    "value": "self.residual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_25": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.FloatTensor(2, 3, 224, 224))",
                            "Call"
                        ],
                        [
                            "x * F.sigmoid(x)",
                            "BinOp"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "l.sp_forward(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mbv2_imagenet/summary.py": {
        "torch": {
            "is_available_53": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_79": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.load",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_191": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_58": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_all_60": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}