{
    "super-resolution/2X/dataset.py": {
        "torch": {
            "from_numpy_20": {
                "variable": {
                    "value": "hazy_image",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(hazy_image).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_21": {
                "input": {
                    "value": "hazy_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample['hazy']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(np.array(hazy_image).astype(np.float32))",
                            "Call"
                        ],
                        [
                            "torch.transpose(torch.transpose(hazy_image, 2, 0), 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_22": {
                "variable": {
                    "value": "clean_image",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(clean_image).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_23": {
                "input": {
                    "value": "clean_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample['clean']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(np.array(clean_image).astype(np.float32))",
                            "Call"
                        ],
                        [
                            "torch.transpose(torch.transpose(clean_image, 2, 0), 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "super-resolution/2X/misc.py": {
        "torch": {}
    },
    "super-resolution/2X/models.py": {
        "torch": {
            "max_74": {
                "variable": {
                    "value": "(s, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor_flatten",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.view(tensor.size(0), tensor.size(1), -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_69": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "channel_att_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "channel_att_raw",
                            "variable"
                        ],
                        [
                            "channel_att_sum + channel_att_raw",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unsqueeze_69": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_91": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.spatial(x_compress)",
                            "Call"
                        ],
                        [
                            "self.ChannelGate(x)",
                            "Call"
                        ],
                        [
                            "self.SpatialGate(x_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_112": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(tensor_flatten, dim=2, keepdim=True)",
                            "Call"
                        ],
                        [
                            "s",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_113": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "PReLU_114": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_144": {
                "variable": {
                    "value": "self.d_conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_145": {
                "variable": {
                    "value": "self.d_bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_146": {
                "variable": {
                    "value": "self.d_relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_150": {
                "variable": {
                    "value": "self.d_conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "35",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3 * scale * scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_151": {
                "variable": {
                    "value": "self.d_bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "3 * scale * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "PReLU_152": {
                "variable": {
                    "value": "self.d_relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "3 * scale * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "PixelShuffle_154": {
                "variable": {
                    "value": "self.pixel_shuffle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "upscale_factor": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(channel_att_sum).unsqueeze(2).unsqueeze(3).expand_as(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x_out)",
                            "Call"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_159": {
                "variable": {
                    "value": "input_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input[:, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_160": {
                "variable": {
                    "value": "input_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input[:, 1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_161": {
                "variable": {
                    "value": "input_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input[:, 2, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_169": {
                "variable": {
                    "value": "input_l2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(l1_1, l1_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_170": {
                "variable": {
                    "value": "input_l2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_l2, l1_3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_183": {
                "variable": {
                    "value": "input_l3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(l2_1, l2_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_184": {
                "variable": {
                    "value": "input_l3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_l3, l2_3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_192": {
                "variable": {
                    "value": "temp_d1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(input[:, 0, :, :], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "l3_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer3_1(input_l3)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_193": {
                "variable": {
                    "value": "temp_d2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(input[:, 1, :, :], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "l3_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer3_2(input_l3)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_194": {
                "variable": {
                    "value": "temp_d3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(input[:, 2, :, :], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "l3_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer3_3(input_l3)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_196": {
                "variable": {
                    "value": "input_d1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(temp_d1, temp_d2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_197": {
                "variable": {
                    "value": "input_d1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_d1, temp_d3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_80": {
                "tensors": {
                    "value": "(torch.max(x, 1)[0].unsqueeze(1), torch.mean(x, 1).unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_42": {
                "in_features": {
                    "value": "gate_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gate_channels",
                            "Method Argument"
                        ],
                        [
                            "gate_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "gate_channels // reduction_ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_44": {
                "in_features": {
                    "value": "gate_channels // reduction_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "gate_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gate_channels",
                            "Method Argument"
                        ],
                        [
                            "gate_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "avg_pool2d_51": {
                "variable": {
                    "value": "avg_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_174": {
                "tensors": {
                    "value": "(l2_1, l1_1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_177": {
                "tensors": {
                    "value": "(l2_2, l1_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_180": {
                "tensors": {
                    "value": "(l2_3, l1_3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_201": {
                "tensors": {
                    "value": "(output_d1, input_d1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_54": {
                "variable": {
                    "value": "max_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unsqueeze_80": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_80": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "lp_pool2d_57": {
                "variable": {
                    "value": "lp_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "norm_type": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_80": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "super-resolution/2X/options.py": {
        "torch": {
            "device_49": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "super-resolution/2X/ssim.py": {
        "torch": {
            "exp_18": {
                "variable": {
                    "value": "gauss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-x.pow(2.0) / (2 * sigma ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_98": {
                "variable": {
                    "value": "kernel_2d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel_x.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "kernel_y.unsqueeze(-1).t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_195": {
                "variable": {
                    "value": "input_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "padding_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_compute_padding([height, width])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "border_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'reflect'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_202": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(input, padding_shape, mode=border_type)",
                            "Call"
                        ],
                        [
                            "input_pad.view(-1, tmp_kernel.size(0), input_pad.size(-2), input_pad.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "tmp_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel.unsqueeze(1).to(input)",
                            "Call"
                        ],
                        [
                            "normalize_kernel2d(tmp_kernel)",
                            "Call"
                        ],
                        [
                            "tmp_kernel.expand(-1, c, -1, -1)",
                            "Call"
                        ],
                        [
                            "tmp_kernel.reshape(-1, 1, height, width)",
                            "Call"
                        ]
                    ]
                },
                "groups": {
                    "value": "tmp_kernel.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_329": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1.0 - ssim_map) / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_336": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp((1.0 - ssim_map) / 2, min=0, max=1)",
                            "Call"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "torch.sum(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_14": {
                "start": {
                    "value": "window_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "window_size",
                            "Method Argument"
                        ],
                        [
                            "window_size",
                            "Method Argument"
                        ],
                        [
                            "window_size",
                            "Method Argument"
                        ],
                        [
                            "window_size",
                            "Method Argument"
                        ],
                        [
                            "window_size",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "sigma.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "sigma.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "sum_338": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp((1.0 - ssim_map) / 2, min=0, max=1)",
                            "Call"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "torch.sum(loss)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "super-resolution/2X/test.py": {
        "torch": {
            "load_28": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(CHECKPOINTS_DIR, 'netG_859.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_59": {
                "variable": {
                    "value": "dataset_torchx",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((1, ch, h, w)).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "super-resolution/2X/train.py": {
        "torch": {
            "MSELoss_41": {
                "variable": {
                    "value": "mse_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_46": {
                "variable": {
                    "value": "optim_g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.learning_rate_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, opt.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.wd_g",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_58": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.Dataset_Load(data_path=opt.data_path, scale=scale, transform=dataset.ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_73": {
                "variable": {
                    "value": "checkpoint_g",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(opt.checkpoints_dir, latest_checkpoint_G)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_106": {
                "variable": {
                    "value": "batch_mse_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "opt.lambda_mse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "mse_loss(pred_batch, clean_batch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_109": {
                "variable": {
                    "value": "batch_ssim_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "opt.lambda_ssim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "ssim_loss(pred_batch, clean_batch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_114": {
                "variable": {
                    "value": "batch_vgg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "opt.lambda_vgg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "mse_loss(pred_vgg_feats.relu2_2, clean_vgg_feats.relu2_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_141": {
                "obj": {
                    "value": "{'epoch': epoch, 'model_state_dict': netG.state_dict(), 'optimizer_state_dict': optim_g.state_dict(), 'mse_loss': opt.total_mse_loss, 'vgg_loss': opt.total_vgg_loss, 'ssim_loss': opt.total_ssim_loss, 'opt': opt, 'total_loss': opt.total_G_loss}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(opt.checkpoints_dir, 'netG_' + str(epoch) + '.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "super-resolution/2X/vgg.py": {
        "torch": {
            "Sequential_11": {
                "variable": {
                    "value": "self.slice1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_12": {
                "variable": {
                    "value": "self.slice2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_13": {
                "variable": {
                    "value": "self.slice3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_14": {
                "variable": {
                    "value": "self.slice4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "super-resolution/3X/dataset.py": {
        "torch": {
            "from_numpy_20": {
                "variable": {
                    "value": "hazy_image",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(hazy_image).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_21": {
                "input": {
                    "value": "hazy_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample['hazy']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(np.array(hazy_image).astype(np.float32))",
                            "Call"
                        ],
                        [
                            "torch.transpose(torch.transpose(hazy_image, 2, 0), 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_22": {
                "variable": {
                    "value": "clean_image",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(clean_image).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_23": {
                "input": {
                    "value": "clean_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample['clean']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(np.array(clean_image).astype(np.float32))",
                            "Call"
                        ],
                        [
                            "torch.transpose(torch.transpose(clean_image, 2, 0), 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "super-resolution/3X/misc.py": {
        "torch": {}
    },
    "super-resolution/3X/models.py": {
        "torch": {
            "max_74": {
                "variable": {
                    "value": "(s, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor_flatten",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.view(tensor.size(0), tensor.size(1), -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_69": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "channel_att_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "channel_att_raw",
                            "variable"
                        ],
                        [
                            "channel_att_sum + channel_att_raw",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unsqueeze_69": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_91": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.spatial(x_compress)",
                            "Call"
                        ],
                        [
                            "self.ChannelGate(x)",
                            "Call"
                        ],
                        [
                            "self.SpatialGate(x_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_112": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(tensor_flatten, dim=2, keepdim=True)",
                            "Call"
                        ],
                        [
                            "s",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_113": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "PReLU_114": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_144": {
                "variable": {
                    "value": "self.d_conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_145": {
                "variable": {
                    "value": "self.d_bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_146": {
                "variable": {
                    "value": "self.d_relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_150": {
                "variable": {
                    "value": "self.d_conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "35",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3 * scale * scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_151": {
                "variable": {
                    "value": "self.d_bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "3 * scale * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "PReLU_152": {
                "variable": {
                    "value": "self.d_relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "3 * scale * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "PixelShuffle_154": {
                "variable": {
                    "value": "self.pixel_shuffle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "upscale_factor": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(channel_att_sum).unsqueeze(2).unsqueeze(3).expand_as(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x_out)",
                            "Call"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_155": {
                "variable": {
                    "value": "self.adjust_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unsqueeze_161": {
                "variable": {
                    "value": "input_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input[:, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_162": {
                "variable": {
                    "value": "input_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input[:, 1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_163": {
                "variable": {
                    "value": "input_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input[:, 2, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_171": {
                "variable": {
                    "value": "input_l2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(l1_1, l1_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_172": {
                "variable": {
                    "value": "input_l2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_l2, l1_3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_185": {
                "variable": {
                    "value": "input_l3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(l2_1, l2_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_186": {
                "variable": {
                    "value": "input_l3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_l3, l2_3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_194": {
                "variable": {
                    "value": "temp_d1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(input[:, 0, :, :], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "l3_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer3_1(input_l3)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_195": {
                "variable": {
                    "value": "temp_d2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(input[:, 1, :, :], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "l3_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer3_2(input_l3)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_196": {
                "variable": {
                    "value": "temp_d3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(input[:, 2, :, :], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "l3_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer3_3(input_l3)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_198": {
                "variable": {
                    "value": "input_d1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(temp_d1, temp_d2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_199": {
                "variable": {
                    "value": "input_d1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_d1, temp_d3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_80": {
                "tensors": {
                    "value": "(torch.max(x, 1)[0].unsqueeze(1), torch.mean(x, 1).unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_42": {
                "in_features": {
                    "value": "gate_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gate_channels",
                            "Method Argument"
                        ],
                        [
                            "gate_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "gate_channels // reduction_ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_44": {
                "in_features": {
                    "value": "gate_channels // reduction_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "gate_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gate_channels",
                            "Method Argument"
                        ],
                        [
                            "gate_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "avg_pool2d_51": {
                "variable": {
                    "value": "avg_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_176": {
                "tensors": {
                    "value": "(l2_1, l1_1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_179": {
                "tensors": {
                    "value": "(l2_2, l1_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_182": {
                "tensors": {
                    "value": "(l2_3, l1_3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_203": {
                "tensors": {
                    "value": "(output_d1, input_d1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_54": {
                "variable": {
                    "value": "max_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unsqueeze_80": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_80": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "lp_pool2d_57": {
                "variable": {
                    "value": "lp_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "norm_type": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_80": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "super-resolution/3X/options.py": {
        "torch": {
            "device_48": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "super-resolution/3X/ssim.py": {
        "torch": {
            "exp_18": {
                "variable": {
                    "value": "gauss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-x.pow(2.0) / (2 * sigma ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_98": {
                "variable": {
                    "value": "kernel_2d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel_x.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "kernel_y.unsqueeze(-1).t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_195": {
                "variable": {
                    "value": "input_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "padding_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_compute_padding([height, width])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "border_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'reflect'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_202": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(input, padding_shape, mode=border_type)",
                            "Call"
                        ],
                        [
                            "input_pad.view(-1, tmp_kernel.size(0), input_pad.size(-2), input_pad.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "tmp_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel.unsqueeze(1).to(input)",
                            "Call"
                        ],
                        [
                            "normalize_kernel2d(tmp_kernel)",
                            "Call"
                        ],
                        [
                            "tmp_kernel.expand(-1, c, -1, -1)",
                            "Call"
                        ],
                        [
                            "tmp_kernel.reshape(-1, 1, height, width)",
                            "Call"
                        ]
                    ]
                },
                "groups": {
                    "value": "tmp_kernel.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_329": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1.0 - ssim_map) / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_335": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp((1.0 - ssim_map) / 2, min=0, max=1)",
                            "Call"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "torch.sum(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_14": {
                "start": {
                    "value": "window_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "window_size",
                            "Method Argument"
                        ],
                        [
                            "window_size",
                            "Method Argument"
                        ],
                        [
                            "window_size",
                            "Method Argument"
                        ],
                        [
                            "window_size",
                            "Method Argument"
                        ],
                        [
                            "window_size",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "sigma.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "sigma.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "sum_337": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp((1.0 - ssim_map) / 2, min=0, max=1)",
                            "Call"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "torch.sum(loss)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "super-resolution/3X/test.py": {
        "torch": {
            "load_29": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(CHECKPOINTS_DIR, 'netG_1603.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_60": {
                "variable": {
                    "value": "dataset_torchx",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((1, ch, h, w)).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "super-resolution/3X/train.py": {
        "torch": {
            "MSELoss_41": {
                "variable": {
                    "value": "mse_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_46": {
                "variable": {
                    "value": "optim_g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.learning_rate_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, opt.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.wd_g",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_58": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.Dataset_Load(data_path=opt.data_path, scale=scale, transform=dataset.ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_73": {
                "variable": {
                    "value": "checkpoint_g",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(opt.checkpoints_dir, latest_checkpoint_G)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_106": {
                "variable": {
                    "value": "batch_mse_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "opt.lambda_mse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "mse_loss(pred_batch, clean_batch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_109": {
                "variable": {
                    "value": "batch_ssim_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "opt.lambda_ssim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "ssim_loss(pred_batch, clean_batch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_114": {
                "variable": {
                    "value": "batch_vgg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "opt.lambda_vgg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "mse_loss(pred_vgg_feats.relu2_2, clean_vgg_feats.relu2_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_141": {
                "obj": {
                    "value": "{'epoch': epoch, 'model_state_dict': netG.state_dict(), 'optimizer_state_dict': optim_g.state_dict(), 'mse_loss': opt.total_mse_loss, 'vgg_loss': opt.total_vgg_loss, 'ssim_loss': opt.total_ssim_loss, 'opt': opt, 'total_loss': opt.total_G_loss}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(opt.checkpoints_dir, 'netG_' + str(epoch) + '.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "super-resolution/3X/vgg.py": {
        "torch": {
            "Sequential_11": {
                "variable": {
                    "value": "self.slice1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_12": {
                "variable": {
                    "value": "self.slice2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_13": {
                "variable": {
                    "value": "self.slice3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_14": {
                "variable": {
                    "value": "self.slice4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "super-resolution/4X/dataset.py": {
        "torch": {
            "from_numpy_20": {
                "variable": {
                    "value": "hazy_image",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(hazy_image).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_21": {
                "input": {
                    "value": "hazy_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample['hazy']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(np.array(hazy_image).astype(np.float32))",
                            "Call"
                        ],
                        [
                            "torch.transpose(torch.transpose(hazy_image, 2, 0), 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_22": {
                "variable": {
                    "value": "clean_image",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(clean_image).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_23": {
                "input": {
                    "value": "clean_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample['clean']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(np.array(clean_image).astype(np.float32))",
                            "Call"
                        ],
                        [
                            "torch.transpose(torch.transpose(clean_image, 2, 0), 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "super-resolution/4X/misc.py": {
        "torch": {}
    },
    "super-resolution/4X/models.py": {
        "torch": {
            "max_74": {
                "variable": {
                    "value": "(s, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor_flatten",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.view(tensor.size(0), tensor.size(1), -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_69": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "channel_att_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "channel_att_raw",
                            "variable"
                        ],
                        [
                            "channel_att_sum + channel_att_raw",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unsqueeze_69": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_91": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.spatial(x_compress)",
                            "Call"
                        ],
                        [
                            "self.ChannelGate(x)",
                            "Call"
                        ],
                        [
                            "self.SpatialGate(x_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_112": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(tensor_flatten, dim=2, keepdim=True)",
                            "Call"
                        ],
                        [
                            "s",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_113": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "PReLU_114": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_144": {
                "variable": {
                    "value": "self.d_conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_145": {
                "variable": {
                    "value": "self.d_bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_146": {
                "variable": {
                    "value": "self.d_relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_150": {
                "variable": {
                    "value": "self.d_conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "35",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3 * scale * scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_151": {
                "variable": {
                    "value": "self.d_bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "3 * scale * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "PReLU_152": {
                "variable": {
                    "value": "self.d_relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "3 * scale * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "PixelShuffle_154": {
                "variable": {
                    "value": "self.pixel_shuffle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "upscale_factor": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(channel_att_sum).unsqueeze(2).unsqueeze(3).expand_as(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x_out)",
                            "Call"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_159": {
                "variable": {
                    "value": "input_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input[:, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_160": {
                "variable": {
                    "value": "input_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input[:, 1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_161": {
                "variable": {
                    "value": "input_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input[:, 2, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_169": {
                "variable": {
                    "value": "input_l2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(l1_1, l1_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_170": {
                "variable": {
                    "value": "input_l2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_l2, l1_3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_183": {
                "variable": {
                    "value": "input_l3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(l2_1, l2_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_184": {
                "variable": {
                    "value": "input_l3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_l3, l2_3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_192": {
                "variable": {
                    "value": "temp_d1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(input[:, 0, :, :], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "l3_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer3_1(input_l3)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_193": {
                "variable": {
                    "value": "temp_d2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(input[:, 1, :, :], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "l3_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer3_2(input_l3)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_194": {
                "variable": {
                    "value": "temp_d3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(input[:, 2, :, :], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "l3_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer3_3(input_l3)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_196": {
                "variable": {
                    "value": "input_d1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(temp_d1, temp_d2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_197": {
                "variable": {
                    "value": "input_d1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_d1, temp_d3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_80": {
                "tensors": {
                    "value": "(torch.max(x, 1)[0].unsqueeze(1), torch.mean(x, 1).unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_42": {
                "in_features": {
                    "value": "gate_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gate_channels",
                            "Method Argument"
                        ],
                        [
                            "gate_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "gate_channels // reduction_ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_44": {
                "in_features": {
                    "value": "gate_channels // reduction_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "gate_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gate_channels",
                            "Method Argument"
                        ],
                        [
                            "gate_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "avg_pool2d_51": {
                "variable": {
                    "value": "avg_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_174": {
                "tensors": {
                    "value": "(l2_1, l1_1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_177": {
                "tensors": {
                    "value": "(l2_2, l1_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_180": {
                "tensors": {
                    "value": "(l2_3, l1_3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_201": {
                "tensors": {
                    "value": "(output_d1, input_d1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_54": {
                "variable": {
                    "value": "max_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unsqueeze_80": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_80": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "lp_pool2d_57": {
                "variable": {
                    "value": "lp_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "norm_type": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_80": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "super-resolution/4X/options.py": {
        "torch": {
            "device_48": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "super-resolution/4X/ssim.py": {
        "torch": {
            "exp_18": {
                "variable": {
                    "value": "gauss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-x.pow(2.0) / (2 * sigma ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_98": {
                "variable": {
                    "value": "kernel_2d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel_x.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "kernel_y.unsqueeze(-1).t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_195": {
                "variable": {
                    "value": "input_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "padding_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_compute_padding([height, width])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "border_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'reflect'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_202": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(input, padding_shape, mode=border_type)",
                            "Call"
                        ],
                        [
                            "input_pad.view(-1, tmp_kernel.size(0), input_pad.size(-2), input_pad.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "tmp_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel.unsqueeze(1).to(input)",
                            "Call"
                        ],
                        [
                            "normalize_kernel2d(tmp_kernel)",
                            "Call"
                        ],
                        [
                            "tmp_kernel.expand(-1, c, -1, -1)",
                            "Call"
                        ],
                        [
                            "tmp_kernel.reshape(-1, 1, height, width)",
                            "Call"
                        ]
                    ]
                },
                "groups": {
                    "value": "tmp_kernel.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_329": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1.0 - ssim_map) / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_335": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp((1.0 - ssim_map) / 2, min=0, max=1)",
                            "Call"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "torch.sum(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_14": {
                "start": {
                    "value": "window_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "window_size",
                            "Method Argument"
                        ],
                        [
                            "window_size",
                            "Method Argument"
                        ],
                        [
                            "window_size",
                            "Method Argument"
                        ],
                        [
                            "window_size",
                            "Method Argument"
                        ],
                        [
                            "window_size",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "sigma.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "sigma.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "sum_337": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp((1.0 - ssim_map) / 2, min=0, max=1)",
                            "Call"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "torch.sum(loss)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "super-resolution/4X/test.py": {
        "torch": {
            "load_29": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(CHECKPOINTS_DIR, 'netG_2320.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_60": {
                "variable": {
                    "value": "dataset_torchx",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((1, ch, h, w)).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "super-resolution/4X/train.py": {
        "torch": {
            "MSELoss_41": {
                "variable": {
                    "value": "mse_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_46": {
                "variable": {
                    "value": "optim_g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.learning_rate_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, opt.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.wd_g",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_58": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.Dataset_Load(data_path=opt.data_path, scale=scale, transform=dataset.ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_73": {
                "variable": {
                    "value": "checkpoint_g",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(opt.checkpoints_dir, latest_checkpoint_G)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_106": {
                "variable": {
                    "value": "batch_mse_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "opt.lambda_mse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "mse_loss(pred_batch, clean_batch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_109": {
                "variable": {
                    "value": "batch_ssim_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "opt.lambda_ssim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "ssim_loss(pred_batch, clean_batch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_114": {
                "variable": {
                    "value": "batch_vgg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "opt.lambda_vgg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "mse_loss(pred_vgg_feats.relu2_2, clean_vgg_feats.relu2_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_141": {
                "obj": {
                    "value": "{'epoch': epoch, 'model_state_dict': netG.state_dict(), 'optimizer_state_dict': optim_g.state_dict(), 'mse_loss': opt.total_mse_loss, 'vgg_loss': opt.total_vgg_loss, 'ssim_loss': opt.total_ssim_loss, 'opt': opt, 'total_loss': opt.total_G_loss}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(opt.checkpoints_dir, 'netG_' + str(epoch) + '.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "super-resolution/4X/vgg.py": {
        "torch": {
            "Sequential_11": {
                "variable": {
                    "value": "self.slice1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_12": {
                "variable": {
                    "value": "self.slice2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_13": {
                "variable": {
                    "value": "self.slice3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_14": {
                "variable": {
                    "value": "self.slice4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "uie_euvp/dataset.py": {
        "torch": {
            "from_numpy_20": {
                "variable": {
                    "value": "hazy_image",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(hazy_image).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_21": {
                "input": {
                    "value": "hazy_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample['hazy']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(np.array(hazy_image).astype(np.float32))",
                            "Call"
                        ],
                        [
                            "torch.transpose(torch.transpose(hazy_image, 2, 0), 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_22": {
                "variable": {
                    "value": "clean_image",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(clean_image).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_23": {
                "input": {
                    "value": "clean_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample['clean']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(np.array(clean_image).astype(np.float32))",
                            "Call"
                        ],
                        [
                            "torch.transpose(torch.transpose(clean_image, 2, 0), 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "uie_euvp/misc.py": {
        "torch": {}
    },
    "uie_euvp/models.py": {
        "torch": {
            "max_71": {
                "variable": {
                    "value": "(s, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor_flatten",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.view(tensor.size(0), tensor.size(1), -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_66": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "channel_att_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "channel_att_raw",
                            "variable"
                        ],
                        [
                            "channel_att_sum + channel_att_raw",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unsqueeze_66": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_88": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.spatial(x_compress)",
                            "Call"
                        ],
                        [
                            "self.ChannelGate(x)",
                            "Call"
                        ],
                        [
                            "self.SpatialGate(x_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_109": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(tensor_flatten, dim=2, keepdim=True)",
                            "Call"
                        ],
                        [
                            "s",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_110": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "PReLU_111": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_141": {
                "variable": {
                    "value": "self.d_conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_142": {
                "variable": {
                    "value": "self.d_bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_143": {
                "variable": {
                    "value": "self.d_relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_147": {
                "variable": {
                    "value": "self.d_conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "35",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_148": {
                "variable": {
                    "value": "self.d_bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_149": {
                "variable": {
                    "value": "self.d_relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_153": {
                "variable": {
                    "value": "input_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input[:, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_154": {
                "variable": {
                    "value": "input_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input[:, 1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_155": {
                "variable": {
                    "value": "input_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input[:, 2, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_163": {
                "variable": {
                    "value": "input_l2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(l1_1, l1_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_164": {
                "variable": {
                    "value": "input_l2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_l2, l1_3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_177": {
                "variable": {
                    "value": "input_l3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(l2_1, l2_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_178": {
                "variable": {
                    "value": "input_l3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_l3, l2_3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_186": {
                "variable": {
                    "value": "temp_d1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(input[:, 0, :, :], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "l3_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer3_1(input_l3)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_187": {
                "variable": {
                    "value": "temp_d2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(input[:, 1, :, :], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "l3_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer3_2(input_l3)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_188": {
                "variable": {
                    "value": "temp_d3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(input[:, 2, :, :], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "l3_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer3_3(input_l3)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_190": {
                "variable": {
                    "value": "input_d1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(temp_d1, temp_d2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_191": {
                "variable": {
                    "value": "input_d1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_d1, temp_d3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_77": {
                "tensors": {
                    "value": "(torch.max(x, 1)[0].unsqueeze(1), torch.mean(x, 1).unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_39": {
                "in_features": {
                    "value": "gate_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gate_channels",
                            "Method Argument"
                        ],
                        [
                            "gate_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "gate_channels // reduction_ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_41": {
                "in_features": {
                    "value": "gate_channels // reduction_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "gate_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gate_channels",
                            "Method Argument"
                        ],
                        [
                            "gate_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "avg_pool2d_48": {
                "variable": {
                    "value": "avg_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_168": {
                "tensors": {
                    "value": "(l2_1, l1_1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_171": {
                "tensors": {
                    "value": "(l2_2, l1_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_174": {
                "tensors": {
                    "value": "(l2_3, l1_3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_195": {
                "tensors": {
                    "value": "(output_d1, input_d1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_51": {
                "variable": {
                    "value": "max_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unsqueeze_77": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_77": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "lp_pool2d_54": {
                "variable": {
                    "value": "lp_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "norm_type": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_77": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "uie_euvp/options.py": {
        "torch": {
            "device_45": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "uie_euvp/test.py": {
        "torch": {
            "load_26": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(CHECKPOINTS_DIR, 'netG_17.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_53": {
                "variable": {
                    "value": "dataset_torchx",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((1, ch, h, w)).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "uie_euvp/train.py": {
        "torch": {
            "MSELoss_30": {
                "variable": {
                    "value": "mse_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_33": {
                "variable": {
                    "value": "optim_g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.learning_rate_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, opt.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.wd_g",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_44": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.Dataset_Load(data_path=opt.data_path, transform=dataset.ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_59": {
                "variable": {
                    "value": "checkpoint_g",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(opt.checkpoints_dir, latest_checkpoint_G)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_86": {
                "variable": {
                    "value": "batch_mse_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "opt.lambda_mse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "mse_loss(pred_batch, clean_batch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_91": {
                "variable": {
                    "value": "batch_vgg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "opt.lambda_vgg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "mse_loss(pred_vgg_feats.relu2_2, clean_vgg_feats.relu2_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_109": {
                "obj": {
                    "value": "{'epoch': epoch, 'model_state_dict': netG.state_dict(), 'optimizer_state_dict': optim_g.state_dict(), 'mse_loss': opt.total_mse_loss, 'vgg_loss': opt.total_vgg_loss, 'opt': opt, 'total_loss': opt.total_G_loss}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(opt.checkpoints_dir, 'netG_' + str(epoch) + '.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "uie_euvp/vgg.py": {
        "torch": {
            "Sequential_11": {
                "variable": {
                    "value": "self.slice1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_12": {
                "variable": {
                    "value": "self.slice2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_13": {
                "variable": {
                    "value": "self.slice3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_14": {
                "variable": {
                    "value": "self.slice4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "uie_uieb/dataset.py": {
        "torch": {
            "from_numpy_20": {
                "variable": {
                    "value": "hazy_image",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(hazy_image).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_21": {
                "input": {
                    "value": "hazy_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample['hazy']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(np.array(hazy_image).astype(np.float32))",
                            "Call"
                        ],
                        [
                            "torch.transpose(torch.transpose(hazy_image, 2, 0), 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_23": {
                "variable": {
                    "value": "clean_image",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(clean_image).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_24": {
                "input": {
                    "value": "clean_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample['clean']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(np.array(clean_image).astype(np.float32))",
                            "Call"
                        ],
                        [
                            "torch.transpose(torch.transpose(clean_image, 2, 0), 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "uie_uieb/misc.py": {
        "torch": {}
    },
    "uie_uieb/models.py": {
        "torch": {
            "max_71": {
                "variable": {
                    "value": "(s, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor_flatten",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.view(tensor.size(0), tensor.size(1), -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_66": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "channel_att_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "channel_att_raw",
                            "variable"
                        ],
                        [
                            "channel_att_sum + channel_att_raw",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unsqueeze_66": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_88": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.spatial(x_compress)",
                            "Call"
                        ],
                        [
                            "self.ChannelGate(x)",
                            "Call"
                        ],
                        [
                            "self.SpatialGate(x_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_109": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(tensor_flatten, dim=2, keepdim=True)",
                            "Call"
                        ],
                        [
                            "s",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_110": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "PReLU_111": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_141": {
                "variable": {
                    "value": "self.d_conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_142": {
                "variable": {
                    "value": "self.d_bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_143": {
                "variable": {
                    "value": "self.d_relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_147": {
                "variable": {
                    "value": "self.d_conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "35",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_148": {
                "variable": {
                    "value": "self.d_bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_149": {
                "variable": {
                    "value": "self.d_relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_154": {
                "variable": {
                    "value": "input_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input[:, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_155": {
                "variable": {
                    "value": "input_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input[:, 1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_156": {
                "variable": {
                    "value": "input_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input[:, 2, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_164": {
                "variable": {
                    "value": "input_l2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(l1_1, l1_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_165": {
                "variable": {
                    "value": "input_l2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_l2, l1_3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_178": {
                "variable": {
                    "value": "input_l3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(l2_1, l2_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_179": {
                "variable": {
                    "value": "input_l3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_l3, l2_3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_187": {
                "variable": {
                    "value": "temp_d1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(input[:, 0, :, :], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "l3_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer3_1(input_l3)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_188": {
                "variable": {
                    "value": "temp_d2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(input[:, 1, :, :], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "l3_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer3_2(input_l3)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_189": {
                "variable": {
                    "value": "temp_d3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(input[:, 2, :, :], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "l3_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer3_3(input_l3)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_191": {
                "variable": {
                    "value": "input_d1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(temp_d1, temp_d2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_192": {
                "variable": {
                    "value": "input_d1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_d1, temp_d3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_77": {
                "tensors": {
                    "value": "(torch.max(x, 1)[0].unsqueeze(1), torch.mean(x, 1).unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_39": {
                "in_features": {
                    "value": "gate_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gate_channels",
                            "Method Argument"
                        ],
                        [
                            "gate_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "gate_channels // reduction_ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_41": {
                "in_features": {
                    "value": "gate_channels // reduction_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "gate_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gate_channels",
                            "Method Argument"
                        ],
                        [
                            "gate_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "avg_pool2d_48": {
                "variable": {
                    "value": "avg_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_169": {
                "tensors": {
                    "value": "(l2_1, l1_1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_172": {
                "tensors": {
                    "value": "(l2_2, l1_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_175": {
                "tensors": {
                    "value": "(l2_3, l1_3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_197": {
                "tensors": {
                    "value": "(output_d1, input_d1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_51": {
                "variable": {
                    "value": "max_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unsqueeze_77": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_77": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "lp_pool2d_54": {
                "variable": {
                    "value": "lp_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "norm_type": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_77": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "uie_uieb/options.py": {
        "torch": {
            "device_46": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "uie_uieb/test.py": {
        "torch": {
            "load_25": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(CHECKPOINTS_DIR, 'netG_295.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_52": {
                "variable": {
                    "value": "dataset_torchx",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((1, ch, h, w)).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "uie_uieb/train.py": {
        "torch": {
            "MSELoss_33": {
                "variable": {
                    "value": "mse_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_36": {
                "variable": {
                    "value": "optim_g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.learning_rate_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, opt.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.wd_g",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_47": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.Dataset_Load(hazy_path=opt.hazydir, clean_path=opt.cleandir, transform=dataset.ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_62": {
                "variable": {
                    "value": "checkpoint_g",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(opt.checkpoints_dir, latest_checkpoint_G)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_90": {
                "variable": {
                    "value": "batch_mse_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "opt.lambda_mse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "mse_loss(pred_batch, clean_batch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_96": {
                "variable": {
                    "value": "batch_vgg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "opt.lambda_vgg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "mse_loss(pred_vgg_feats.relu2_2, clean_vgg_feats.relu2_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_116": {
                "obj": {
                    "value": "{'epoch': epoch, 'model_state_dict': netG.state_dict(), 'optimizer_state_dict': optim_g.state_dict(), 'mse_loss': opt.total_mse_loss, 'vgg_loss': opt.total_vgg_loss, 'opt': opt, 'total_loss': opt.total_G_loss}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(opt.checkpoints_dir, 'netG_' + str(epoch) + '.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "uie_uieb/vgg.py": {
        "torch": {
            "Sequential_11": {
                "variable": {
                    "value": "self.slice1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_12": {
                "variable": {
                    "value": "self.slice2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_13": {
                "variable": {
                    "value": "self.slice3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_14": {
                "variable": {
                    "value": "self.slice4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "uw_video_processing/models.py": {
        "torch": {
            "max_71": {
                "variable": {
                    "value": "(s, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor_flatten",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.view(tensor.size(0), tensor.size(1), -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_66": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "channel_att_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "channel_att_raw",
                            "variable"
                        ],
                        [
                            "channel_att_sum + channel_att_raw",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unsqueeze_66": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_88": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.spatial(x_compress)",
                            "Call"
                        ],
                        [
                            "self.ChannelGate(x)",
                            "Call"
                        ],
                        [
                            "self.SpatialGate(x_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_109": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(tensor_flatten, dim=2, keepdim=True)",
                            "Call"
                        ],
                        [
                            "s",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_110": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "PReLU_111": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_141": {
                "variable": {
                    "value": "self.d_conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_142": {
                "variable": {
                    "value": "self.d_bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_143": {
                "variable": {
                    "value": "self.d_relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_147": {
                "variable": {
                    "value": "self.d_conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "35",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_148": {
                "variable": {
                    "value": "self.d_bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_149": {
                "variable": {
                    "value": "self.d_relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_154": {
                "variable": {
                    "value": "input_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input[:, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_155": {
                "variable": {
                    "value": "input_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input[:, 1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_156": {
                "variable": {
                    "value": "input_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input[:, 2, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_164": {
                "variable": {
                    "value": "input_l2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(l1_1, l1_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_165": {
                "variable": {
                    "value": "input_l2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_l2, l1_3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_178": {
                "variable": {
                    "value": "input_l3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(l2_1, l2_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_179": {
                "variable": {
                    "value": "input_l3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_l3, l2_3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_187": {
                "variable": {
                    "value": "temp_d1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(input[:, 0, :, :], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "l3_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer3_1(input_l3)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_188": {
                "variable": {
                    "value": "temp_d2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(input[:, 1, :, :], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "l3_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer3_2(input_l3)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_189": {
                "variable": {
                    "value": "temp_d3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(input[:, 2, :, :], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "l3_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer3_3(input_l3)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_191": {
                "variable": {
                    "value": "input_d1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(temp_d1, temp_d2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_192": {
                "variable": {
                    "value": "input_d1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_d1, temp_d3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_77": {
                "tensors": {
                    "value": "(torch.max(x, 1)[0].unsqueeze(1), torch.mean(x, 1).unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_39": {
                "in_features": {
                    "value": "gate_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gate_channels",
                            "Method Argument"
                        ],
                        [
                            "gate_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "gate_channels // reduction_ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_41": {
                "in_features": {
                    "value": "gate_channels // reduction_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "gate_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gate_channels",
                            "Method Argument"
                        ],
                        [
                            "gate_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "avg_pool2d_48": {
                "variable": {
                    "value": "avg_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_169": {
                "tensors": {
                    "value": "(l2_1, l1_1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_172": {
                "tensors": {
                    "value": "(l2_2, l1_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_175": {
                "tensors": {
                    "value": "(l2_3, l1_3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_197": {
                "tensors": {
                    "value": "(output_d1, input_d1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_51": {
                "variable": {
                    "value": "max_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unsqueeze_77": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_77": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "lp_pool2d_54": {
                "variable": {
                    "value": "lp_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "norm_type": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_77": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "uw_video_processing/test.py": {
        "torch": {
            "load_25": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(CHECKPOINTS_DIR, 'netG_295.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_99": {
                "variable": {
                    "value": "dataset_torchx",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((1, ch, h, w)).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}